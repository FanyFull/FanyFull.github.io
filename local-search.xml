<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>remote: Support for password authentication was removed on August 13, 2021.</title>
    <link href="/2023/12/03/remote-Support-for-password-authentication-was-removed-on-August-13-2021/"/>
    <url>/2023/12/03/remote-Support-for-password-authentication-was-removed-on-August-13-2021/</url>
    
    <content type="html"><![CDATA[<p>今天在 manjaro 中往我的 github 上推送的时候，要让我输入 username 和password，用户名当然是那个用户名，但是，密码如果直接填我们的密码，那么，就会报标题里面的错误了。那么，现在应该怎么办呢？</p><p>有很多种办法，首先我们需要去 github 上生成一个token，之后，最简单的方法就是把我们需要输入密码的地方换成 token就可以了。</p><p><img src="https://i.imgur.com/1ipD8bz.png" /></p><p>这个 token 要妥善保管，不然下次可能又要重新生成。</p><p>参考：<ahref="https://stackoverflow.com/questions/68775869/message-support-for-password-authentication-was-removed"class="uri">https://stackoverflow.com/questions/68775869/message-support-for-password-authentication-was-removed</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何使用 maven 在命令行去执行 Java 程序，以及，如何执行测试</title>
    <link href="/2023/12/03/how-to-use-maven-to-execute-Java-programs-in-commandline-and-tests/"/>
    <url>/2023/12/03/how-to-use-maven-to-execute-Java-programs-in-commandline-and-tests/</url>
    
    <content type="html"><![CDATA[<h2 id="运行-java-的一个-main-方法">运行 Java 的一个 Main 方法</h2><p>我们知道，大多数情况下，我们想要运行一个 Java 程序，其实就是运行一个Main 方法。即使是一个 Spring 应用，最终也是会执行主应用的 Main方法的。</p><p>所以，这里所说的使用 maven 在命令行去执行 Java程序，也就是去执行对应的类的 Main 方法。</p><p>首先，我们添加一个插件，</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.codehaus.mojo/exec-maven-plugin --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                                                                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.codehaus.mojo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>exec-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                                                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>                                                                   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>并且，配置好这个插件，</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!-- to run java file with exec-maven-plugin --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.codehaus.mojo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>exec-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">></span></span>com.fanyfull.App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arguments</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>argument</span><span class="token punctuation">></span></span>First<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>argument</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>argument</span><span class="token punctuation">></span></span>Second<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>argument</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>arguments</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginManagement</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>之后，就可以执行我们想要执行的类的 Main 方法了，这里我们只要去修改<code>&lt;mainClass&gt;</code>标签中的类即可。如果想要传递命令行参数，那么，可以去自定义这个<code>&lt;arguments&gt;</code> 里面的参数。</p><p>我们这里的 App 类如下，</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fanyfull</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token comment">/** * Hello world! * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>然后，我们只需要在命令行执行以下命令即可，</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn clean compile exec:java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">❯ mvn clean compile exec:java[INFO] Scanning for projects...[INFO] [INFO] ------------------------&lt; com.fanyfull:demo01 &gt;-------------------------[INFO] Building demo01 1.0-SNAPSHOT[INFO] --------------------------------[ jar ]---------------------------------[INFO] [INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ demo01 ---[INFO] Deleting &#x2F;home&#x2F;fanyfull&#x2F;edisk&#x2F;javaCodes&#x2F;demo01&#x2F;target[INFO] [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ demo01 ---[INFO] Using &#39;UTF-8&#39; encoding to copy filtered resources.[INFO] skip non existing resourceDirectory &#x2F;home&#x2F;fanyfull&#x2F;edisk&#x2F;javaCodes&#x2F;demo01&#x2F;src&#x2F;main&#x2F;resources[INFO] [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ demo01 ---[INFO] Changes detected - recompiling the module![INFO] Compiling 1 source file to &#x2F;home&#x2F;fanyfull&#x2F;edisk&#x2F;javaCodes&#x2F;demo01&#x2F;target&#x2F;classes[INFO] [INFO] --- exec-maven-plugin:3.1.1:java (default-cli) @ demo01 ---Hello World![First, Second][INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time:  1.982 s[INFO] Finished at: 2023-12-03T11:34:13+08:00[INFO] ------------------------------------------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>有时候，我们执行的时候不用 clean 参数也是可以的，</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn compile exec:java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="运行测试">运行测试</h2><p>方法和上面的类似，先添加依赖，配置插件，</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-surefire-plugin --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                                                                                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-surefire-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                                             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                                                                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>                                                                              <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- to run tests with maven-surefire-plugin --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-surefire-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>                                        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>然后，我们看一下测试的类，</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fanyfull</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>assertj<span class="token punctuation">.</span>core<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Assertions</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token comment">/** * Unit test for simple App. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppTest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * Rigorous Test :-)     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">justAnExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fany test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token string">"App"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"pp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exampleTest02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fany test02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token string">"App"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"pp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>之后，在命令行执行，</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>结果如下，</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">❯ mvn <span class="token builtin class-name">test</span>                               <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Scanning <span class="token keyword">for</span> projects<span class="token punctuation">..</span>.<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> ------------------------<span class="token operator">&lt;</span> com.fanyfull:demo01 <span class="token operator">></span>-------------------------<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Building demo01 <span class="token number">1.0</span>-SNAPSHOT<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> --------------------------------<span class="token punctuation">[</span> jar <span class="token punctuation">]</span>---------------------------------<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> --- maven-resources-plugin:2.6:resources <span class="token punctuation">(</span>default-resources<span class="token punctuation">)</span> @ demo01 ---<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Using <span class="token string">'UTF-8'</span> encoding to copy filtered resources.<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> skip non existing resourceDirectory /home/fanyfull/edisk/javaCodes/demo01/src/main/resources<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> --- maven-compiler-plugin:3.1:compile <span class="token punctuation">(</span>default-compile<span class="token punctuation">)</span> @ demo01 ---<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Nothing to compile - all classes are up to <span class="token function">date</span><span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> --- maven-resources-plugin:2.6:testResources <span class="token punctuation">(</span>default-testResources<span class="token punctuation">)</span> @ demo01 ---<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Using <span class="token string">'UTF-8'</span> encoding to copy filtered resources.<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> skip non existing resourceDirectory /home/fanyfull/edisk/javaCodes/demo01/src/test/resources<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> --- maven-compiler-plugin:3.1:testCompile <span class="token punctuation">(</span>default-testCompile<span class="token punctuation">)</span> @ demo01 ---<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Nothing to compile - all classes are up to <span class="token function">date</span><span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> --- maven-surefire-plugin:3.2.2:test <span class="token punctuation">(</span>default-test<span class="token punctuation">)</span> @ demo01 ---<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Using auto detected provider org.apache.maven.surefire.junitplatform.JUnitPlatformProvider<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> -------------------------------------------------------<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span>  T E S T S<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> -------------------------------------------------------<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Running com.fanyfull.AppTestfany <span class="token builtin class-name">test</span>fany test02<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Tests run: <span class="token number">2</span>, Failures: <span class="token number">0</span>, Errors: <span class="token number">0</span>, Skipped: <span class="token number">0</span>, Time elapsed: <span class="token number">0.085</span> s -- <span class="token keyword">in</span> com.fanyfull.AppTest<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Results:<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Tests run: <span class="token number">2</span>, Failures: <span class="token number">0</span>, Errors: <span class="token number">0</span>, Skipped: <span class="token number">0</span><span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> ------------------------------------------------------------------------<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> BUILD SUCCESS<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> ------------------------------------------------------------------------<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Total time:  <span class="token number">1.904</span> s<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Finished at: <span class="token number">2023</span>-12-03T11:46:34+08:00<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> ------------------------------------------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>如果想执行某一个单独的方法，可以这样，</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn <span class="token builtin class-name">test</span> <span class="token parameter variable">-Dtest</span><span class="token operator">=</span><span class="token string">"AppTest#exampleTest02"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>如果想执行某一个单独的测试类，也是一样，</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn <span class="token builtin class-name">test</span> <span class="token parameter variable">-Dtest</span><span class="token operator">=</span><span class="token string">"AppTest"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>如果我们想在 pom.xml中去指定想要测试的类的话，那么，可以类似于下面这样，</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- to run tests with maven-surefire-plugin --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                                               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-surefire-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                                             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>com.fanyfull.AppTest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>com.fanyfull.AppTest02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>                                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>                                            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>如果我们想单独制定一个方法的话，那么，可以类似于下面这样，</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                                               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-surefire-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test</span><span class="token punctuation">></span></span>com.fanyfull.AppTest02#exampleTest02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>                                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>                                            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>如果有了这个声明的话，那么，我们就可以直接执行 <code>mvn test</code>而不用指定选项了。</p><p>完整的 demo 项目，可以在我的 <ahref="https://github.com/FanyFull/maven-quickstart-demo">GitHub</a>找到。</p><p>之后我们甚至可以直接把这个 demo clone下来作为模板，这样就不用用老旧的 maven 自带的模板了。</p><hr /><p>参考：</p><p>1、<a href="https://www.baeldung.com/maven-java-main-method"class="uri">https://www.baeldung.com/maven-java-main-method</a><br />2、<a href="https://www.baeldung.com/maven-run-single-test"class="uri">https://www.baeldung.com/maven-run-single-test</a><br />3、<ahref="https://maven.apache.org/surefire/maven-surefire-plugin/examples/single-test.html"class="uri">https://maven.apache.org/surefire/maven-surefire-plugin/examples/single-test.html</a><br />4、<ahref="https://maven.apache.org/surefire/maven-surefire-plugin/index.html"class="uri">https://maven.apache.org/surefire/maven-surefire-plugin/index.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>manjaro linux 的 neovim 配置 java 编写环境</title>
    <link href="/2023/12/03/manjaro-linux-%E7%9A%84-neovim-%E9%85%8D%E7%BD%AE-java-%E7%BC%96%E5%86%99%E7%8E%AF%E5%A2%83/"/>
    <url>/2023/12/03/manjaro-linux-%E7%9A%84-neovim-%E9%85%8D%E7%BD%AE-java-%E7%BC%96%E5%86%99%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>Windows 中的 neovim 配置 java 环境是没救了。前有 astronvim，现在的lazyvim 也不支持。astronvim 只是不支持 dap，而且它还吱了一声。这个lazyvim 都不说是什么情况，试过之后，果然不支持。只好转向我的 manjarolinux 了。好在，不管是什么插件，对于 linux 的支持都是在第一序列的。</p><p>当然啦，也还是有一些小问题，只是，相比之下容易解决，也不多。这里的话，摸索一下就ok 了。</p><p>开始之前，先说一下我为什么要一定要执着于去在 neovim 中去配置 java编写环境，去使用现成的 idea 不好吗？即使 jetbrains 对 linux的支持不够，其上手的友好性还是比 neovim要高一大截的。只是，让人想要去不由自主地去写程式，只有 neovim可以做到，结合neovide，简直就像小时候的遥控飞机对于孩童的我们的吸引。或许，又像一个天然去雕饰的女孩，让你无时无刻不想去哪怕是轻轻地摸一摸她的脸庞。</p><h2 id="正文">正文</h2><p>言归正传。</p><p>首先，我这个方案是基于 lazyvim 的。这里，我们第一步是打开 lazyvim 对java 的支持，这个就在 lazyvim 的 extra里面，根据官方的文档，这个是比较容易设置的。</p><p><img src="https://i.imgur.com/a4dJbnq.png" /></p><p>然后，就是使用 mason 安装 jdtls 这个 lsp，</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">:MasonInstall jdtls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>然后，我们还需要在系统中安装一下 jdtls，防止 mason安装的无法使用，</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay <span class="token parameter variable">-S</span> jdtls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>然后，安装一下 maven，</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay <span class="token parameter variable">-S</span> maven<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>之后，一切正常的话，那么，就可以正常在一个 maven 项目中使用 java 的lsp 了。</p><p>这里我的 maven 项目是使用 VSCode 中的 maven 插件生成的一个 quickstart模板。有时间，后面再自己制作一个 maven 的模板。(现在 maven 自带的quickstart 模板实在是太老了)</p><p>下面是实际使用过程中的一些截图，</p><p><img src="https://i.imgur.com/sLVtmg5.png" /></p><p>下面这个是代码补全的效果，</p><p><img src="https://i.imgur.com/QwLsluu.png" /></p><p>下面这个是写的一个 test，</p><p><img src="https://i.imgur.com/yiguFk2.png" /></p><h2 id="遇到的问题">遇到的问题</h2><p>pom.xml 文件报下面这个警告的问题，</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Project configuration is not up-to-date with pom.xml, requires an update.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这个问题，如果是在 VSCode 或者 eclipse(对，就是 eclipse) 中，有对应的gui 让我们去操作，update project 一下就好了。在 neovim中呢，需要执行一下 JdtWipeDataAndRestart 命令，最好是先把 .project文件给删除之后再执行。</p><p>似乎，也是可以执行 <code>JdtUpdateConfig</code>这个命令的，但是我现在还没有试过。</p><h2 id="其他">其他</h2><p>还有一个问题，其实也是相当重要的一个问题。在 neovim 中我们没法像eclipse 和 idea 中那样去点击按钮执行一份 java代码或者一个项目了，怎么办呢？还有，Test 的代码怎么运行呢？</p><p>这个其实就可以使用 maven 来解决了，主要是利用下面两个插件，</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.codehaus.mojo/exec-maven-plugin --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.codehaus.mojo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>exec-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-surefire-plugin --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-surefire-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>更多内容，欲知如何，请看我后面的博客。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Neovim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一次关于博客物理搬迁的记录</title>
    <link href="/2023/11/11/%E4%B8%80%E6%AC%A1%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E7%89%A9%E7%90%86%E6%90%AC%E8%BF%81%E7%9A%84%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/11/11/%E4%B8%80%E6%AC%A1%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E7%89%A9%E7%90%86%E6%90%AC%E8%BF%81%E7%9A%84%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>这一个博客似乎是因为我重装了 manjaro的系统之后，因为种种原因，没有去重新配置写博客的这样一个设置，好吧，其实是我的🏓打得太多了，时间不够用，也是因为潜意识里面的怕麻烦的心理在作祟。实际呢，其实是一点都不麻烦的，甚至不要半个小时就可以解决。</p><p>然后，最近因为已经工作的缘故，所以，时时刻刻、所有的时间都可以说是扑在了计算机上面，因此，麻烦什么的，就不可以再说了。妈的，有人在另一种场景和我说，你怎么能嫌麻烦呢？我才不嫌麻烦好吧。这又涉及到了一些夏虫的论题。不谈也罢。</p><p>好吧，说正事儿。这里我是直接把以前的备份的 <code>_config.yml</code>和 <code>_config_fluid.yml</code> 以及 source 目录，以及 scaffolds目录直接搬运过来了，所以，其实到这里就差不多了。安装好相关的包裹之后，就可以<code>hexo g</code> 然后 <code>hexo s</code> 看看效果了。</p><p>好吧，以后在这台 pc 上遇到的问题就在本机上记录就好了。</p><p>剩下的事情，就是<strong>写写写</strong>了。就像村上的舞舞舞一样。</p><h2 id="遇到的问题">遇到的问题</h2><p>一开始，需要安装 hexo-cli，</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>然后，我因为是使用 hexo-cli 主题，并且，是使用 mathjax渲染数学公式，所以，需要安装如下包，</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay <span class="token parameter variable">-S</span> pandoc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> uninstall hexo-renderer-marked <span class="token parameter variable">--save</span><span class="token function">npm</span> <span class="token function">install</span> hexo-renderer-pandoc <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>这个，可以见文档<ahref="https://hexo.fluid-dev.com/docs/guide/#latex-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F">这里</a>的描述。</p><p><code>hexo d</code> 不生效的问题，</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ERROR Deployer not found: <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这个其实是没有安装 <code>hexo-deployer-git</code>的缘故，上一次配置博客的时间太古老了，我都忘记了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>记录</tag>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode 配置 C++ 单文件运行的方式</title>
    <link href="/2022/09/22/VSCode-%E9%85%8D%E7%BD%AE-C-%E5%8D%95%E6%96%87%E4%BB%B6%E8%BF%90%E8%A1%8C%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
    <url>/2022/09/22/VSCode-%E9%85%8D%E7%BD%AE-C-%E5%8D%95%E6%96%87%E4%BB%B6%E8%BF%90%E8%A1%8C%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>好久没有在这个博客据点写博客了。</p><p>深夜，不方便打扰室友休息，所以就来到阳台，把移门关上，独自坐在椅子上泡脚，敲电脑。顺便感受一下窗外的凉意。</p><p>因为是在六楼，之前是到那个楼梯顶部的小区域，不过，那个地方的灯光不太方便。宿舍阳台的话，从卫生间可以开出一条小缝，正好光亮可以照过来，这也算是当时为了性价比而舍弃了这台ThinkPad 的键盘背光的一个痛点吧。</p><p>好吧，说回这篇记录的重点啦。</p><p>说起来，感觉最适合这个单文件运行 C++ 的编辑器，还得是 VSCode 呀。</p><p>配合 multi-command 插件，直接修改 <code>Ctrl+F5</code>的默认行为，一气呵成。</p><p>编写 <code>run.ps1</code> 脚本，powershell脚本，没什么好说的，查一查文档，把一堆命令捆在一起运行罢了，</p><figure><div class="code-wrapper"><pre class="line-numbers language-ps1" data-language="ps1"><code class="language-ps1">$filename&#x3D;$args[0]$start&#x3D;$filename.LastIndexOf(&quot;\&quot;) + 1$strLength&#x3D;$filename.Length - $start - 4$outputName&#x3D;$filename.Substring($start, $strLength)$exeName&#x3D;$outputName+&quot;.exe&quot;# echo $filename# echo $exeNameg++ $filename -o .\bin\$outputName# echo &#39;compile completed and start execute:&#39;&amp; .\bin\$exeName<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这个要在项目目录下建立一个 <code>bin</code> 目录来存放可执行文件。C++的源文件随便放，命令行的运行目录就在默认的项目的根目录就可以了。</p><p>然后，定制 <code>Ctrl + F5</code> 快捷键，</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"ctrl+f5"</span><span class="token punctuation">,</span>    <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"extension.multiCommand.execute"</span><span class="token punctuation">,</span>    <span class="token property">"when"</span><span class="token operator">:</span> <span class="token string">"editorTextFocus &amp;&amp; editorLangId == 'cpp'"</span><span class="token punctuation">,</span>    <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"sequence"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"workbench.action.files.saveAll"</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"workbench.action.terminal.sendSequence"</span><span class="token punctuation">,</span>                <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"clear \u000D"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token string">"workbench.action.terminal.focus"</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"workbench.action.terminal.sendSequence"</span><span class="token punctuation">,</span>                <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"./run.ps1 $&#123;file&#125; \u000D"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token string">"workbench.action.focusActiveEditorGroup"</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>最后，别忘了安装 multi-command 这个插件就可以了。</p><p>测试走一个，</p><p><img src="https://i.imgur.com/e0KIFop.png" /></p><p>这个用起来感觉还是要方便简洁一点的，其实吧，这个单文件运行用来熟悉C++ 语法和写 leetcode 的题目是很方便的哦。</p>]]></content>
    
    
    
    <tags>
      
      <tag>VSCode</tag>
      
      <tag>Cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode 20</title>
    <link href="/2022/07/31/leetcode-20/"/>
    <url>/2022/07/31/leetcode-20/</url>
    
    <content type="html"><![CDATA[<p>This problem is old sport. Hehe.</p><p>The draft paper:</p><p><img src="https://i.imgur.com/qHOmGa2.jpg" /></p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Stack</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'('</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token char">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'['</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token char">']'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'&#123;'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token char">'&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> solu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"([&#123;&#125;])[]()"</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> res <span class="token operator">=</span> solu<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode 225</title>
    <link href="/2022/07/31/leetcode-225/"/>
    <url>/2022/07/31/leetcode-225/</url>
    
    <content type="html"><![CDATA[<p>The reverse of leetcode 232. This time is using two stacks tosimulate the operations of Queue.</p><p>We can also use just one stack to get the work done, however, Ithink, simple is the best, isn't it?</p><p>The draft paper:</p><p><img src="https://i.imgur.com/7JeW9Uf.jpg" /></p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Stack</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyQueue</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stackIn<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stackOut<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stackIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stackOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stackIn<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stackOut<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">dumpStackInToOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> stackOut<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stackOut<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">dumpStackInToOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> stackOut<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> stackIn<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> stackOut<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dumpStackInToOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stackIn<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            stackOut<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stackIn<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode 232</title>
    <link href="/2022/07/31/leetcode-232/"/>
    <url>/2022/07/31/leetcode-232/</url>
    
    <content type="html"><![CDATA[<p>Use Stack to simulate Queue. Have a bit of interest.</p><p>In detail, I use two queues to simulate the operations of Stack.</p><p>More details are following draft paper:</p><p><img src="https://i.imgur.com/d55Jvea.jpg" /></p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Stack</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyQueue</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stackIn<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stackOut<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stackIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stackOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stackIn<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stackOut<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">dumpStackInToOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> stackOut<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stackOut<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">dumpStackInToOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> stackOut<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> stackIn<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> stackOut<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dumpStackInToOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stackIn<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            stackOut<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stackIn<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nvim 设置光标样式</title>
    <link href="/2022/07/31/nvim-%E8%AE%BE%E7%BD%AE%E5%85%89%E6%A0%87%E6%A0%B7%E5%BC%8F/"/>
    <url>/2022/07/31/nvim-%E8%AE%BE%E7%BD%AE%E5%85%89%E6%A0%87%E6%A0%B7%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>我想要的样式是在 insert 模式下是 line，然后在其他模式下是block，因此，设置语句如下</p><p><img src="https://i.imgur.com/b6qr7OU.png" /></p><p>:setguicursor=n-v-c-sm:block,i-ci-ve:ver25,r-cr-o:hor20,a:blinkon100</p>]]></content>
    
    
    
    <tags>
      
      <tag>neovim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Neovim 光标不闪烁，连带会导致 Windows Terminal 的光标也停止闪烁</title>
    <link href="/2022/07/31/Neovim-%E5%85%89%E6%A0%87%E4%B8%8D%E9%97%AA%E7%83%81%EF%BC%8C%E8%BF%9E%E5%B8%A6%E4%BC%9A%E5%AF%BC%E8%87%B4-Windows-Terminal-%E7%9A%84%E5%85%89%E6%A0%87%E4%B9%9F%E5%81%9C%E6%AD%A2%E9%97%AA%E7%83%81/"/>
    <url>/2022/07/31/Neovim-%E5%85%89%E6%A0%87%E4%B8%8D%E9%97%AA%E7%83%81%EF%BC%8C%E8%BF%9E%E5%B8%A6%E4%BC%9A%E5%AF%BC%E8%87%B4-Windows-Terminal-%E7%9A%84%E5%85%89%E6%A0%87%E4%B9%9F%E5%81%9C%E6%AD%A2%E9%97%AA%E7%83%81/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述">问题描述</h2><p>在使用 neovim 时，发现进入 neovim编辑之后，光标会处于静止状态，然后退出 nvim，windows terminal的原来闪烁的光标也会变成静止光标。</p><h2 id="解决方法">解决方法</h2><p>修改 nvim 的设置，使之变成闪烁的光标。</p><p>具体为，在配置文件中添加如下内容：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">:set <span class="token assign-left variable">guicursor</span><span class="token operator">=</span>a:blinkon100<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/b6qr7OU.png" /></p><hr /><p>参考：</p><p><ahref="https://www.reddit.com/r/neovim/comments/a4ypwm/can_i_make_the_cursor_blinking_in_neovim/"class="uri">https://www.reddit.com/r/neovim/comments/a4ypwm/can_i_make_the_cursor_blinking_in_neovim/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>neovim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KMP 算法的理解与应用</title>
    <link href="/2022/07/31/KMP-%E7%AE%97%E6%B3%95%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    <url>/2022/07/31/KMP-%E7%AE%97%E6%B3%95%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>The reason why I encount KMP algotithm once again is leetcode 28,implement strStr.</p><p>The best practice for this problem is KMP. Needless to speak morewords, KMP is very important, and when I was reading <em>Introduction toAlogorithm</em>, I saw it, then I went to read Algorithm 4th edition, Icannot understand it either, for some reasons, some are theirs's, someare mine.</p><p>Now, when I try to solve this leetcode problem, I think this time Igrasp it well.</p><p>The following are my processing draft papers:</p><p><img src="https://i.imgur.com/9RElQUp.jpg" /></p><p><img src="https://i.imgur.com/A1t5qBj.jpg" /></p><p><img src="https://i.imgur.com/LXf3oXA.jpg" /></p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">strStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> haystack<span class="token punctuation">,</span> <span class="token class-name">String</span> needle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token function">generateNext</span><span class="token punctuation">(</span>needle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> haystack<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">!=</span> haystack<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                j <span class="token operator">=</span> next<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">==</span> haystack<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> needle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">generateNext</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                j <span class="token operator">=</span> next<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> solu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> haystack <span class="token operator">=</span> <span class="token string">"aabaabaafa"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> needle <span class="token operator">=</span> <span class="token string">"aabaaf"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> solu<span class="token punctuation">.</span><span class="token function">strStr</span><span class="token punctuation">(</span>haystack<span class="token punctuation">,</span> needle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
    <tags>
      
      <tag>alogrithm</tag>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode 459 的正确性证明的理解</title>
    <link href="/2022/07/30/leetcode-459-%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%80%A7%E8%AF%81%E6%98%8E%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <url>/2022/07/30/leetcode-459-%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%80%A7%E8%AF%81%E6%98%8E%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>When working on solving problems, it is not suitable to listen tomusic, but when writing blogs, there is no concern about this. Maybe Ican also eat someting while writing.</p><p><img src="https://i.imgur.com/czq1QlN.png" /></p><p>About this leetcode problem, I think for a long time to try tounderstand it. For the purpose to understand it, I even try to seek forhelp from my roommate at colledge. Does not solve it.</p><p>Then, I try to put more effort upon it. Eventually, I understand ittonight. After that, I went out for a rest. Anyway, it is a pleasantthing to go out for a rest and celebration.</p><p>My draft papers to work on are as follows:</p><p><img src="https://i.imgur.com/fDR40i8.jpg" /></p><p><img src="https://i.imgur.com/LcxIOOy.jpg" /></p><p><img src="https://i.imgur.com/dHeSEJg.jpg" /></p><p><img src="https://i.imgur.com/Vaje2AP.jpg" /></p><p>To conclude, there are two things to mention, one is the thinkingstyle of discrete mathematics, the other is Euclidean algorithm.</p><p>We must think about Euclidean algorithm first, then we may think ofthe solution of proving this algorithm.</p>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录一个 windows 修改 host 不生效的问题</title>
    <link href="/2022/07/02/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AA-windows-%E4%BF%AE%E6%94%B9-host-%E4%B8%8D%E7%94%9F%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/07/02/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AA-windows-%E4%BF%AE%E6%94%B9-host-%E4%B8%8D%E7%94%9F%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>问题是这样，我想添加一个自己的域名映射规则，然后手动修改<code>C:\Windows\System32\drivers\etc</code>目录下的文件。但是修改之后，在浏览器端测试怎么都不生效。试了网上的改编辑器，改空格等等，都不行。</p><p>最后，发现问题处在了系统代理上。嗯。没错，把系统代理关掉即可。</p><p><img src="https://i.imgur.com/6GCcaXe.png" /></p>]]></content>
    
    
    
    <tags>
      
      <tag>bugs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络实验报告完整版</title>
    <link href="/2022/06/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%E5%AE%8C%E6%95%B4%E7%89%88/"/>
    <url>/2022/06/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%E5%AE%8C%E6%95%B4%E7%89%88/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机网络实验报告">计算机网络实验报告</h1><h2 id="实验一-wireshark-抓包工具使用">实验一 wireshark抓包工具使用</h2><h3 id="一实验目的">一、实验目的</h3><ul><li>学习wireshark抓包工具的使用。</li><li>了解wireshark抓包工具的功能，明确抓包软件的功能。</li><li>通过学习，进一步理解协议及网络体系结构思想。</li></ul><h3 id="二实验原理">二、实验原理</h3><p><code>Wireshark</code>是网络包分析工具。网络包分析工具的主要作用是尝试捕获网络包，并尝试显示包的尽可能详细的情况。</p><p>主要应用：</p><ul><li>网络管理员用来解决网络问题</li><li>网络安全工程师用来检测安全隐患</li><li>开发人员用来测试协议执行情况</li><li>用来学习网络协议</li></ul><h3 id="三实验内容">三、实验内容</h3><p>下载 WIRESHARK，学习工具的使用和功能。</p><h3 id="四实验过程">四、实验过程</h3><h4 id="wireshark-的下载安装与配置">1、wireshark 的下载、安装与配置</h4><p>访问 wireshark 官网：<a href="https://www.wireshark.org/"class="uri">https://www.wireshark.org/</a></p><p><img src="https://i.imgur.com/ve6TkUX.png" /></p><p>下载并安装 Windows Installer (64-bit) 版本。</p><h4 id="初识-wireshark">2、初识 wireshark</h4><p>Wireshark的工作原理是捕获某一网卡的数据包，当配置多块网卡时，需要选择一块网卡进行抓包，此处选择WLAN，然后双击即可。</p><p><img src="https://i.imgur.com/LvgXfbw.png" /></p><p><img src="https://i.imgur.com/u2k1vbm.png" /></p><h4 id="查看网络环境">3、查看网络环境</h4><p>控制面板-网络和Internet-网络和共享中心-更改适配器设置-WLAN-状态-详细信息，得到了以下关键信息：</p><table><thead><tr class="header"><th style="text-align: center;">名称</th><th style="text-align: center;">地址</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">IPv4 地址</td><td style="text-align: center;">10.19.128.57</td></tr><tr class="even"><td style="text-align: center;">子网掩码</td><td style="text-align: center;">255.255.248.0</td></tr><tr class="odd"><td style="text-align: center;">默认网关</td><td style="text-align: center;">10.19.135.254</td></tr></tbody></table><p><img src="https://i.imgur.com/A412zBu.png" /></p><h4 id="启动抓包">4、启动抓包</h4><p>截图显示的是 wireshark 抓到的部分数据包，有TCP、UDP、ARP、MDNS、ICMPv6 等多种协议的数据包。</p><p><img src="https://i.imgur.com/u2k1vbm.png" /></p><table><thead><tr class="header"><th style="text-align: center;">名称</th><th style="text-align: center;">对应层次</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Frame</td><td style="text-align: center;">物理层</td></tr><tr class="even"><td style="text-align: center;">Ethernet Ⅱ</td><td style="text-align: center;">数据链路层</td></tr><tr class="odd"><td style="text-align: center;">Internet Protocol Version 4</td><td style="text-align: center;">网络层</td></tr><tr class="even"><td style="text-align: center;">Transmission Control Protocol</td><td style="text-align: center;">传输层</td></tr><tr class="odd"><td style="text-align: center;">Hypertext Transfer Protocol</td><td style="text-align: center;">应用层</td></tr></tbody></table><h4 id="追踪打开一个网页时tcp-的三次握手">5、追踪打开一个网页时，TCP的三次握手</h4><p>以访问百度为例，首先，打开浏览器的一个无痕窗口，并确保电脑上的代理处于关闭状态，然后过滤出DNS 我们可以发现解析百度的包，找到解析后的真实 ip，</p><p><img src="https://i.imgur.com/5AnWH28.png" /></p><p>然后设置过滤规则：</p><p>ip.src == 182.61.200.7 or ip.dst == 182.61.200.7</p><p>将过滤出来的包按时间排序，开头的三个包是TCP 的三次握手，</p><p><img src="https://i.imgur.com/kzNoE38.png" /></p><ul><li>第一次握手：客户机(10.19.128.57)主动打开一条TCP连接，从客户机(10.19.128.57)发送报文段至服务器(182.61.200.7)：SYN=1，Seq=0，不携带数据，等待服务器确认。</li><li>第二次握手：服务器(182.61.200.7)返回确认报文至客户机(10.0.0.108)：SYN=1，ACK=1，Seq=0，不携带数据。</li><li>第三次握手：从客户机(10.19.128.57)发送报文段至服务器(182.61.200.7)：ACK=1，Seq=1，不携带数据，TCP连接正式建立。</li></ul><p>下图为第二次握手的报文段的详细分析：</p><p><img src="https://i.imgur.com/B7JxqjE.png" /></p><h2 id="实验二-winpcap-编程">实验二 winpcap 编程</h2><h3 id="实验目的">实验目的</h3><ul><li>了解 winpcap 的架构</li><li>学习 winpcap 编程</li></ul><h3 id="实验原理">实验原理</h3><p>WinPcap是一个基于Win32平台的，用于捕获网络数据包并进行分析的开源库。</p><p>大多数网络应用程序通过被广泛使用的操作系统元件来访问网络，比如sockets。这是一种简单的实现方式，因为操作系统已经妥善处理了底层具体实现细节（比如协议处理，封装数据包等等），并且提供了一个与读写文件类似的，令人熟悉的接口。</p><p>然而，有些时候，这种“简单的方式”并不能满足任务的需求，因为有些应用程序需要直接访问网络中的数据包。也就是说，那些应用程序需要访问原始数据包，即没有被操作系统利用网络协议处理过的数据包。</p><p>WinPcap产生的目的，就是为Win32应用程序提供这种访问方式；WinPcap提供了以下功能：</p><ol type="1"><li>捕获原始数据包，无论它是发往某台机器的，还是在其他设备（共享媒介）上进行交换的<br /></li><li>在数据包发送给某应用程序前，根据用户指定的规则过滤数据包<br /></li><li>将原始数据包通过网络发送出去<br /></li><li>收集并统计网络流量信息</li></ol><p>以上这些功能需要借助安装在Win32内核中的网络设备驱动程序才能实现，再加上几个动态链接库DLL。</p><p>所有这些功能都能通过一个强大的编程接口来表现出来,易于开发，并能在不同的操作系统上使用。</p><p>WinPcap可以被用来制作网络分析、监控工具。一些基于WinPcap的典型应用有：</p><ol type="1"><li>网络与协议分析器 (network and protocol analyzers)<br /></li><li>网络监视器 (network monitors)<br /></li><li>网络流量记录器 (traffic loggers)<br /></li><li>网络流量发生器 (traffic generators)<br /></li><li>用户级网桥及路由 (user-level bridges and routers)<br /></li><li>网络入侵检测系统 (network intrusion detection systems (NIDS))<br /></li><li>网络扫描器 (network scanners)<br /></li><li>安全工具 (security tools)</li></ol><h3 id="实验内容">实验内容</h3><p>通过学习WINPCAP架构，编写一个网络抓包程序。</p><h3 id="实验过程">实验过程</h3><p>首先要说明一点，winpcap 官网建议使用 npcap，因为根据官网说明，winpcap已经不适用于 windows10 和windows11，有些函数可能会出现意想不到的效果。根据我的实践，发现winpcap无法获取适配器的具体名称，比如我的wifi6 适配器，使用 winpcap 就只能获取模糊的 "Microsoft" 这个名称，而使用npcap 就可以获取其完整的名称，而且 winpcap或识别不了一些适配器，而这一点在 npcap 上得到了很好的改善。</p><p><img src="https://i.imgur.com/hSbEMym.png" /></p><h4 id="npcap-的下载安装与配置">1、npcap 的下载安装与配置</h4><ul><li>访问npcap官网：https://www.winpcap.org/</li><li>选择npcap的最新版，下载Installer for Windows并安装</li><li>在VS中导入相应头文件和lib文件</li></ul><p>安装配置的详细过程见我的<ahref="https://fanyfull.github.io/2022/05/28/Visual-Studio-2022-%E9%85%8D%E7%BD%AE-winpcap-%E7%8E%AF%E5%A2%83/">这一篇博客</a>，这里不再赘述。</p><h4 id="获取设备列表">2、获取设备列表</h4><p>通常情况下，一个基于Npcap的应用程序所做的第一件事就是获得一个连接的网络适配器的列表。libpcap和Npcap都为这个目的提供了<code>cap_findalldevs_ex()</code>函数：这个函数返回一个<code>cap_if</code>结构的链接列表，每个结构都包含一个连接的适配器的全面信息。特别是，字段<code>name</code>和<code>description</code>分别包含了相应设备的名称和可读的描述。</p><p>下面的代码检索适配器列表并显示在屏幕上，如果没有找到适配器，则打印一个错误。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_MSC_VER</span></span><span class="token comment">/* * we do not want the warnings about the old deprecated and unsecure CRT functions * since these examples can be compiled under *nix as well */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"pcap.h"</span></span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">pcap_if_t</span><span class="token operator">*</span> alldevs<span class="token punctuation">;</span>    <span class="token class-name">pcap_if_t</span><span class="token operator">*</span> d<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> errbuf<span class="token punctuation">[</span>PCAP_ERRBUF_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">/* Retrieve the device list from the local machine */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pcap_findalldevs_ex</span><span class="token punctuation">(</span>PCAP_SRC_IF_STRING<span class="token punctuation">,</span>        <span class="token constant">NULL</span> <span class="token comment">/* auth is not needed */</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>alldevs<span class="token punctuation">,</span> errbuf<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span>            <span class="token string">"Error in pcap_findalldevs_ex: %s\n"</span><span class="token punctuation">,</span>            errbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* Print the list */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>d <span class="token operator">=</span> alldevs<span class="token punctuation">;</span> d <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> d <span class="token operator">=</span> d<span class="token operator">-></span>next<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d. %s"</span><span class="token punctuation">,</span> <span class="token operator">++</span>i<span class="token punctuation">,</span> d<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token operator">-></span>description<span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" (%s)\n"</span><span class="token punctuation">,</span> d<span class="token operator">-></span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" (No description available)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nNo interfaces found! Make sure Npcap is installed.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* We don't need any more the device list. Free it */</span>    <span class="token function">pcap_freealldevs</span><span class="token punctuation">(</span>alldevs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>运行结果：</p><p><img src="https://i.imgur.com/SvJrQHy.png" /></p><p>下面利用控制面板查看到的网络适配器：</p><p><img src="https://i.imgur.com/q8Z1qFN.png" /></p><p><img src="https://i.imgur.com/juJFZnP.png" /></p><p><strong>注</strong>：可以发现，通过程序打印出来的适配器列表和通过windows的设备管理器查看到的适配器列表有一些区别，主要是数量上的区别。已经打印出来的部分都可以和设备管理器中的对应得上。</p><p>关于这个代码的一些注释如下。</p><p>首先，<code>pcap_findalldevs_ex()</code>和其他libpcap函数一样，有一个<code>errbuf</code>参数。这个参数指向一个由libpcap填充的字符串，其中包括出错时的错误描述。</p><p>其次，请记住，并不是所有的操作系统都由libpcap支持，提供网络接口的描述，因此，如果我们想写一个可移植的应用程序，我们必须考虑描述为空的情况：在这种情况下，我们打印字符串"Nodescription available"。</p><p>最后注意，当我们用完这个列表后，我们用<code>pcap_freealldevs()</code>释放它。</p><p>假设我们已经编译了该程序，让我们试着运行它。在我的 Windows10系统上，我们得到的结果是</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">1. rpcap:&#x2F;&#x2F;\Device\NPF_&#123;3CEB626A-F27B-4267-B79D-2C6280763C13&#125; (Network adapter &#39;WAN Miniport (Network Monitor)&#39; on local host)2. rpcap:&#x2F;&#x2F;\Device\NPF_&#123;4BC226A2-E243-421C-9438-E30A96261403&#125; (Network adapter &#39;WAN Miniport (IPv6)&#39; on local host)3. rpcap:&#x2F;&#x2F;\Device\NPF_&#123;D3594FDB-28EF-4133-931A-1CDF0C2F56E1&#125; (Network adapter &#39;WAN Miniport (IP)&#39; on local host)4. rpcap:&#x2F;&#x2F;\Device\NPF_&#123;9464D53B-3103-4A4A-9B91-75A5DA984497&#125; (Network adapter &#39;Microsoft Wi-Fi Direct Virtual Adapter&#39; on local host)5. rpcap:&#x2F;&#x2F;\Device\NPF_&#123;0D437C70-8383-45EE-A70B-D00C04950AEF&#125; (Network adapter &#39;Intel(R) Wi-Fi 6 AX200 160MHz&#39; on local host)6. rpcap:&#x2F;&#x2F;\Device\NPF_&#123;6A1116E4-93E7-4A84-99D1-7E4CB0428CCE&#125; (Network adapter &#39;Microsoft Wi-Fi Direct Virtual Adapter #2&#39; on local host)7. rpcap:&#x2F;&#x2F;\Device\NPF_Loopback (Network adapter &#39;Adapter for loopback traffic capture&#39; on local host)8. rpcap:&#x2F;&#x2F;\Device\NPF_&#123;B5950B27-9860-4CEE-ADF9-3AFF86481291&#125; (Network adapter &#39;Realtek PCIe GbE Family Controller&#39; on local host)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="获取已安装设备的高级信息">3、获取已安装设备的高级信息</h4><p>上一部分（名为 "获取设备列表"的部分）演示了如何获取关于可用适配器的基本信息（即设备名称和描述）。实际上，Npcap还提供了其他高级信息。特别是，由<code>pcap_findalldevs_ex()</code>返回的每个<code>cap_if</code>结构都包含一个<code>cap_addr</code>结构的列表，其中包括：</p><ul><li>该接口的地址列表。</li><li>一个网络掩码的列表（每个掩码对应于地址列表中的一个条目）。</li><li>广播地址的列表（每个地址对应于地址列表中的一个条目）。</li><li>目标地址的列表（每个地址对应于地址列表中的一个条目）。</li></ul><p>此外，<code>cap_findalldevs_ex()</code>还可以返回远程适配器和位于指定本地文件夹中的pcap文件列表。</p><p>下面的代码提供了一个 <code>ifprint()</code> 函数，它可以打印<code>pcap_if</code> 结构的全部内容。程序对<code>pcap_findalldevs_ex()</code> 返回的每个条目都会调用该函数。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Print all the available information on the given interface */</span><span class="token keyword">void</span> <span class="token function">ifprint</span><span class="token punctuation">(</span><span class="token class-name">pcap_if_t</span> <span class="token operator">*</span>d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">pcap_addr_t</span> <span class="token operator">*</span>a<span class="token punctuation">;</span>  <span class="token keyword">char</span> ip6str<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">/* Name */</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>d<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* Description */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token operator">-></span>description<span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tDescription: %s\n"</span><span class="token punctuation">,</span>d<span class="token operator">-></span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* Loopback Address*/</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tLoopback: %s\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>d<span class="token operator">-></span>flags <span class="token operator">&amp;</span> PCAP_IF_LOOPBACK<span class="token punctuation">)</span><span class="token operator">?</span><span class="token string">"yes"</span><span class="token operator">:</span><span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* IP addresses */</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>a<span class="token operator">=</span>d<span class="token operator">-></span>addresses<span class="token punctuation">;</span>a<span class="token punctuation">;</span>a<span class="token operator">=</span>a<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tAddress Family: #%d\n"</span><span class="token punctuation">,</span>a<span class="token operator">-></span>addr<span class="token operator">-></span>sa_family<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">switch</span><span class="token punctuation">(</span>a<span class="token operator">-></span>addr<span class="token operator">-></span>sa_family<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">case</span> AF_INET<span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tAddress Family Name: AF_INET\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>addr<span class="token punctuation">)</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tAddress: %s\n"</span><span class="token punctuation">,</span><span class="token function">iptos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> <span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token operator">-></span>addr<span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>netmask<span class="token punctuation">)</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tNetmask: %s\n"</span><span class="token punctuation">,</span><span class="token function">iptos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> <span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token operator">-></span>netmask<span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>broadaddr<span class="token punctuation">)</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tBroadcast Address: %s\n"</span><span class="token punctuation">,</span><span class="token function">iptos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> <span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token operator">-></span>broadaddr<span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>dstaddr<span class="token punctuation">)</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tDestination Address: %s\n"</span><span class="token punctuation">,</span><span class="token function">iptos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> <span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token operator">-></span>dstaddr<span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> AF_INET6<span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tAddress Family Name: AF_INET6\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>addr<span class="token punctuation">)</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tAddress: %s\n"</span><span class="token punctuation">,</span> <span class="token function">ip6tos</span><span class="token punctuation">(</span>a<span class="token operator">-></span>addr<span class="token punctuation">,</span> ip6str<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ip6str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tAddress Family Name: Unknown\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>完整代码：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_MSC_VER</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pcap.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_WIN32</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;winsock.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;tchar.h></span></span>BOOL <span class="token function">LoadNpcapDlls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>_TCHAR npcap_dir<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span>UINT len<span class="token punctuation">;</span>len <span class="token operator">=</span> <span class="token function">GetSystemDirectory</span><span class="token punctuation">(</span>npcap_dir<span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Error in GetSystemDirectory: %x"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> FALSE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">_tcscat_s</span><span class="token punctuation">(</span>npcap_dir<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token function">_T</span><span class="token punctuation">(</span><span class="token string">"\\Npcap"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">SetDllDirectory</span><span class="token punctuation">(</span>npcap_dir<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Error in SetDllDirectory: %x"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> FALSE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">// Function prototypes</span><span class="token keyword">void</span> <span class="token function">ifprint</span><span class="token punctuation">(</span><span class="token class-name">pcap_if_t</span><span class="token operator">*</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">iptos</span><span class="token punctuation">(</span>u_long in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">ip6tos</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span> sockaddr<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> address<span class="token punctuation">,</span> <span class="token keyword">int</span> addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">pcap_if_t</span><span class="token operator">*</span> alldevs<span class="token punctuation">;</span><span class="token class-name">pcap_if_t</span><span class="token operator">*</span> d<span class="token punctuation">;</span><span class="token keyword">char</span> errbuf<span class="token punctuation">[</span>PCAP_ERRBUF_SIZE <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span><span class="token comment">/* Load Npcap and its functions. */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">LoadNpcapDlls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Couldn't load Npcap\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/* Retrieve the device list */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pcap_findalldevs</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>alldevs<span class="token punctuation">,</span> errbuf<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Error in pcap_findalldevs: %s\n"</span><span class="token punctuation">,</span> errbuf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Scan the list printing every entry */</span><span class="token keyword">for</span> <span class="token punctuation">(</span>d <span class="token operator">=</span> alldevs<span class="token punctuation">;</span>d<span class="token punctuation">;</span>d <span class="token operator">=</span> d<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">ifprint</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Free the device list */</span><span class="token function">pcap_freealldevs</span><span class="token punctuation">(</span>alldevs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Print all the available information on the given interface */</span><span class="token keyword">void</span> <span class="token function">ifprint</span><span class="token punctuation">(</span><span class="token class-name">pcap_if_t</span><span class="token operator">*</span> d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">pcap_addr_t</span><span class="token operator">*</span> a<span class="token punctuation">;</span><span class="token keyword">char</span> ip6str<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/* Name */</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> d<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* Description */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token operator">-></span>description<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tDescription: %s\n"</span><span class="token punctuation">,</span> d<span class="token operator">-></span>description<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* Loopback Address*/</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tLoopback: %s\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>d<span class="token operator">-></span>flags <span class="token operator">&amp;</span> PCAP_IF_LOOPBACK<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"yes"</span> <span class="token operator">:</span> <span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* IP addresses */</span><span class="token keyword">for</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> d<span class="token operator">-></span>addresses<span class="token punctuation">;</span>a<span class="token punctuation">;</span>a <span class="token operator">=</span> a<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tAddress Family: #%d\n"</span><span class="token punctuation">,</span> a<span class="token operator">-></span>addr<span class="token operator">-></span>sa_family<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>addr<span class="token operator">-></span>sa_family<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> AF_INET<span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tAddress Family Name: AF_INET\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>addr<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tAddress: %s\n"</span><span class="token punctuation">,</span> <span class="token function">iptos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token operator">-></span>addr<span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>netmask<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tNetmask: %s\n"</span><span class="token punctuation">,</span> <span class="token function">iptos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token operator">-></span>netmask<span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>broadaddr<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tBroadcast Address: %s\n"</span><span class="token punctuation">,</span> <span class="token function">iptos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token operator">-></span>broadaddr<span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>dstaddr<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tDestination Address: %s\n"</span><span class="token punctuation">,</span> <span class="token function">iptos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token operator">-></span>dstaddr<span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> AF_INET6<span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tAddress Family Name: AF_INET6\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__MINGW32__ </span><span class="token comment">/* Cygnus doesn't have IPv6 */</span></span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>addr<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tAddress: %s\n"</span><span class="token punctuation">,</span> <span class="token function">ip6tos</span><span class="token punctuation">(</span>a<span class="token operator">-></span>addr<span class="token punctuation">,</span> ip6str<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ip6str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tAddress Family Name: Unknown\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* From tcptraceroute, convert a numeric IP address to a string */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IPTOSBUFFERS</span><span class="token expression"><span class="token number">12</span></span></span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">iptos</span><span class="token punctuation">(</span>u_long in<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token keyword">char</span> output<span class="token punctuation">[</span>IPTOSBUFFERS<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">short</span> which<span class="token punctuation">;</span>u_char<span class="token operator">*</span> p<span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token punctuation">(</span>u_char<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>in<span class="token punctuation">;</span>which <span class="token operator">=</span> <span class="token punctuation">(</span>which <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> IPTOSBUFFERS <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> which <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>output<span class="token punctuation">[</span>which<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"%d.%d.%d.%d"</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> output<span class="token punctuation">[</span>which<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__MINGW32__ </span><span class="token comment">/* Cygnus doesn't have IPv6 */</span></span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">ip6tos</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span> sockaddr<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> address<span class="token punctuation">,</span> <span class="token keyword">int</span> addrlen<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">socklen_t</span> sockaddrlen<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span>sockaddrlen <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>sockaddrlen <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_storage</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getnameinfo</span><span class="token punctuation">(</span>sockaddr<span class="token punctuation">,</span>sockaddrlen<span class="token punctuation">,</span>address<span class="token punctuation">,</span>addrlen<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>NI_NUMERICHOST<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> address <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">return</span> address<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __MINGW32__ */</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>运行结果：</p><p><img src="https://i.imgur.com/y361wAw.png" /></p><p>然后我们看一下这个 WIFI6 适配器，发现它的地址和通过 powershell查看到的 ipv4 地址是一样的：</p><p><img src="https://i.imgur.com/2Ju5VZS.png" /></p><p><img src="https://i.imgur.com/RbtI2tx.png" /></p><p>结果分析：</p><p>npcap 获取了 6块逻辑网卡的高级信息：包含设备描述、IP地址、子网掩码、广播地址等。</p><h4 id="打开适配器并捕获数据包">4、打开适配器并捕获数据包</h4><p>现在我们已经看到了如何获得一个适配器来玩(对，play，所谓的 toyprograms)，让我们开始真正的工作，打开一个适配器并捕获一些流量。在这一课中，我们将编写一个程序，打印出流经适配器的每个数据包的一些信息。</p><p>打开一个捕获设备的函数是 <code>pcap_open()</code>。参数<code>snaplen</code>，<code>flags</code> 和 <code>to_ms</code>值得解释一下。</p><p><code>snaplen</code>：指定了要捕获的数据包的部分。在一些操作系统上（如xBSD和Win32），数据包驱动可以被配置为只捕获任何数据包的初始部分：这减少了要复制到应用程序的数据量，因此提高了捕获的效率。在这种情况下，我们使用65536这个值，这比我们可能遇到的最大MTU要高。通过这种方式，我们确保应用程序将始终收到整个数据包。</p><p><code>flags</code>：最重要的标志是指示适配器是否将进入混杂模式的标志。在正常操作中，适配器仅捕获来自网络的发往它的数据包；因此，其他主机交换的数据包将被忽略。相反，当适配器处于混杂模式时，它会捕获所有数据包，无论它们是否发往它。这意味着在共享媒体（如非交换以太网）上，Npcap将能够捕获其他主机的数据包。混杂模式是大多数捕获应用程序的默认模式，因此我们在以下代码中启用它。</p><p><code>to_ms</code>：指定读取超时，以毫秒为单位。适配器上的读取（例如，使用<code>pcap_dispatch()</code> 或 <code>pcap_next_ex()</code>）将始终在<code>to_ms</code>毫秒后返回，即使网络上没有可用的数据包。如果适配器处于统计模式，<code>to_ms</code>还定义统计报告之间的间隔（有关统计模式的信息，请参阅官网教程"wpcap_tut9"）。将 <code>to_ms</code> 设置为 0意味着没有超时，如果没有数据包到达，适配器上的读取永远不会返回。另一端的-1 超时会导致适配器上的读取始终立即返回。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_MSC_VER</span></span><span class="token comment">/* * we do not want the warnings about the old deprecated and unsecure CRT functions * since these examples can be compiled under *nix as well */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pcap.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;tchar.h></span></span>BOOL <span class="token function">LoadNpcapDlls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>_TCHAR npcap_dir<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span>UINT len<span class="token punctuation">;</span>len <span class="token operator">=</span> <span class="token function">GetSystemDirectory</span><span class="token punctuation">(</span>npcap_dir<span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Error in GetSystemDirectory: %x"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> FALSE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">_tcscat_s</span><span class="token punctuation">(</span>npcap_dir<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token function">_T</span><span class="token punctuation">(</span><span class="token string">"\\Npcap"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">SetDllDirectory</span><span class="token punctuation">(</span>npcap_dir<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Error in SetDllDirectory: %x"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> FALSE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/* prototype of the packet handler */</span><span class="token keyword">void</span> <span class="token function">packet_handler</span><span class="token punctuation">(</span>u_char<span class="token operator">*</span> param<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">pcap_pkthdr</span><span class="token operator">*</span> header<span class="token punctuation">,</span> <span class="token keyword">const</span> u_char<span class="token operator">*</span> pkt_data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">pcap_if_t</span><span class="token operator">*</span> alldevs<span class="token punctuation">;</span><span class="token class-name">pcap_if_t</span><span class="token operator">*</span> d<span class="token punctuation">;</span><span class="token keyword">int</span> inum<span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">pcap_t</span><span class="token operator">*</span> adhandle<span class="token punctuation">;</span><span class="token keyword">char</span> errbuf<span class="token punctuation">[</span>PCAP_ERRBUF_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span><span class="token comment">/* Load Npcap and its functions. */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">LoadNpcapDlls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Couldn't load Npcap\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/* Retrieve the device list */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pcap_findalldevs</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>alldevs<span class="token punctuation">,</span> errbuf<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Error in pcap_findalldevs: %s\n"</span><span class="token punctuation">,</span> errbuf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Print the list */</span><span class="token keyword">for</span> <span class="token punctuation">(</span>d <span class="token operator">=</span> alldevs<span class="token punctuation">;</span> d<span class="token punctuation">;</span> d <span class="token operator">=</span> d<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d. %s"</span><span class="token punctuation">,</span> <span class="token operator">++</span>i<span class="token punctuation">,</span> d<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token operator">-></span>description<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" (%s)\n"</span><span class="token punctuation">,</span> d<span class="token operator">-></span>description<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" (No description available)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nNo interfaces found! Make sure Npcap is installed.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter the interface number (1-%d):"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>inum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>inum <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> inum <span class="token operator">></span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nInterface number out of range.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* Free the device list */</span><span class="token function">pcap_freealldevs</span><span class="token punctuation">(</span>alldevs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Jump to the selected adapter */</span><span class="token keyword">for</span> <span class="token punctuation">(</span>d <span class="token operator">=</span> alldevs<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>d <span class="token operator">=</span> d<span class="token operator">-></span>next<span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* Open the device */</span><span class="token comment">/* Open the adapter */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>adhandle <span class="token operator">=</span> <span class="token function">pcap_open_live</span><span class="token punctuation">(</span>d<span class="token operator">-></span>name<span class="token punctuation">,</span><span class="token comment">// name of the device</span><span class="token number">65536</span><span class="token punctuation">,</span><span class="token comment">// portion of the packet to capture. </span>   <span class="token comment">// 65536 grants that the whole packet will be captured on all the MACs.</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token comment">// promiscuous mode (nonzero means promiscuous)</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token comment">// read timeout</span>errbuf<span class="token comment">// error buffer</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nUnable to open the adapter. %s is not supported by Npcap\n"</span><span class="token punctuation">,</span> d<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* Free the device list */</span><span class="token function">pcap_freealldevs</span><span class="token punctuation">(</span>alldevs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nlistening on %s...\n"</span><span class="token punctuation">,</span> d<span class="token operator">-></span>description<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* At this point, we don't need any more the device list. Free it */</span><span class="token function">pcap_freealldevs</span><span class="token punctuation">(</span>alldevs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* start the capture */</span><span class="token function">pcap_loop</span><span class="token punctuation">(</span>adhandle<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> packet_handler<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pcap_close</span><span class="token punctuation">(</span>adhandle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Callback function invoked by libpcap for every incoming packet */</span><span class="token keyword">void</span> <span class="token function">packet_handler</span><span class="token punctuation">(</span>u_char<span class="token operator">*</span> param<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">pcap_pkthdr</span><span class="token operator">*</span> header<span class="token punctuation">,</span> <span class="token keyword">const</span> u_char<span class="token operator">*</span> pkt_data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">tm</span><span class="token operator">*</span> ltime<span class="token punctuation">;</span><span class="token keyword">char</span> timestr<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">time_t</span> local_tv_sec<span class="token punctuation">;</span><span class="token comment">/* * unused parameters */</span><span class="token punctuation">(</span>VOID<span class="token punctuation">)</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>VOID<span class="token punctuation">)</span><span class="token punctuation">(</span>pkt_data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* convert the timestamp to readable format */</span>local_tv_sec <span class="token operator">=</span> header<span class="token operator">-></span>ts<span class="token punctuation">.</span>tv_sec<span class="token punctuation">;</span>ltime <span class="token operator">=</span> <span class="token function">localtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>local_tv_sec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strftime</span><span class="token punctuation">(</span>timestr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> timestr<span class="token punctuation">,</span> <span class="token string">"%H:%M:%S"</span><span class="token punctuation">,</span> ltime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s,%.6d len:%d\n"</span><span class="token punctuation">,</span> timestr<span class="token punctuation">,</span> header<span class="token operator">-></span>ts<span class="token punctuation">.</span>tv_usec<span class="token punctuation">,</span> header<span class="token operator">-></span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>运行结果：</p><p><img src="https://i.imgur.com/dxtXbjC.png" /></p><p>打开适配器后，可以使用 <code>pcap_dispatch()</code> 或<code>pcap_loop()</code> 开始捕获。这两个函数非常相似，不同之处在于<code>pcap_dispatch()</code> 在超时到期时返回（尽管不能保证），而<code>pcap_loop()</code> 在捕获到 <code>cnt</code>个数据包之前不会返回，因此它可以在下一个任意时间段内阻塞-利用网络。<code>pcap_loop()</code> 足以满足我们的目的，而<code>pcap_dispatch()</code> 通常用于更复杂的程序中。</p><p>这两个函数都有一个回调参数，<code>packet_handler</code>，指向一个将接收数据包的函数。这个函数由libpcap 为来自网络的每个新数据包调用，并接收一个通用状态（对应于<code>pcap_loop()</code> 和 <code>pcap_dispatch()</code> 的<code>user</code>参数），一个包含关于数据包的一些信息的标头，例如时间戳和长度以及数据包的实际数据，包括所有协议头。请注意，帧CRC通常不存在，因为它在帧验证后被网络适配器删除。另请注意，大多数适配器会丢弃具有错误CRC 的数据包，因此 Npcap 通常无法捕获它们。</p><p>上面的代码从 <code>pcap_pkthdr</code>标头中提取每个数据包的时间戳和长度，并将它们打印在屏幕上。</p><p>不过要注意，使用 <code>pcap_loop()</code>可能有一个缺点，主要与抓包驱动程序调用处理程序有关；因此，用户应用程序无法直接控制它。另一种方法（并且具有更易读的程序）是使用<code>pcap_next_ex()</code> 函数。这里就不再赘述。详情可以参考<ahref="https://npcap.com/guide/npcap-tutorial.html">官方教程</a>。</p><h4id="在没有回调的情况下捕获数据包">5、在没有回调的情况下捕获数据包</h4><p>本节的代码的行为与前面的程序（名为"打开适配器并捕获数据包"的部分）完全一样，但它使用了<code>pcap_next_ex()</code> 而不是 <code>pcap_loop()</code>。</p><p><code>pcap_loop()</code>的基于回调的捕获机制很优雅，在某些情况下它可能是一个很好的选择。然而，处理回调有时并不实用——它常常使程序更加复杂，特别是在多线程应用程序或C++类的情况下。</p><p>在这些情况下，<code>pcap_next_ex()</code>通过直接调用来获取数据包——使用<code>pcap_next_ex()</code>，数据包只有在程序员想要的时候才会被接收。</p><p>这个函数的参数与捕获回调相同。它接收一个适配器描述符和几个指针，这些指针将被初始化并返回给用户（一个指向<code>pcap_pkthdr</code>结构，另一个指向包含数据包的缓冲区）。</p><p>在下面的程序中，我们回收了上一节代码中的回调代码，并将其移到<code>main()</code>中，紧接着调用<code>pcap_next_ex()</code>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_MSC_VER</span></span><span class="token comment">/* * we do not want the warnings about the old deprecated and unsecure CRT functions * since these examples can be compiled under *nix as well */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pcap.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;tchar.h></span></span>BOOL <span class="token function">LoadNpcapDlls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>_TCHAR npcap_dir<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span>UINT len<span class="token punctuation">;</span>len <span class="token operator">=</span> <span class="token function">GetSystemDirectory</span><span class="token punctuation">(</span>npcap_dir<span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Error in GetSystemDirectory: %x"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> FALSE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">_tcscat_s</span><span class="token punctuation">(</span>npcap_dir<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token function">_T</span><span class="token punctuation">(</span><span class="token string">"\\Npcap"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">SetDllDirectory</span><span class="token punctuation">(</span>npcap_dir<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Error in SetDllDirectory: %x"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> FALSE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">pcap_if_t</span><span class="token operator">*</span> alldevs<span class="token punctuation">;</span><span class="token class-name">pcap_if_t</span><span class="token operator">*</span> d<span class="token punctuation">;</span><span class="token keyword">int</span> inum<span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">pcap_t</span><span class="token operator">*</span> adhandle<span class="token punctuation">;</span><span class="token keyword">int</span> res<span class="token punctuation">;</span><span class="token keyword">char</span> errbuf<span class="token punctuation">[</span>PCAP_ERRBUF_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">tm</span><span class="token operator">*</span> ltime<span class="token punctuation">;</span><span class="token keyword">char</span> timestr<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">pcap_pkthdr</span><span class="token operator">*</span> header<span class="token punctuation">;</span><span class="token keyword">const</span> u_char<span class="token operator">*</span> pkt_data<span class="token punctuation">;</span><span class="token class-name">time_t</span> local_tv_sec<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span><span class="token comment">/* Load Npcap and its functions. */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">LoadNpcapDlls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Couldn't load Npcap\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/* Retrieve the device list */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pcap_findalldevs</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>alldevs<span class="token punctuation">,</span> errbuf<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Error in pcap_findalldevs: %s\n"</span><span class="token punctuation">,</span> errbuf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Print the list */</span><span class="token keyword">for</span> <span class="token punctuation">(</span>d <span class="token operator">=</span> alldevs<span class="token punctuation">;</span> d<span class="token punctuation">;</span> d <span class="token operator">=</span> d<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d. %s"</span><span class="token punctuation">,</span> <span class="token operator">++</span>i<span class="token punctuation">,</span> d<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token operator">-></span>description<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" (%s)\n"</span><span class="token punctuation">,</span> d<span class="token operator">-></span>description<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" (No description available)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nNo interfaces found! Make sure Npcap is installed.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter the interface number (1-%d):"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>inum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>inum <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> inum <span class="token operator">></span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nInterface number out of range.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* Free the device list */</span><span class="token function">pcap_freealldevs</span><span class="token punctuation">(</span>alldevs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Jump to the selected adapter */</span><span class="token keyword">for</span> <span class="token punctuation">(</span>d <span class="token operator">=</span> alldevs<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>d <span class="token operator">=</span> d<span class="token operator">-></span>next<span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* Open the adapter */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>adhandle <span class="token operator">=</span> <span class="token function">pcap_open_live</span><span class="token punctuation">(</span>d<span class="token operator">-></span>name<span class="token punctuation">,</span><span class="token comment">// name of the device</span><span class="token number">65536</span><span class="token punctuation">,</span><span class="token comment">// portion of the packet to capture. </span>   <span class="token comment">// 65536 grants that the whole packet will be captured on all the MACs.</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token comment">// promiscuous mode (nonzero means promiscuous)</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token comment">// read timeout</span>errbuf<span class="token comment">// error buffer</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nUnable to open the adapter. %s is not supported by Npcap\n"</span><span class="token punctuation">,</span> d<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* Free the device list */</span><span class="token function">pcap_freealldevs</span><span class="token punctuation">(</span>alldevs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nlistening on %s...\n"</span><span class="token punctuation">,</span> d<span class="token operator">-></span>description<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* At this point, we don't need any more the device list. Free it */</span><span class="token function">pcap_freealldevs</span><span class="token punctuation">(</span>alldevs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* Retrieve the packets */</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>res <span class="token operator">=</span> <span class="token function">pcap_next_ex</span><span class="token punctuation">(</span>adhandle<span class="token punctuation">,</span> <span class="token operator">&amp;</span>header<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pkt_data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">/* Timeout elapsed */</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">/* convert the timestamp to readable format */</span>local_tv_sec <span class="token operator">=</span> header<span class="token operator">-></span>ts<span class="token punctuation">.</span>tv_sec<span class="token punctuation">;</span>ltime <span class="token operator">=</span> <span class="token function">localtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>local_tv_sec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strftime</span><span class="token punctuation">(</span>timestr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> timestr<span class="token punctuation">,</span> <span class="token string">"%H:%M:%S"</span><span class="token punctuation">,</span> ltime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s,%.6d len:%d\n"</span><span class="token punctuation">,</span> timestr<span class="token punctuation">,</span> header<span class="token operator">-></span>ts<span class="token punctuation">.</span>tv_usec<span class="token punctuation">,</span> header<span class="token operator">-></span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error reading the packets: %s\n"</span><span class="token punctuation">,</span> <span class="token function">pcap_geterr</span><span class="token punctuation">(</span>adhandle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">pcap_close</span><span class="token punctuation">(</span>adhandle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>为什么我们使用 <code>pcap_next_ex()</code> 而不是以前的<code>pcap_next()</code>？因为 <code>pcap_next()</code>有一些缺点。首先，它的效率很低，因为它隐藏了回调方法，但仍然依赖于<code>pcap_dispatch()</code>。其次，它不能检测<code>EOF</code>，所以当从文件中收集数据包时，它不是很有用。</p><p>还请注意，<code>pcap_next_ex()</code>对成功、超时、错误和<code>EOF</code>条件返回不同的值。</p><h4 id="过滤流量">6、过滤流量</h4><p>Npcap（以及libpcap）提供的最强大的功能之一是过滤引擎。它提供了一种非常有效的方式来接收网络流量的子集，并且（通常）与Npcap 提供的捕获机制集成。用于过滤数据包的函数是<code>pcap_compile()</code> 和 <code>pcap_setfilter()</code>。</p><p><code>pcap_compile()</code>接受一个包含高级布尔（过滤器）表达式的字符串，并生成一个低级别的字节码，该字节码可由数据包驱动程序中的文件过滤器引擎解释。布尔表达式的语法可以在本文档的过滤表达式语法部分中找到。</p><p><code>pcap_setfilter()</code>在内核驱动中把一个过滤器与一个捕获会话联系起来。一旦调用<code>pcap_setfilter()</code>，相关的过滤器将被应用于所有来自网络的数据包，所有符合要求的数据包（即布尔表达式评估为真的数据包）将被实际拷贝到应用程序中。</p><p>下面的代码展示了如何编译和设置一个过滤器。注意，我们必须从描述适配器的<code>pcap_if</code> 结构中获取网络掩码，因为由<code>pcap_compile()</code> 创建的一些过滤器需要它。</p><p>在这个代码片段中传递给 <code>pcap_compile()</code> 的过滤器是“ip andtcp”，这意味着“只保留 IPv4 和 TCP 的数据包并将它们传递给应用程序”。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token operator">-></span>addresses <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token comment">/* Retrieve the mask of the first address of the interface */</span>  netmask<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>d<span class="token operator">-></span>addresses<span class="token operator">-></span>netmask<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">.</span>S_un<span class="token punctuation">.</span>S_addr<span class="token punctuation">;</span><span class="token keyword">else</span>  <span class="token comment">/* If the interface is without an address   * we suppose to be in a C class network */</span>  netmask<span class="token operator">=</span><span class="token number">0xffffff</span><span class="token punctuation">;</span> <span class="token comment">//compile the filter</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pcap_compile</span><span class="token punctuation">(</span>adhandle<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fcode<span class="token punctuation">,</span> <span class="token string">"ip and tcp"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> netmask<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span>    <span class="token string">"\nUnable to compile the packet filter. Check the syntax.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* Free the device list */</span>  <span class="token function">pcap_freealldevs</span><span class="token punctuation">(</span>alldevs<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//set the filter</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pcap_setfilter</span><span class="token punctuation">(</span>adhandle<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fcode<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span><span class="token string">"\nError setting the filter.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* Free the device list */</span>  <span class="token function">pcap_freealldevs</span><span class="token punctuation">(</span>alldevs<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>上面的代码将会在下面的“解读数据包”这一节种使用到。</p><h4 id="解读数据包">7、解读数据包</h4><p>现在我们能够捕获和过滤网络流量，我们希望将我们的知识用于一个简单的“现实世界”应用程序。</p><p>在本节中，我们将从之前的小节中获取代码，并使用这些部分来构建一个更有用的程序。当前程序的主要目的是展示如何解析和解释捕获的数据包的协议头。由此生成的应用程序，称为UDPdump，打印我们网络上 UDP 流量的摘要。</p><p>我们选择了解析和显示UDP协议，因为它比其他协议（如TCP）更容易获得，因此是一个很好的初始例子。让我们看一下代码。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pcap.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Winsock2.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;tchar.h></span></span>BOOL <span class="token function">LoadNpcapDlls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    _TCHAR npcap_dir<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    UINT len<span class="token punctuation">;</span>    len <span class="token operator">=</span> <span class="token function">GetSystemDirectory</span><span class="token punctuation">(</span>npcap_dir<span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Error in GetSystemDirectory: %x"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">_tcscat_s</span><span class="token punctuation">(</span>npcap_dir<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token function">_T</span><span class="token punctuation">(</span><span class="token string">"\\Npcap"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">SetDllDirectory</span><span class="token punctuation">(</span>npcap_dir<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Error in SetDllDirectory: %x"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 4 bytes IP address */</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ip_address</span> <span class="token punctuation">&#123;</span>    u_char byte1<span class="token punctuation">;</span>    u_char byte2<span class="token punctuation">;</span>    u_char byte3<span class="token punctuation">;</span>    u_char byte4<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ip_address<span class="token punctuation">;</span><span class="token comment">/* IPv4 header */</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ip_header</span> <span class="token punctuation">&#123;</span>    u_char  ver_ihl<span class="token punctuation">;</span> <span class="token comment">// Version (4 bits) + IP header length (4 bits)</span>    u_char  tos<span class="token punctuation">;</span>     <span class="token comment">// Type of service </span>    u_short tlen<span class="token punctuation">;</span>    <span class="token comment">// Total length </span>    u_short identification<span class="token punctuation">;</span> <span class="token comment">// Identification</span>    u_short flags_fo<span class="token punctuation">;</span> <span class="token comment">// Flags (3 bits) + Fragment offset (13 bits)</span>    u_char  ttl<span class="token punctuation">;</span>      <span class="token comment">// Time to live</span>    u_char  proto<span class="token punctuation">;</span>    <span class="token comment">// Protocol</span>    u_short crc<span class="token punctuation">;</span>      <span class="token comment">// Header checksum</span>    ip_address  saddr<span class="token punctuation">;</span> <span class="token comment">// Source address</span>    ip_address  daddr<span class="token punctuation">;</span> <span class="token comment">// Destination address</span>    u_int  op_pad<span class="token punctuation">;</span>     <span class="token comment">// Option + Padding</span><span class="token punctuation">&#125;</span>ip_header<span class="token punctuation">;</span><span class="token comment">/* UDP header*/</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">udp_header</span> <span class="token punctuation">&#123;</span>    u_short sport<span class="token punctuation">;</span> <span class="token comment">// Source port</span>    u_short dport<span class="token punctuation">;</span> <span class="token comment">// Destination port</span>    u_short len<span class="token punctuation">;</span>   <span class="token comment">// Datagram length</span>    u_short crc<span class="token punctuation">;</span>   <span class="token comment">// Checksum</span><span class="token punctuation">&#125;</span>udp_header<span class="token punctuation">;</span><span class="token comment">/* prototype of the packet handler */</span><span class="token keyword">void</span> <span class="token function">packet_handler</span><span class="token punctuation">(</span>u_char<span class="token operator">*</span> param<span class="token punctuation">,</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">pcap_pkthdr</span><span class="token operator">*</span> header<span class="token punctuation">,</span>    <span class="token keyword">const</span> u_char<span class="token operator">*</span> pkt_data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">pcap_if_t</span><span class="token operator">*</span> alldevs<span class="token punctuation">;</span>    <span class="token class-name">pcap_if_t</span><span class="token operator">*</span> d<span class="token punctuation">;</span>    <span class="token keyword">int</span> inum<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">pcap_t</span><span class="token operator">*</span> adhandle<span class="token punctuation">;</span>    <span class="token keyword">char</span> errbuf<span class="token punctuation">[</span>PCAP_ERRBUF_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    u_int netmask<span class="token punctuation">;</span>    <span class="token keyword">char</span> packet_filter<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"ip and udp"</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">bpf_program</span> fcode<span class="token punctuation">;</span>    <span class="token comment">/* Load Npcap and its functions. */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">LoadNpcapDlls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Couldn't load Npcap\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* Retrieve the device list */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pcap_findalldevs_ex</span><span class="token punctuation">(</span>PCAP_SRC_IF_STRING<span class="token punctuation">,</span>        <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>alldevs<span class="token punctuation">,</span> errbuf<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Error in pcap_findalldevs: %s\n"</span><span class="token punctuation">,</span> errbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* Print the list */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>d <span class="token operator">=</span> alldevs<span class="token punctuation">;</span> d<span class="token punctuation">;</span> d <span class="token operator">=</span> d<span class="token operator">-></span>next<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d. %s"</span><span class="token punctuation">,</span> <span class="token operator">++</span>i<span class="token punctuation">,</span> d<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token operator">-></span>description<span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" (%s)\n"</span><span class="token punctuation">,</span> d<span class="token operator">-></span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" (No description available)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nNo interfaces found! Make sure Npcap is installed.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter the interface number (1-%d):"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>inum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>inum <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> inum <span class="token operator">></span> i<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nInterface number out of range.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* Free the device list */</span>        <span class="token function">pcap_freealldevs</span><span class="token punctuation">(</span>alldevs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* Jump to the selected adapter */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>d <span class="token operator">=</span> alldevs<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>d <span class="token operator">=</span> d<span class="token operator">-></span>next<span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* Open the adapter */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>adhandle <span class="token operator">=</span> <span class="token function">pcap_open</span><span class="token punctuation">(</span>d<span class="token operator">-></span>name<span class="token punctuation">,</span> <span class="token comment">// name of the device</span>        <span class="token number">65536</span><span class="token punctuation">,</span> <span class="token comment">// portion of the packet to capture. </span>               <span class="token comment">// 65536 grants that the whole packet</span>               <span class="token comment">// will be captured on all the MACs.</span>        PCAP_OPENFLAG_PROMISCUOUS<span class="token punctuation">,</span> <span class="token comment">// promiscuous mode</span>        <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token comment">// read timeout</span>        <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// remote authentication</span>        errbuf <span class="token comment">// error buffer</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span>            <span class="token string">"\nUnable to open the adapter. %s is not supported by Npcap\n"</span><span class="token punctuation">,</span>            d<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* Free the device list */</span>        <span class="token function">pcap_freealldevs</span><span class="token punctuation">(</span>alldevs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* Check the link layer. We support only Ethernet for simplicity. */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pcap_datalink</span><span class="token punctuation">(</span>adhandle<span class="token punctuation">)</span> <span class="token operator">!=</span> DLT_EN10MB<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nThis program works only on Ethernet networks.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* Free the device list */</span>        <span class="token function">pcap_freealldevs</span><span class="token punctuation">(</span>alldevs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token operator">-></span>addresses <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token comment">/* Retrieve the mask of the first address of the interface */</span>        netmask <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>d<span class="token operator">-></span>addresses<span class="token operator">-></span>netmask<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">.</span>S_un<span class="token punctuation">.</span>S_addr<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token comment">/* If the interface is without addresses         * we suppose to be in a C class network */</span>        netmask <span class="token operator">=</span> <span class="token number">0xffffff</span><span class="token punctuation">;</span>    <span class="token comment">//compile the filter</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pcap_compile</span><span class="token punctuation">(</span>adhandle<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fcode<span class="token punctuation">,</span> packet_filter<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> netmask<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nUnable to compile the packet filter. Check the syntax.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* Free the device list */</span>        <span class="token function">pcap_freealldevs</span><span class="token punctuation">(</span>alldevs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//set the filter</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pcap_setfilter</span><span class="token punctuation">(</span>adhandle<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fcode<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nError setting the filter.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* Free the device list */</span>        <span class="token function">pcap_freealldevs</span><span class="token punctuation">(</span>alldevs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nlistening on %s...\n"</span><span class="token punctuation">,</span> d<span class="token operator">-></span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* At this point, we don't need any more the device list. Free it */</span>    <span class="token function">pcap_freealldevs</span><span class="token punctuation">(</span>alldevs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* start the capture */</span>    <span class="token function">pcap_loop</span><span class="token punctuation">(</span>adhandle<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> packet_handler<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Callback function invoked by libpcap for every incoming packet */</span><span class="token keyword">void</span> <span class="token function">packet_handler</span><span class="token punctuation">(</span>u_char<span class="token operator">*</span> param<span class="token punctuation">,</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">pcap_pkthdr</span><span class="token operator">*</span> header<span class="token punctuation">,</span>    <span class="token keyword">const</span> u_char<span class="token operator">*</span> pkt_data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">tm</span> ltime<span class="token punctuation">;</span>    <span class="token keyword">char</span> timestr<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    ip_header<span class="token operator">*</span> ih<span class="token punctuation">;</span>    udp_header<span class="token operator">*</span> uh<span class="token punctuation">;</span>    u_int ip_len<span class="token punctuation">;</span>    u_short sport<span class="token punctuation">,</span> dport<span class="token punctuation">;</span>    <span class="token class-name">time_t</span> local_tv_sec<span class="token punctuation">;</span>    <span class="token comment">/*     * Unused variable     */</span>    <span class="token punctuation">(</span>VOID<span class="token punctuation">)</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* convert the timestamp to readable format */</span>    local_tv_sec <span class="token operator">=</span> header<span class="token operator">-></span>ts<span class="token punctuation">.</span>tv_sec<span class="token punctuation">;</span>    <span class="token function">localtime_s</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ltime<span class="token punctuation">,</span> <span class="token operator">&amp;</span>local_tv_sec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strftime</span><span class="token punctuation">(</span>timestr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> timestr<span class="token punctuation">,</span> <span class="token string">"%H:%M:%S"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ltime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* print timestamp and length of the packet */</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s.%.6d len:%d "</span><span class="token punctuation">,</span> timestr<span class="token punctuation">,</span> header<span class="token operator">-></span>ts<span class="token punctuation">.</span>tv_usec<span class="token punctuation">,</span> header<span class="token operator">-></span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* retireve the position of the ip header */</span>    ih <span class="token operator">=</span> <span class="token punctuation">(</span>ip_header<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>pkt_data <span class="token operator">+</span>        <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//length of ethernet header</span>      <span class="token comment">/* retireve the position of the udp header */</span>    ip_len <span class="token operator">=</span> <span class="token punctuation">(</span>ih<span class="token operator">-></span>ver_ihl <span class="token operator">&amp;</span> <span class="token number">0xf</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>    uh <span class="token operator">=</span> <span class="token punctuation">(</span>udp_header<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>u_char<span class="token operator">*</span><span class="token punctuation">)</span>ih <span class="token operator">+</span> ip_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* convert from network byte order to host byte order */</span>    sport <span class="token operator">=</span> <span class="token function">ntohs</span><span class="token punctuation">(</span>uh<span class="token operator">-></span>sport<span class="token punctuation">)</span><span class="token punctuation">;</span>    dport <span class="token operator">=</span> <span class="token function">ntohs</span><span class="token punctuation">(</span>uh<span class="token operator">-></span>dport<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* print ip addresses and udp ports */</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d.%d.%d.%d.%d -> %d.%d.%d.%d.%d\n"</span><span class="token punctuation">,</span>        ih<span class="token operator">-></span>saddr<span class="token punctuation">.</span>byte1<span class="token punctuation">,</span>        ih<span class="token operator">-></span>saddr<span class="token punctuation">.</span>byte2<span class="token punctuation">,</span>        ih<span class="token operator">-></span>saddr<span class="token punctuation">.</span>byte3<span class="token punctuation">,</span>        ih<span class="token operator">-></span>saddr<span class="token punctuation">.</span>byte4<span class="token punctuation">,</span>        sport<span class="token punctuation">,</span>        ih<span class="token operator">-></span>daddr<span class="token punctuation">.</span>byte1<span class="token punctuation">,</span>        ih<span class="token operator">-></span>daddr<span class="token punctuation">.</span>byte2<span class="token punctuation">,</span>        ih<span class="token operator">-></span>daddr<span class="token punctuation">.</span>byte3<span class="token punctuation">,</span>        ih<span class="token operator">-></span>daddr<span class="token punctuation">.</span>byte4<span class="token punctuation">,</span>        dport<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>运行如下：</p><p><img src="https://i.imgur.com/oO5Otcu.png" /></p><p>首先，我们将过滤器设置为“ip and udp”。通过这种方式，我们可以确定<code>packet_handler()</code> 将只接收 IPv4 上的 UDP数据包：这简化了解析并提高了程序的效率。</p><p>我们还创建了几个描述 IP 和 UDP标头的结构。<code>packet_handler()</code>使用这些结构来正确定位各种标头字段。</p><p><code>packet_handler()</code> 虽然仅限于单个协议解析器（UDP overIPv4），但它显示了 tcpdump/WinDump等复杂的“嗅探器”如何解码网络流量。由于我们对 MAC标头不感兴趣，因此我们跳过它。为简单起见，在开始捕获之前，我们使用<code>pcap_datalink()</code> 检查 MAC层，以确保我们正在处理以太网网络。这样我们就可以确定 MAC 报头正好是 14个字节。</p><p>IP 标头位于 MAC 标头之后。我们将从 IP 标头中提取 IP源地址和目标地址。</p><p>到达 UDP 报头有点复杂，因为 IP 报头没有固定的长度。因此，我们使用 IP头的长度字段来知道它的大小。一旦我们知道 UDP标头的位置，我们就提取源端口和目标端口。</p><h3 id="习题与思考题">习题与思考题</h3><p>1、WINPCAP(Npcap)是否能实现服务质量的控制？</p><p>答：不能。WinPcap可以独立地通过主机协议发送和接受数据，如同TCP-IP。这就意味着WinPcap不能阻止、过滤或操纵同一机器上的其他应用程序的通讯：它仅仅能简单地"监视"在网络上传输的数据包。所以，它不能提供类似网络流量控制、服务质量调度和个人防火墙之类的支持，因而不能实现服务质量的控制。</p><hr /><p>参考：<br />1、<a href="https://npcap.com/guide/npcap-tutorial.html"class="uri">https://npcap.com/guide/npcap-tutorial.html</a></p><h2 id="实验三-协议分析程序的编写">实验三 协议分析程序的编写</h2><h3 id="实验目的-1">实验目的</h3><ol type="1"><li><p>目的：分析IP协议，统计流量。大家可以把流量计做成流量地图，显示不同地点间数据实时发送的量，比如武汉到北京的数据包发送的数据量。可以用echart画地图，用whois获取IP地址的所属地。</p></li><li><p>任务：根据IP协议，解析每个数据包的PCI，并对不同IP进行流量统计。</p></li><li><p>任务的说明：</p><ul><li>实现的软件能显示每个包的PCI。</li><li>能显示每个IP地址的流量，即显示接收包的数量。</li></ul></li></ol><h3 id="实验原理-1">实验原理</h3><p>首先解释一下 PCI 的具体含义：</p><p>使用分层网络方法，每一层都会“封装”从其上一层向下传递的数据，同时添加自己的信息。然后，该层会将新的PDU 向下传递到下一层（或者一旦您到达第 1层，就将其通过物理介质发送）。一旦到达另一端，则采取相反的路径；每一层查看与其相关的标头/尾标，处理它们，并将有效负载向上传递到下一层。每个封装级别的具体信息取决于协议。例如，TCP将添加源端口和目标端口、校验和、序列/确认号以及其他一些东西。 IP添加源/目标地址、数据包长度和其他一些内容。以太网将添加源/目标MAC、EtherType、FCS 等。</p><p>然后就是利用实验二中使用的 npcap 进行抓包。这里主要是抓取 TCP的数据包，然后将抓取到的每一个数据包解析之后，将它们的源 ip 和目标 ip都存放到 MySQL 数据库中。然后使用 Python 调用解析 ip归属地的接口，将每一个 ip的归属地解析好，然后更新数据库中的相关字段。</p><p>之后使用 Spring Boot 搭建一个简单的后台接口，主要是给前端网页提供json 数据。</p><p>前端主要使用 echarts 来绘图，绘图所需要的数据就来自上面 Spring Boot提供的 json 数据接口。这样就可以实时地绘制我们所需的流量地图了。</p><h3 id="实验环境">实验环境</h3><p>系统：Windows 10 家庭中文版 21H2</p><p>Visual Studio 版本：Visual Studio 2022</p><p>Npcap 版本：1.60</p><p>Npcap SDK 版本：1.12</p><p><img src="https://i.imgur.com/Rc4xA1K.png" /></p><p>MySQL 版本：8.0.28</p><p>jdk 版本：openjdk version "17.0.2"</p><p>Python 版本：3.10.4</p><p>echart 版本：</p><h3 id="实验内容-1">实验内容</h3><p>分析IP协议，统计流量。把流量计做成流量地图，显示不同地点间数据实时发送的量，比如武汉到北京的数据包发送的数据量。用echart画地图，用whois获取IP地址的所属地。</p><h3 id="实验过程-1">实验过程</h3><p>首先，编写 C++程序进行抓包，这个在实验二中已经实现，这里就不再赘述。</p><p>这里主要介绍一下将捕获到的源 ip 地址和目标 ip地址存放到数据库中的过程。</p><p>首先，配置环境，步骤如下：</p><p><img src="https://i.imgur.com/D06EaWZ.png" /></p><p><img src="https://i.imgur.com/aPwSR82.png" /></p><p><img src="https://i.imgur.com/Dxi3Bfu.png" /></p><p><img src="https://i.imgur.com/iaOXL9h.png" /></p><p>之后，还要将 libmysql.lib 文件添加到项目的根目录下：</p><p><img src="https://i.imgur.com/1ait2E8.png" /></p><p><img src="https://i.imgur.com/i2HVfUF.png" /></p><p>然后我们写一个 C++ 的类，从而实现对数据库中数据进行增删改查：</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//#include "stdafx.h"</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"DBMySQL.h"</span></span><span class="token class-name">VspdCToMySQL</span><span class="token double-colon punctuation">::</span><span class="token function">VspdCToMySQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name">VspdCToMySQL</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">VspdCToMySQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//初始化数据</span><span class="token keyword">int</span> <span class="token class-name">VspdCToMySQL</span><span class="token double-colon punctuation">::</span><span class="token function">ConnMySQL</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> host<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> port<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> Db<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> user<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> passwd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token keyword">const</span> charset<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> Msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysql_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mysql<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Msg <span class="token operator">=</span> <span class="token string">"inital mysql handle error"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysql_real_connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mysql<span class="token punctuation">,</span> host<span class="token punctuation">,</span> user<span class="token punctuation">,</span> passwd<span class="token punctuation">,</span> Db<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Msg <span class="token operator">=</span> <span class="token string">"Failed to connect to database: Error"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysql_set_character_set</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mysql<span class="token punctuation">,</span> charset<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Msg <span class="token operator">=</span> <span class="token string">"mysql_set_character_set Error"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//查询数据</span>string <span class="token class-name">VspdCToMySQL</span><span class="token double-colon punctuation">::</span><span class="token function">SelectData</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> SQL<span class="token punctuation">,</span> <span class="token keyword">int</span> Cnum<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> Msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>MYSQL_ROW m_row<span class="token punctuation">;</span>MYSQL_RES<span class="token operator">*</span> m_res<span class="token punctuation">;</span><span class="token keyword">char</span> sql<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> SQL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> rnum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> rg <span class="token operator">=</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token comment">//行隔开</span><span class="token comment">// char rg='\r';</span><span class="token keyword">char</span> cg <span class="token operator">=</span> <span class="token char">'\t'</span><span class="token punctuation">;</span><span class="token comment">//字段隔开</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mysql<span class="token punctuation">,</span> sql<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Msg <span class="token operator">=</span> <span class="token string">"select ps_info Error"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>m_res <span class="token operator">=</span> <span class="token function">mysql_store_result</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mysql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>m_res <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Msg <span class="token operator">=</span> <span class="token string">"select username Error"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>string <span class="token function">str</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>m_row <span class="token operator">=</span> <span class="token function">mysql_fetch_row</span><span class="token punctuation">(</span>m_res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Cnum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>str <span class="token operator">+=</span> m_row<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>str <span class="token operator">+=</span> cg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>str <span class="token operator">+=</span> rg<span class="token punctuation">;</span>rnum<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">mysql_free_result</span><span class="token punctuation">(</span>m_res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//插入数据</span><span class="token keyword">int</span> <span class="token class-name">VspdCToMySQL</span><span class="token double-colon punctuation">::</span><span class="token function">InsertData</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> SQL<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> Msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> sql<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> SQL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mysql<span class="token punctuation">,</span> sql<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Msg <span class="token operator">=</span> <span class="token string">"Insert Data Error"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//更换数据</span><span class="token keyword">int</span> <span class="token class-name">VspdCToMySQL</span><span class="token double-colon punctuation">::</span><span class="token function">ReplaceData</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> SQL<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> Msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> sql<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> SQL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mysql<span class="token punctuation">,</span> sql<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Msg <span class="token operator">=</span> <span class="token string">"Replace Data Error"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//更新数据</span><span class="token keyword">int</span> <span class="token class-name">VspdCToMySQL</span><span class="token double-colon punctuation">::</span><span class="token function">UpdateData</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> SQL<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> Msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> sql<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> SQL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mysql<span class="token punctuation">,</span> sql<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Msg <span class="token operator">=</span> <span class="token string">"Update Data Error"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//删除数据</span><span class="token keyword">int</span> <span class="token class-name">VspdCToMySQL</span><span class="token double-colon punctuation">::</span><span class="token function">DeleteData</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> SQL<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> Msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> sql<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> SQL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mysql<span class="token punctuation">,</span> sql<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Msg <span class="token operator">=</span> <span class="token string">"Delete Data error"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//调用数据库存储过程</span><span class="token keyword">int</span> <span class="token class-name">VspdCToMySQL</span><span class="token double-colon punctuation">::</span><span class="token function">CallProcedure</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> SQL<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> Msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> sql<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> SQL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mysql<span class="token punctuation">,</span> sql<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Msg <span class="token operator">=</span> <span class="token string">"Call Procedure error"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//关闭数据库连接</span><span class="token keyword">void</span> <span class="token class-name">VspdCToMySQL</span><span class="token double-colon punctuation">::</span><span class="token function">CloseMySQLConn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">mysql_close</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mysql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"disconnect database\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>然后在抓包程序的回调函数中增加对数据库的操作即可：</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* Callback function invoked by libpcap for every incoming packet */</span><span class="token keyword">void</span> <span class="token function">packet_handler</span><span class="token punctuation">(</span>u_char<span class="token operator">*</span> param<span class="token punctuation">,</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">pcap_pkthdr</span><span class="token operator">*</span> header<span class="token punctuation">,</span>    <span class="token keyword">const</span> u_char<span class="token operator">*</span> pkt_data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">tm</span> ltime<span class="token punctuation">;</span>    <span class="token keyword">char</span> timestr<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    ip_header<span class="token operator">*</span> ih<span class="token punctuation">;</span>    udp_header<span class="token operator">*</span> uh<span class="token punctuation">;</span>    u_int ip_len<span class="token punctuation">;</span>    u_short sport<span class="token punctuation">,</span> dport<span class="token punctuation">;</span>    time_t local_tv_sec<span class="token punctuation">;</span>    <span class="token comment">/*     * Unused variable     */</span>    <span class="token punctuation">(</span>VOID<span class="token punctuation">)</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* convert the timestamp to readable format */</span>    local_tv_sec <span class="token operator">=</span> header<span class="token operator">-></span>ts<span class="token punctuation">.</span>tv_sec<span class="token punctuation">;</span>    <span class="token function">localtime_s</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ltime<span class="token punctuation">,</span> <span class="token operator">&amp;</span>local_tv_sec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strftime</span><span class="token punctuation">(</span>timestr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> timestr<span class="token punctuation">,</span> <span class="token string">"%H:%M:%S"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ltime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* print timestamp and length of the packet */</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s.%.6d len:%d "</span><span class="token punctuation">,</span> timestr<span class="token punctuation">,</span> header<span class="token operator">-></span>ts<span class="token punctuation">.</span>tv_usec<span class="token punctuation">,</span> header<span class="token operator">-></span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* retireve the position of the ip header */</span>    ih <span class="token operator">=</span> <span class="token punctuation">(</span>ip_header<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>pkt_data <span class="token operator">+</span>        <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//length of ethernet header</span>      <span class="token comment">/* retireve the position of the udp header */</span>    ip_len <span class="token operator">=</span> <span class="token punctuation">(</span>ih<span class="token operator">-></span>ver_ihl <span class="token operator">&amp;</span> <span class="token number">0xf</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>    uh <span class="token operator">=</span> <span class="token punctuation">(</span>udp_header<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>u_char<span class="token operator">*</span><span class="token punctuation">)</span>ih <span class="token operator">+</span> ip_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* convert from network byte order to host byte order */</span>    sport <span class="token operator">=</span> <span class="token function">ntohs</span><span class="token punctuation">(</span>uh<span class="token operator">-></span>sport<span class="token punctuation">)</span><span class="token punctuation">;</span>    dport <span class="token operator">=</span> <span class="token function">ntohs</span><span class="token punctuation">(</span>uh<span class="token operator">-></span>dport<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* print ip addresses and udp ports */</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d.%d.%d.%d.%d -> %d.%d.%d.%d.%d\n"</span><span class="token punctuation">,</span>        ih<span class="token operator">-></span>saddr<span class="token punctuation">.</span>byte1<span class="token punctuation">,</span>        ih<span class="token operator">-></span>saddr<span class="token punctuation">.</span>byte2<span class="token punctuation">,</span>        ih<span class="token operator">-></span>saddr<span class="token punctuation">.</span>byte3<span class="token punctuation">,</span>        ih<span class="token operator">-></span>saddr<span class="token punctuation">.</span>byte4<span class="token punctuation">,</span>        sport<span class="token punctuation">,</span>        ih<span class="token operator">-></span>daddr<span class="token punctuation">.</span>byte1<span class="token punctuation">,</span>        ih<span class="token operator">-></span>daddr<span class="token punctuation">.</span>byte2<span class="token punctuation">,</span>        ih<span class="token operator">-></span>daddr<span class="token punctuation">.</span>byte3<span class="token punctuation">,</span>        ih<span class="token operator">-></span>daddr<span class="token punctuation">.</span>byte4<span class="token punctuation">,</span>        dport<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将源 ip 地址和目的 ip 地址转换成字符串</span>    string srcIp <span class="token operator">=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>ih<span class="token operator">-></span>saddr<span class="token punctuation">.</span>byte1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> <span class="token function">to_string</span><span class="token punctuation">(</span>ih<span class="token operator">-></span>saddr<span class="token punctuation">.</span>byte2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> <span class="token function">to_string</span><span class="token punctuation">(</span>ih<span class="token operator">-></span>saddr<span class="token punctuation">.</span>byte3<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> <span class="token function">to_string</span><span class="token punctuation">(</span>ih<span class="token operator">-></span>saddr<span class="token punctuation">.</span>byte4<span class="token punctuation">)</span><span class="token punctuation">;</span>    string dstIp <span class="token operator">=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>ih<span class="token operator">-></span>daddr<span class="token punctuation">.</span>byte1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> <span class="token function">to_string</span><span class="token punctuation">(</span>ih<span class="token operator">-></span>daddr<span class="token punctuation">.</span>byte2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> <span class="token function">to_string</span><span class="token punctuation">(</span>ih<span class="token operator">-></span>daddr<span class="token punctuation">.</span>byte3<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> <span class="token function">to_string</span><span class="token punctuation">(</span>ih<span class="token operator">-></span>daddr<span class="token punctuation">.</span>byte4<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"src ip  "</span> <span class="token operator">&lt;&lt;</span> srcIp <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"dst ip  "</span> <span class="token operator">&lt;&lt;</span> dstIp <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"========="</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    string SQLString <span class="token operator">=</span> <span class="token string">"insert into test_tb(id, src_ip, dst_ip) values("</span> <span class="token operator">+</span> <span class="token function">to_string</span><span class="token punctuation">(</span><span class="token operator">++</span>id<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", '"</span> <span class="token operator">+</span> srcIp <span class="token operator">+</span> <span class="token string">"', "</span>        <span class="token operator">+</span> <span class="token string">"'"</span> <span class="token operator">+</span> dstIp <span class="token operator">+</span> <span class="token string">"')"</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> SQLString <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 插入数据</span>    <span class="token comment">/*const char* SQL = "insert into test_tb(id, src_ip, dst_ip) values(4, 'qingxiaofeng', 'fsdajfjsad')";    */</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> SQL <span class="token operator">=</span> SQLString<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> Msg <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vspdctomysql<span class="token operator">-></span><span class="token function">InsertData</span><span class="token punctuation">(</span>SQL<span class="token punctuation">,</span> Msg<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"insert success\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里的逻辑是每一次启动这个抓包程序时，会自动清空上一次在数据库中存储的数据，然后再将本次抓取到的数据存放到数据库中。</p><p>之后就是 Pyhton 实现对 ip地址的解析，并将解析好的结果更新到数据库中：</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> mysql<span class="token punctuation">.</span>connector <span class="token keyword">import</span> MySQLConnection<span class="token punctuation">,</span> Error<span class="token keyword">from</span> python_mysql_dbconfig <span class="token keyword">import</span> read_db_config<span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">getJson</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">:</span>    myUrl <span class="token operator">=</span> <span class="token string">'https://ip.useragentinfo.com/json?ip='</span> <span class="token operator">+</span> ip    <span class="token comment"># myUrl = 'http://whois.pconline.com.cn/ipJson.jsp?ip=' + ip + '&amp;json=true'</span>    <span class="token comment"># ip = '40.79.150.121'</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>myUrl<span class="token punctuation">)</span>    <span class="token keyword">return</span> r<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">query_with_fetchall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        dbconfig <span class="token operator">=</span> read_db_config<span class="token punctuation">(</span><span class="token punctuation">)</span>        conn <span class="token operator">=</span> MySQLConnection<span class="token punctuation">(</span><span class="token operator">**</span>dbconfig<span class="token punctuation">)</span>        cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"SELECT * FROM test_tb"</span><span class="token punctuation">)</span>        rows <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Total Row(s):'</span><span class="token punctuation">,</span> cursor<span class="token punctuation">.</span>rowcount<span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> rows<span class="token punctuation">:</span>            <span class="token keyword">if</span> row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">None</span> <span class="token keyword">and</span> row<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">)</span>        <span class="token comment"># print(res)</span>        <span class="token keyword">return</span> res    <span class="token keyword">except</span> Error <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">update_testTb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    cityData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"北京"</span><span class="token punctuation">,</span> <span class="token string">"天津"</span><span class="token punctuation">,</span> <span class="token string">"上海"</span><span class="token punctuation">,</span> <span class="token string">"重庆"</span><span class="token punctuation">,</span> <span class="token string">"石家庄"</span><span class="token punctuation">,</span> <span class="token string">"唐山"</span><span class="token punctuation">,</span> <span class="token string">"秦皇岛"</span><span class="token punctuation">,</span> <span class="token string">"邯 郸"</span><span class="token punctuation">,</span>                <span class="token string">"邢台"</span><span class="token punctuation">,</span> <span class="token string">"保定"</span><span class="token punctuation">,</span> <span class="token string">"张家口"</span><span class="token punctuation">,</span> <span class="token string">"承德"</span><span class="token punctuation">,</span> <span class="token string">"沧州"</span><span class="token punctuation">,</span> <span class="token string">"廊坊"</span><span class="token punctuation">,</span> <span class="token string">"衡水"</span><span class="token punctuation">,</span> <span class="token string">"太原"</span><span class="token punctuation">,</span> <span class="token string">"大同"</span><span class="token punctuation">,</span>                <span class="token string">"阳泉"</span><span class="token punctuation">,</span> <span class="token string">"长治"</span><span class="token punctuation">,</span> <span class="token string">"晋城"</span><span class="token punctuation">,</span> <span class="token string">"朔州"</span><span class="token punctuation">,</span> <span class="token string">"晋中"</span><span class="token punctuation">,</span> <span class="token string">"运城"</span><span class="token punctuation">,</span> <span class="token string">"忻州"</span><span class="token punctuation">,</span> <span class="token string">"临汾"</span><span class="token punctuation">,</span> <span class="token string">"吕梁"</span><span class="token punctuation">,</span>                <span class="token string">"呼和浩特"</span><span class="token punctuation">,</span> <span class="token string">"包头"</span><span class="token punctuation">,</span> <span class="token string">"乌海"</span><span class="token punctuation">,</span> <span class="token string">"赤峰"</span><span class="token punctuation">,</span> <span class="token string">"通辽"</span><span class="token punctuation">,</span> <span class="token string">"鄂尔多斯"</span><span class="token punctuation">,</span> <span class="token string">"呼伦贝尔"</span><span class="token punctuation">,</span> <span class="token string">"巴彦淖尔"</span><span class="token punctuation">,</span>                <span class="token string">"乌兰察布"</span><span class="token punctuation">,</span> <span class="token string">"兴安"</span><span class="token punctuation">,</span> <span class="token string">"锡林郭勒"</span><span class="token punctuation">,</span> <span class="token string">"阿拉善"</span><span class="token punctuation">,</span> <span class="token string">"沈阳"</span><span class="token punctuation">,</span> <span class="token string">"大连"</span><span class="token punctuation">,</span> <span class="token string">"鞍山"</span><span class="token punctuation">,</span> <span class="token string">"抚顺"</span><span class="token punctuation">,</span>                <span class="token string">"本溪"</span><span class="token punctuation">,</span> <span class="token string">"丹东"</span><span class="token punctuation">,</span> <span class="token string">"锦州"</span><span class="token punctuation">,</span> <span class="token string">"营口"</span><span class="token punctuation">,</span> <span class="token string">"阜新"</span><span class="token punctuation">,</span> <span class="token string">"辽阳"</span><span class="token punctuation">,</span> <span class="token string">"盘锦"</span><span class="token punctuation">,</span> <span class="token string">"铁岭"</span><span class="token punctuation">,</span> <span class="token string">"朝阳"</span><span class="token punctuation">,</span>                <span class="token string">"葫芦岛"</span><span class="token punctuation">,</span> <span class="token string">"长春"</span><span class="token punctuation">,</span> <span class="token string">"吉林"</span><span class="token punctuation">,</span> <span class="token string">"四平"</span><span class="token punctuation">,</span> <span class="token string">"辽源"</span><span class="token punctuation">,</span> <span class="token string">"通化"</span><span class="token punctuation">,</span> <span class="token string">"白山"</span><span class="token punctuation">,</span> <span class="token string">"松原"</span><span class="token punctuation">,</span> <span class="token string">"白城"</span><span class="token punctuation">,</span>                <span class="token string">"延边朝鲜族自治"</span><span class="token punctuation">,</span> <span class="token string">"哈尔滨"</span><span class="token punctuation">,</span> <span class="token string">"齐齐哈尔"</span><span class="token punctuation">,</span> <span class="token string">"鸡西"</span><span class="token punctuation">,</span> <span class="token string">"鹤岗"</span><span class="token punctuation">,</span> <span class="token string">"双鸭山"</span><span class="token punctuation">,</span> <span class="token string">"大庆"</span><span class="token punctuation">,</span>                <span class="token string">"伊春"</span><span class="token punctuation">,</span> <span class="token string">"佳木斯"</span><span class="token punctuation">,</span> <span class="token string">"七台河"</span><span class="token punctuation">,</span> <span class="token string">"牡丹江"</span><span class="token punctuation">,</span> <span class="token string">"黑河"</span><span class="token punctuation">,</span> <span class="token string">"绥化"</span><span class="token punctuation">,</span> <span class="token string">"大兴安岭地"</span><span class="token punctuation">,</span> <span class="token string">"南京"</span><span class="token punctuation">,</span>                <span class="token string">"无锡"</span><span class="token punctuation">,</span> <span class="token string">"徐州"</span><span class="token punctuation">,</span> <span class="token string">"常州"</span><span class="token punctuation">,</span> <span class="token string">"苏州"</span><span class="token punctuation">,</span> <span class="token string">"南通"</span><span class="token punctuation">,</span> <span class="token string">"连云港"</span><span class="token punctuation">,</span> <span class="token string">"淮安"</span><span class="token punctuation">,</span> <span class="token string">"盐城"</span><span class="token punctuation">,</span> <span class="token string">"扬州"</span><span class="token punctuation">,</span>                <span class="token string">"镇江"</span><span class="token punctuation">,</span> <span class="token string">"泰州"</span><span class="token punctuation">,</span> <span class="token string">"宿迁"</span><span class="token punctuation">,</span> <span class="token string">"杭州"</span><span class="token punctuation">,</span> <span class="token string">"宁波"</span><span class="token punctuation">,</span> <span class="token string">"温州"</span><span class="token punctuation">,</span> <span class="token string">"嘉兴"</span><span class="token punctuation">,</span> <span class="token string">"湖州"</span><span class="token punctuation">,</span> <span class="token string">"绍兴"</span><span class="token punctuation">,</span>                <span class="token string">"金华"</span><span class="token punctuation">,</span> <span class="token string">"衢州"</span><span class="token punctuation">,</span> <span class="token string">"舟山"</span><span class="token punctuation">,</span> <span class="token string">"台州"</span><span class="token punctuation">,</span> <span class="token string">"丽水"</span><span class="token punctuation">,</span> <span class="token string">"合肥"</span><span class="token punctuation">,</span> <span class="token string">"芜湖"</span><span class="token punctuation">,</span> <span class="token string">"蚌埠"</span><span class="token punctuation">,</span> <span class="token string">"淮南"</span><span class="token punctuation">,</span>                <span class="token string">"马鞍山"</span><span class="token punctuation">,</span> <span class="token string">"淮北"</span><span class="token punctuation">,</span> <span class="token string">"铜陵"</span><span class="token punctuation">,</span> <span class="token string">"安庆"</span><span class="token punctuation">,</span> <span class="token string">"黄山"</span><span class="token punctuation">,</span> <span class="token string">"滁州"</span><span class="token punctuation">,</span> <span class="token string">"阜阳"</span><span class="token punctuation">,</span> <span class="token string">"宿州"</span><span class="token punctuation">,</span> <span class="token string">"巢湖"</span><span class="token punctuation">,</span>                <span class="token string">"六安"</span><span class="token punctuation">,</span> <span class="token string">"亳州"</span><span class="token punctuation">,</span> <span class="token string">"池州"</span><span class="token punctuation">,</span> <span class="token string">"宣城"</span><span class="token punctuation">,</span> <span class="token string">"福州"</span><span class="token punctuation">,</span> <span class="token string">"厦门"</span><span class="token punctuation">,</span> <span class="token string">"莆田"</span><span class="token punctuation">,</span> <span class="token string">"三明"</span><span class="token punctuation">,</span> <span class="token string">"泉州"</span><span class="token punctuation">,</span>                <span class="token string">"漳州"</span><span class="token punctuation">,</span> <span class="token string">"南平"</span><span class="token punctuation">,</span> <span class="token string">"龙岩"</span><span class="token punctuation">,</span> <span class="token string">"宁德"</span><span class="token punctuation">,</span> <span class="token string">"南昌"</span><span class="token punctuation">,</span> <span class="token string">"景德镇"</span><span class="token punctuation">,</span> <span class="token string">"萍乡"</span><span class="token punctuation">,</span> <span class="token string">"九江"</span><span class="token punctuation">,</span> <span class="token string">"新余"</span><span class="token punctuation">,</span>                <span class="token string">"鹰潭"</span><span class="token punctuation">,</span> <span class="token string">"赣州"</span><span class="token punctuation">,</span> <span class="token string">"吉安"</span><span class="token punctuation">,</span> <span class="token string">"宜春"</span><span class="token punctuation">,</span> <span class="token string">"抚州"</span><span class="token punctuation">,</span> <span class="token string">"上饶"</span><span class="token punctuation">,</span> <span class="token string">"济南"</span><span class="token punctuation">,</span> <span class="token string">"青岛"</span><span class="token punctuation">,</span> <span class="token string">"淄博"</span><span class="token punctuation">,</span>                <span class="token string">"枣庄"</span><span class="token punctuation">,</span> <span class="token string">"东营"</span><span class="token punctuation">,</span> <span class="token string">"烟台"</span><span class="token punctuation">,</span> <span class="token string">"潍坊"</span><span class="token punctuation">,</span> <span class="token string">"济宁"</span><span class="token punctuation">,</span> <span class="token string">"泰安"</span><span class="token punctuation">,</span> <span class="token string">"威海"</span><span class="token punctuation">,</span> <span class="token string">"日照"</span><span class="token punctuation">,</span> <span class="token string">"莱芜"</span><span class="token punctuation">,</span>                <span class="token string">"临沂"</span><span class="token punctuation">,</span> <span class="token string">"德州"</span><span class="token punctuation">,</span> <span class="token string">"聊城"</span><span class="token punctuation">,</span> <span class="token string">"滨州"</span><span class="token punctuation">,</span> <span class="token string">"郑州"</span><span class="token punctuation">,</span> <span class="token string">"开封"</span><span class="token punctuation">,</span> <span class="token string">"洛阳"</span><span class="token punctuation">,</span> <span class="token string">"平顶山"</span><span class="token punctuation">,</span> <span class="token string">"安阳"</span><span class="token punctuation">,</span>                <span class="token string">"鹤壁"</span><span class="token punctuation">,</span> <span class="token string">"新乡"</span><span class="token punctuation">,</span> <span class="token string">"焦作"</span><span class="token punctuation">,</span> <span class="token string">"濮阳"</span><span class="token punctuation">,</span> <span class="token string">"许昌"</span><span class="token punctuation">,</span> <span class="token string">"漯河"</span><span class="token punctuation">,</span> <span class="token string">"三门峡"</span><span class="token punctuation">,</span> <span class="token string">"南阳"</span><span class="token punctuation">,</span> <span class="token string">"商丘"</span><span class="token punctuation">,</span>                <span class="token string">"信阳"</span><span class="token punctuation">,</span> <span class="token string">"周口"</span><span class="token punctuation">,</span> <span class="token string">"驻马店"</span><span class="token punctuation">,</span> <span class="token string">"武汉"</span><span class="token punctuation">,</span> <span class="token string">"黄石"</span><span class="token punctuation">,</span> <span class="token string">"十堰"</span><span class="token punctuation">,</span> <span class="token string">"宜昌"</span><span class="token punctuation">,</span> <span class="token string">"襄樊"</span><span class="token punctuation">,</span> <span class="token string">"鄂州"</span><span class="token punctuation">,</span>                <span class="token string">"荆门"</span><span class="token punctuation">,</span> <span class="token string">"孝感"</span><span class="token punctuation">,</span> <span class="token string">"荆州"</span><span class="token punctuation">,</span> <span class="token string">"黄冈"</span><span class="token punctuation">,</span> <span class="token string">"咸宁"</span><span class="token punctuation">,</span> <span class="token string">"随州"</span><span class="token punctuation">,</span> <span class="token string">"恩施土家族苗族自治"</span><span class="token punctuation">,</span> <span class="token string">"长沙"</span><span class="token punctuation">,</span>                <span class="token string">"株洲"</span><span class="token punctuation">,</span> <span class="token string">"湘潭"</span><span class="token punctuation">,</span> <span class="token string">"衡阳"</span><span class="token punctuation">,</span> <span class="token string">"邵阳"</span><span class="token punctuation">,</span> <span class="token string">"岳阳"</span><span class="token punctuation">,</span> <span class="token string">"常德"</span><span class="token punctuation">,</span> <span class="token string">"张家界"</span><span class="token punctuation">,</span> <span class="token string">"益阳"</span><span class="token punctuation">,</span> <span class="token string">"郴州"</span><span class="token punctuation">,</span>                <span class="token string">"永州"</span><span class="token punctuation">,</span> <span class="token string">"怀化"</span><span class="token punctuation">,</span> <span class="token string">"娄底"</span><span class="token punctuation">,</span> <span class="token string">"湘西土家族苗族自治"</span><span class="token punctuation">,</span> <span class="token string">"广州"</span><span class="token punctuation">,</span> <span class="token string">"韶关"</span><span class="token punctuation">,</span> <span class="token string">"深圳"</span><span class="token punctuation">,</span> <span class="token string">"珠海"</span><span class="token punctuation">,</span>                <span class="token string">"汕头"</span><span class="token punctuation">,</span> <span class="token string">"佛山"</span><span class="token punctuation">,</span> <span class="token string">"江门"</span><span class="token punctuation">,</span> <span class="token string">"湛江"</span><span class="token punctuation">,</span> <span class="token string">"茂名"</span><span class="token punctuation">,</span> <span class="token string">"肇庆"</span><span class="token punctuation">,</span> <span class="token string">"惠州"</span><span class="token punctuation">,</span> <span class="token string">"梅州"</span><span class="token punctuation">,</span> <span class="token string">"汕尾"</span><span class="token punctuation">,</span> <span class="token string">"河源"</span><span class="token punctuation">,</span>                <span class="token string">"阳江"</span><span class="token punctuation">,</span> <span class="token string">"清远"</span><span class="token punctuation">,</span> <span class="token string">"东莞"</span><span class="token punctuation">,</span> <span class="token string">"中山"</span><span class="token punctuation">,</span> <span class="token string">"潮州"</span><span class="token punctuation">,</span> <span class="token string">"揭阳"</span><span class="token punctuation">,</span> <span class="token string">"云浮"</span><span class="token punctuation">,</span> <span class="token string">"南宁"</span><span class="token punctuation">,</span> <span class="token string">"柳州"</span><span class="token punctuation">,</span>                <span class="token string">"桂林"</span><span class="token punctuation">,</span> <span class="token string">"梧州"</span><span class="token punctuation">,</span> <span class="token string">"北海"</span><span class="token punctuation">,</span> <span class="token string">"防城港"</span><span class="token punctuation">,</span> <span class="token string">"钦州"</span><span class="token punctuation">,</span> <span class="token string">"贵港"</span><span class="token punctuation">,</span> <span class="token string">"玉林"</span><span class="token punctuation">,</span> <span class="token string">"百色"</span><span class="token punctuation">,</span> <span class="token string">"贺州"</span><span class="token punctuation">,</span>                <span class="token string">"河池"</span><span class="token punctuation">,</span> <span class="token string">"来宾"</span><span class="token punctuation">,</span> <span class="token string">"崇左"</span><span class="token punctuation">,</span> <span class="token string">"海口"</span><span class="token punctuation">,</span> <span class="token string">"三亚"</span><span class="token punctuation">,</span> <span class="token string">"成都"</span><span class="token punctuation">,</span> <span class="token string">"自贡"</span><span class="token punctuation">,</span> <span class="token string">"攀枝花"</span><span class="token punctuation">,</span> <span class="token string">"泸州"</span><span class="token punctuation">,</span>                <span class="token string">"德阳"</span><span class="token punctuation">,</span> <span class="token string">"绵阳"</span><span class="token punctuation">,</span> <span class="token string">"广元"</span><span class="token punctuation">,</span> <span class="token string">"遂宁"</span><span class="token punctuation">,</span> <span class="token string">"内江"</span><span class="token punctuation">,</span> <span class="token string">"乐山"</span><span class="token punctuation">,</span> <span class="token string">"南充"</span><span class="token punctuation">,</span> <span class="token string">"眉山"</span><span class="token punctuation">,</span> <span class="token string">"宜宾"</span><span class="token punctuation">,</span> <span class="token string">"广安"</span><span class="token punctuation">,</span>                <span class="token string">"达州"</span><span class="token punctuation">,</span> <span class="token string">"雅安"</span><span class="token punctuation">,</span> <span class="token string">"巴中"</span><span class="token punctuation">,</span> <span class="token string">"资阳"</span><span class="token punctuation">,</span> <span class="token string">"阿坝藏族羌族自治"</span><span class="token punctuation">,</span> <span class="token string">"甘孜藏族自治"</span><span class="token punctuation">,</span> <span class="token string">"凉山彝族自治"</span><span class="token punctuation">,</span>                <span class="token string">"贵阳"</span><span class="token punctuation">,</span> <span class="token string">"六盘水"</span><span class="token punctuation">,</span> <span class="token string">"遵义"</span><span class="token punctuation">,</span> <span class="token string">"安顺"</span><span class="token punctuation">,</span> <span class="token string">"铜仁地"</span><span class="token punctuation">,</span> <span class="token string">"黔西南布依族苗族自治"</span><span class="token punctuation">,</span> <span class="token string">"毕节地"</span><span class="token punctuation">,</span>                <span class="token string">"黔东南苗族侗族自治"</span><span class="token punctuation">,</span> <span class="token string">"黔南布依族苗族自治"</span><span class="token punctuation">,</span> <span class="token string">"昆明"</span><span class="token punctuation">,</span> <span class="token string">"曲靖"</span><span class="token punctuation">,</span> <span class="token string">"玉溪"</span><span class="token punctuation">,</span> <span class="token string">"保山"</span><span class="token punctuation">,</span>                <span class="token string">"昭通"</span><span class="token punctuation">,</span> <span class="token string">"丽江"</span><span class="token punctuation">,</span> <span class="token string">"临沧"</span><span class="token punctuation">,</span> <span class="token string">"楚雄彝族自治"</span><span class="token punctuation">,</span> <span class="token string">"红河哈尼族彝族自治"</span><span class="token punctuation">,</span> <span class="token string">"文山壮族苗族自治"</span><span class="token punctuation">,</span>                <span class="token string">"西双版纳傣族自治"</span><span class="token punctuation">,</span> <span class="token string">"大理白族自治"</span><span class="token punctuation">,</span> <span class="token string">"德宏傣族景颇族自治"</span><span class="token punctuation">,</span> <span class="token string">"怒江傈僳族自治"</span><span class="token punctuation">,</span>                <span class="token string">"迪庆藏族自治"</span><span class="token punctuation">,</span> <span class="token string">"拉萨"</span><span class="token punctuation">,</span> <span class="token string">"昌都地"</span><span class="token punctuation">,</span> <span class="token string">"山南地"</span><span class="token punctuation">,</span> <span class="token string">"日喀则地"</span><span class="token punctuation">,</span> <span class="token string">"那曲地"</span><span class="token punctuation">,</span> <span class="token string">"阿里地"</span><span class="token punctuation">,</span>                <span class="token string">"林芝地"</span><span class="token punctuation">,</span> <span class="token string">"西安"</span><span class="token punctuation">,</span> <span class="token string">"铜川"</span><span class="token punctuation">,</span> <span class="token string">"宝鸡"</span><span class="token punctuation">,</span> <span class="token string">"咸阳"</span><span class="token punctuation">,</span> <span class="token string">"渭南"</span><span class="token punctuation">,</span> <span class="token string">"延安"</span><span class="token punctuation">,</span> <span class="token string">"汉中"</span><span class="token punctuation">,</span> <span class="token string">"榆林"</span><span class="token punctuation">,</span>                <span class="token string">"安康"</span><span class="token punctuation">,</span> <span class="token string">"商洛"</span><span class="token punctuation">,</span> <span class="token string">"兰州"</span><span class="token punctuation">,</span> <span class="token string">"嘉峪关"</span><span class="token punctuation">,</span> <span class="token string">"金昌"</span><span class="token punctuation">,</span> <span class="token string">"白银"</span><span class="token punctuation">,</span> <span class="token string">"天水"</span><span class="token punctuation">,</span> <span class="token string">"武威"</span><span class="token punctuation">,</span> <span class="token string">"张掖"</span><span class="token punctuation">,</span>                <span class="token string">"平凉"</span><span class="token punctuation">,</span> <span class="token string">"酒泉"</span><span class="token punctuation">,</span> <span class="token string">"庆阳"</span><span class="token punctuation">,</span> <span class="token string">"定西"</span><span class="token punctuation">,</span> <span class="token string">"陇南"</span><span class="token punctuation">,</span> <span class="token string">"临夏回族自治"</span><span class="token punctuation">,</span> <span class="token string">"甘南藏族自治"</span><span class="token punctuation">,</span> <span class="token string">"西宁"</span><span class="token punctuation">,</span>                <span class="token string">"海东地"</span><span class="token punctuation">,</span> <span class="token string">"海北藏族自治"</span><span class="token punctuation">,</span> <span class="token string">"黄南藏族自治"</span><span class="token punctuation">,</span> <span class="token string">"海南藏族自治"</span><span class="token punctuation">,</span> <span class="token string">"果洛藏族自治"</span><span class="token punctuation">,</span>                <span class="token string">"玉树藏族自治"</span><span class="token punctuation">,</span> <span class="token string">"海西蒙古族藏族自治"</span><span class="token punctuation">,</span> <span class="token string">"银川"</span><span class="token punctuation">,</span> <span class="token string">"石嘴山"</span><span class="token punctuation">,</span> <span class="token string">"吴忠"</span><span class="token punctuation">,</span> <span class="token string">"固原"</span><span class="token punctuation">,</span> <span class="token string">"中卫"</span><span class="token punctuation">,</span>                <span class="token string">"乌鲁木齐"</span><span class="token punctuation">,</span> <span class="token string">"克拉玛依"</span><span class="token punctuation">,</span> <span class="token string">"吐鲁番地"</span><span class="token punctuation">,</span> <span class="token string">"哈密地"</span><span class="token punctuation">,</span> <span class="token string">"昌吉回族自治"</span><span class="token punctuation">,</span> <span class="token string">"博尔塔拉蒙古自治"</span><span class="token punctuation">,</span>                <span class="token string">"巴音郭楞蒙古自治"</span><span class="token punctuation">,</span> <span class="token string">"阿克苏地"</span><span class="token punctuation">,</span> <span class="token string">"克孜勒苏柯尔克孜自治"</span><span class="token punctuation">,</span> <span class="token string">"喀什地"</span><span class="token punctuation">,</span> <span class="token string">"和田地"</span><span class="token punctuation">,</span>                <span class="token string">"伊犁哈萨克自治"</span><span class="token punctuation">,</span> <span class="token string">"塔城地"</span><span class="token punctuation">,</span> <span class="token string">"阿勒泰地"</span><span class="token punctuation">,</span> <span class="token string">"仙桃"</span><span class="token punctuation">,</span> <span class="token string">"潜江"</span><span class="token punctuation">,</span> <span class="token string">"天门"</span><span class="token punctuation">,</span> <span class="token string">"神农架林"</span><span class="token punctuation">,</span>                <span class="token string">"五指山"</span><span class="token punctuation">,</span> <span class="token string">"琼海"</span><span class="token punctuation">,</span> <span class="token string">"儋州"</span><span class="token punctuation">,</span> <span class="token string">"文昌"</span><span class="token punctuation">,</span> <span class="token string">"万宁"</span><span class="token punctuation">,</span> <span class="token string">"东方"</span><span class="token punctuation">,</span> <span class="token string">"定安县"</span><span class="token punctuation">,</span> <span class="token string">"屯昌县"</span><span class="token punctuation">,</span> <span class="token string">"澄迈县"</span><span class="token punctuation">,</span>                <span class="token string">"临高县"</span><span class="token punctuation">,</span> <span class="token string">"白沙黎族自治县"</span><span class="token punctuation">,</span> <span class="token string">"昌江黎族自治县"</span><span class="token punctuation">,</span> <span class="token string">"乐东黎族自治县"</span><span class="token punctuation">,</span> <span class="token string">"陵水黎族自治县"</span><span class="token punctuation">,</span>                <span class="token string">"保亭黎族苗族自治县"</span><span class="token punctuation">,</span> <span class="token string">"琼中黎族苗族自治县"</span><span class="token punctuation">,</span> <span class="token string">"石河子"</span><span class="token punctuation">]</span>    <span class="token comment"># read database configuration</span>    db_config <span class="token operator">=</span> read_db_config<span class="token punctuation">(</span><span class="token punctuation">)</span>    toBeProcessedData <span class="token operator">=</span> query_with_fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># prepare query and data</span>    query <span class="token operator">=</span> <span class="token triple-quoted-string string">""" UPDATE test_tb                SET src_loc = %s, dst_loc = %s                WHERE id = %s """</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        conn <span class="token operator">=</span> MySQLConnection<span class="token punctuation">(</span><span class="token operator">**</span>db_config<span class="token punctuation">)</span>        <span class="token comment"># update book title</span>        cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># cursor.execute(query, data)</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> toBeProcessedData<span class="token punctuation">:</span>            rowId <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            srcIp <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            dstIp <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> srcIp <span class="token operator">==</span> <span class="token string">'10.16.80.216'</span><span class="token punctuation">:</span> <span class="token comment"># 这里要替换成本机的 ip</span>                srcLoc <span class="token operator">=</span> <span class="token string">'武汉'</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                srcJsonData <span class="token operator">=</span> getJson<span class="token punctuation">(</span>srcIp<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>srcJsonData<span class="token punctuation">)</span>                srcLoc <span class="token operator">=</span> srcJsonData<span class="token punctuation">[</span><span class="token string">'city'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> dstIp <span class="token operator">==</span> <span class="token string">'10.16.80.216'</span><span class="token punctuation">:</span> <span class="token comment"># 这里要替换成本机的 ip</span>                dstLoc <span class="token operator">=</span> <span class="token string">'武汉'</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                dstJsonData <span class="token operator">=</span> getJson<span class="token punctuation">(</span>dstIp<span class="token punctuation">)</span>                dstLoc <span class="token operator">=</span> dstJsonData<span class="token punctuation">[</span><span class="token string">'city'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> srcLoc <span class="token operator">!=</span> <span class="token string">''</span> <span class="token keyword">and</span> srcLoc <span class="token keyword">not</span> <span class="token keyword">in</span> cityData<span class="token punctuation">:</span>                srcLoc <span class="token operator">=</span> <span class="token string">'海外'</span>            <span class="token keyword">if</span> dstLoc <span class="token operator">!=</span> <span class="token string">''</span> <span class="token keyword">and</span> dstLoc <span class="token keyword">not</span> <span class="token keyword">in</span> cityData<span class="token punctuation">:</span>                dstLoc <span class="token operator">=</span> <span class="token string">'海外'</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>srcLoc <span class="token operator">+</span> dstLoc<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'==========分割线========='</span><span class="token punctuation">)</span>            data <span class="token operator">=</span> <span class="token punctuation">(</span>srcLoc<span class="token punctuation">,</span> dstLoc<span class="token punctuation">,</span> rowId<span class="token punctuation">)</span>            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>query<span class="token punctuation">,</span> data<span class="token punctuation">)</span>            conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># accept the changes</span>        conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Error <span class="token keyword">as</span> error<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        update_testTb<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>再之后，使用 Spring Boot 创建一个 json 接口，主要的逻辑如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 过滤出同时具有 srcLoc 和 dstLoc 并且都是中国城市的数据* * @return* @throws IOException* @throws InterruptedException*/</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/getJson"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TestTb</span><span class="token punctuation">></span></span> <span class="token function">getJsonData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 先从数据库中取出数据</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TestTb</span><span class="token punctuation">></span></span> testTbList <span class="token operator">=</span> testTbService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TestTb</span><span class="token punctuation">></span></span> filtedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 过滤</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TestTb</span> testTb <span class="token operator">:</span> testTbList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>testTb<span class="token punctuation">.</span><span class="token function">getSrcLoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span>                <span class="token operator">&amp;&amp;</span> testTb<span class="token punctuation">.</span><span class="token function">getSrcLoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span>                <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>testTb<span class="token punctuation">.</span><span class="token function">getSrcLoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"海外"</span><span class="token punctuation">)</span>                <span class="token operator">&amp;&amp;</span> testTb<span class="token punctuation">.</span><span class="token function">getDstLoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span>                <span class="token operator">&amp;&amp;</span> testTb<span class="token punctuation">.</span><span class="token function">getDstLoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span>                <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>testTb<span class="token punctuation">.</span><span class="token function">getDstLoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"海外"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            filtedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>testTb<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>testTb<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// System.out.println(filtedList);</span>    <span class="token keyword">return</span> filtedList<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>最后，是前端的逻辑：</p><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getJsonData</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>url <span class="token operator">=</span> <span class="token string">"http://localhost:8080/testTb/getJson"</span><span class="token function">getJsonData</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">jsonData</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// console.log(jsonData);</span>    <span class="token keyword">var</span> geoCoordMap <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string-property property">'北京'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">116.398</span><span class="token punctuation">,</span> <span class="token number">39.9082</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'天津'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.252</span><span class="token punctuation">,</span> <span class="token number">39.1039</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'上海'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">121.476</span><span class="token punctuation">,</span> <span class="token number">31.2244</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'重庆'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">106.548</span><span class="token punctuation">,</span> <span class="token number">29.5549</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'石家庄'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.476</span><span class="token punctuation">,</span> <span class="token number">38.0483</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'唐山'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">118.167</span><span class="token punctuation">,</span> <span class="token number">39.6353</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'秦皇岛'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">119.59</span><span class="token punctuation">,</span> <span class="token number">39.9479</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'邯郸'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.489</span><span class="token punctuation">,</span> <span class="token number">36.5994</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'邢台'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.504</span><span class="token punctuation">,</span> <span class="token number">37.0717</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'保定'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">115.466</span><span class="token punctuation">,</span> <span class="token number">38.8799</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'张家口'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.89</span><span class="token punctuation">,</span> <span class="token number">40.8262</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'承德'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.935</span><span class="token punctuation">,</span> <span class="token number">40.9955</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'沧州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">116.866</span><span class="token punctuation">,</span> <span class="token number">38.3124</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'廊坊'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">116.706</span><span class="token punctuation">,</span> <span class="token number">39.5193</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'衡水'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">115.698</span><span class="token punctuation">,</span> <span class="token number">37.7354</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'太原'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">112.531</span><span class="token punctuation">,</span> <span class="token number">37.8551</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'大同'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.3</span><span class="token punctuation">,</span> <span class="token number">40.0784</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'阳泉'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.58</span><span class="token punctuation">,</span> <span class="token number">37.8567</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'长治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.117</span><span class="token punctuation">,</span> <span class="token number">36.1922</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'晋城'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">112.853</span><span class="token punctuation">,</span> <span class="token number">35.4906</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'朔州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">112.429</span><span class="token punctuation">,</span> <span class="token number">39.3186</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'晋中'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">112.752</span><span class="token punctuation">,</span> <span class="token number">37.6883</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'运城'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">110.998</span><span class="token punctuation">,</span> <span class="token number">35.0315</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'忻州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">112.735</span><span class="token punctuation">,</span> <span class="token number">38.4158</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'临汾'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">111.527</span><span class="token punctuation">,</span> <span class="token number">36.1021</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'吕梁'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">111.13</span><span class="token punctuation">,</span> <span class="token number">37.5203</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'呼和浩特'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">111.667</span><span class="token punctuation">,</span> <span class="token number">40.8083</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'包头'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.871</span><span class="token punctuation">,</span> <span class="token number">40.6617</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'乌海'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">106.814</span><span class="token punctuation">,</span> <span class="token number">39.6692</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'赤峰'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">118.957</span><span class="token punctuation">,</span> <span class="token number">42.2673</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'通辽'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">122.261</span><span class="token punctuation">,</span> <span class="token number">43.6059</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'鄂尔多斯'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">110.003</span><span class="token punctuation">,</span> <span class="token number">39.8223</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'呼伦贝尔'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">119.756</span><span class="token punctuation">,</span> <span class="token number">49.2458</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'巴彦淖尔'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">107.376</span><span class="token punctuation">,</span> <span class="token number">40.7801</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'乌兰察布'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.121</span><span class="token punctuation">,</span> <span class="token number">41.0317</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'兴安'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">122.135</span><span class="token punctuation">,</span> <span class="token number">46.0872</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'锡林郭勒'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">116.099</span><span class="token punctuation">,</span> <span class="token number">43.9455</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'阿拉善'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">105.686</span><span class="token punctuation">,</span> <span class="token number">38.8464</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'沈阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">123.434</span><span class="token punctuation">,</span> <span class="token number">41.8057</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'大连'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">121.617</span><span class="token punctuation">,</span> <span class="token number">38.9143</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'鞍山'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">123.002</span><span class="token punctuation">,</span> <span class="token number">41.1158</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'抚顺'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">123.924</span><span class="token punctuation">,</span> <span class="token number">41.8678</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'本溪'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">123.786</span><span class="token punctuation">,</span> <span class="token number">41.2984</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'丹东'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">124.398</span><span class="token punctuation">,</span> <span class="token number">40.1325</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'锦州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">121.148</span><span class="token punctuation">,</span> <span class="token number">41.1261</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'营口'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">122.25</span><span class="token punctuation">,</span> <span class="token number">40.6716</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'阜新'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">121.654</span><span class="token punctuation">,</span> <span class="token number">42.0143</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'辽阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">123.179</span><span class="token punctuation">,</span> <span class="token number">41.2778</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'盘锦'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">122.071</span><span class="token punctuation">,</span> <span class="token number">41.1188</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'铁岭'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">123.843</span><span class="token punctuation">,</span> <span class="token number">42.2867</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'朝阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">120.45</span><span class="token punctuation">,</span> <span class="token number">41.5735</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'葫芦岛'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">120.856</span><span class="token punctuation">,</span> <span class="token number">40.7481</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'长春'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">125.325</span><span class="token punctuation">,</span> <span class="token number">43.8869</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'吉林'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">126.571</span><span class="token punctuation">,</span> <span class="token number">43.8458</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'四平'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">124.398</span><span class="token punctuation">,</span> <span class="token number">43.1725</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'辽源'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">125.145</span><span class="token punctuation">,</span> <span class="token number">42.9058</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'通化'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">125.94</span><span class="token punctuation">,</span> <span class="token number">41.7292</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'白山'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">126.424</span><span class="token punctuation">,</span> <span class="token number">41.9401</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'松原'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">124.824</span><span class="token punctuation">,</span> <span class="token number">45.1409</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'白城'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">122.838</span><span class="token punctuation">,</span> <span class="token number">45.6204</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'延边朝鲜族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">129.498</span><span class="token punctuation">,</span> <span class="token number">42.8942</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'哈尔滨'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">126.652</span><span class="token punctuation">,</span> <span class="token number">45.7613</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'齐齐哈尔'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">123.937</span><span class="token punctuation">,</span> <span class="token number">47.3416</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'鸡西'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">130.97</span><span class="token punctuation">,</span> <span class="token number">45.2952</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'鹤岗'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">130.279</span><span class="token punctuation">,</span> <span class="token number">47.3311</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'双鸭山'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">131.16</span><span class="token punctuation">,</span> <span class="token number">46.6469</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'大庆'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">125.094</span><span class="token punctuation">,</span> <span class="token number">46.5883</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'伊春'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">128.901</span><span class="token punctuation">,</span> <span class="token number">47.7247</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'佳木斯'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">130.37</span><span class="token punctuation">,</span> <span class="token number">46.8075</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'七台河'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">131.008</span><span class="token punctuation">,</span> <span class="token number">45.7719</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'牡丹江'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">129.623</span><span class="token punctuation">,</span> <span class="token number">44.5848</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'黑河'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">127.501</span><span class="token punctuation">,</span> <span class="token number">50.2479</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'绥化'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">126.99</span><span class="token punctuation">,</span> <span class="token number">46.637</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'大兴安岭地'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">124.397</span><span class="token punctuation">,</span> <span class="token number">51.6737</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'南京'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">118.792</span><span class="token punctuation">,</span> <span class="token number">32.0562</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'无锡'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">120.359</span><span class="token punctuation">,</span> <span class="token number">31.5611</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'徐州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.174</span><span class="token punctuation">,</span> <span class="token number">34.2586</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'常州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">119.975</span><span class="token punctuation">,</span> <span class="token number">31.7698</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'苏州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">120.639</span><span class="token punctuation">,</span> <span class="token number">31.3205</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'南通'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">120.871</span><span class="token punctuation">,</span> <span class="token number">32.0093</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'连云港'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">119.173</span><span class="token punctuation">,</span> <span class="token number">34.5959</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'淮安'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">119.015</span><span class="token punctuation">,</span> <span class="token number">33.612</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'盐城'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">120.139</span><span class="token punctuation">,</span> <span class="token number">33.3794</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'扬州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">119.413</span><span class="token punctuation">,</span> <span class="token number">32.4195</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'镇江'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">119.442</span><span class="token punctuation">,</span> <span class="token number">32.211</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'泰州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">119.921</span><span class="token punctuation">,</span> <span class="token number">32.4617</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'宿迁'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">118.297</span><span class="token punctuation">,</span> <span class="token number">33.9539</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'杭州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">120.173</span><span class="token punctuation">,</span> <span class="token number">30.274</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'宁波'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">121.544</span><span class="token punctuation">,</span> <span class="token number">29.8683</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'温州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">120.638</span><span class="token punctuation">,</span> <span class="token number">28.027</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'嘉兴'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">120.759</span><span class="token punctuation">,</span> <span class="token number">30.7539</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'湖州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">120.097</span><span class="token punctuation">,</span> <span class="token number">30.8706</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'绍兴'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">120.586</span><span class="token punctuation">,</span> <span class="token number">29.9958</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'金华'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">119.652</span><span class="token punctuation">,</span> <span class="token number">29.0896</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'衢州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">118.874</span><span class="token punctuation">,</span> <span class="token number">28.9359</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'舟山'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">122.106</span><span class="token punctuation">,</span> <span class="token number">30.0132</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'台州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">121.456</span><span class="token punctuation">,</span> <span class="token number">28.6708</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'丽水'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">119.917</span><span class="token punctuation">,</span> <span class="token number">28.4522</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'合肥'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.296</span><span class="token punctuation">,</span> <span class="token number">31.8693</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'芜湖'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">118.376</span><span class="token punctuation">,</span> <span class="token number">31.3273</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'蚌埠'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.402</span><span class="token punctuation">,</span> <span class="token number">32.9302</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'淮南'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.0</span><span class="token punctuation">,</span> <span class="token number">32.6383</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'马鞍山'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">118.502</span><span class="token punctuation">,</span> <span class="token number">31.693</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'淮北'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">116.793</span><span class="token punctuation">,</span> <span class="token number">33.969</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'铜陵'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.811</span><span class="token punctuation">,</span> <span class="token number">30.9446</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'安庆'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.051</span><span class="token punctuation">,</span> <span class="token number">30.527</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'黄山'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">118.317</span><span class="token punctuation">,</span> <span class="token number">29.7099</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'滁州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">118.318</span><span class="token punctuation">,</span> <span class="token number">32.3011</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'阜阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">115.82</span><span class="token punctuation">,</span> <span class="token number">32.8971</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'宿州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">116.984</span><span class="token punctuation">,</span> <span class="token number">33.6381</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'巢湖'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.87</span><span class="token punctuation">,</span> <span class="token number">31.6009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'六安'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">116.491</span><span class="token punctuation">,</span> <span class="token number">31.7426</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'亳州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">115.783</span><span class="token punctuation">,</span> <span class="token number">33.8696</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'池州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.489</span><span class="token punctuation">,</span> <span class="token number">30.6557</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'宣城'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">118.755</span><span class="token punctuation">,</span> <span class="token number">30.9469</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'福州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">119.306</span><span class="token punctuation">,</span> <span class="token number">26.0761</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'厦门'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">118.117</span><span class="token punctuation">,</span> <span class="token number">24.4838</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'莆田'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">119.005</span><span class="token punctuation">,</span> <span class="token number">25.434</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'三明'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.64</span><span class="token punctuation">,</span> <span class="token number">26.2681</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'泉州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">118.585</span><span class="token punctuation">,</span> <span class="token number">24.9295</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'漳州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.666</span><span class="token punctuation">,</span> <span class="token number">24.5124</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'南平'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">118.179</span><span class="token punctuation">,</span> <span class="token number">26.6399</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'龙岩'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.033</span><span class="token punctuation">,</span> <span class="token number">25.0946</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'宁德'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">119.537</span><span class="token punctuation">,</span> <span class="token number">26.6528</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'南昌'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">115.897</span><span class="token punctuation">,</span> <span class="token number">28.6788</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'景德镇'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.193</span><span class="token punctuation">,</span> <span class="token number">29.298</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'萍乡'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.852</span><span class="token punctuation">,</span> <span class="token number">27.6227</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'九江'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">115.99</span><span class="token punctuation">,</span> <span class="token number">29.7156</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'新余'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.918</span><span class="token punctuation">,</span> <span class="token number">27.8163</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'鹰潭'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.034</span><span class="token punctuation">,</span> <span class="token number">28.2394</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'赣州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.942</span><span class="token punctuation">,</span> <span class="token number">25.8553</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'吉安'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.987</span><span class="token punctuation">,</span> <span class="token number">27.1136</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'宜春'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.399</span><span class="token punctuation">,</span> <span class="token number">27.8068</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'抚州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">116.363</span><span class="token punctuation">,</span> <span class="token number">27.9793</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'上饶'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.969</span><span class="token punctuation">,</span> <span class="token number">28.4456</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'济南'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.021</span><span class="token punctuation">,</span> <span class="token number">36.6594</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'青岛'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">120.357</span><span class="token punctuation">,</span> <span class="token number">36.084</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'淄博'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">118.05</span><span class="token punctuation">,</span> <span class="token number">36.8063</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'枣庄'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.309</span><span class="token punctuation">,</span> <span class="token number">34.8127</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'东营'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">118.675</span><span class="token punctuation">,</span> <span class="token number">37.4321</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'烟台'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">121.392</span><span class="token punctuation">,</span> <span class="token number">37.5379</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'潍坊'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">119.122</span><span class="token punctuation">,</span> <span class="token number">36.7159</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'济宁'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">116.588</span><span class="token punctuation">,</span> <span class="token number">35.4133</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'泰安'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.121</span><span class="token punctuation">,</span> <span class="token number">36.1813</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'威海'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">122.122</span><span class="token punctuation">,</span> <span class="token number">37.5043</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'日照'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">119.526</span><span class="token punctuation">,</span> <span class="token number">35.4188</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'莱芜'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.679</span><span class="token punctuation">,</span> <span class="token number">36.2136</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'临沂'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">118.346</span><span class="token punctuation">,</span> <span class="token number">35.0538</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'德州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">116.302</span><span class="token punctuation">,</span> <span class="token number">37.4545</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'聊城'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">115.986</span><span class="token punctuation">,</span> <span class="token number">36.4561</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'滨州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">118.016</span><span class="token punctuation">,</span> <span class="token number">37.3832</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'郑州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.663</span><span class="token punctuation">,</span> <span class="token number">34.7619</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'开封'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.34</span><span class="token punctuation">,</span> <span class="token number">34.7893</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'洛阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">112.401</span><span class="token punctuation">,</span> <span class="token number">34.6567</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'平顶山'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.304</span><span class="token punctuation">,</span> <span class="token number">33.7274</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'安阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.346</span><span class="token punctuation">,</span> <span class="token number">36.1112</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'鹤壁'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.297</span><span class="token punctuation">,</span> <span class="token number">35.7481</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'新乡'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.89</span><span class="token punctuation">,</span> <span class="token number">35.3015</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'焦作'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.228</span><span class="token punctuation">,</span> <span class="token number">35.2338</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'濮阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">115.029</span><span class="token punctuation">,</span> <span class="token number">35.7632</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'许昌'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.832</span><span class="token punctuation">,</span> <span class="token number">34.0222</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'漯河'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.036</span><span class="token punctuation">,</span> <span class="token number">33.5673</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'三门峡'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">111.192</span><span class="token punctuation">,</span> <span class="token number">34.7758</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'南阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">112.534</span><span class="token punctuation">,</span> <span class="token number">32.9993</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'商丘'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">115.651</span><span class="token punctuation">,</span> <span class="token number">34.4389</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'信阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.075</span><span class="token punctuation">,</span> <span class="token number">32.124</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'周口'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.653</span><span class="token punctuation">,</span> <span class="token number">33.6166</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'驻马店'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.028</span><span class="token punctuation">,</span> <span class="token number">32.9832</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'武汉'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.281</span><span class="token punctuation">,</span> <span class="token number">30.5781</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'黄石'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">115.06</span><span class="token punctuation">,</span> <span class="token number">30.2063</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'十堰'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">110.782</span><span class="token punctuation">,</span> <span class="token number">32.6553</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'宜昌'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">111.295</span><span class="token punctuation">,</span> <span class="token number">30.7012</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'襄樊'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">112.135</span><span class="token punctuation">,</span> <span class="token number">32.062</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'鄂州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.904</span><span class="token punctuation">,</span> <span class="token number">30.3898</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'荆门'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">112.196</span><span class="token punctuation">,</span> <span class="token number">31.0277</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'孝感'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.919</span><span class="token punctuation">,</span> <span class="token number">30.9246</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'荆州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">112.245</span><span class="token punctuation">,</span> <span class="token number">30.3252</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'黄冈'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.875</span><span class="token punctuation">,</span> <span class="token number">30.4465</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'咸宁'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.336</span><span class="token punctuation">,</span> <span class="token number">29.8337</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'随州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.375</span><span class="token punctuation">,</span> <span class="token number">31.7167</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'恩施土家族苗族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.482</span><span class="token punctuation">,</span> <span class="token number">30.2899</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'长沙'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.009</span><span class="token punctuation">,</span> <span class="token number">28.2085</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'株洲'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.149</span><span class="token punctuation">,</span> <span class="token number">27.8406</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'湘潭'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">112.907</span><span class="token punctuation">,</span> <span class="token number">27.8612</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'衡阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">112.612</span><span class="token punctuation">,</span> <span class="token number">26.8962</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'邵阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">111.467</span><span class="token punctuation">,</span> <span class="token number">27.2371</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'岳阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.108</span><span class="token punctuation">,</span> <span class="token number">29.3663</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'常德'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">111.703</span><span class="token punctuation">,</span> <span class="token number">29.0366</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'张家界'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">110.477</span><span class="token punctuation">,</span> <span class="token number">29.1197</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'益阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">112.356</span><span class="token punctuation">,</span> <span class="token number">28.58</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'郴州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.032</span><span class="token punctuation">,</span> <span class="token number">25.7968</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'永州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">111.608</span><span class="token punctuation">,</span> <span class="token number">26.438</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'怀化'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.977</span><span class="token punctuation">,</span> <span class="token number">27.5484</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'娄底'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">111.998</span><span class="token punctuation">,</span> <span class="token number">27.7259</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'湘西土家族苗族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.601</span><span class="token punctuation">,</span> <span class="token number">27.9472</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'广州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.322</span><span class="token punctuation">,</span> <span class="token number">23.1341</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'韶关'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.598</span><span class="token punctuation">,</span> <span class="token number">24.8024</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'深圳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.056</span><span class="token punctuation">,</span> <span class="token number">22.5421</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'珠海'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.547</span><span class="token punctuation">,</span> <span class="token number">22.2532</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'汕头'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">116.724</span><span class="token punctuation">,</span> <span class="token number">23.3601</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'佛山'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.121</span><span class="token punctuation">,</span> <span class="token number">23.0305</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'江门'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.085</span><span class="token punctuation">,</span> <span class="token number">22.583</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'湛江'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">110.421</span><span class="token punctuation">,</span> <span class="token number">21.1989</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'茂名'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">110.927</span><span class="token punctuation">,</span> <span class="token number">21.6616</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'肇庆'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">112.476</span><span class="token punctuation">,</span> <span class="token number">23.0734</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'惠州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.417</span><span class="token punctuation">,</span> <span class="token number">23.0896</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'梅州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">116.118</span><span class="token punctuation">,</span> <span class="token number">24.2988</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'汕尾'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">115.368</span><span class="token punctuation">,</span> <span class="token number">22.7782</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'河源'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.697</span><span class="token punctuation">,</span> <span class="token number">23.7503</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'阳江'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">111.984</span><span class="token punctuation">,</span> <span class="token number">21.872</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'清远'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.045</span><span class="token punctuation">,</span> <span class="token number">23.6882</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'东莞'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.759</span><span class="token punctuation">,</span> <span class="token number">23.0384</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'中山'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.372</span><span class="token punctuation">,</span> <span class="token number">22.525</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'潮州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">116.642</span><span class="token punctuation">,</span> <span class="token number">23.6713</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'揭阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">116.37</span><span class="token punctuation">,</span> <span class="token number">23.5276</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'云浮'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">112.044</span><span class="token punctuation">,</span> <span class="token number">22.9294</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'南宁'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">108.311</span><span class="token punctuation">,</span> <span class="token number">22.8178</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'柳州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.413</span><span class="token punctuation">,</span> <span class="token number">24.3068</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'桂林'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">110.285</span><span class="token punctuation">,</span> <span class="token number">25.2827</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'梧州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">111.304</span><span class="token punctuation">,</span> <span class="token number">23.5036</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'北海'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.123</span><span class="token punctuation">,</span> <span class="token number">21.4788</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'防城港'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">108.346</span><span class="token punctuation">,</span> <span class="token number">21.6146</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'钦州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">108.609</span><span class="token punctuation">,</span> <span class="token number">21.9509</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'贵港'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.606</span><span class="token punctuation">,</span> <span class="token number">23.0939</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'玉林'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">110.151</span><span class="token punctuation">,</span> <span class="token number">22.6255</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'百色'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">106.621</span><span class="token punctuation">,</span> <span class="token number">23.9018</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'贺州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">111.563</span><span class="token punctuation">,</span> <span class="token number">24.4279</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'河池'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">108.062</span><span class="token punctuation">,</span> <span class="token number">24.6972</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'来宾'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.222</span><span class="token punctuation">,</span> <span class="token number">23.7351</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'崇左'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">107.339</span><span class="token punctuation">,</span> <span class="token number">22.4248</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'海口'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">110.32</span><span class="token punctuation">,</span> <span class="token number">20.0323</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'三亚'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.514</span><span class="token punctuation">,</span> <span class="token number">18.2355</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'成都'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">104.066</span><span class="token punctuation">,</span> <span class="token number">30.6581</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'自贡'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">104.77</span><span class="token punctuation">,</span> <span class="token number">29.3534</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'攀枝花'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">101.699</span><span class="token punctuation">,</span> <span class="token number">26.5733</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'泸州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">105.444</span><span class="token punctuation">,</span> <span class="token number">28.8889</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'德阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">104.388</span><span class="token punctuation">,</span> <span class="token number">31.1368</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'绵阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">104.726</span><span class="token punctuation">,</span> <span class="token number">31.467</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'广元'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">105.834</span><span class="token punctuation">,</span> <span class="token number">32.4384</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'遂宁'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">105.583</span><span class="token punctuation">,</span> <span class="token number">30.5137</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'内江'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">105.063</span><span class="token punctuation">,</span> <span class="token number">29.5825</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'乐山'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">103.746</span><span class="token punctuation">,</span> <span class="token number">29.5866</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'南充'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">106.095</span><span class="token punctuation">,</span> <span class="token number">30.7844</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'眉山'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">103.826</span><span class="token punctuation">,</span> <span class="token number">30.0389</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'宜宾'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">104.621</span><span class="token punctuation">,</span> <span class="token number">28.7705</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'广安'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">106.642</span><span class="token punctuation">,</span> <span class="token number">30.4706</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'达州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">107.488</span><span class="token punctuation">,</span> <span class="token number">31.2126</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'雅安'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">103.015</span><span class="token punctuation">,</span> <span class="token number">29.9937</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'巴中'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">106.755</span><span class="token punctuation">,</span> <span class="token number">31.8574</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'资阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">104.651</span><span class="token punctuation">,</span> <span class="token number">30.1286</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'阿坝藏族羌族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">102.222</span><span class="token punctuation">,</span> <span class="token number">31.8992</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'甘孜藏族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">101.866</span><span class="token punctuation">,</span> <span class="token number">30.1414</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'凉山彝族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">102.242</span><span class="token punctuation">,</span> <span class="token number">27.9095</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'贵阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">106.713</span><span class="token punctuation">,</span> <span class="token number">26.5768</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'六盘水'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">104.873</span><span class="token punctuation">,</span> <span class="token number">26.5821</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'遵义'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">106.931</span><span class="token punctuation">,</span> <span class="token number">27.6926</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'安顺'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">105.927</span><span class="token punctuation">,</span> <span class="token number">26.2573</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'铜仁地'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.188</span><span class="token punctuation">,</span> <span class="token number">27.7184</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'黔西南布依族苗族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">104.895</span><span class="token punctuation">,</span> <span class="token number">25.0935</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'毕节地'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">105.288</span><span class="token punctuation">,</span> <span class="token number">27.3032</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'黔东南苗族侗族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">107.981</span><span class="token punctuation">,</span> <span class="token number">26.5831</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'黔南布依族苗族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">107.511</span><span class="token punctuation">,</span> <span class="token number">26.283</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'昆明'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">102.703</span><span class="token punctuation">,</span> <span class="token number">25.0499</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'曲靖'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">103.784</span><span class="token punctuation">,</span> <span class="token number">25.4913</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'玉溪'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">102.536</span><span class="token punctuation">,</span> <span class="token number">24.3472</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'保山'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">99.1647</span><span class="token punctuation">,</span> <span class="token number">25.1249</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'昭通'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">103.704</span><span class="token punctuation">,</span> <span class="token number">27.3656</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'丽江'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">100.277</span><span class="token punctuation">,</span> <span class="token number">26.9229</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'临沧'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">100.085</span><span class="token punctuation">,</span> <span class="token number">23.8971</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'楚雄彝族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">101.545</span><span class="token punctuation">,</span> <span class="token number">25.0549</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'红河哈尼族彝族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">103.18</span><span class="token punctuation">,</span> <span class="token number">23.4301</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'文山壮族苗族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">104.255</span><span class="token punctuation">,</span> <span class="token number">23.3803</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'西双版纳傣族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">100.799</span><span class="token punctuation">,</span> <span class="token number">22.0109</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'大理白族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">100.222</span><span class="token punctuation">,</span> <span class="token number">25.5842</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'德宏傣族景颇族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">98.5669</span><span class="token punctuation">,</span> <span class="token number">24.4484</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'怒江傈僳族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">98.903</span><span class="token punctuation">,</span> <span class="token number">25.8583</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'迪庆藏族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">99.709</span><span class="token punctuation">,</span> <span class="token number">27.859</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'拉萨'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">91.1189</span><span class="token punctuation">,</span> <span class="token number">29.6553</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'昌都地'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">97.1503</span><span class="token punctuation">,</span> <span class="token number">31.1816</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'山南地'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">91.805</span><span class="token punctuation">,</span> <span class="token number">29.2407</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'日喀则地'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">88.8884</span><span class="token punctuation">,</span> <span class="token number">29.2717</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'那曲地'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">92.0593</span><span class="token punctuation">,</span> <span class="token number">31.4524</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'阿里地'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">80.1027</span><span class="token punctuation">,</span> <span class="token number">32.5517</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'林芝地'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">94.4083</span><span class="token punctuation">,</span> <span class="token number">29.6352</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'西安'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">108.954</span><span class="token punctuation">,</span> <span class="token number">34.2649</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'铜川'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">108.948</span><span class="token punctuation">,</span> <span class="token number">34.9005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'宝鸡'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">107.139</span><span class="token punctuation">,</span> <span class="token number">34.3698</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'咸阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">108.71</span><span class="token punctuation">,</span> <span class="token number">34.3268</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'渭南'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.51</span><span class="token punctuation">,</span> <span class="token number">34.5073</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'延安'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.496</span><span class="token punctuation">,</span> <span class="token number">36.5948</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'汉中'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">107.031</span><span class="token punctuation">,</span> <span class="token number">33.0799</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'榆林'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.754</span><span class="token punctuation">,</span> <span class="token number">38.2954</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'安康'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.031</span><span class="token punctuation">,</span> <span class="token number">32.6917</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'商洛'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.943</span><span class="token punctuation">,</span> <span class="token number">33.8825</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'兰州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">103.835</span><span class="token punctuation">,</span> <span class="token number">36.0599</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'嘉峪关'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">98.2536</span><span class="token punctuation">,</span> <span class="token number">39.8001</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'金昌'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">102.175</span><span class="token punctuation">,</span> <span class="token number">38.4764</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'白银'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">104.151</span><span class="token punctuation">,</span> <span class="token number">36.5506</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'天水'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">105.702</span><span class="token punctuation">,</span> <span class="token number">34.5875</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'武威'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">102.634</span><span class="token punctuation">,</span> <span class="token number">37.9317</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'张掖'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">100.451</span><span class="token punctuation">,</span> <span class="token number">38.931</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'平凉'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">106.725</span><span class="token punctuation">,</span> <span class="token number">35.5097</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'酒泉'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">98.5139</span><span class="token punctuation">,</span> <span class="token number">39.7563</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'庆阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">107.862</span><span class="token punctuation">,</span> <span class="token number">35.9344</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'定西'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">104.622</span><span class="token punctuation">,</span> <span class="token number">35.5852</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'陇南'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">104.934</span><span class="token punctuation">,</span> <span class="token number">33.4695</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'临夏回族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">103.201</span><span class="token punctuation">,</span> <span class="token number">35.5914</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'甘南藏族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">102.899</span><span class="token punctuation">,</span> <span class="token number">34.9854</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'西宁'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">101.777</span><span class="token punctuation">,</span> <span class="token number">36.6172</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'海东地'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">102.086</span><span class="token punctuation">,</span> <span class="token number">36.5092</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'海北藏族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">100.973</span><span class="token punctuation">,</span> <span class="token number">36.9433</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'黄南藏族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">102.027</span><span class="token punctuation">,</span> <span class="token number">35.5399</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'海南藏族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">100.638</span><span class="token punctuation">,</span> <span class="token number">36.3244</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'果洛藏族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">100.295</span><span class="token punctuation">,</span> <span class="token number">34.4775</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'玉树藏族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">97.013</span><span class="token punctuation">,</span> <span class="token number">33.0183</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'海西蒙古族藏族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">97.3632</span><span class="token punctuation">,</span> <span class="token number">37.4214</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'银川'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">106.283</span><span class="token punctuation">,</span> <span class="token number">38.4628</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'石嘴山'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">106.386</span><span class="token punctuation">,</span> <span class="token number">39.0146</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'吴忠'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">106.194</span><span class="token punctuation">,</span> <span class="token number">37.9852</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'固原'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">106.281</span><span class="token punctuation">,</span> <span class="token number">36.011</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'中卫'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">105.686</span><span class="token punctuation">,</span> <span class="token number">37.4829</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'乌鲁木齐'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">87.6168</span><span class="token punctuation">,</span> <span class="token number">43.8235</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'克拉玛依'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">84.9312</span><span class="token punctuation">,</span> <span class="token number">45.5964</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'吐鲁番地'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">89.2107</span><span class="token punctuation">,</span> <span class="token number">43.007</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'哈密地'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">93.5502</span><span class="token punctuation">,</span> <span class="token number">42.8991</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'昌吉回族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">87.9882</span><span class="token punctuation">,</span> <span class="token number">44.0044</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'博尔塔拉蒙古自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">82.0787</span><span class="token punctuation">,</span> <span class="token number">44.9126</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'巴音郭楞蒙古自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">86.1827</span><span class="token punctuation">,</span> <span class="token number">41.8974</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'阿克苏地'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">80.2445</span><span class="token punctuation">,</span> <span class="token number">41.1239</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'克孜勒苏柯尔克孜自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">76.67</span><span class="token punctuation">,</span> <span class="token number">39.8878</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'喀什地'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">75.9994</span><span class="token punctuation">,</span> <span class="token number">39.4657</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'和田地'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">79.7641</span><span class="token punctuation">,</span> <span class="token number">37.2296</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'伊犁哈萨克自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">81.3383</span><span class="token punctuation">,</span> <span class="token number">43.9233</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'塔城地'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">83.0148</span><span class="token punctuation">,</span> <span class="token number">46.7523</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'阿勒泰地'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">88.069</span><span class="token punctuation">,</span> <span class="token number">47.81</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'仙桃'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.453</span><span class="token punctuation">,</span> <span class="token number">30.3646</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'潜江'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">112.894</span><span class="token punctuation">,</span> <span class="token number">30.4198</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'天门'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.164</span><span class="token punctuation">,</span> <span class="token number">30.6513</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'神农架林'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">110.676</span><span class="token punctuation">,</span> <span class="token number">31.7448</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'五指山'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.517</span><span class="token punctuation">,</span> <span class="token number">18.7773</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'琼海'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">110.46</span><span class="token punctuation">,</span> <span class="token number">19.248</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'儋州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.579</span><span class="token punctuation">,</span> <span class="token number">19.5199</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'文昌'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">110.748</span><span class="token punctuation">,</span> <span class="token number">19.6159</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'万宁'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">110.388</span><span class="token punctuation">,</span> <span class="token number">18.8122</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'东方'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">108.693</span><span class="token punctuation">,</span> <span class="token number">19.0807</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'定安县'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">110.447</span><span class="token punctuation">,</span> <span class="token number">19.4883</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'屯昌县'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">110.097</span><span class="token punctuation">,</span> <span class="token number">19.3686</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'澄迈县'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">110.016</span><span class="token punctuation">,</span> <span class="token number">19.7302</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'临高县'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.689</span><span class="token punctuation">,</span> <span class="token number">19.8973</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'白沙黎族自治县'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.44</span><span class="token punctuation">,</span> <span class="token number">19.2375</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'昌江黎族自治县'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.036</span><span class="token punctuation">,</span> <span class="token number">19.3083</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'乐东黎族自治县'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.175</span><span class="token punctuation">,</span> <span class="token number">18.7435</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'陵水黎族自治县'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">110.029</span><span class="token punctuation">,</span> <span class="token number">18.5167</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'保亭黎族苗族自治县'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.7</span><span class="token punctuation">,</span> <span class="token number">18.6263</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'琼中黎族苗族自治县'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.832</span><span class="token punctuation">,</span> <span class="token number">19.0467</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'石河子'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">86.0526</span><span class="token punctuation">,</span> <span class="token number">44.3051</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> WHData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> jsonData<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// console.log(jsonData[i]);</span>        tmp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        tmp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> jsonData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>srcLoc <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tmp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> jsonData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dstLoc<span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        WHData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> planePath <span class="token operator">=</span> <span class="token string">'path://M1705.06,1318.313v-89.254l-319.9-221.799l0.073-208.063c0.521-84.662-26.629-121.796-63.961-121.491c-37.332-0.305-64.482,36.829-63.961,121.491l0.073,208.063l-319.9,221.799v89.254l330.343-157.288l12.238,241.308l-134.449,92.931l0.531,42.034l175.125-42.917l175.125,42.917l0.531-42.034l-134.449-92.931l12.238-241.308L1705.06,1318.313z'</span><span class="token punctuation">;</span>    planePath <span class="token operator">=</span> <span class="token string">"arrow"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> <span class="token function-variable function">convertData</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> dataItem <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> fromCoord <span class="token operator">=</span> geoCoordMap<span class="token punctuation">[</span>dataItem<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> toCoord <span class="token operator">=</span> geoCoordMap<span class="token punctuation">[</span>dataItem<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fromCoord <span class="token operator">&amp;&amp;</span> toCoord<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                    <span class="token literal-property property">coord</span><span class="token operator">:</span> fromCoord                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">coord</span><span class="token operator">:</span> toCoord                <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'#a6c84c'</span><span class="token punctuation">,</span> <span class="token string">'#ffa022'</span><span class="token punctuation">,</span> <span class="token string">'#46bee9'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> series <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Beijing'</span><span class="token punctuation">,</span> WHData<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        series<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'lines'</span><span class="token punctuation">,</span>            <span class="token literal-property property">zlevel</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token literal-property property">effect</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token literal-property property">period</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>                <span class="token literal-property property">trailLength</span><span class="token operator">:</span> <span class="token number">0.7</span><span class="token punctuation">,</span>                <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#fff'</span><span class="token punctuation">,</span>                <span class="token literal-property property">symbolSize</span><span class="token operator">:</span> <span class="token number">3</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">lineStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">normal</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">color</span><span class="token operator">:</span> color<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                    <span class="token literal-property property">curveness</span><span class="token operator">:</span> <span class="token number">0.2</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token function">convertData</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token literal-property property">name</span><span class="token operator">:</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'lines'</span><span class="token punctuation">,</span>                <span class="token literal-property property">zlevel</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>                <span class="token literal-property property">effect</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token literal-property property">period</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>                    <span class="token literal-property property">trailLength</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                    <span class="token literal-property property">symbol</span><span class="token operator">:</span> planePath<span class="token punctuation">,</span>                    <span class="token literal-property property">symbolSize</span><span class="token operator">:</span> <span class="token number">8</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">lineStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">normal</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">color</span><span class="token operator">:</span> color<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>                        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                        <span class="token literal-property property">opacity</span><span class="token operator">:</span> <span class="token number">0.4</span><span class="token punctuation">,</span>                        <span class="token literal-property property">curveness</span><span class="token operator">:</span> <span class="token number">0.2</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token function">convertData</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token literal-property property">name</span><span class="token operator">:</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'effectScatter'</span><span class="token punctuation">,</span>                <span class="token literal-property property">coordinateSystem</span><span class="token operator">:</span> <span class="token string">'geo'</span><span class="token punctuation">,</span>                <span class="token literal-property property">zlevel</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>                <span class="token literal-property property">rippleEffect</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">brushType</span><span class="token operator">:</span> <span class="token string">'stroke'</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">normal</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                        <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token string">'right'</span><span class="token punctuation">,</span>                        <span class="token literal-property property">formatter</span><span class="token operator">:</span> <span class="token string">'&#123;b&#125;'</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token function-variable function">symbolSize</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> val<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">itemStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">normal</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">color</span><span class="token operator">:</span> color<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">data</span><span class="token operator">:</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">dataItem</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">name</span><span class="token operator">:</span> dataItem<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>                        <span class="token literal-property property">value</span><span class="token operator">:</span> geoCoordMap<span class="token punctuation">[</span>dataItem<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>dataItem<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// based ready dom, initialize echarts instance </span>    <span class="token keyword">var</span> chart <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'main'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    option <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">'#404a59'</span><span class="token punctuation">,</span>        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'流量地图'</span><span class="token punctuation">,</span>            <span class="token literal-property property">subtext</span><span class="token operator">:</span> <span class="token string">'数据来自 npcap 实时抓取'</span><span class="token punctuation">,</span>            <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>            <span class="token literal-property property">textStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#fff'</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">tooltip</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">'item'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">legend</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">orient</span><span class="token operator">:</span> <span class="token string">'vertical'</span><span class="token punctuation">,</span>            <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token string">'bottom'</span><span class="token punctuation">,</span>            <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token string">'right'</span><span class="token punctuation">,</span>            <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'Beijing Top10'</span><span class="token punctuation">,</span> <span class="token string">'Shanghai Top10'</span><span class="token punctuation">,</span> <span class="token string">'Canton Top10'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token literal-property property">textStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#fff'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">selectedMode</span><span class="token operator">:</span> <span class="token string">'single'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">geo</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">map</span><span class="token operator">:</span> <span class="token string">'china'</span><span class="token punctuation">,</span>            <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">emphasis</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">false</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">roam</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token literal-property property">itemStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">normal</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">areaColor</span><span class="token operator">:</span> <span class="token string">'#323c48'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">borderColor</span><span class="token operator">:</span> <span class="token string">'#404a59'</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">emphasis</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">areaColor</span><span class="token operator">:</span> <span class="token string">'#2a333d'</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">series</span><span class="token operator">:</span> series    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// Use just the specified configurations and data charts. </span>    chart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>实验其中一次的结果如下：</p><p><img src="https://i.imgur.com/sB9CxoX.png" /></p><p>说明：图中的每一条路径上的箭头数量代表了流量包的数量。</p><h3 id="习题与思考题-1">习题与思考题</h3><p>1、应用WINPCAP能实现哪些网络应用?</p><ul><li>捕获原始数据包。不管这个包是发往本地机，还是其他机器之间的交换包</li><li>在数据包被发送到应用程序之前，通过用户定义的规则过滤</li><li>向网络发送原始数据包</li><li>对网络通信量做出统计</li></ul><p>应用 winpcap 实现的典型应用程序如 WireShark。</p><h3 id="项目源码地址">项目源码地址</h3><p><a href="https://github.com/FanyFull/ComputerNetworkExperiment"class="uri">https://github.com/FanyFull/ComputerNetworkExperiment</a></p><hr /><p>参考：</p><p>1、<ahref="https://www.reddit.com/r/ccna/comments/7mh86d/what_does_protocol_control_information_means/"class="uri">https://www.reddit.com/r/ccna/comments/7mh86d/what_does_protocol_control_information_means/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>实验报告</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo 执行 hexo g 产生 YAMLException: end of the stream or a document separator is expected 问题解决</title>
    <link href="/2022/06/29/hexo-%E6%89%A7%E8%A1%8C-hexo-g-%E4%BA%A7%E7%94%9F-YAMLException-end-of-the-stream-or-a-document-separator-is-expected-%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <url>/2022/06/29/hexo-%E6%89%A7%E8%A1%8C-hexo-g-%E4%BA%A7%E7%94%9F-YAMLException-end-of-the-stream-or-a-document-separator-is-expected-%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<p>其实就是少了头部标注文件：</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token punctuation">></span><span class="token punctuation">-</span>  <span class="token key atrule">hexo 执行 hexo g 产生 YAMLException</span><span class="token punctuation">:</span> end of the stream or a document separator is  expected 问题解决<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2022-06-29 16:00:28</span><span class="token key atrule">tags</span><span class="token punctuation">:</span><span class="token key atrule">categories</span><span class="token punctuation">:</span><span class="token key atrule">index_img</span><span class="token punctuation">:</span><span class="token key atrule">banner_img</span><span class="token punctuation">:</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>把这个头部标注文件加上就可以了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>bugs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 后端传 Long 值到前端时精度丢失问题</title>
    <link href="/2022/06/28/Java-%E5%90%8E%E7%AB%AF%E4%BC%A0-Long-%E5%80%BC%E5%88%B0%E5%89%8D%E7%AB%AF%E6%97%B6%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/"/>
    <url>/2022/06/28/Java-%E5%90%8E%E7%AB%AF%E4%BC%A0-Long-%E5%80%BC%E5%88%B0%E5%89%8D%E7%AB%AF%E6%97%B6%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>后端的值传递到前端最后会丢失一些精度。</p><p>问题出现的场景是我在做一个简单的学生管理系统时遇到的，</p><p>前端需要使用到的数据：</p><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 班级选中</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#recipient-grade option'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> grade <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>grade <span class="token operator">==</span> student<span class="token punctuation">.</span>grade<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"selected"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>后端传过来的数据 Grade 类的 <code>id</code> 是 <code>Long</code>类型，采用数据库的雪花算法生成，传递到前端时，js的数字类型接收时会丢失一些精度，因为 js的数字类型不够所以就出现了这样的问题。</p><p>然后，这个问题我觉得出现得也算比较早了，解决方案也比较成熟了，我觉得最简单的解决方案就是给实体类的属性加一个相关的注解：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@JsonSerialize</span><span class="token punctuation">(</span>using <span class="token operator">=</span> <span class="token class-name">ToStringSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>引用的包为：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">JsonSerialize</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ser<span class="token punctuation">.</span>std<span class="token punctuation">.</span></span><span class="token class-name">ToStringSerializer</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><hr /><p>参考：<ahref="https://blog.csdn.net/u010398771/article/details/103520893"class="uri">https://blog.csdn.net/u010398771/article/details/103520893</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VS2022 C++ 连接 MySQL8</title>
    <link href="/2022/06/20/VS2022-C-%E8%BF%9E%E6%8E%A5-MySQL8/"/>
    <url>/2022/06/20/VS2022-C-%E8%BF%9E%E6%8E%A5-MySQL8/</url>
    
    <content type="html"><![CDATA[<p>前置要求：</p><p>下载安装 VS2022，MySQL8。</p><p>然后，配置 VS 环境。</p><p>之后，就是把相关的头文件和库目录添加到配置中：</p><p><img src="https://i.imgur.com/D06EaWZ.png" /></p><p><img src="https://i.imgur.com/aPwSR82.png" /></p><p><img src="https://i.imgur.com/Dxi3Bfu.png" /></p><p><img src="https://i.imgur.com/iaOXL9h.png" /></p><p>之后，还要将 libmysql.lib 文件添加到项目的根目录下：</p><p><img src="https://i.imgur.com/1ait2E8.png" /></p><p><img src="https://i.imgur.com/i2HVfUF.png" /></p><p>然后，我们可以写一个简单的查询来测试一下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mysql.h></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//#pragma comment(lib,"libmysql.lib")</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">const</span> <span class="token keyword">char</span> user<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>         <span class="token comment">//username</span><span class="token keyword">const</span> <span class="token keyword">char</span> pswd<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"lf123456"</span><span class="token punctuation">;</span>     <span class="token comment">//password</span><span class="token keyword">const</span> <span class="token keyword">char</span> host<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"localhost"</span><span class="token punctuation">;</span>    <span class="token comment">//or"127.0.0.1"</span><span class="token keyword">const</span> <span class="token keyword">char</span> database<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"computer_network"</span><span class="token punctuation">;</span>       <span class="token comment">//database   //有相应的数据库</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">3306</span><span class="token punctuation">;</span>           <span class="token comment">//server port        </span>MYSQL myCont<span class="token punctuation">;</span>MYSQL_RES<span class="token operator">*</span> result <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>MYSQL_ROW sql_row<span class="token punctuation">;</span>MYSQL_FIELD<span class="token operator">*</span> fd<span class="token punctuation">;</span><span class="token keyword">char</span> column<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> res<span class="token punctuation">;</span><span class="token function">mysql_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myCont<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//auto ret = mysql_real_connect(&amp;myCont, host, user, pswd, database, port, NULL, 0);</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysql_real_connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myCont<span class="token punctuation">,</span> host<span class="token punctuation">,</span> user<span class="token punctuation">,</span> pswd<span class="token punctuation">,</span> database<span class="token punctuation">,</span> port<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"connect succeed!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myCont<span class="token punctuation">,</span> <span class="token string">"SET NAMES GBK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置编码格式,否则在cmd下无法显示中文</span>res <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myCont<span class="token punctuation">,</span> <span class="token string">"select * from test_tb limit 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查询    //database下有相应的表才能成功</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>result <span class="token operator">=</span> <span class="token function">mysql_store_result</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myCont<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//保存查询到的数据到result</span><span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"number of result: "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token function">mysql_num_rows</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> fd <span class="token operator">=</span> <span class="token function">mysql_fetch_field</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//获取列名</span><span class="token punctuation">&#123;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>column<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> fd<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>j <span class="token operator">=</span> <span class="token function">mysql_num_fields</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\t"</span><span class="token punctuation">,</span> column<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>sql_row <span class="token operator">=</span> <span class="token function">mysql_fetch_row</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//获取具体的数据</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> sql_row<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"query sql failed!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"connect failed!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token function">mysql_free_result</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放结果资源</span><span class="token function">mysql_close</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myCont<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//断开连接</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>输出结果：</p><p><img src="https://i.imgur.com/m4ryib2.png" /></p><p>数据库中的数据：</p><p><img src="https://i.imgur.com/gxNwI5q.png" /></p>]]></content>
    
    
    
    <tags>
      
      <tag>环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络上机实验三</title>
    <link href="/2022/06/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C%E4%B8%89/"/>
    <url>/2022/06/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C%E4%B8%89/</url>
    
    <content type="html"><![CDATA[<h1 id="协议分析程序的编写">协议分析程序的编写</h1><h2 id="实验目的">实验目的</h2><ol type="1"><li><p>目的：分析IP协议，统计流量。大家可以把流量计做成流量地图，显示不同地点间数据实时发送的量，比如武汉到北京的数据包发送的数据量。可以用echart画地图，用whois获取IP地址的所属地。</p></li><li><p>任务：根据IP协议，解析每个数据包的PCI，并对不同IP进行流量统计。</p></li><li><p>任务的说明：</p><ul><li>实现的软件能显示每个包的PCI。</li><li>能显示每个IP地址的流量，即显示接收包的数量。</li></ul></li></ol><h2 id="实验原理">实验原理</h2><p>首先解释一下 PCI 的具体含义：</p><p>使用分层网络方法，每一层都会“封装”从其上一层向下传递的数据，同时添加自己的信息。然后，该层会将新的PDU 向下传递到下一层（或者一旦您到达第 1层，就将其通过物理介质发送）。一旦到达另一端，则采取相反的路径；每一层查看与其相关的标头/尾标，处理它们，并将有效负载向上传递到下一层。每个封装级别的具体信息取决于协议。例如，TCP将添加源端口和目标端口、校验和、序列/确认号以及其他一些东西。 IP添加源/目标地址、数据包长度和其他一些内容。以太网将添加源/目标MAC、EtherType、FCS 等。</p><p>然后就是利用实验二中使用的 npcap 进行抓包。这里主要是抓取 TCP的数据包，然后将抓取到的每一个数据包解析之后，将它们的源 ip 和目标 ip都存放到 MySQL 数据库中。然后使用 Python 调用解析 ip归属地的接口，将每一个 ip的归属地解析好，然后更新数据库中的相关字段。</p><p>之后使用 Spring Boot 搭建一个简单的后台接口，主要是给前端网页提供json 数据。</p><p>前端主要使用 echarts 来绘图，绘图所需要的数据就来自上面 Spring Boot提供的 json 数据接口。这样就可以实时地绘制我们所需的流量地图了。</p><h2 id="实验环境">实验环境</h2><p>系统：Windows 10 家庭中文版 21H2</p><p>Visual Studio 版本：Visual Studio 2022</p><p>Npcap 版本：1.60</p><p>Npcap SDK 版本：1.12</p><p><img src="https://i.imgur.com/Rc4xA1K.png" /></p><p>MySQL 版本：8.0.28</p><p>jdk 版本：openjdk version "17.0.2"</p><p>Python 版本：3.10.4</p><p>echart 版本：</p><h2 id="实验内容">实验内容</h2><p>分析IP协议，统计流量。把流量计做成流量地图，显示不同地点间数据实时发送的量，比如武汉到北京的数据包发送的数据量。用echart画地图，用whois获取IP地址的所属地。</p><h2 id="实验过程">实验过程</h2><p>首先，编写 C++程序进行抓包，这个在实验二中已经实现，这里就不再赘述。</p><p>这里主要介绍一下将捕获到的源 ip 地址和目标 ip地址存放到数据库中的过程。</p><p>首先，配置环境，步骤如下：</p><p><img src="https://i.imgur.com/D06EaWZ.png" /></p><p><img src="https://i.imgur.com/aPwSR82.png" /></p><p><img src="https://i.imgur.com/Dxi3Bfu.png" /></p><p><img src="https://i.imgur.com/iaOXL9h.png" /></p><p>之后，还要将 libmysql.lib 文件添加到项目的根目录下：</p><p><img src="https://i.imgur.com/1ait2E8.png" /></p><p><img src="https://i.imgur.com/i2HVfUF.png" /></p><p>然后我们写一个 C++ 的类，从而实现对数据库中数据进行增删改查：</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//#include "stdafx.h"</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"DBMySQL.h"</span></span><span class="token class-name">VspdCToMySQL</span><span class="token double-colon punctuation">::</span><span class="token function">VspdCToMySQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name">VspdCToMySQL</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">VspdCToMySQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//初始化数据</span><span class="token keyword">int</span> <span class="token class-name">VspdCToMySQL</span><span class="token double-colon punctuation">::</span><span class="token function">ConnMySQL</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> host<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> port<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> Db<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> user<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> passwd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token keyword">const</span> charset<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> Msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysql_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mysql<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Msg <span class="token operator">=</span> <span class="token string">"inital mysql handle error"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysql_real_connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mysql<span class="token punctuation">,</span> host<span class="token punctuation">,</span> user<span class="token punctuation">,</span> passwd<span class="token punctuation">,</span> Db<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Msg <span class="token operator">=</span> <span class="token string">"Failed to connect to database: Error"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysql_set_character_set</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mysql<span class="token punctuation">,</span> charset<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Msg <span class="token operator">=</span> <span class="token string">"mysql_set_character_set Error"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//查询数据</span>string <span class="token class-name">VspdCToMySQL</span><span class="token double-colon punctuation">::</span><span class="token function">SelectData</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> SQL<span class="token punctuation">,</span> <span class="token keyword">int</span> Cnum<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> Msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>MYSQL_ROW m_row<span class="token punctuation">;</span>MYSQL_RES<span class="token operator">*</span> m_res<span class="token punctuation">;</span><span class="token keyword">char</span> sql<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> SQL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> rnum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> rg <span class="token operator">=</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token comment">//行隔开</span><span class="token comment">// char rg='\r';</span><span class="token keyword">char</span> cg <span class="token operator">=</span> <span class="token char">'\t'</span><span class="token punctuation">;</span><span class="token comment">//字段隔开</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mysql<span class="token punctuation">,</span> sql<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Msg <span class="token operator">=</span> <span class="token string">"select ps_info Error"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>m_res <span class="token operator">=</span> <span class="token function">mysql_store_result</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mysql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>m_res <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Msg <span class="token operator">=</span> <span class="token string">"select username Error"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>string <span class="token function">str</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>m_row <span class="token operator">=</span> <span class="token function">mysql_fetch_row</span><span class="token punctuation">(</span>m_res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Cnum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>str <span class="token operator">+=</span> m_row<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>str <span class="token operator">+=</span> cg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>str <span class="token operator">+=</span> rg<span class="token punctuation">;</span>rnum<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">mysql_free_result</span><span class="token punctuation">(</span>m_res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//插入数据</span><span class="token keyword">int</span> <span class="token class-name">VspdCToMySQL</span><span class="token double-colon punctuation">::</span><span class="token function">InsertData</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> SQL<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> Msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> sql<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> SQL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mysql<span class="token punctuation">,</span> sql<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Msg <span class="token operator">=</span> <span class="token string">"Insert Data Error"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//更换数据</span><span class="token keyword">int</span> <span class="token class-name">VspdCToMySQL</span><span class="token double-colon punctuation">::</span><span class="token function">ReplaceData</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> SQL<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> Msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> sql<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> SQL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mysql<span class="token punctuation">,</span> sql<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Msg <span class="token operator">=</span> <span class="token string">"Replace Data Error"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//更新数据</span><span class="token keyword">int</span> <span class="token class-name">VspdCToMySQL</span><span class="token double-colon punctuation">::</span><span class="token function">UpdateData</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> SQL<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> Msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> sql<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> SQL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mysql<span class="token punctuation">,</span> sql<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Msg <span class="token operator">=</span> <span class="token string">"Update Data Error"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//删除数据</span><span class="token keyword">int</span> <span class="token class-name">VspdCToMySQL</span><span class="token double-colon punctuation">::</span><span class="token function">DeleteData</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> SQL<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> Msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> sql<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> SQL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mysql<span class="token punctuation">,</span> sql<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Msg <span class="token operator">=</span> <span class="token string">"Delete Data error"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//调用数据库存储过程</span><span class="token keyword">int</span> <span class="token class-name">VspdCToMySQL</span><span class="token double-colon punctuation">::</span><span class="token function">CallProcedure</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> SQL<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> Msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> sql<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> SQL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mysql<span class="token punctuation">,</span> sql<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Msg <span class="token operator">=</span> <span class="token string">"Call Procedure error"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//关闭数据库连接</span><span class="token keyword">void</span> <span class="token class-name">VspdCToMySQL</span><span class="token double-colon punctuation">::</span><span class="token function">CloseMySQLConn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">mysql_close</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mysql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"disconnect database\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>然后在抓包程序的回调函数中增加对数据库的操作即可：</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* Callback function invoked by libpcap for every incoming packet */</span><span class="token keyword">void</span> <span class="token function">packet_handler</span><span class="token punctuation">(</span>u_char<span class="token operator">*</span> param<span class="token punctuation">,</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">pcap_pkthdr</span><span class="token operator">*</span> header<span class="token punctuation">,</span>    <span class="token keyword">const</span> u_char<span class="token operator">*</span> pkt_data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">tm</span> ltime<span class="token punctuation">;</span>    <span class="token keyword">char</span> timestr<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    ip_header<span class="token operator">*</span> ih<span class="token punctuation">;</span>    udp_header<span class="token operator">*</span> uh<span class="token punctuation">;</span>    u_int ip_len<span class="token punctuation">;</span>    u_short sport<span class="token punctuation">,</span> dport<span class="token punctuation">;</span>    time_t local_tv_sec<span class="token punctuation">;</span>    <span class="token comment">/*     * Unused variable     */</span>    <span class="token punctuation">(</span>VOID<span class="token punctuation">)</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* convert the timestamp to readable format */</span>    local_tv_sec <span class="token operator">=</span> header<span class="token operator">-></span>ts<span class="token punctuation">.</span>tv_sec<span class="token punctuation">;</span>    <span class="token function">localtime_s</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ltime<span class="token punctuation">,</span> <span class="token operator">&amp;</span>local_tv_sec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strftime</span><span class="token punctuation">(</span>timestr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> timestr<span class="token punctuation">,</span> <span class="token string">"%H:%M:%S"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ltime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* print timestamp and length of the packet */</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s.%.6d len:%d "</span><span class="token punctuation">,</span> timestr<span class="token punctuation">,</span> header<span class="token operator">-></span>ts<span class="token punctuation">.</span>tv_usec<span class="token punctuation">,</span> header<span class="token operator">-></span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* retireve the position of the ip header */</span>    ih <span class="token operator">=</span> <span class="token punctuation">(</span>ip_header<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>pkt_data <span class="token operator">+</span>        <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//length of ethernet header</span>      <span class="token comment">/* retireve the position of the udp header */</span>    ip_len <span class="token operator">=</span> <span class="token punctuation">(</span>ih<span class="token operator">-></span>ver_ihl <span class="token operator">&amp;</span> <span class="token number">0xf</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>    uh <span class="token operator">=</span> <span class="token punctuation">(</span>udp_header<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>u_char<span class="token operator">*</span><span class="token punctuation">)</span>ih <span class="token operator">+</span> ip_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* convert from network byte order to host byte order */</span>    sport <span class="token operator">=</span> <span class="token function">ntohs</span><span class="token punctuation">(</span>uh<span class="token operator">-></span>sport<span class="token punctuation">)</span><span class="token punctuation">;</span>    dport <span class="token operator">=</span> <span class="token function">ntohs</span><span class="token punctuation">(</span>uh<span class="token operator">-></span>dport<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* print ip addresses and udp ports */</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d.%d.%d.%d.%d -> %d.%d.%d.%d.%d\n"</span><span class="token punctuation">,</span>        ih<span class="token operator">-></span>saddr<span class="token punctuation">.</span>byte1<span class="token punctuation">,</span>        ih<span class="token operator">-></span>saddr<span class="token punctuation">.</span>byte2<span class="token punctuation">,</span>        ih<span class="token operator">-></span>saddr<span class="token punctuation">.</span>byte3<span class="token punctuation">,</span>        ih<span class="token operator">-></span>saddr<span class="token punctuation">.</span>byte4<span class="token punctuation">,</span>        sport<span class="token punctuation">,</span>        ih<span class="token operator">-></span>daddr<span class="token punctuation">.</span>byte1<span class="token punctuation">,</span>        ih<span class="token operator">-></span>daddr<span class="token punctuation">.</span>byte2<span class="token punctuation">,</span>        ih<span class="token operator">-></span>daddr<span class="token punctuation">.</span>byte3<span class="token punctuation">,</span>        ih<span class="token operator">-></span>daddr<span class="token punctuation">.</span>byte4<span class="token punctuation">,</span>        dport<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将源 ip 地址和目的 ip 地址转换成字符串</span>    string srcIp <span class="token operator">=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>ih<span class="token operator">-></span>saddr<span class="token punctuation">.</span>byte1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> <span class="token function">to_string</span><span class="token punctuation">(</span>ih<span class="token operator">-></span>saddr<span class="token punctuation">.</span>byte2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> <span class="token function">to_string</span><span class="token punctuation">(</span>ih<span class="token operator">-></span>saddr<span class="token punctuation">.</span>byte3<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> <span class="token function">to_string</span><span class="token punctuation">(</span>ih<span class="token operator">-></span>saddr<span class="token punctuation">.</span>byte4<span class="token punctuation">)</span><span class="token punctuation">;</span>    string dstIp <span class="token operator">=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>ih<span class="token operator">-></span>daddr<span class="token punctuation">.</span>byte1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> <span class="token function">to_string</span><span class="token punctuation">(</span>ih<span class="token operator">-></span>daddr<span class="token punctuation">.</span>byte2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> <span class="token function">to_string</span><span class="token punctuation">(</span>ih<span class="token operator">-></span>daddr<span class="token punctuation">.</span>byte3<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> <span class="token function">to_string</span><span class="token punctuation">(</span>ih<span class="token operator">-></span>daddr<span class="token punctuation">.</span>byte4<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"src ip  "</span> <span class="token operator">&lt;&lt;</span> srcIp <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"dst ip  "</span> <span class="token operator">&lt;&lt;</span> dstIp <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"========="</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    string SQLString <span class="token operator">=</span> <span class="token string">"insert into test_tb(id, src_ip, dst_ip) values("</span> <span class="token operator">+</span> <span class="token function">to_string</span><span class="token punctuation">(</span><span class="token operator">++</span>id<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", '"</span> <span class="token operator">+</span> srcIp <span class="token operator">+</span> <span class="token string">"', "</span>        <span class="token operator">+</span> <span class="token string">"'"</span> <span class="token operator">+</span> dstIp <span class="token operator">+</span> <span class="token string">"')"</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> SQLString <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 插入数据</span>    <span class="token comment">/*const char* SQL = "insert into test_tb(id, src_ip, dst_ip) values(4, 'qingxiaofeng', 'fsdajfjsad')";    */</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> SQL <span class="token operator">=</span> SQLString<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> Msg <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vspdctomysql<span class="token operator">-></span><span class="token function">InsertData</span><span class="token punctuation">(</span>SQL<span class="token punctuation">,</span> Msg<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"insert success\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里的逻辑是每一次启动这个抓包程序时，会自动清空上一次在数据库中存储的数据，然后再将本次抓取到的数据存放到数据库中。</p><p>之后就是 Pyhton 实现对 ip地址的解析，并将解析好的结果更新到数据库中：</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> mysql<span class="token punctuation">.</span>connector <span class="token keyword">import</span> MySQLConnection<span class="token punctuation">,</span> Error<span class="token keyword">from</span> python_mysql_dbconfig <span class="token keyword">import</span> read_db_config<span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">getJson</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">:</span>    myUrl <span class="token operator">=</span> <span class="token string">'https://ip.useragentinfo.com/json?ip='</span> <span class="token operator">+</span> ip    <span class="token comment"># myUrl = 'http://whois.pconline.com.cn/ipJson.jsp?ip=' + ip + '&amp;json=true'</span>    <span class="token comment"># ip = '40.79.150.121'</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>myUrl<span class="token punctuation">)</span>    <span class="token keyword">return</span> r<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">query_with_fetchall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        dbconfig <span class="token operator">=</span> read_db_config<span class="token punctuation">(</span><span class="token punctuation">)</span>        conn <span class="token operator">=</span> MySQLConnection<span class="token punctuation">(</span><span class="token operator">**</span>dbconfig<span class="token punctuation">)</span>        cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"SELECT * FROM test_tb"</span><span class="token punctuation">)</span>        rows <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Total Row(s):'</span><span class="token punctuation">,</span> cursor<span class="token punctuation">.</span>rowcount<span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> rows<span class="token punctuation">:</span>            <span class="token keyword">if</span> row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">None</span> <span class="token keyword">and</span> row<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">)</span>        <span class="token comment"># print(res)</span>        <span class="token keyword">return</span> res    <span class="token keyword">except</span> Error <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">update_testTb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    cityData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"北京"</span><span class="token punctuation">,</span> <span class="token string">"天津"</span><span class="token punctuation">,</span> <span class="token string">"上海"</span><span class="token punctuation">,</span> <span class="token string">"重庆"</span><span class="token punctuation">,</span> <span class="token string">"石家庄"</span><span class="token punctuation">,</span> <span class="token string">"唐山"</span><span class="token punctuation">,</span> <span class="token string">"秦皇岛"</span><span class="token punctuation">,</span> <span class="token string">"邯 郸"</span><span class="token punctuation">,</span>                <span class="token string">"邢台"</span><span class="token punctuation">,</span> <span class="token string">"保定"</span><span class="token punctuation">,</span> <span class="token string">"张家口"</span><span class="token punctuation">,</span> <span class="token string">"承德"</span><span class="token punctuation">,</span> <span class="token string">"沧州"</span><span class="token punctuation">,</span> <span class="token string">"廊坊"</span><span class="token punctuation">,</span> <span class="token string">"衡水"</span><span class="token punctuation">,</span> <span class="token string">"太原"</span><span class="token punctuation">,</span> <span class="token string">"大同"</span><span class="token punctuation">,</span>                <span class="token string">"阳泉"</span><span class="token punctuation">,</span> <span class="token string">"长治"</span><span class="token punctuation">,</span> <span class="token string">"晋城"</span><span class="token punctuation">,</span> <span class="token string">"朔州"</span><span class="token punctuation">,</span> <span class="token string">"晋中"</span><span class="token punctuation">,</span> <span class="token string">"运城"</span><span class="token punctuation">,</span> <span class="token string">"忻州"</span><span class="token punctuation">,</span> <span class="token string">"临汾"</span><span class="token punctuation">,</span> <span class="token string">"吕梁"</span><span class="token punctuation">,</span>                <span class="token string">"呼和浩特"</span><span class="token punctuation">,</span> <span class="token string">"包头"</span><span class="token punctuation">,</span> <span class="token string">"乌海"</span><span class="token punctuation">,</span> <span class="token string">"赤峰"</span><span class="token punctuation">,</span> <span class="token string">"通辽"</span><span class="token punctuation">,</span> <span class="token string">"鄂尔多斯"</span><span class="token punctuation">,</span> <span class="token string">"呼伦贝尔"</span><span class="token punctuation">,</span> <span class="token string">"巴彦淖尔"</span><span class="token punctuation">,</span>                <span class="token string">"乌兰察布"</span><span class="token punctuation">,</span> <span class="token string">"兴安"</span><span class="token punctuation">,</span> <span class="token string">"锡林郭勒"</span><span class="token punctuation">,</span> <span class="token string">"阿拉善"</span><span class="token punctuation">,</span> <span class="token string">"沈阳"</span><span class="token punctuation">,</span> <span class="token string">"大连"</span><span class="token punctuation">,</span> <span class="token string">"鞍山"</span><span class="token punctuation">,</span> <span class="token string">"抚顺"</span><span class="token punctuation">,</span>                <span class="token string">"本溪"</span><span class="token punctuation">,</span> <span class="token string">"丹东"</span><span class="token punctuation">,</span> <span class="token string">"锦州"</span><span class="token punctuation">,</span> <span class="token string">"营口"</span><span class="token punctuation">,</span> <span class="token string">"阜新"</span><span class="token punctuation">,</span> <span class="token string">"辽阳"</span><span class="token punctuation">,</span> <span class="token string">"盘锦"</span><span class="token punctuation">,</span> <span class="token string">"铁岭"</span><span class="token punctuation">,</span> <span class="token string">"朝阳"</span><span class="token punctuation">,</span>                <span class="token string">"葫芦岛"</span><span class="token punctuation">,</span> <span class="token string">"长春"</span><span class="token punctuation">,</span> <span class="token string">"吉林"</span><span class="token punctuation">,</span> <span class="token string">"四平"</span><span class="token punctuation">,</span> <span class="token string">"辽源"</span><span class="token punctuation">,</span> <span class="token string">"通化"</span><span class="token punctuation">,</span> <span class="token string">"白山"</span><span class="token punctuation">,</span> <span class="token string">"松原"</span><span class="token punctuation">,</span> <span class="token string">"白城"</span><span class="token punctuation">,</span>                <span class="token string">"延边朝鲜族自治"</span><span class="token punctuation">,</span> <span class="token string">"哈尔滨"</span><span class="token punctuation">,</span> <span class="token string">"齐齐哈尔"</span><span class="token punctuation">,</span> <span class="token string">"鸡西"</span><span class="token punctuation">,</span> <span class="token string">"鹤岗"</span><span class="token punctuation">,</span> <span class="token string">"双鸭山"</span><span class="token punctuation">,</span> <span class="token string">"大庆"</span><span class="token punctuation">,</span>                <span class="token string">"伊春"</span><span class="token punctuation">,</span> <span class="token string">"佳木斯"</span><span class="token punctuation">,</span> <span class="token string">"七台河"</span><span class="token punctuation">,</span> <span class="token string">"牡丹江"</span><span class="token punctuation">,</span> <span class="token string">"黑河"</span><span class="token punctuation">,</span> <span class="token string">"绥化"</span><span class="token punctuation">,</span> <span class="token string">"大兴安岭地"</span><span class="token punctuation">,</span> <span class="token string">"南京"</span><span class="token punctuation">,</span>                <span class="token string">"无锡"</span><span class="token punctuation">,</span> <span class="token string">"徐州"</span><span class="token punctuation">,</span> <span class="token string">"常州"</span><span class="token punctuation">,</span> <span class="token string">"苏州"</span><span class="token punctuation">,</span> <span class="token string">"南通"</span><span class="token punctuation">,</span> <span class="token string">"连云港"</span><span class="token punctuation">,</span> <span class="token string">"淮安"</span><span class="token punctuation">,</span> <span class="token string">"盐城"</span><span class="token punctuation">,</span> <span class="token string">"扬州"</span><span class="token punctuation">,</span>                <span class="token string">"镇江"</span><span class="token punctuation">,</span> <span class="token string">"泰州"</span><span class="token punctuation">,</span> <span class="token string">"宿迁"</span><span class="token punctuation">,</span> <span class="token string">"杭州"</span><span class="token punctuation">,</span> <span class="token string">"宁波"</span><span class="token punctuation">,</span> <span class="token string">"温州"</span><span class="token punctuation">,</span> <span class="token string">"嘉兴"</span><span class="token punctuation">,</span> <span class="token string">"湖州"</span><span class="token punctuation">,</span> <span class="token string">"绍兴"</span><span class="token punctuation">,</span>                <span class="token string">"金华"</span><span class="token punctuation">,</span> <span class="token string">"衢州"</span><span class="token punctuation">,</span> <span class="token string">"舟山"</span><span class="token punctuation">,</span> <span class="token string">"台州"</span><span class="token punctuation">,</span> <span class="token string">"丽水"</span><span class="token punctuation">,</span> <span class="token string">"合肥"</span><span class="token punctuation">,</span> <span class="token string">"芜湖"</span><span class="token punctuation">,</span> <span class="token string">"蚌埠"</span><span class="token punctuation">,</span> <span class="token string">"淮南"</span><span class="token punctuation">,</span>                <span class="token string">"马鞍山"</span><span class="token punctuation">,</span> <span class="token string">"淮北"</span><span class="token punctuation">,</span> <span class="token string">"铜陵"</span><span class="token punctuation">,</span> <span class="token string">"安庆"</span><span class="token punctuation">,</span> <span class="token string">"黄山"</span><span class="token punctuation">,</span> <span class="token string">"滁州"</span><span class="token punctuation">,</span> <span class="token string">"阜阳"</span><span class="token punctuation">,</span> <span class="token string">"宿州"</span><span class="token punctuation">,</span> <span class="token string">"巢湖"</span><span class="token punctuation">,</span>                <span class="token string">"六安"</span><span class="token punctuation">,</span> <span class="token string">"亳州"</span><span class="token punctuation">,</span> <span class="token string">"池州"</span><span class="token punctuation">,</span> <span class="token string">"宣城"</span><span class="token punctuation">,</span> <span class="token string">"福州"</span><span class="token punctuation">,</span> <span class="token string">"厦门"</span><span class="token punctuation">,</span> <span class="token string">"莆田"</span><span class="token punctuation">,</span> <span class="token string">"三明"</span><span class="token punctuation">,</span> <span class="token string">"泉州"</span><span class="token punctuation">,</span>                <span class="token string">"漳州"</span><span class="token punctuation">,</span> <span class="token string">"南平"</span><span class="token punctuation">,</span> <span class="token string">"龙岩"</span><span class="token punctuation">,</span> <span class="token string">"宁德"</span><span class="token punctuation">,</span> <span class="token string">"南昌"</span><span class="token punctuation">,</span> <span class="token string">"景德镇"</span><span class="token punctuation">,</span> <span class="token string">"萍乡"</span><span class="token punctuation">,</span> <span class="token string">"九江"</span><span class="token punctuation">,</span> <span class="token string">"新余"</span><span class="token punctuation">,</span>                <span class="token string">"鹰潭"</span><span class="token punctuation">,</span> <span class="token string">"赣州"</span><span class="token punctuation">,</span> <span class="token string">"吉安"</span><span class="token punctuation">,</span> <span class="token string">"宜春"</span><span class="token punctuation">,</span> <span class="token string">"抚州"</span><span class="token punctuation">,</span> <span class="token string">"上饶"</span><span class="token punctuation">,</span> <span class="token string">"济南"</span><span class="token punctuation">,</span> <span class="token string">"青岛"</span><span class="token punctuation">,</span> <span class="token string">"淄博"</span><span class="token punctuation">,</span>                <span class="token string">"枣庄"</span><span class="token punctuation">,</span> <span class="token string">"东营"</span><span class="token punctuation">,</span> <span class="token string">"烟台"</span><span class="token punctuation">,</span> <span class="token string">"潍坊"</span><span class="token punctuation">,</span> <span class="token string">"济宁"</span><span class="token punctuation">,</span> <span class="token string">"泰安"</span><span class="token punctuation">,</span> <span class="token string">"威海"</span><span class="token punctuation">,</span> <span class="token string">"日照"</span><span class="token punctuation">,</span> <span class="token string">"莱芜"</span><span class="token punctuation">,</span>                <span class="token string">"临沂"</span><span class="token punctuation">,</span> <span class="token string">"德州"</span><span class="token punctuation">,</span> <span class="token string">"聊城"</span><span class="token punctuation">,</span> <span class="token string">"滨州"</span><span class="token punctuation">,</span> <span class="token string">"郑州"</span><span class="token punctuation">,</span> <span class="token string">"开封"</span><span class="token punctuation">,</span> <span class="token string">"洛阳"</span><span class="token punctuation">,</span> <span class="token string">"平顶山"</span><span class="token punctuation">,</span> <span class="token string">"安阳"</span><span class="token punctuation">,</span>                <span class="token string">"鹤壁"</span><span class="token punctuation">,</span> <span class="token string">"新乡"</span><span class="token punctuation">,</span> <span class="token string">"焦作"</span><span class="token punctuation">,</span> <span class="token string">"濮阳"</span><span class="token punctuation">,</span> <span class="token string">"许昌"</span><span class="token punctuation">,</span> <span class="token string">"漯河"</span><span class="token punctuation">,</span> <span class="token string">"三门峡"</span><span class="token punctuation">,</span> <span class="token string">"南阳"</span><span class="token punctuation">,</span> <span class="token string">"商丘"</span><span class="token punctuation">,</span>                <span class="token string">"信阳"</span><span class="token punctuation">,</span> <span class="token string">"周口"</span><span class="token punctuation">,</span> <span class="token string">"驻马店"</span><span class="token punctuation">,</span> <span class="token string">"武汉"</span><span class="token punctuation">,</span> <span class="token string">"黄石"</span><span class="token punctuation">,</span> <span class="token string">"十堰"</span><span class="token punctuation">,</span> <span class="token string">"宜昌"</span><span class="token punctuation">,</span> <span class="token string">"襄樊"</span><span class="token punctuation">,</span> <span class="token string">"鄂州"</span><span class="token punctuation">,</span>                <span class="token string">"荆门"</span><span class="token punctuation">,</span> <span class="token string">"孝感"</span><span class="token punctuation">,</span> <span class="token string">"荆州"</span><span class="token punctuation">,</span> <span class="token string">"黄冈"</span><span class="token punctuation">,</span> <span class="token string">"咸宁"</span><span class="token punctuation">,</span> <span class="token string">"随州"</span><span class="token punctuation">,</span> <span class="token string">"恩施土家族苗族自治"</span><span class="token punctuation">,</span> <span class="token string">"长沙"</span><span class="token punctuation">,</span>                <span class="token string">"株洲"</span><span class="token punctuation">,</span> <span class="token string">"湘潭"</span><span class="token punctuation">,</span> <span class="token string">"衡阳"</span><span class="token punctuation">,</span> <span class="token string">"邵阳"</span><span class="token punctuation">,</span> <span class="token string">"岳阳"</span><span class="token punctuation">,</span> <span class="token string">"常德"</span><span class="token punctuation">,</span> <span class="token string">"张家界"</span><span class="token punctuation">,</span> <span class="token string">"益阳"</span><span class="token punctuation">,</span> <span class="token string">"郴州"</span><span class="token punctuation">,</span>                <span class="token string">"永州"</span><span class="token punctuation">,</span> <span class="token string">"怀化"</span><span class="token punctuation">,</span> <span class="token string">"娄底"</span><span class="token punctuation">,</span> <span class="token string">"湘西土家族苗族自治"</span><span class="token punctuation">,</span> <span class="token string">"广州"</span><span class="token punctuation">,</span> <span class="token string">"韶关"</span><span class="token punctuation">,</span> <span class="token string">"深圳"</span><span class="token punctuation">,</span> <span class="token string">"珠海"</span><span class="token punctuation">,</span>                <span class="token string">"汕头"</span><span class="token punctuation">,</span> <span class="token string">"佛山"</span><span class="token punctuation">,</span> <span class="token string">"江门"</span><span class="token punctuation">,</span> <span class="token string">"湛江"</span><span class="token punctuation">,</span> <span class="token string">"茂名"</span><span class="token punctuation">,</span> <span class="token string">"肇庆"</span><span class="token punctuation">,</span> <span class="token string">"惠州"</span><span class="token punctuation">,</span> <span class="token string">"梅州"</span><span class="token punctuation">,</span> <span class="token string">"汕尾"</span><span class="token punctuation">,</span> <span class="token string">"河源"</span><span class="token punctuation">,</span>                <span class="token string">"阳江"</span><span class="token punctuation">,</span> <span class="token string">"清远"</span><span class="token punctuation">,</span> <span class="token string">"东莞"</span><span class="token punctuation">,</span> <span class="token string">"中山"</span><span class="token punctuation">,</span> <span class="token string">"潮州"</span><span class="token punctuation">,</span> <span class="token string">"揭阳"</span><span class="token punctuation">,</span> <span class="token string">"云浮"</span><span class="token punctuation">,</span> <span class="token string">"南宁"</span><span class="token punctuation">,</span> <span class="token string">"柳州"</span><span class="token punctuation">,</span>                <span class="token string">"桂林"</span><span class="token punctuation">,</span> <span class="token string">"梧州"</span><span class="token punctuation">,</span> <span class="token string">"北海"</span><span class="token punctuation">,</span> <span class="token string">"防城港"</span><span class="token punctuation">,</span> <span class="token string">"钦州"</span><span class="token punctuation">,</span> <span class="token string">"贵港"</span><span class="token punctuation">,</span> <span class="token string">"玉林"</span><span class="token punctuation">,</span> <span class="token string">"百色"</span><span class="token punctuation">,</span> <span class="token string">"贺州"</span><span class="token punctuation">,</span>                <span class="token string">"河池"</span><span class="token punctuation">,</span> <span class="token string">"来宾"</span><span class="token punctuation">,</span> <span class="token string">"崇左"</span><span class="token punctuation">,</span> <span class="token string">"海口"</span><span class="token punctuation">,</span> <span class="token string">"三亚"</span><span class="token punctuation">,</span> <span class="token string">"成都"</span><span class="token punctuation">,</span> <span class="token string">"自贡"</span><span class="token punctuation">,</span> <span class="token string">"攀枝花"</span><span class="token punctuation">,</span> <span class="token string">"泸州"</span><span class="token punctuation">,</span>                <span class="token string">"德阳"</span><span class="token punctuation">,</span> <span class="token string">"绵阳"</span><span class="token punctuation">,</span> <span class="token string">"广元"</span><span class="token punctuation">,</span> <span class="token string">"遂宁"</span><span class="token punctuation">,</span> <span class="token string">"内江"</span><span class="token punctuation">,</span> <span class="token string">"乐山"</span><span class="token punctuation">,</span> <span class="token string">"南充"</span><span class="token punctuation">,</span> <span class="token string">"眉山"</span><span class="token punctuation">,</span> <span class="token string">"宜宾"</span><span class="token punctuation">,</span> <span class="token string">"广安"</span><span class="token punctuation">,</span>                <span class="token string">"达州"</span><span class="token punctuation">,</span> <span class="token string">"雅安"</span><span class="token punctuation">,</span> <span class="token string">"巴中"</span><span class="token punctuation">,</span> <span class="token string">"资阳"</span><span class="token punctuation">,</span> <span class="token string">"阿坝藏族羌族自治"</span><span class="token punctuation">,</span> <span class="token string">"甘孜藏族自治"</span><span class="token punctuation">,</span> <span class="token string">"凉山彝族自治"</span><span class="token punctuation">,</span>                <span class="token string">"贵阳"</span><span class="token punctuation">,</span> <span class="token string">"六盘水"</span><span class="token punctuation">,</span> <span class="token string">"遵义"</span><span class="token punctuation">,</span> <span class="token string">"安顺"</span><span class="token punctuation">,</span> <span class="token string">"铜仁地"</span><span class="token punctuation">,</span> <span class="token string">"黔西南布依族苗族自治"</span><span class="token punctuation">,</span> <span class="token string">"毕节地"</span><span class="token punctuation">,</span>                <span class="token string">"黔东南苗族侗族自治"</span><span class="token punctuation">,</span> <span class="token string">"黔南布依族苗族自治"</span><span class="token punctuation">,</span> <span class="token string">"昆明"</span><span class="token punctuation">,</span> <span class="token string">"曲靖"</span><span class="token punctuation">,</span> <span class="token string">"玉溪"</span><span class="token punctuation">,</span> <span class="token string">"保山"</span><span class="token punctuation">,</span>                <span class="token string">"昭通"</span><span class="token punctuation">,</span> <span class="token string">"丽江"</span><span class="token punctuation">,</span> <span class="token string">"临沧"</span><span class="token punctuation">,</span> <span class="token string">"楚雄彝族自治"</span><span class="token punctuation">,</span> <span class="token string">"红河哈尼族彝族自治"</span><span class="token punctuation">,</span> <span class="token string">"文山壮族苗族自治"</span><span class="token punctuation">,</span>                <span class="token string">"西双版纳傣族自治"</span><span class="token punctuation">,</span> <span class="token string">"大理白族自治"</span><span class="token punctuation">,</span> <span class="token string">"德宏傣族景颇族自治"</span><span class="token punctuation">,</span> <span class="token string">"怒江傈僳族自治"</span><span class="token punctuation">,</span>                <span class="token string">"迪庆藏族自治"</span><span class="token punctuation">,</span> <span class="token string">"拉萨"</span><span class="token punctuation">,</span> <span class="token string">"昌都地"</span><span class="token punctuation">,</span> <span class="token string">"山南地"</span><span class="token punctuation">,</span> <span class="token string">"日喀则地"</span><span class="token punctuation">,</span> <span class="token string">"那曲地"</span><span class="token punctuation">,</span> <span class="token string">"阿里地"</span><span class="token punctuation">,</span>                <span class="token string">"林芝地"</span><span class="token punctuation">,</span> <span class="token string">"西安"</span><span class="token punctuation">,</span> <span class="token string">"铜川"</span><span class="token punctuation">,</span> <span class="token string">"宝鸡"</span><span class="token punctuation">,</span> <span class="token string">"咸阳"</span><span class="token punctuation">,</span> <span class="token string">"渭南"</span><span class="token punctuation">,</span> <span class="token string">"延安"</span><span class="token punctuation">,</span> <span class="token string">"汉中"</span><span class="token punctuation">,</span> <span class="token string">"榆林"</span><span class="token punctuation">,</span>                <span class="token string">"安康"</span><span class="token punctuation">,</span> <span class="token string">"商洛"</span><span class="token punctuation">,</span> <span class="token string">"兰州"</span><span class="token punctuation">,</span> <span class="token string">"嘉峪关"</span><span class="token punctuation">,</span> <span class="token string">"金昌"</span><span class="token punctuation">,</span> <span class="token string">"白银"</span><span class="token punctuation">,</span> <span class="token string">"天水"</span><span class="token punctuation">,</span> <span class="token string">"武威"</span><span class="token punctuation">,</span> <span class="token string">"张掖"</span><span class="token punctuation">,</span>                <span class="token string">"平凉"</span><span class="token punctuation">,</span> <span class="token string">"酒泉"</span><span class="token punctuation">,</span> <span class="token string">"庆阳"</span><span class="token punctuation">,</span> <span class="token string">"定西"</span><span class="token punctuation">,</span> <span class="token string">"陇南"</span><span class="token punctuation">,</span> <span class="token string">"临夏回族自治"</span><span class="token punctuation">,</span> <span class="token string">"甘南藏族自治"</span><span class="token punctuation">,</span> <span class="token string">"西宁"</span><span class="token punctuation">,</span>                <span class="token string">"海东地"</span><span class="token punctuation">,</span> <span class="token string">"海北藏族自治"</span><span class="token punctuation">,</span> <span class="token string">"黄南藏族自治"</span><span class="token punctuation">,</span> <span class="token string">"海南藏族自治"</span><span class="token punctuation">,</span> <span class="token string">"果洛藏族自治"</span><span class="token punctuation">,</span>                <span class="token string">"玉树藏族自治"</span><span class="token punctuation">,</span> <span class="token string">"海西蒙古族藏族自治"</span><span class="token punctuation">,</span> <span class="token string">"银川"</span><span class="token punctuation">,</span> <span class="token string">"石嘴山"</span><span class="token punctuation">,</span> <span class="token string">"吴忠"</span><span class="token punctuation">,</span> <span class="token string">"固原"</span><span class="token punctuation">,</span> <span class="token string">"中卫"</span><span class="token punctuation">,</span>                <span class="token string">"乌鲁木齐"</span><span class="token punctuation">,</span> <span class="token string">"克拉玛依"</span><span class="token punctuation">,</span> <span class="token string">"吐鲁番地"</span><span class="token punctuation">,</span> <span class="token string">"哈密地"</span><span class="token punctuation">,</span> <span class="token string">"昌吉回族自治"</span><span class="token punctuation">,</span> <span class="token string">"博尔塔拉蒙古自治"</span><span class="token punctuation">,</span>                <span class="token string">"巴音郭楞蒙古自治"</span><span class="token punctuation">,</span> <span class="token string">"阿克苏地"</span><span class="token punctuation">,</span> <span class="token string">"克孜勒苏柯尔克孜自治"</span><span class="token punctuation">,</span> <span class="token string">"喀什地"</span><span class="token punctuation">,</span> <span class="token string">"和田地"</span><span class="token punctuation">,</span>                <span class="token string">"伊犁哈萨克自治"</span><span class="token punctuation">,</span> <span class="token string">"塔城地"</span><span class="token punctuation">,</span> <span class="token string">"阿勒泰地"</span><span class="token punctuation">,</span> <span class="token string">"仙桃"</span><span class="token punctuation">,</span> <span class="token string">"潜江"</span><span class="token punctuation">,</span> <span class="token string">"天门"</span><span class="token punctuation">,</span> <span class="token string">"神农架林"</span><span class="token punctuation">,</span>                <span class="token string">"五指山"</span><span class="token punctuation">,</span> <span class="token string">"琼海"</span><span class="token punctuation">,</span> <span class="token string">"儋州"</span><span class="token punctuation">,</span> <span class="token string">"文昌"</span><span class="token punctuation">,</span> <span class="token string">"万宁"</span><span class="token punctuation">,</span> <span class="token string">"东方"</span><span class="token punctuation">,</span> <span class="token string">"定安县"</span><span class="token punctuation">,</span> <span class="token string">"屯昌县"</span><span class="token punctuation">,</span> <span class="token string">"澄迈县"</span><span class="token punctuation">,</span>                <span class="token string">"临高县"</span><span class="token punctuation">,</span> <span class="token string">"白沙黎族自治县"</span><span class="token punctuation">,</span> <span class="token string">"昌江黎族自治县"</span><span class="token punctuation">,</span> <span class="token string">"乐东黎族自治县"</span><span class="token punctuation">,</span> <span class="token string">"陵水黎族自治县"</span><span class="token punctuation">,</span>                <span class="token string">"保亭黎族苗族自治县"</span><span class="token punctuation">,</span> <span class="token string">"琼中黎族苗族自治县"</span><span class="token punctuation">,</span> <span class="token string">"石河子"</span><span class="token punctuation">]</span>    <span class="token comment"># read database configuration</span>    db_config <span class="token operator">=</span> read_db_config<span class="token punctuation">(</span><span class="token punctuation">)</span>    toBeProcessedData <span class="token operator">=</span> query_with_fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># prepare query and data</span>    query <span class="token operator">=</span> <span class="token triple-quoted-string string">""" UPDATE test_tb                SET src_loc = %s, dst_loc = %s                WHERE id = %s """</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        conn <span class="token operator">=</span> MySQLConnection<span class="token punctuation">(</span><span class="token operator">**</span>db_config<span class="token punctuation">)</span>        <span class="token comment"># update book title</span>        cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># cursor.execute(query, data)</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> toBeProcessedData<span class="token punctuation">:</span>            rowId <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            srcIp <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            dstIp <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> srcIp <span class="token operator">==</span> <span class="token string">'10.16.80.216'</span><span class="token punctuation">:</span> <span class="token comment"># 这里要替换成本机的 ip</span>                srcLoc <span class="token operator">=</span> <span class="token string">'武汉'</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                srcJsonData <span class="token operator">=</span> getJson<span class="token punctuation">(</span>srcIp<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>srcJsonData<span class="token punctuation">)</span>                srcLoc <span class="token operator">=</span> srcJsonData<span class="token punctuation">[</span><span class="token string">'city'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> dstIp <span class="token operator">==</span> <span class="token string">'10.16.80.216'</span><span class="token punctuation">:</span> <span class="token comment"># 这里要替换成本机的 ip</span>                dstLoc <span class="token operator">=</span> <span class="token string">'武汉'</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                dstJsonData <span class="token operator">=</span> getJson<span class="token punctuation">(</span>dstIp<span class="token punctuation">)</span>                dstLoc <span class="token operator">=</span> dstJsonData<span class="token punctuation">[</span><span class="token string">'city'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> srcLoc <span class="token operator">!=</span> <span class="token string">''</span> <span class="token keyword">and</span> srcLoc <span class="token keyword">not</span> <span class="token keyword">in</span> cityData<span class="token punctuation">:</span>                srcLoc <span class="token operator">=</span> <span class="token string">'海外'</span>            <span class="token keyword">if</span> dstLoc <span class="token operator">!=</span> <span class="token string">''</span> <span class="token keyword">and</span> dstLoc <span class="token keyword">not</span> <span class="token keyword">in</span> cityData<span class="token punctuation">:</span>                dstLoc <span class="token operator">=</span> <span class="token string">'海外'</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>srcLoc <span class="token operator">+</span> dstLoc<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'==========分割线========='</span><span class="token punctuation">)</span>            data <span class="token operator">=</span> <span class="token punctuation">(</span>srcLoc<span class="token punctuation">,</span> dstLoc<span class="token punctuation">,</span> rowId<span class="token punctuation">)</span>            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>query<span class="token punctuation">,</span> data<span class="token punctuation">)</span>            conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># accept the changes</span>        conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Error <span class="token keyword">as</span> error<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        update_testTb<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>再之后，使用 Spring Boot 创建一个 json 接口，主要的逻辑如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 过滤出同时具有 srcLoc 和 dstLoc 并且都是中国城市的数据* * @return* @throws IOException* @throws InterruptedException*/</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/getJson"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TestTb</span><span class="token punctuation">></span></span> <span class="token function">getJsonData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 先从数据库中取出数据</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TestTb</span><span class="token punctuation">></span></span> testTbList <span class="token operator">=</span> testTbService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TestTb</span><span class="token punctuation">></span></span> filtedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 过滤</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TestTb</span> testTb <span class="token operator">:</span> testTbList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>testTb<span class="token punctuation">.</span><span class="token function">getSrcLoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span>                <span class="token operator">&amp;&amp;</span> testTb<span class="token punctuation">.</span><span class="token function">getSrcLoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span>                <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>testTb<span class="token punctuation">.</span><span class="token function">getSrcLoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"海外"</span><span class="token punctuation">)</span>                <span class="token operator">&amp;&amp;</span> testTb<span class="token punctuation">.</span><span class="token function">getDstLoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span>                <span class="token operator">&amp;&amp;</span> testTb<span class="token punctuation">.</span><span class="token function">getDstLoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span>                <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>testTb<span class="token punctuation">.</span><span class="token function">getDstLoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"海外"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            filtedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>testTb<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>testTb<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// System.out.println(filtedList);</span>    <span class="token keyword">return</span> filtedList<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>最后，是前端的逻辑：</p><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getJsonData</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>url <span class="token operator">=</span> <span class="token string">"http://localhost:8080/testTb/getJson"</span><span class="token function">getJsonData</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">jsonData</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// console.log(jsonData);</span>    <span class="token keyword">var</span> geoCoordMap <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string-property property">'北京'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">116.398</span><span class="token punctuation">,</span> <span class="token number">39.9082</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'天津'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.252</span><span class="token punctuation">,</span> <span class="token number">39.1039</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'上海'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">121.476</span><span class="token punctuation">,</span> <span class="token number">31.2244</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'重庆'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">106.548</span><span class="token punctuation">,</span> <span class="token number">29.5549</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'石家庄'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.476</span><span class="token punctuation">,</span> <span class="token number">38.0483</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'唐山'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">118.167</span><span class="token punctuation">,</span> <span class="token number">39.6353</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'秦皇岛'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">119.59</span><span class="token punctuation">,</span> <span class="token number">39.9479</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'邯郸'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.489</span><span class="token punctuation">,</span> <span class="token number">36.5994</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'邢台'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.504</span><span class="token punctuation">,</span> <span class="token number">37.0717</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'保定'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">115.466</span><span class="token punctuation">,</span> <span class="token number">38.8799</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'张家口'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.89</span><span class="token punctuation">,</span> <span class="token number">40.8262</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'承德'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.935</span><span class="token punctuation">,</span> <span class="token number">40.9955</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'沧州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">116.866</span><span class="token punctuation">,</span> <span class="token number">38.3124</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'廊坊'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">116.706</span><span class="token punctuation">,</span> <span class="token number">39.5193</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'衡水'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">115.698</span><span class="token punctuation">,</span> <span class="token number">37.7354</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'太原'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">112.531</span><span class="token punctuation">,</span> <span class="token number">37.8551</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'大同'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.3</span><span class="token punctuation">,</span> <span class="token number">40.0784</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'阳泉'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.58</span><span class="token punctuation">,</span> <span class="token number">37.8567</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'长治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.117</span><span class="token punctuation">,</span> <span class="token number">36.1922</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'晋城'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">112.853</span><span class="token punctuation">,</span> <span class="token number">35.4906</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'朔州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">112.429</span><span class="token punctuation">,</span> <span class="token number">39.3186</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'晋中'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">112.752</span><span class="token punctuation">,</span> <span class="token number">37.6883</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'运城'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">110.998</span><span class="token punctuation">,</span> <span class="token number">35.0315</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'忻州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">112.735</span><span class="token punctuation">,</span> <span class="token number">38.4158</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'临汾'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">111.527</span><span class="token punctuation">,</span> <span class="token number">36.1021</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'吕梁'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">111.13</span><span class="token punctuation">,</span> <span class="token number">37.5203</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'呼和浩特'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">111.667</span><span class="token punctuation">,</span> <span class="token number">40.8083</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'包头'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.871</span><span class="token punctuation">,</span> <span class="token number">40.6617</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'乌海'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">106.814</span><span class="token punctuation">,</span> <span class="token number">39.6692</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'赤峰'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">118.957</span><span class="token punctuation">,</span> <span class="token number">42.2673</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'通辽'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">122.261</span><span class="token punctuation">,</span> <span class="token number">43.6059</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'鄂尔多斯'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">110.003</span><span class="token punctuation">,</span> <span class="token number">39.8223</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'呼伦贝尔'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">119.756</span><span class="token punctuation">,</span> <span class="token number">49.2458</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'巴彦淖尔'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">107.376</span><span class="token punctuation">,</span> <span class="token number">40.7801</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'乌兰察布'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.121</span><span class="token punctuation">,</span> <span class="token number">41.0317</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'兴安'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">122.135</span><span class="token punctuation">,</span> <span class="token number">46.0872</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'锡林郭勒'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">116.099</span><span class="token punctuation">,</span> <span class="token number">43.9455</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'阿拉善'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">105.686</span><span class="token punctuation">,</span> <span class="token number">38.8464</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'沈阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">123.434</span><span class="token punctuation">,</span> <span class="token number">41.8057</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'大连'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">121.617</span><span class="token punctuation">,</span> <span class="token number">38.9143</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'鞍山'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">123.002</span><span class="token punctuation">,</span> <span class="token number">41.1158</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'抚顺'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">123.924</span><span class="token punctuation">,</span> <span class="token number">41.8678</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'本溪'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">123.786</span><span class="token punctuation">,</span> <span class="token number">41.2984</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'丹东'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">124.398</span><span class="token punctuation">,</span> <span class="token number">40.1325</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'锦州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">121.148</span><span class="token punctuation">,</span> <span class="token number">41.1261</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'营口'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">122.25</span><span class="token punctuation">,</span> <span class="token number">40.6716</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'阜新'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">121.654</span><span class="token punctuation">,</span> <span class="token number">42.0143</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'辽阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">123.179</span><span class="token punctuation">,</span> <span class="token number">41.2778</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'盘锦'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">122.071</span><span class="token punctuation">,</span> <span class="token number">41.1188</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'铁岭'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">123.843</span><span class="token punctuation">,</span> <span class="token number">42.2867</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'朝阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">120.45</span><span class="token punctuation">,</span> <span class="token number">41.5735</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'葫芦岛'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">120.856</span><span class="token punctuation">,</span> <span class="token number">40.7481</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'长春'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">125.325</span><span class="token punctuation">,</span> <span class="token number">43.8869</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'吉林'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">126.571</span><span class="token punctuation">,</span> <span class="token number">43.8458</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'四平'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">124.398</span><span class="token punctuation">,</span> <span class="token number">43.1725</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'辽源'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">125.145</span><span class="token punctuation">,</span> <span class="token number">42.9058</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'通化'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">125.94</span><span class="token punctuation">,</span> <span class="token number">41.7292</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'白山'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">126.424</span><span class="token punctuation">,</span> <span class="token number">41.9401</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'松原'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">124.824</span><span class="token punctuation">,</span> <span class="token number">45.1409</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'白城'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">122.838</span><span class="token punctuation">,</span> <span class="token number">45.6204</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'延边朝鲜族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">129.498</span><span class="token punctuation">,</span> <span class="token number">42.8942</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'哈尔滨'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">126.652</span><span class="token punctuation">,</span> <span class="token number">45.7613</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'齐齐哈尔'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">123.937</span><span class="token punctuation">,</span> <span class="token number">47.3416</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'鸡西'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">130.97</span><span class="token punctuation">,</span> <span class="token number">45.2952</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'鹤岗'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">130.279</span><span class="token punctuation">,</span> <span class="token number">47.3311</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'双鸭山'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">131.16</span><span class="token punctuation">,</span> <span class="token number">46.6469</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'大庆'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">125.094</span><span class="token punctuation">,</span> <span class="token number">46.5883</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'伊春'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">128.901</span><span class="token punctuation">,</span> <span class="token number">47.7247</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'佳木斯'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">130.37</span><span class="token punctuation">,</span> <span class="token number">46.8075</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'七台河'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">131.008</span><span class="token punctuation">,</span> <span class="token number">45.7719</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'牡丹江'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">129.623</span><span class="token punctuation">,</span> <span class="token number">44.5848</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'黑河'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">127.501</span><span class="token punctuation">,</span> <span class="token number">50.2479</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'绥化'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">126.99</span><span class="token punctuation">,</span> <span class="token number">46.637</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'大兴安岭地'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">124.397</span><span class="token punctuation">,</span> <span class="token number">51.6737</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'南京'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">118.792</span><span class="token punctuation">,</span> <span class="token number">32.0562</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'无锡'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">120.359</span><span class="token punctuation">,</span> <span class="token number">31.5611</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'徐州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.174</span><span class="token punctuation">,</span> <span class="token number">34.2586</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'常州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">119.975</span><span class="token punctuation">,</span> <span class="token number">31.7698</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'苏州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">120.639</span><span class="token punctuation">,</span> <span class="token number">31.3205</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'南通'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">120.871</span><span class="token punctuation">,</span> <span class="token number">32.0093</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'连云港'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">119.173</span><span class="token punctuation">,</span> <span class="token number">34.5959</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'淮安'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">119.015</span><span class="token punctuation">,</span> <span class="token number">33.612</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'盐城'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">120.139</span><span class="token punctuation">,</span> <span class="token number">33.3794</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'扬州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">119.413</span><span class="token punctuation">,</span> <span class="token number">32.4195</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'镇江'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">119.442</span><span class="token punctuation">,</span> <span class="token number">32.211</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'泰州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">119.921</span><span class="token punctuation">,</span> <span class="token number">32.4617</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'宿迁'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">118.297</span><span class="token punctuation">,</span> <span class="token number">33.9539</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'杭州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">120.173</span><span class="token punctuation">,</span> <span class="token number">30.274</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'宁波'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">121.544</span><span class="token punctuation">,</span> <span class="token number">29.8683</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'温州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">120.638</span><span class="token punctuation">,</span> <span class="token number">28.027</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'嘉兴'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">120.759</span><span class="token punctuation">,</span> <span class="token number">30.7539</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'湖州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">120.097</span><span class="token punctuation">,</span> <span class="token number">30.8706</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'绍兴'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">120.586</span><span class="token punctuation">,</span> <span class="token number">29.9958</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'金华'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">119.652</span><span class="token punctuation">,</span> <span class="token number">29.0896</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'衢州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">118.874</span><span class="token punctuation">,</span> <span class="token number">28.9359</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'舟山'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">122.106</span><span class="token punctuation">,</span> <span class="token number">30.0132</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'台州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">121.456</span><span class="token punctuation">,</span> <span class="token number">28.6708</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'丽水'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">119.917</span><span class="token punctuation">,</span> <span class="token number">28.4522</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'合肥'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.296</span><span class="token punctuation">,</span> <span class="token number">31.8693</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'芜湖'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">118.376</span><span class="token punctuation">,</span> <span class="token number">31.3273</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'蚌埠'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.402</span><span class="token punctuation">,</span> <span class="token number">32.9302</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'淮南'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.0</span><span class="token punctuation">,</span> <span class="token number">32.6383</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'马鞍山'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">118.502</span><span class="token punctuation">,</span> <span class="token number">31.693</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'淮北'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">116.793</span><span class="token punctuation">,</span> <span class="token number">33.969</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'铜陵'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.811</span><span class="token punctuation">,</span> <span class="token number">30.9446</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'安庆'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.051</span><span class="token punctuation">,</span> <span class="token number">30.527</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'黄山'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">118.317</span><span class="token punctuation">,</span> <span class="token number">29.7099</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'滁州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">118.318</span><span class="token punctuation">,</span> <span class="token number">32.3011</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'阜阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">115.82</span><span class="token punctuation">,</span> <span class="token number">32.8971</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'宿州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">116.984</span><span class="token punctuation">,</span> <span class="token number">33.6381</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'巢湖'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.87</span><span class="token punctuation">,</span> <span class="token number">31.6009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'六安'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">116.491</span><span class="token punctuation">,</span> <span class="token number">31.7426</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'亳州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">115.783</span><span class="token punctuation">,</span> <span class="token number">33.8696</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'池州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.489</span><span class="token punctuation">,</span> <span class="token number">30.6557</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'宣城'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">118.755</span><span class="token punctuation">,</span> <span class="token number">30.9469</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'福州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">119.306</span><span class="token punctuation">,</span> <span class="token number">26.0761</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'厦门'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">118.117</span><span class="token punctuation">,</span> <span class="token number">24.4838</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'莆田'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">119.005</span><span class="token punctuation">,</span> <span class="token number">25.434</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'三明'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.64</span><span class="token punctuation">,</span> <span class="token number">26.2681</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'泉州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">118.585</span><span class="token punctuation">,</span> <span class="token number">24.9295</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'漳州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.666</span><span class="token punctuation">,</span> <span class="token number">24.5124</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'南平'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">118.179</span><span class="token punctuation">,</span> <span class="token number">26.6399</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'龙岩'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.033</span><span class="token punctuation">,</span> <span class="token number">25.0946</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'宁德'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">119.537</span><span class="token punctuation">,</span> <span class="token number">26.6528</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'南昌'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">115.897</span><span class="token punctuation">,</span> <span class="token number">28.6788</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'景德镇'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.193</span><span class="token punctuation">,</span> <span class="token number">29.298</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'萍乡'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.852</span><span class="token punctuation">,</span> <span class="token number">27.6227</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'九江'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">115.99</span><span class="token punctuation">,</span> <span class="token number">29.7156</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'新余'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.918</span><span class="token punctuation">,</span> <span class="token number">27.8163</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'鹰潭'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.034</span><span class="token punctuation">,</span> <span class="token number">28.2394</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'赣州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.942</span><span class="token punctuation">,</span> <span class="token number">25.8553</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'吉安'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.987</span><span class="token punctuation">,</span> <span class="token number">27.1136</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'宜春'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.399</span><span class="token punctuation">,</span> <span class="token number">27.8068</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'抚州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">116.363</span><span class="token punctuation">,</span> <span class="token number">27.9793</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'上饶'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.969</span><span class="token punctuation">,</span> <span class="token number">28.4456</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'济南'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.021</span><span class="token punctuation">,</span> <span class="token number">36.6594</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'青岛'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">120.357</span><span class="token punctuation">,</span> <span class="token number">36.084</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'淄博'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">118.05</span><span class="token punctuation">,</span> <span class="token number">36.8063</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'枣庄'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.309</span><span class="token punctuation">,</span> <span class="token number">34.8127</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'东营'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">118.675</span><span class="token punctuation">,</span> <span class="token number">37.4321</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'烟台'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">121.392</span><span class="token punctuation">,</span> <span class="token number">37.5379</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'潍坊'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">119.122</span><span class="token punctuation">,</span> <span class="token number">36.7159</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'济宁'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">116.588</span><span class="token punctuation">,</span> <span class="token number">35.4133</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'泰安'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.121</span><span class="token punctuation">,</span> <span class="token number">36.1813</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'威海'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">122.122</span><span class="token punctuation">,</span> <span class="token number">37.5043</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'日照'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">119.526</span><span class="token punctuation">,</span> <span class="token number">35.4188</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'莱芜'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">117.679</span><span class="token punctuation">,</span> <span class="token number">36.2136</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'临沂'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">118.346</span><span class="token punctuation">,</span> <span class="token number">35.0538</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'德州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">116.302</span><span class="token punctuation">,</span> <span class="token number">37.4545</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'聊城'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">115.986</span><span class="token punctuation">,</span> <span class="token number">36.4561</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'滨州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">118.016</span><span class="token punctuation">,</span> <span class="token number">37.3832</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'郑州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.663</span><span class="token punctuation">,</span> <span class="token number">34.7619</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'开封'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.34</span><span class="token punctuation">,</span> <span class="token number">34.7893</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'洛阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">112.401</span><span class="token punctuation">,</span> <span class="token number">34.6567</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'平顶山'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.304</span><span class="token punctuation">,</span> <span class="token number">33.7274</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'安阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.346</span><span class="token punctuation">,</span> <span class="token number">36.1112</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'鹤壁'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.297</span><span class="token punctuation">,</span> <span class="token number">35.7481</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'新乡'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.89</span><span class="token punctuation">,</span> <span class="token number">35.3015</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'焦作'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.228</span><span class="token punctuation">,</span> <span class="token number">35.2338</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'濮阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">115.029</span><span class="token punctuation">,</span> <span class="token number">35.7632</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'许昌'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.832</span><span class="token punctuation">,</span> <span class="token number">34.0222</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'漯河'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.036</span><span class="token punctuation">,</span> <span class="token number">33.5673</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'三门峡'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">111.192</span><span class="token punctuation">,</span> <span class="token number">34.7758</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'南阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">112.534</span><span class="token punctuation">,</span> <span class="token number">32.9993</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'商丘'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">115.651</span><span class="token punctuation">,</span> <span class="token number">34.4389</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'信阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.075</span><span class="token punctuation">,</span> <span class="token number">32.124</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'周口'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.653</span><span class="token punctuation">,</span> <span class="token number">33.6166</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'驻马店'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.028</span><span class="token punctuation">,</span> <span class="token number">32.9832</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'武汉'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.281</span><span class="token punctuation">,</span> <span class="token number">30.5781</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'黄石'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">115.06</span><span class="token punctuation">,</span> <span class="token number">30.2063</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'十堰'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">110.782</span><span class="token punctuation">,</span> <span class="token number">32.6553</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'宜昌'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">111.295</span><span class="token punctuation">,</span> <span class="token number">30.7012</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'襄樊'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">112.135</span><span class="token punctuation">,</span> <span class="token number">32.062</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'鄂州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.904</span><span class="token punctuation">,</span> <span class="token number">30.3898</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'荆门'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">112.196</span><span class="token punctuation">,</span> <span class="token number">31.0277</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'孝感'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.919</span><span class="token punctuation">,</span> <span class="token number">30.9246</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'荆州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">112.245</span><span class="token punctuation">,</span> <span class="token number">30.3252</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'黄冈'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.875</span><span class="token punctuation">,</span> <span class="token number">30.4465</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'咸宁'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.336</span><span class="token punctuation">,</span> <span class="token number">29.8337</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'随州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.375</span><span class="token punctuation">,</span> <span class="token number">31.7167</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'恩施土家族苗族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.482</span><span class="token punctuation">,</span> <span class="token number">30.2899</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'长沙'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.009</span><span class="token punctuation">,</span> <span class="token number">28.2085</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'株洲'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.149</span><span class="token punctuation">,</span> <span class="token number">27.8406</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'湘潭'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">112.907</span><span class="token punctuation">,</span> <span class="token number">27.8612</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'衡阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">112.612</span><span class="token punctuation">,</span> <span class="token number">26.8962</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'邵阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">111.467</span><span class="token punctuation">,</span> <span class="token number">27.2371</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'岳阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.108</span><span class="token punctuation">,</span> <span class="token number">29.3663</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'常德'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">111.703</span><span class="token punctuation">,</span> <span class="token number">29.0366</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'张家界'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">110.477</span><span class="token punctuation">,</span> <span class="token number">29.1197</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'益阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">112.356</span><span class="token punctuation">,</span> <span class="token number">28.58</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'郴州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.032</span><span class="token punctuation">,</span> <span class="token number">25.7968</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'永州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">111.608</span><span class="token punctuation">,</span> <span class="token number">26.438</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'怀化'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.977</span><span class="token punctuation">,</span> <span class="token number">27.5484</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'娄底'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">111.998</span><span class="token punctuation">,</span> <span class="token number">27.7259</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'湘西土家族苗族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.601</span><span class="token punctuation">,</span> <span class="token number">27.9472</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'广州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.322</span><span class="token punctuation">,</span> <span class="token number">23.1341</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'韶关'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.598</span><span class="token punctuation">,</span> <span class="token number">24.8024</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'深圳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.056</span><span class="token punctuation">,</span> <span class="token number">22.5421</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'珠海'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.547</span><span class="token punctuation">,</span> <span class="token number">22.2532</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'汕头'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">116.724</span><span class="token punctuation">,</span> <span class="token number">23.3601</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'佛山'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.121</span><span class="token punctuation">,</span> <span class="token number">23.0305</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'江门'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.085</span><span class="token punctuation">,</span> <span class="token number">22.583</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'湛江'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">110.421</span><span class="token punctuation">,</span> <span class="token number">21.1989</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'茂名'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">110.927</span><span class="token punctuation">,</span> <span class="token number">21.6616</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'肇庆'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">112.476</span><span class="token punctuation">,</span> <span class="token number">23.0734</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'惠州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.417</span><span class="token punctuation">,</span> <span class="token number">23.0896</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'梅州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">116.118</span><span class="token punctuation">,</span> <span class="token number">24.2988</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'汕尾'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">115.368</span><span class="token punctuation">,</span> <span class="token number">22.7782</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'河源'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">114.697</span><span class="token punctuation">,</span> <span class="token number">23.7503</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'阳江'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">111.984</span><span class="token punctuation">,</span> <span class="token number">21.872</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'清远'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.045</span><span class="token punctuation">,</span> <span class="token number">23.6882</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'东莞'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.759</span><span class="token punctuation">,</span> <span class="token number">23.0384</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'中山'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.372</span><span class="token punctuation">,</span> <span class="token number">22.525</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'潮州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">116.642</span><span class="token punctuation">,</span> <span class="token number">23.6713</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'揭阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">116.37</span><span class="token punctuation">,</span> <span class="token number">23.5276</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'云浮'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">112.044</span><span class="token punctuation">,</span> <span class="token number">22.9294</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'南宁'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">108.311</span><span class="token punctuation">,</span> <span class="token number">22.8178</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'柳州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.413</span><span class="token punctuation">,</span> <span class="token number">24.3068</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'桂林'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">110.285</span><span class="token punctuation">,</span> <span class="token number">25.2827</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'梧州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">111.304</span><span class="token punctuation">,</span> <span class="token number">23.5036</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'北海'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.123</span><span class="token punctuation">,</span> <span class="token number">21.4788</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'防城港'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">108.346</span><span class="token punctuation">,</span> <span class="token number">21.6146</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'钦州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">108.609</span><span class="token punctuation">,</span> <span class="token number">21.9509</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'贵港'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.606</span><span class="token punctuation">,</span> <span class="token number">23.0939</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'玉林'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">110.151</span><span class="token punctuation">,</span> <span class="token number">22.6255</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'百色'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">106.621</span><span class="token punctuation">,</span> <span class="token number">23.9018</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'贺州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">111.563</span><span class="token punctuation">,</span> <span class="token number">24.4279</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'河池'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">108.062</span><span class="token punctuation">,</span> <span class="token number">24.6972</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'来宾'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.222</span><span class="token punctuation">,</span> <span class="token number">23.7351</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'崇左'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">107.339</span><span class="token punctuation">,</span> <span class="token number">22.4248</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'海口'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">110.32</span><span class="token punctuation">,</span> <span class="token number">20.0323</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'三亚'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.514</span><span class="token punctuation">,</span> <span class="token number">18.2355</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'成都'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">104.066</span><span class="token punctuation">,</span> <span class="token number">30.6581</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'自贡'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">104.77</span><span class="token punctuation">,</span> <span class="token number">29.3534</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'攀枝花'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">101.699</span><span class="token punctuation">,</span> <span class="token number">26.5733</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'泸州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">105.444</span><span class="token punctuation">,</span> <span class="token number">28.8889</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'德阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">104.388</span><span class="token punctuation">,</span> <span class="token number">31.1368</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'绵阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">104.726</span><span class="token punctuation">,</span> <span class="token number">31.467</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'广元'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">105.834</span><span class="token punctuation">,</span> <span class="token number">32.4384</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'遂宁'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">105.583</span><span class="token punctuation">,</span> <span class="token number">30.5137</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'内江'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">105.063</span><span class="token punctuation">,</span> <span class="token number">29.5825</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'乐山'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">103.746</span><span class="token punctuation">,</span> <span class="token number">29.5866</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'南充'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">106.095</span><span class="token punctuation">,</span> <span class="token number">30.7844</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'眉山'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">103.826</span><span class="token punctuation">,</span> <span class="token number">30.0389</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'宜宾'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">104.621</span><span class="token punctuation">,</span> <span class="token number">28.7705</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'广安'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">106.642</span><span class="token punctuation">,</span> <span class="token number">30.4706</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'达州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">107.488</span><span class="token punctuation">,</span> <span class="token number">31.2126</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'雅安'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">103.015</span><span class="token punctuation">,</span> <span class="token number">29.9937</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'巴中'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">106.755</span><span class="token punctuation">,</span> <span class="token number">31.8574</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'资阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">104.651</span><span class="token punctuation">,</span> <span class="token number">30.1286</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'阿坝藏族羌族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">102.222</span><span class="token punctuation">,</span> <span class="token number">31.8992</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'甘孜藏族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">101.866</span><span class="token punctuation">,</span> <span class="token number">30.1414</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'凉山彝族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">102.242</span><span class="token punctuation">,</span> <span class="token number">27.9095</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'贵阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">106.713</span><span class="token punctuation">,</span> <span class="token number">26.5768</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'六盘水'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">104.873</span><span class="token punctuation">,</span> <span class="token number">26.5821</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'遵义'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">106.931</span><span class="token punctuation">,</span> <span class="token number">27.6926</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'安顺'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">105.927</span><span class="token punctuation">,</span> <span class="token number">26.2573</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'铜仁地'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.188</span><span class="token punctuation">,</span> <span class="token number">27.7184</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'黔西南布依族苗族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">104.895</span><span class="token punctuation">,</span> <span class="token number">25.0935</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'毕节地'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">105.288</span><span class="token punctuation">,</span> <span class="token number">27.3032</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'黔东南苗族侗族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">107.981</span><span class="token punctuation">,</span> <span class="token number">26.5831</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'黔南布依族苗族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">107.511</span><span class="token punctuation">,</span> <span class="token number">26.283</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'昆明'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">102.703</span><span class="token punctuation">,</span> <span class="token number">25.0499</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'曲靖'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">103.784</span><span class="token punctuation">,</span> <span class="token number">25.4913</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'玉溪'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">102.536</span><span class="token punctuation">,</span> <span class="token number">24.3472</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'保山'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">99.1647</span><span class="token punctuation">,</span> <span class="token number">25.1249</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'昭通'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">103.704</span><span class="token punctuation">,</span> <span class="token number">27.3656</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'丽江'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">100.277</span><span class="token punctuation">,</span> <span class="token number">26.9229</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'临沧'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">100.085</span><span class="token punctuation">,</span> <span class="token number">23.8971</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'楚雄彝族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">101.545</span><span class="token punctuation">,</span> <span class="token number">25.0549</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'红河哈尼族彝族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">103.18</span><span class="token punctuation">,</span> <span class="token number">23.4301</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'文山壮族苗族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">104.255</span><span class="token punctuation">,</span> <span class="token number">23.3803</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'西双版纳傣族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">100.799</span><span class="token punctuation">,</span> <span class="token number">22.0109</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'大理白族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">100.222</span><span class="token punctuation">,</span> <span class="token number">25.5842</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'德宏傣族景颇族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">98.5669</span><span class="token punctuation">,</span> <span class="token number">24.4484</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'怒江傈僳族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">98.903</span><span class="token punctuation">,</span> <span class="token number">25.8583</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'迪庆藏族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">99.709</span><span class="token punctuation">,</span> <span class="token number">27.859</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'拉萨'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">91.1189</span><span class="token punctuation">,</span> <span class="token number">29.6553</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'昌都地'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">97.1503</span><span class="token punctuation">,</span> <span class="token number">31.1816</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'山南地'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">91.805</span><span class="token punctuation">,</span> <span class="token number">29.2407</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'日喀则地'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">88.8884</span><span class="token punctuation">,</span> <span class="token number">29.2717</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'那曲地'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">92.0593</span><span class="token punctuation">,</span> <span class="token number">31.4524</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'阿里地'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">80.1027</span><span class="token punctuation">,</span> <span class="token number">32.5517</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'林芝地'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">94.4083</span><span class="token punctuation">,</span> <span class="token number">29.6352</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'西安'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">108.954</span><span class="token punctuation">,</span> <span class="token number">34.2649</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'铜川'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">108.948</span><span class="token punctuation">,</span> <span class="token number">34.9005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'宝鸡'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">107.139</span><span class="token punctuation">,</span> <span class="token number">34.3698</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'咸阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">108.71</span><span class="token punctuation">,</span> <span class="token number">34.3268</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'渭南'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.51</span><span class="token punctuation">,</span> <span class="token number">34.5073</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'延安'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.496</span><span class="token punctuation">,</span> <span class="token number">36.5948</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'汉中'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">107.031</span><span class="token punctuation">,</span> <span class="token number">33.0799</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'榆林'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.754</span><span class="token punctuation">,</span> <span class="token number">38.2954</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'安康'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.031</span><span class="token punctuation">,</span> <span class="token number">32.6917</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'商洛'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.943</span><span class="token punctuation">,</span> <span class="token number">33.8825</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'兰州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">103.835</span><span class="token punctuation">,</span> <span class="token number">36.0599</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'嘉峪关'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">98.2536</span><span class="token punctuation">,</span> <span class="token number">39.8001</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'金昌'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">102.175</span><span class="token punctuation">,</span> <span class="token number">38.4764</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'白银'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">104.151</span><span class="token punctuation">,</span> <span class="token number">36.5506</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'天水'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">105.702</span><span class="token punctuation">,</span> <span class="token number">34.5875</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'武威'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">102.634</span><span class="token punctuation">,</span> <span class="token number">37.9317</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'张掖'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">100.451</span><span class="token punctuation">,</span> <span class="token number">38.931</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'平凉'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">106.725</span><span class="token punctuation">,</span> <span class="token number">35.5097</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'酒泉'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">98.5139</span><span class="token punctuation">,</span> <span class="token number">39.7563</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'庆阳'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">107.862</span><span class="token punctuation">,</span> <span class="token number">35.9344</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'定西'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">104.622</span><span class="token punctuation">,</span> <span class="token number">35.5852</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'陇南'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">104.934</span><span class="token punctuation">,</span> <span class="token number">33.4695</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'临夏回族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">103.201</span><span class="token punctuation">,</span> <span class="token number">35.5914</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'甘南藏族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">102.899</span><span class="token punctuation">,</span> <span class="token number">34.9854</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'西宁'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">101.777</span><span class="token punctuation">,</span> <span class="token number">36.6172</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'海东地'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">102.086</span><span class="token punctuation">,</span> <span class="token number">36.5092</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'海北藏族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">100.973</span><span class="token punctuation">,</span> <span class="token number">36.9433</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'黄南藏族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">102.027</span><span class="token punctuation">,</span> <span class="token number">35.5399</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'海南藏族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">100.638</span><span class="token punctuation">,</span> <span class="token number">36.3244</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'果洛藏族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">100.295</span><span class="token punctuation">,</span> <span class="token number">34.4775</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'玉树藏族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">97.013</span><span class="token punctuation">,</span> <span class="token number">33.0183</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'海西蒙古族藏族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">97.3632</span><span class="token punctuation">,</span> <span class="token number">37.4214</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'银川'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">106.283</span><span class="token punctuation">,</span> <span class="token number">38.4628</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'石嘴山'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">106.386</span><span class="token punctuation">,</span> <span class="token number">39.0146</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'吴忠'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">106.194</span><span class="token punctuation">,</span> <span class="token number">37.9852</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'固原'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">106.281</span><span class="token punctuation">,</span> <span class="token number">36.011</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'中卫'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">105.686</span><span class="token punctuation">,</span> <span class="token number">37.4829</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'乌鲁木齐'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">87.6168</span><span class="token punctuation">,</span> <span class="token number">43.8235</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'克拉玛依'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">84.9312</span><span class="token punctuation">,</span> <span class="token number">45.5964</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'吐鲁番地'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">89.2107</span><span class="token punctuation">,</span> <span class="token number">43.007</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'哈密地'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">93.5502</span><span class="token punctuation">,</span> <span class="token number">42.8991</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'昌吉回族自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">87.9882</span><span class="token punctuation">,</span> <span class="token number">44.0044</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'博尔塔拉蒙古自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">82.0787</span><span class="token punctuation">,</span> <span class="token number">44.9126</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'巴音郭楞蒙古自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">86.1827</span><span class="token punctuation">,</span> <span class="token number">41.8974</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'阿克苏地'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">80.2445</span><span class="token punctuation">,</span> <span class="token number">41.1239</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'克孜勒苏柯尔克孜自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">76.67</span><span class="token punctuation">,</span> <span class="token number">39.8878</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'喀什地'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">75.9994</span><span class="token punctuation">,</span> <span class="token number">39.4657</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'和田地'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">79.7641</span><span class="token punctuation">,</span> <span class="token number">37.2296</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'伊犁哈萨克自治'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">81.3383</span><span class="token punctuation">,</span> <span class="token number">43.9233</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'塔城地'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">83.0148</span><span class="token punctuation">,</span> <span class="token number">46.7523</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'阿勒泰地'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">88.069</span><span class="token punctuation">,</span> <span class="token number">47.81</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'仙桃'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.453</span><span class="token punctuation">,</span> <span class="token number">30.3646</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'潜江'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">112.894</span><span class="token punctuation">,</span> <span class="token number">30.4198</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'天门'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">113.164</span><span class="token punctuation">,</span> <span class="token number">30.6513</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'神农架林'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">110.676</span><span class="token punctuation">,</span> <span class="token number">31.7448</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'五指山'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.517</span><span class="token punctuation">,</span> <span class="token number">18.7773</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'琼海'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">110.46</span><span class="token punctuation">,</span> <span class="token number">19.248</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'儋州'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.579</span><span class="token punctuation">,</span> <span class="token number">19.5199</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'文昌'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">110.748</span><span class="token punctuation">,</span> <span class="token number">19.6159</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'万宁'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">110.388</span><span class="token punctuation">,</span> <span class="token number">18.8122</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'东方'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">108.693</span><span class="token punctuation">,</span> <span class="token number">19.0807</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'定安县'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">110.447</span><span class="token punctuation">,</span> <span class="token number">19.4883</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'屯昌县'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">110.097</span><span class="token punctuation">,</span> <span class="token number">19.3686</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'澄迈县'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">110.016</span><span class="token punctuation">,</span> <span class="token number">19.7302</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'临高县'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.689</span><span class="token punctuation">,</span> <span class="token number">19.8973</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'白沙黎族自治县'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.44</span><span class="token punctuation">,</span> <span class="token number">19.2375</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'昌江黎族自治县'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.036</span><span class="token punctuation">,</span> <span class="token number">19.3083</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'乐东黎族自治县'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.175</span><span class="token punctuation">,</span> <span class="token number">18.7435</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'陵水黎族自治县'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">110.029</span><span class="token punctuation">,</span> <span class="token number">18.5167</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'保亭黎族苗族自治县'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.7</span><span class="token punctuation">,</span> <span class="token number">18.6263</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'琼中黎族苗族自治县'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">109.832</span><span class="token punctuation">,</span> <span class="token number">19.0467</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">'石河子'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">86.0526</span><span class="token punctuation">,</span> <span class="token number">44.3051</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> WHData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> jsonData<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// console.log(jsonData[i]);</span>        tmp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        tmp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> jsonData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>srcLoc <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tmp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> jsonData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dstLoc<span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        WHData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> planePath <span class="token operator">=</span> <span class="token string">'path://M1705.06,1318.313v-89.254l-319.9-221.799l0.073-208.063c0.521-84.662-26.629-121.796-63.961-121.491c-37.332-0.305-64.482,36.829-63.961,121.491l0.073,208.063l-319.9,221.799v89.254l330.343-157.288l12.238,241.308l-134.449,92.931l0.531,42.034l175.125-42.917l175.125,42.917l0.531-42.034l-134.449-92.931l12.238-241.308L1705.06,1318.313z'</span><span class="token punctuation">;</span>    planePath <span class="token operator">=</span> <span class="token string">"arrow"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> <span class="token function-variable function">convertData</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> dataItem <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> fromCoord <span class="token operator">=</span> geoCoordMap<span class="token punctuation">[</span>dataItem<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> toCoord <span class="token operator">=</span> geoCoordMap<span class="token punctuation">[</span>dataItem<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fromCoord <span class="token operator">&amp;&amp;</span> toCoord<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                    <span class="token literal-property property">coord</span><span class="token operator">:</span> fromCoord                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">coord</span><span class="token operator">:</span> toCoord                <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'#a6c84c'</span><span class="token punctuation">,</span> <span class="token string">'#ffa022'</span><span class="token punctuation">,</span> <span class="token string">'#46bee9'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> series <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Beijing'</span><span class="token punctuation">,</span> WHData<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        series<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'lines'</span><span class="token punctuation">,</span>            <span class="token literal-property property">zlevel</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token literal-property property">effect</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token literal-property property">period</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>                <span class="token literal-property property">trailLength</span><span class="token operator">:</span> <span class="token number">0.7</span><span class="token punctuation">,</span>                <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#fff'</span><span class="token punctuation">,</span>                <span class="token literal-property property">symbolSize</span><span class="token operator">:</span> <span class="token number">3</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">lineStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">normal</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">color</span><span class="token operator">:</span> color<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                    <span class="token literal-property property">curveness</span><span class="token operator">:</span> <span class="token number">0.2</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token function">convertData</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token literal-property property">name</span><span class="token operator">:</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'lines'</span><span class="token punctuation">,</span>                <span class="token literal-property property">zlevel</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>                <span class="token literal-property property">effect</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token literal-property property">period</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>                    <span class="token literal-property property">trailLength</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                    <span class="token literal-property property">symbol</span><span class="token operator">:</span> planePath<span class="token punctuation">,</span>                    <span class="token literal-property property">symbolSize</span><span class="token operator">:</span> <span class="token number">8</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">lineStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">normal</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">color</span><span class="token operator">:</span> color<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>                        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                        <span class="token literal-property property">opacity</span><span class="token operator">:</span> <span class="token number">0.4</span><span class="token punctuation">,</span>                        <span class="token literal-property property">curveness</span><span class="token operator">:</span> <span class="token number">0.2</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token function">convertData</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token literal-property property">name</span><span class="token operator">:</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'effectScatter'</span><span class="token punctuation">,</span>                <span class="token literal-property property">coordinateSystem</span><span class="token operator">:</span> <span class="token string">'geo'</span><span class="token punctuation">,</span>                <span class="token literal-property property">zlevel</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>                <span class="token literal-property property">rippleEffect</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">brushType</span><span class="token operator">:</span> <span class="token string">'stroke'</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">normal</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                        <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token string">'right'</span><span class="token punctuation">,</span>                        <span class="token literal-property property">formatter</span><span class="token operator">:</span> <span class="token string">'&#123;b&#125;'</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token function-variable function">symbolSize</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> val<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">itemStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">normal</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">color</span><span class="token operator">:</span> color<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">data</span><span class="token operator">:</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">dataItem</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">name</span><span class="token operator">:</span> dataItem<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>                        <span class="token literal-property property">value</span><span class="token operator">:</span> geoCoordMap<span class="token punctuation">[</span>dataItem<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>dataItem<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// based ready dom, initialize echarts instance </span>    <span class="token keyword">var</span> chart <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'main'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    option <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">'#404a59'</span><span class="token punctuation">,</span>        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'流量地图'</span><span class="token punctuation">,</span>            <span class="token literal-property property">subtext</span><span class="token operator">:</span> <span class="token string">'数据来自 npcap 实时抓取'</span><span class="token punctuation">,</span>            <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>            <span class="token literal-property property">textStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#fff'</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">tooltip</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">'item'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">legend</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">orient</span><span class="token operator">:</span> <span class="token string">'vertical'</span><span class="token punctuation">,</span>            <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token string">'bottom'</span><span class="token punctuation">,</span>            <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token string">'right'</span><span class="token punctuation">,</span>            <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'Beijing Top10'</span><span class="token punctuation">,</span> <span class="token string">'Shanghai Top10'</span><span class="token punctuation">,</span> <span class="token string">'Canton Top10'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token literal-property property">textStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#fff'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">selectedMode</span><span class="token operator">:</span> <span class="token string">'single'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">geo</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">map</span><span class="token operator">:</span> <span class="token string">'china'</span><span class="token punctuation">,</span>            <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">emphasis</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">false</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">roam</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token literal-property property">itemStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">normal</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">areaColor</span><span class="token operator">:</span> <span class="token string">'#323c48'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">borderColor</span><span class="token operator">:</span> <span class="token string">'#404a59'</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">emphasis</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">areaColor</span><span class="token operator">:</span> <span class="token string">'#2a333d'</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">series</span><span class="token operator">:</span> series    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// Use just the specified configurations and data charts. </span>    chart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>实验其中一次的结果如下：</p><p><img src="https://i.imgur.com/sB9CxoX.png" /></p><p>说明：图中的每一条路径上的箭头数量代表了流量包的数量。</p><h2 id="习题与思考题">习题与思考题</h2><p>1、应用WINPCAP能实现哪些网络应用?</p><ul><li>捕获原始数据包。不管这个包是发往本地机，还是其他机器之间的交换包</li><li>在数据包被发送到应用程序之前，通过用户定义的规则过滤</li><li>向网络发送原始数据包</li><li>对网络通信量做出统计</li></ul><p>应用 winpcap 实现的典型应用程序如 WireShark。</p><h2 id="项目源码地址">项目源码地址</h2><p><a href="https://github.com/FanyFull/ComputerNetworkExperiment"class="uri">https://github.com/FanyFull/ComputerNetworkExperiment</a></p><hr /><p>参考：</p><p>1、<ahref="https://www.reddit.com/r/ccna/comments/7mh86d/what_does_protocol_control_information_means/"class="uri">https://www.reddit.com/r/ccna/comments/7mh86d/what_does_protocol_control_information_means/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>计网</tag>
      
      <tag>实验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络实验二</title>
    <link href="/2022/05/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E9%AA%8C%E4%BA%8C/"/>
    <url>/2022/05/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E9%AA%8C%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="winpcap-编程">winpcap 编程</h1><h2 id="实验目的">实验目的</h2><ul><li>了解 winpcap 的架构</li><li>学习 winpcap 编程</li></ul><h2 id="实验原理">实验原理</h2><p>WinPcap是一个基于Win32平台的，用于捕获网络数据包并进行分析的开源库。</p><p>大多数网络应用程序通过被广泛使用的操作系统元件来访问网络，比如sockets。这是一种简单的实现方式，因为操作系统已经妥善处理了底层具体实现细节（比如协议处理，封装数据包等等），并且提供了一个与读写文件类似的，令人熟悉的接口。</p><p>然而，有些时候，这种“简单的方式”并不能满足任务的需求，因为有些应用程序需要直接访问网络中的数据包。也就是说，那些应用程序需要访问原始数据包，即没有被操作系统利用网络协议处理过的数据包。</p><p>WinPcap产生的目的，就是为Win32应用程序提供这种访问方式；WinPcap提供了以下功能：</p><ol type="1"><li>捕获原始数据包，无论它是发往某台机器的，还是在其他设备（共享媒介）上进行交换的<br /></li><li>在数据包发送给某应用程序前，根据用户指定的规则过滤数据包<br /></li><li>将原始数据包通过网络发送出去<br /></li><li>收集并统计网络流量信息</li></ol><p>以上这些功能需要借助安装在Win32内核中的网络设备驱动程序才能实现，再加上几个动态链接库DLL。</p><p>所有这些功能都能通过一个强大的编程接口来表现出来,易于开发，并能在不同的操作系统上使用。</p><p>WinPcap可以被用来制作网络分析、监控工具。一些基于WinPcap的典型应用有：</p><ol type="1"><li>网络与协议分析器 (network and protocol analyzers)<br /></li><li>网络监视器 (network monitors)<br /></li><li>网络流量记录器 (traffic loggers)<br /></li><li>网络流量发生器 (traffic generators)<br /></li><li>用户级网桥及路由 (user-level bridges and routers)<br /></li><li>网络入侵检测系统 (network intrusion detection systems (NIDS))<br /></li><li>网络扫描器 (network scanners)<br /></li><li>安全工具 (security tools)</li></ol><h2 id="实验内容">实验内容</h2><p>通过学习WINPCAP架构，编写一个网络抓包程序。</p><h2 id="实验过程">实验过程</h2><p>首先要说明一点，winpcap 官网建议使用 npcap，因为根据官网说明，winpcap已经不适用于 windows10 和windows11，有些函数可能会出现意想不到的效果。根据我的实践，发现winpcap无法获取适配器的具体名称，比如我的wifi6 适配器，使用 winpcap 就只能获取模糊的 "Microsoft" 这个名称，而使用npcap 就可以获取其完整的名称，而且 winpcap或识别不了一些适配器，而这一点在 npcap 上得到了很好的改善。</p><p><img src="https://i.imgur.com/hSbEMym.png" /></p><h3 id="npcap-的下载安装与配置">1、npcap 的下载安装与配置</h3><ul><li>访问npcap官网：https://www.winpcap.org/</li><li>选择npcap的最新版，下载Installer for Windows并安装</li><li>在VS中导入相应头文件和lib文件</li></ul><p>安装配置的详细过程见我的<ahref="https://fanyfull.github.io/2022/05/28/Visual-Studio-2022-%E9%85%8D%E7%BD%AE-winpcap-%E7%8E%AF%E5%A2%83/">这一篇博客</a>，这里不再赘述。</p><h3 id="获取设备列表">2、获取设备列表</h3><p>通常情况下，一个基于Npcap的应用程序所做的第一件事就是获得一个连接的网络适配器的列表。libpcap和Npcap都为这个目的提供了<code>cap_findalldevs_ex()</code>函数：这个函数返回一个<code>cap_if</code>结构的链接列表，每个结构都包含一个连接的适配器的全面信息。特别是，字段<code>name</code>和<code>description</code>分别包含了相应设备的名称和可读的描述。</p><p>下面的代码检索适配器列表并显示在屏幕上，如果没有找到适配器，则打印一个错误。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_MSC_VER</span></span><span class="token comment">/* * we do not want the warnings about the old deprecated and unsecure CRT functions * since these examples can be compiled under *nix as well */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"pcap.h"</span></span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">pcap_if_t</span><span class="token operator">*</span> alldevs<span class="token punctuation">;</span>    <span class="token class-name">pcap_if_t</span><span class="token operator">*</span> d<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> errbuf<span class="token punctuation">[</span>PCAP_ERRBUF_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">/* Retrieve the device list from the local machine */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pcap_findalldevs_ex</span><span class="token punctuation">(</span>PCAP_SRC_IF_STRING<span class="token punctuation">,</span>        <span class="token constant">NULL</span> <span class="token comment">/* auth is not needed */</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>alldevs<span class="token punctuation">,</span> errbuf<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span>            <span class="token string">"Error in pcap_findalldevs_ex: %s\n"</span><span class="token punctuation">,</span>            errbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* Print the list */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>d <span class="token operator">=</span> alldevs<span class="token punctuation">;</span> d <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> d <span class="token operator">=</span> d<span class="token operator">-></span>next<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d. %s"</span><span class="token punctuation">,</span> <span class="token operator">++</span>i<span class="token punctuation">,</span> d<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token operator">-></span>description<span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" (%s)\n"</span><span class="token punctuation">,</span> d<span class="token operator">-></span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" (No description available)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nNo interfaces found! Make sure Npcap is installed.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* We don't need any more the device list. Free it */</span>    <span class="token function">pcap_freealldevs</span><span class="token punctuation">(</span>alldevs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>运行结果：</p><p><img src="https://i.imgur.com/SvJrQHy.png" /></p><p>下面利用控制面板查看到的网络适配器：</p><p><img src="https://i.imgur.com/q8Z1qFN.png" /></p><p><img src="https://i.imgur.com/juJFZnP.png" /></p><p><strong>注</strong>：可以发现，通过程序打印出来的适配器列表和通过windows的设备管理器查看到的适配器列表有一些区别，主要是数量上的区别。已经打印出来的部分都可以和设备管理器中的对应得上。</p><p>关于这个代码的一些注释如下。</p><p>首先，<code>pcap_findalldevs_ex()</code>和其他libpcap函数一样，有一个<code>errbuf</code>参数。这个参数指向一个由libpcap填充的字符串，其中包括出错时的错误描述。</p><p>其次，请记住，并不是所有的操作系统都由libpcap支持，提供网络接口的描述，因此，如果我们想写一个可移植的应用程序，我们必须考虑描述为空的情况：在这种情况下，我们打印字符串"Nodescription available"。</p><p>最后注意，当我们用完这个列表后，我们用<code>pcap_freealldevs()</code>释放它。</p><p>假设我们已经编译了该程序，让我们试着运行它。在我的 Windows10系统上，我们得到的结果是</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">1. rpcap:&#x2F;&#x2F;\Device\NPF_&#123;3CEB626A-F27B-4267-B79D-2C6280763C13&#125; (Network adapter &#39;WAN Miniport (Network Monitor)&#39; on local host)2. rpcap:&#x2F;&#x2F;\Device\NPF_&#123;4BC226A2-E243-421C-9438-E30A96261403&#125; (Network adapter &#39;WAN Miniport (IPv6)&#39; on local host)3. rpcap:&#x2F;&#x2F;\Device\NPF_&#123;D3594FDB-28EF-4133-931A-1CDF0C2F56E1&#125; (Network adapter &#39;WAN Miniport (IP)&#39; on local host)4. rpcap:&#x2F;&#x2F;\Device\NPF_&#123;9464D53B-3103-4A4A-9B91-75A5DA984497&#125; (Network adapter &#39;Microsoft Wi-Fi Direct Virtual Adapter&#39; on local host)5. rpcap:&#x2F;&#x2F;\Device\NPF_&#123;0D437C70-8383-45EE-A70B-D00C04950AEF&#125; (Network adapter &#39;Intel(R) Wi-Fi 6 AX200 160MHz&#39; on local host)6. rpcap:&#x2F;&#x2F;\Device\NPF_&#123;6A1116E4-93E7-4A84-99D1-7E4CB0428CCE&#125; (Network adapter &#39;Microsoft Wi-Fi Direct Virtual Adapter #2&#39; on local host)7. rpcap:&#x2F;&#x2F;\Device\NPF_Loopback (Network adapter &#39;Adapter for loopback traffic capture&#39; on local host)8. rpcap:&#x2F;&#x2F;\Device\NPF_&#123;B5950B27-9860-4CEE-ADF9-3AFF86481291&#125; (Network adapter &#39;Realtek PCIe GbE Family Controller&#39; on local host)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="获取已安装设备的高级信息">3、获取已安装设备的高级信息</h3><p>上一部分（名为 "获取设备列表"的部分）演示了如何获取关于可用适配器的基本信息（即设备名称和描述）。实际上，Npcap还提供了其他高级信息。特别是，由<code>pcap_findalldevs_ex()</code>返回的每个<code>cap_if</code>结构都包含一个<code>cap_addr</code>结构的列表，其中包括：</p><ul><li>该接口的地址列表。</li><li>一个网络掩码的列表（每个掩码对应于地址列表中的一个条目）。</li><li>广播地址的列表（每个地址对应于地址列表中的一个条目）。</li><li>目标地址的列表（每个地址对应于地址列表中的一个条目）。</li></ul><p>此外，<code>cap_findalldevs_ex()</code>还可以返回远程适配器和位于指定本地文件夹中的pcap文件列表。</p><p>下面的代码提供了一个 <code>ifprint()</code> 函数，它可以打印<code>pcap_if</code> 结构的全部内容。程序对<code>pcap_findalldevs_ex()</code> 返回的每个条目都会调用该函数。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Print all the available information on the given interface */</span><span class="token keyword">void</span> <span class="token function">ifprint</span><span class="token punctuation">(</span><span class="token class-name">pcap_if_t</span> <span class="token operator">*</span>d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">pcap_addr_t</span> <span class="token operator">*</span>a<span class="token punctuation">;</span>  <span class="token keyword">char</span> ip6str<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">/* Name */</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>d<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* Description */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token operator">-></span>description<span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tDescription: %s\n"</span><span class="token punctuation">,</span>d<span class="token operator">-></span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* Loopback Address*/</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tLoopback: %s\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>d<span class="token operator">-></span>flags <span class="token operator">&amp;</span> PCAP_IF_LOOPBACK<span class="token punctuation">)</span><span class="token operator">?</span><span class="token string">"yes"</span><span class="token operator">:</span><span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* IP addresses */</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>a<span class="token operator">=</span>d<span class="token operator">-></span>addresses<span class="token punctuation">;</span>a<span class="token punctuation">;</span>a<span class="token operator">=</span>a<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tAddress Family: #%d\n"</span><span class="token punctuation">,</span>a<span class="token operator">-></span>addr<span class="token operator">-></span>sa_family<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">switch</span><span class="token punctuation">(</span>a<span class="token operator">-></span>addr<span class="token operator">-></span>sa_family<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">case</span> AF_INET<span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tAddress Family Name: AF_INET\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>addr<span class="token punctuation">)</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tAddress: %s\n"</span><span class="token punctuation">,</span><span class="token function">iptos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> <span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token operator">-></span>addr<span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>netmask<span class="token punctuation">)</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tNetmask: %s\n"</span><span class="token punctuation">,</span><span class="token function">iptos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> <span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token operator">-></span>netmask<span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>broadaddr<span class="token punctuation">)</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tBroadcast Address: %s\n"</span><span class="token punctuation">,</span><span class="token function">iptos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> <span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token operator">-></span>broadaddr<span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>dstaddr<span class="token punctuation">)</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tDestination Address: %s\n"</span><span class="token punctuation">,</span><span class="token function">iptos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> <span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token operator">-></span>dstaddr<span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> AF_INET6<span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tAddress Family Name: AF_INET6\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>addr<span class="token punctuation">)</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tAddress: %s\n"</span><span class="token punctuation">,</span> <span class="token function">ip6tos</span><span class="token punctuation">(</span>a<span class="token operator">-></span>addr<span class="token punctuation">,</span> ip6str<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ip6str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tAddress Family Name: Unknown\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>完整代码：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_MSC_VER</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pcap.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_WIN32</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;winsock.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;tchar.h></span></span>BOOL <span class="token function">LoadNpcapDlls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>_TCHAR npcap_dir<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span>UINT len<span class="token punctuation">;</span>len <span class="token operator">=</span> <span class="token function">GetSystemDirectory</span><span class="token punctuation">(</span>npcap_dir<span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Error in GetSystemDirectory: %x"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> FALSE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">_tcscat_s</span><span class="token punctuation">(</span>npcap_dir<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token function">_T</span><span class="token punctuation">(</span><span class="token string">"\\Npcap"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">SetDllDirectory</span><span class="token punctuation">(</span>npcap_dir<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Error in SetDllDirectory: %x"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> FALSE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">// Function prototypes</span><span class="token keyword">void</span> <span class="token function">ifprint</span><span class="token punctuation">(</span><span class="token class-name">pcap_if_t</span><span class="token operator">*</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">iptos</span><span class="token punctuation">(</span>u_long in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">ip6tos</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span> sockaddr<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> address<span class="token punctuation">,</span> <span class="token keyword">int</span> addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">pcap_if_t</span><span class="token operator">*</span> alldevs<span class="token punctuation">;</span><span class="token class-name">pcap_if_t</span><span class="token operator">*</span> d<span class="token punctuation">;</span><span class="token keyword">char</span> errbuf<span class="token punctuation">[</span>PCAP_ERRBUF_SIZE <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span><span class="token comment">/* Load Npcap and its functions. */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">LoadNpcapDlls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Couldn't load Npcap\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/* Retrieve the device list */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pcap_findalldevs</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>alldevs<span class="token punctuation">,</span> errbuf<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Error in pcap_findalldevs: %s\n"</span><span class="token punctuation">,</span> errbuf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Scan the list printing every entry */</span><span class="token keyword">for</span> <span class="token punctuation">(</span>d <span class="token operator">=</span> alldevs<span class="token punctuation">;</span>d<span class="token punctuation">;</span>d <span class="token operator">=</span> d<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">ifprint</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Free the device list */</span><span class="token function">pcap_freealldevs</span><span class="token punctuation">(</span>alldevs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Print all the available information on the given interface */</span><span class="token keyword">void</span> <span class="token function">ifprint</span><span class="token punctuation">(</span><span class="token class-name">pcap_if_t</span><span class="token operator">*</span> d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">pcap_addr_t</span><span class="token operator">*</span> a<span class="token punctuation">;</span><span class="token keyword">char</span> ip6str<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/* Name */</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> d<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* Description */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token operator">-></span>description<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tDescription: %s\n"</span><span class="token punctuation">,</span> d<span class="token operator">-></span>description<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* Loopback Address*/</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tLoopback: %s\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>d<span class="token operator">-></span>flags <span class="token operator">&amp;</span> PCAP_IF_LOOPBACK<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"yes"</span> <span class="token operator">:</span> <span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* IP addresses */</span><span class="token keyword">for</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> d<span class="token operator">-></span>addresses<span class="token punctuation">;</span>a<span class="token punctuation">;</span>a <span class="token operator">=</span> a<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tAddress Family: #%d\n"</span><span class="token punctuation">,</span> a<span class="token operator">-></span>addr<span class="token operator">-></span>sa_family<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>addr<span class="token operator">-></span>sa_family<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> AF_INET<span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tAddress Family Name: AF_INET\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>addr<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tAddress: %s\n"</span><span class="token punctuation">,</span> <span class="token function">iptos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token operator">-></span>addr<span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>netmask<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tNetmask: %s\n"</span><span class="token punctuation">,</span> <span class="token function">iptos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token operator">-></span>netmask<span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>broadaddr<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tBroadcast Address: %s\n"</span><span class="token punctuation">,</span> <span class="token function">iptos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token operator">-></span>broadaddr<span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>dstaddr<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tDestination Address: %s\n"</span><span class="token punctuation">,</span> <span class="token function">iptos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token operator">-></span>dstaddr<span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> AF_INET6<span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tAddress Family Name: AF_INET6\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__MINGW32__ </span><span class="token comment">/* Cygnus doesn't have IPv6 */</span></span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>addr<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tAddress: %s\n"</span><span class="token punctuation">,</span> <span class="token function">ip6tos</span><span class="token punctuation">(</span>a<span class="token operator">-></span>addr<span class="token punctuation">,</span> ip6str<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ip6str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tAddress Family Name: Unknown\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* From tcptraceroute, convert a numeric IP address to a string */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IPTOSBUFFERS</span><span class="token expression"><span class="token number">12</span></span></span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">iptos</span><span class="token punctuation">(</span>u_long in<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token keyword">char</span> output<span class="token punctuation">[</span>IPTOSBUFFERS<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">short</span> which<span class="token punctuation">;</span>u_char<span class="token operator">*</span> p<span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token punctuation">(</span>u_char<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>in<span class="token punctuation">;</span>which <span class="token operator">=</span> <span class="token punctuation">(</span>which <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> IPTOSBUFFERS <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> which <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>output<span class="token punctuation">[</span>which<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"%d.%d.%d.%d"</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> output<span class="token punctuation">[</span>which<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__MINGW32__ </span><span class="token comment">/* Cygnus doesn't have IPv6 */</span></span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">ip6tos</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span> sockaddr<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> address<span class="token punctuation">,</span> <span class="token keyword">int</span> addrlen<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">socklen_t</span> sockaddrlen<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span>sockaddrlen <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>sockaddrlen <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_storage</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getnameinfo</span><span class="token punctuation">(</span>sockaddr<span class="token punctuation">,</span>sockaddrlen<span class="token punctuation">,</span>address<span class="token punctuation">,</span>addrlen<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>NI_NUMERICHOST<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> address <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">return</span> address<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __MINGW32__ */</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>运行结果：</p><p><img src="https://i.imgur.com/y361wAw.png" /></p><p>然后我们看一下这个 WIFI6 适配器，发现它的地址和通过 powershell查看到的 ipv4 地址是一样的：</p><p><img src="https://i.imgur.com/2Ju5VZS.png" /></p><p><img src="https://i.imgur.com/RbtI2tx.png" /></p><p>结果分析：</p><p>npcap 获取了 6块逻辑网卡的高级信息：包含设备描述、IP地址、子网掩码、广播地址等。</p><h3 id="打开适配器并捕获数据包">4、打开适配器并捕获数据包</h3><p>现在我们已经看到了如何获得一个适配器来玩(对，play，所谓的 toyprograms)，让我们开始真正的工作，打开一个适配器并捕获一些流量。在这一课中，我们将编写一个程序，打印出流经适配器的每个数据包的一些信息。</p><p>打开一个捕获设备的函数是 <code>pcap_open()</code>。参数<code>snaplen</code>，<code>flags</code> 和 <code>to_ms</code>值得解释一下。</p><p><code>snaplen</code>：指定了要捕获的数据包的部分。在一些操作系统上（如xBSD和Win32），数据包驱动可以被配置为只捕获任何数据包的初始部分：这减少了要复制到应用程序的数据量，因此提高了捕获的效率。在这种情况下，我们使用65536这个值，这比我们可能遇到的最大MTU要高。通过这种方式，我们确保应用程序将始终收到整个数据包。</p><p><code>flags</code>：最重要的标志是指示适配器是否将进入混杂模式的标志。在正常操作中，适配器仅捕获来自网络的发往它的数据包；因此，其他主机交换的数据包将被忽略。相反，当适配器处于混杂模式时，它会捕获所有数据包，无论它们是否发往它。这意味着在共享媒体（如非交换以太网）上，Npcap将能够捕获其他主机的数据包。混杂模式是大多数捕获应用程序的默认模式，因此我们在以下代码中启用它。</p><p><code>to_ms</code>：指定读取超时，以毫秒为单位。适配器上的读取（例如，使用<code>pcap_dispatch()</code> 或 <code>pcap_next_ex()</code>）将始终在<code>to_ms</code>毫秒后返回，即使网络上没有可用的数据包。如果适配器处于统计模式，<code>to_ms</code>还定义统计报告之间的间隔（有关统计模式的信息，请参阅官网教程"wpcap_tut9"）。将 <code>to_ms</code> 设置为 0意味着没有超时，如果没有数据包到达，适配器上的读取永远不会返回。另一端的-1 超时会导致适配器上的读取始终立即返回。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_MSC_VER</span></span><span class="token comment">/* * we do not want the warnings about the old deprecated and unsecure CRT functions * since these examples can be compiled under *nix as well */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pcap.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;tchar.h></span></span>BOOL <span class="token function">LoadNpcapDlls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>_TCHAR npcap_dir<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span>UINT len<span class="token punctuation">;</span>len <span class="token operator">=</span> <span class="token function">GetSystemDirectory</span><span class="token punctuation">(</span>npcap_dir<span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Error in GetSystemDirectory: %x"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> FALSE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">_tcscat_s</span><span class="token punctuation">(</span>npcap_dir<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token function">_T</span><span class="token punctuation">(</span><span class="token string">"\\Npcap"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">SetDllDirectory</span><span class="token punctuation">(</span>npcap_dir<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Error in SetDllDirectory: %x"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> FALSE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/* prototype of the packet handler */</span><span class="token keyword">void</span> <span class="token function">packet_handler</span><span class="token punctuation">(</span>u_char<span class="token operator">*</span> param<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">pcap_pkthdr</span><span class="token operator">*</span> header<span class="token punctuation">,</span> <span class="token keyword">const</span> u_char<span class="token operator">*</span> pkt_data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">pcap_if_t</span><span class="token operator">*</span> alldevs<span class="token punctuation">;</span><span class="token class-name">pcap_if_t</span><span class="token operator">*</span> d<span class="token punctuation">;</span><span class="token keyword">int</span> inum<span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">pcap_t</span><span class="token operator">*</span> adhandle<span class="token punctuation">;</span><span class="token keyword">char</span> errbuf<span class="token punctuation">[</span>PCAP_ERRBUF_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span><span class="token comment">/* Load Npcap and its functions. */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">LoadNpcapDlls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Couldn't load Npcap\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/* Retrieve the device list */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pcap_findalldevs</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>alldevs<span class="token punctuation">,</span> errbuf<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Error in pcap_findalldevs: %s\n"</span><span class="token punctuation">,</span> errbuf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Print the list */</span><span class="token keyword">for</span> <span class="token punctuation">(</span>d <span class="token operator">=</span> alldevs<span class="token punctuation">;</span> d<span class="token punctuation">;</span> d <span class="token operator">=</span> d<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d. %s"</span><span class="token punctuation">,</span> <span class="token operator">++</span>i<span class="token punctuation">,</span> d<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token operator">-></span>description<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" (%s)\n"</span><span class="token punctuation">,</span> d<span class="token operator">-></span>description<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" (No description available)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nNo interfaces found! Make sure Npcap is installed.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter the interface number (1-%d):"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>inum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>inum <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> inum <span class="token operator">></span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nInterface number out of range.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* Free the device list */</span><span class="token function">pcap_freealldevs</span><span class="token punctuation">(</span>alldevs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Jump to the selected adapter */</span><span class="token keyword">for</span> <span class="token punctuation">(</span>d <span class="token operator">=</span> alldevs<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>d <span class="token operator">=</span> d<span class="token operator">-></span>next<span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* Open the device */</span><span class="token comment">/* Open the adapter */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>adhandle <span class="token operator">=</span> <span class="token function">pcap_open_live</span><span class="token punctuation">(</span>d<span class="token operator">-></span>name<span class="token punctuation">,</span><span class="token comment">// name of the device</span><span class="token number">65536</span><span class="token punctuation">,</span><span class="token comment">// portion of the packet to capture. </span>   <span class="token comment">// 65536 grants that the whole packet will be captured on all the MACs.</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token comment">// promiscuous mode (nonzero means promiscuous)</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token comment">// read timeout</span>errbuf<span class="token comment">// error buffer</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nUnable to open the adapter. %s is not supported by Npcap\n"</span><span class="token punctuation">,</span> d<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* Free the device list */</span><span class="token function">pcap_freealldevs</span><span class="token punctuation">(</span>alldevs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nlistening on %s...\n"</span><span class="token punctuation">,</span> d<span class="token operator">-></span>description<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* At this point, we don't need any more the device list. Free it */</span><span class="token function">pcap_freealldevs</span><span class="token punctuation">(</span>alldevs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* start the capture */</span><span class="token function">pcap_loop</span><span class="token punctuation">(</span>adhandle<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> packet_handler<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pcap_close</span><span class="token punctuation">(</span>adhandle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Callback function invoked by libpcap for every incoming packet */</span><span class="token keyword">void</span> <span class="token function">packet_handler</span><span class="token punctuation">(</span>u_char<span class="token operator">*</span> param<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">pcap_pkthdr</span><span class="token operator">*</span> header<span class="token punctuation">,</span> <span class="token keyword">const</span> u_char<span class="token operator">*</span> pkt_data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">tm</span><span class="token operator">*</span> ltime<span class="token punctuation">;</span><span class="token keyword">char</span> timestr<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">time_t</span> local_tv_sec<span class="token punctuation">;</span><span class="token comment">/* * unused parameters */</span><span class="token punctuation">(</span>VOID<span class="token punctuation">)</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>VOID<span class="token punctuation">)</span><span class="token punctuation">(</span>pkt_data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* convert the timestamp to readable format */</span>local_tv_sec <span class="token operator">=</span> header<span class="token operator">-></span>ts<span class="token punctuation">.</span>tv_sec<span class="token punctuation">;</span>ltime <span class="token operator">=</span> <span class="token function">localtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>local_tv_sec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strftime</span><span class="token punctuation">(</span>timestr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> timestr<span class="token punctuation">,</span> <span class="token string">"%H:%M:%S"</span><span class="token punctuation">,</span> ltime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s,%.6d len:%d\n"</span><span class="token punctuation">,</span> timestr<span class="token punctuation">,</span> header<span class="token operator">-></span>ts<span class="token punctuation">.</span>tv_usec<span class="token punctuation">,</span> header<span class="token operator">-></span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>运行结果：</p><p><img src="https://i.imgur.com/dxtXbjC.png" /></p><p>打开适配器后，可以使用 <code>pcap_dispatch()</code> 或<code>pcap_loop()</code> 开始捕获。这两个函数非常相似，不同之处在于<code>pcap_dispatch()</code> 在超时到期时返回（尽管不能保证），而<code>pcap_loop()</code> 在捕获到 <code>cnt</code>个数据包之前不会返回，因此它可以在下一个任意时间段内阻塞-利用网络。<code>pcap_loop()</code> 足以满足我们的目的，而<code>pcap_dispatch()</code> 通常用于更复杂的程序中。</p><p>这两个函数都有一个回调参数，<code>packet_handler</code>，指向一个将接收数据包的函数。这个函数由libpcap 为来自网络的每个新数据包调用，并接收一个通用状态（对应于<code>pcap_loop()</code> 和 <code>pcap_dispatch()</code> 的<code>user</code>参数），一个包含关于数据包的一些信息的标头，例如时间戳和长度以及数据包的实际数据，包括所有协议头。请注意，帧CRC通常不存在，因为它在帧验证后被网络适配器删除。另请注意，大多数适配器会丢弃具有错误CRC 的数据包，因此 Npcap 通常无法捕获它们。</p><p>上面的代码从 <code>pcap_pkthdr</code>标头中提取每个数据包的时间戳和长度，并将它们打印在屏幕上。</p><p>不过要注意，使用 <code>pcap_loop()</code>可能有一个缺点，主要与抓包驱动程序调用处理程序有关；因此，用户应用程序无法直接控制它。另一种方法（并且具有更易读的程序）是使用<code>pcap_next_ex()</code> 函数。这里就不再赘述。详情可以参考<ahref="https://npcap.com/guide/npcap-tutorial.html">官方教程</a>。</p><h3id="在没有回调的情况下捕获数据包">5、在没有回调的情况下捕获数据包</h3><p>本节的代码的行为与前面的程序（名为"打开适配器并捕获数据包"的部分）完全一样，但它使用了<code>pcap_next_ex()</code> 而不是 <code>pcap_loop()</code>。</p><p><code>pcap_loop()</code>的基于回调的捕获机制很优雅，在某些情况下它可能是一个很好的选择。然而，处理回调有时并不实用——它常常使程序更加复杂，特别是在多线程应用程序或C++类的情况下。</p><p>在这些情况下，<code>pcap_next_ex()</code>通过直接调用来获取数据包——使用<code>pcap_next_ex()</code>，数据包只有在程序员想要的时候才会被接收。</p><p>这个函数的参数与捕获回调相同。它接收一个适配器描述符和几个指针，这些指针将被初始化并返回给用户（一个指向<code>pcap_pkthdr</code>结构，另一个指向包含数据包的缓冲区）。</p><p>在下面的程序中，我们回收了上一节代码中的回调代码，并将其移到<code>main()</code>中，紧接着调用<code>pcap_next_ex()</code>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_MSC_VER</span></span><span class="token comment">/* * we do not want the warnings about the old deprecated and unsecure CRT functions * since these examples can be compiled under *nix as well */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pcap.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;tchar.h></span></span>BOOL <span class="token function">LoadNpcapDlls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>_TCHAR npcap_dir<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span>UINT len<span class="token punctuation">;</span>len <span class="token operator">=</span> <span class="token function">GetSystemDirectory</span><span class="token punctuation">(</span>npcap_dir<span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Error in GetSystemDirectory: %x"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> FALSE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">_tcscat_s</span><span class="token punctuation">(</span>npcap_dir<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token function">_T</span><span class="token punctuation">(</span><span class="token string">"\\Npcap"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">SetDllDirectory</span><span class="token punctuation">(</span>npcap_dir<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Error in SetDllDirectory: %x"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> FALSE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">pcap_if_t</span><span class="token operator">*</span> alldevs<span class="token punctuation">;</span><span class="token class-name">pcap_if_t</span><span class="token operator">*</span> d<span class="token punctuation">;</span><span class="token keyword">int</span> inum<span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">pcap_t</span><span class="token operator">*</span> adhandle<span class="token punctuation">;</span><span class="token keyword">int</span> res<span class="token punctuation">;</span><span class="token keyword">char</span> errbuf<span class="token punctuation">[</span>PCAP_ERRBUF_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">tm</span><span class="token operator">*</span> ltime<span class="token punctuation">;</span><span class="token keyword">char</span> timestr<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">pcap_pkthdr</span><span class="token operator">*</span> header<span class="token punctuation">;</span><span class="token keyword">const</span> u_char<span class="token operator">*</span> pkt_data<span class="token punctuation">;</span><span class="token class-name">time_t</span> local_tv_sec<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span><span class="token comment">/* Load Npcap and its functions. */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">LoadNpcapDlls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Couldn't load Npcap\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/* Retrieve the device list */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pcap_findalldevs</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>alldevs<span class="token punctuation">,</span> errbuf<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Error in pcap_findalldevs: %s\n"</span><span class="token punctuation">,</span> errbuf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Print the list */</span><span class="token keyword">for</span> <span class="token punctuation">(</span>d <span class="token operator">=</span> alldevs<span class="token punctuation">;</span> d<span class="token punctuation">;</span> d <span class="token operator">=</span> d<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d. %s"</span><span class="token punctuation">,</span> <span class="token operator">++</span>i<span class="token punctuation">,</span> d<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token operator">-></span>description<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" (%s)\n"</span><span class="token punctuation">,</span> d<span class="token operator">-></span>description<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" (No description available)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nNo interfaces found! Make sure Npcap is installed.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter the interface number (1-%d):"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>inum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>inum <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> inum <span class="token operator">></span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nInterface number out of range.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* Free the device list */</span><span class="token function">pcap_freealldevs</span><span class="token punctuation">(</span>alldevs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Jump to the selected adapter */</span><span class="token keyword">for</span> <span class="token punctuation">(</span>d <span class="token operator">=</span> alldevs<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>d <span class="token operator">=</span> d<span class="token operator">-></span>next<span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* Open the adapter */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>adhandle <span class="token operator">=</span> <span class="token function">pcap_open_live</span><span class="token punctuation">(</span>d<span class="token operator">-></span>name<span class="token punctuation">,</span><span class="token comment">// name of the device</span><span class="token number">65536</span><span class="token punctuation">,</span><span class="token comment">// portion of the packet to capture. </span>   <span class="token comment">// 65536 grants that the whole packet will be captured on all the MACs.</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token comment">// promiscuous mode (nonzero means promiscuous)</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token comment">// read timeout</span>errbuf<span class="token comment">// error buffer</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nUnable to open the adapter. %s is not supported by Npcap\n"</span><span class="token punctuation">,</span> d<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* Free the device list */</span><span class="token function">pcap_freealldevs</span><span class="token punctuation">(</span>alldevs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nlistening on %s...\n"</span><span class="token punctuation">,</span> d<span class="token operator">-></span>description<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* At this point, we don't need any more the device list. Free it */</span><span class="token function">pcap_freealldevs</span><span class="token punctuation">(</span>alldevs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* Retrieve the packets */</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>res <span class="token operator">=</span> <span class="token function">pcap_next_ex</span><span class="token punctuation">(</span>adhandle<span class="token punctuation">,</span> <span class="token operator">&amp;</span>header<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pkt_data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">/* Timeout elapsed */</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">/* convert the timestamp to readable format */</span>local_tv_sec <span class="token operator">=</span> header<span class="token operator">-></span>ts<span class="token punctuation">.</span>tv_sec<span class="token punctuation">;</span>ltime <span class="token operator">=</span> <span class="token function">localtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>local_tv_sec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strftime</span><span class="token punctuation">(</span>timestr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> timestr<span class="token punctuation">,</span> <span class="token string">"%H:%M:%S"</span><span class="token punctuation">,</span> ltime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s,%.6d len:%d\n"</span><span class="token punctuation">,</span> timestr<span class="token punctuation">,</span> header<span class="token operator">-></span>ts<span class="token punctuation">.</span>tv_usec<span class="token punctuation">,</span> header<span class="token operator">-></span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error reading the packets: %s\n"</span><span class="token punctuation">,</span> <span class="token function">pcap_geterr</span><span class="token punctuation">(</span>adhandle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">pcap_close</span><span class="token punctuation">(</span>adhandle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>为什么我们使用 <code>pcap_next_ex()</code> 而不是以前的<code>pcap_next()</code>？因为 <code>pcap_next()</code>有一些缺点。首先，它的效率很低，因为它隐藏了回调方法，但仍然依赖于<code>pcap_dispatch()</code>。其次，它不能检测<code>EOF</code>，所以当从文件中收集数据包时，它不是很有用。</p><p>还请注意，<code>pcap_next_ex()</code>对成功、超时、错误和<code>EOF</code>条件返回不同的值。</p><h3 id="过滤流量">6、过滤流量</h3><p>Npcap（以及libpcap）提供的最强大的功能之一是过滤引擎。它提供了一种非常有效的方式来接收网络流量的子集，并且（通常）与Npcap 提供的捕获机制集成。用于过滤数据包的函数是<code>pcap_compile()</code> 和 <code>pcap_setfilter()</code>。</p><p><code>pcap_compile()</code>接受一个包含高级布尔（过滤器）表达式的字符串，并生成一个低级别的字节码，该字节码可由数据包驱动程序中的文件过滤器引擎解释。布尔表达式的语法可以在本文档的过滤表达式语法部分中找到。</p><p><code>pcap_setfilter()</code>在内核驱动中把一个过滤器与一个捕获会话联系起来。一旦调用<code>pcap_setfilter()</code>，相关的过滤器将被应用于所有来自网络的数据包，所有符合要求的数据包（即布尔表达式评估为真的数据包）将被实际拷贝到应用程序中。</p><p>下面的代码展示了如何编译和设置一个过滤器。注意，我们必须从描述适配器的<code>pcap_if</code> 结构中获取网络掩码，因为由<code>pcap_compile()</code> 创建的一些过滤器需要它。</p><p>在这个代码片段中传递给 <code>pcap_compile()</code> 的过滤器是“ip andtcp”，这意味着“只保留 IPv4 和 TCP 的数据包并将它们传递给应用程序”。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token operator">-></span>addresses <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token comment">/* Retrieve the mask of the first address of the interface */</span>  netmask<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>d<span class="token operator">-></span>addresses<span class="token operator">-></span>netmask<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">.</span>S_un<span class="token punctuation">.</span>S_addr<span class="token punctuation">;</span><span class="token keyword">else</span>  <span class="token comment">/* If the interface is without an address   * we suppose to be in a C class network */</span>  netmask<span class="token operator">=</span><span class="token number">0xffffff</span><span class="token punctuation">;</span> <span class="token comment">//compile the filter</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pcap_compile</span><span class="token punctuation">(</span>adhandle<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fcode<span class="token punctuation">,</span> <span class="token string">"ip and tcp"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> netmask<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span>    <span class="token string">"\nUnable to compile the packet filter. Check the syntax.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* Free the device list */</span>  <span class="token function">pcap_freealldevs</span><span class="token punctuation">(</span>alldevs<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//set the filter</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pcap_setfilter</span><span class="token punctuation">(</span>adhandle<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fcode<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span><span class="token string">"\nError setting the filter.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* Free the device list */</span>  <span class="token function">pcap_freealldevs</span><span class="token punctuation">(</span>alldevs<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>上面的代码将会在下面的“解读数据包”这一节种使用到。</p><h3 id="解读数据包">7、解读数据包</h3><p>现在我们能够捕获和过滤网络流量，我们希望将我们的知识用于一个简单的“现实世界”应用程序。</p><p>在本节中，我们将从之前的小节中获取代码，并使用这些部分来构建一个更有用的程序。当前程序的主要目的是展示如何解析和解释捕获的数据包的协议头。由此生成的应用程序，称为UDPdump，打印我们网络上 UDP 流量的摘要。</p><p>我们选择了解析和显示UDP协议，因为它比其他协议（如TCP）更容易获得，因此是一个很好的初始例子。让我们看一下代码。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pcap.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Winsock2.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;tchar.h></span></span>BOOL <span class="token function">LoadNpcapDlls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    _TCHAR npcap_dir<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    UINT len<span class="token punctuation">;</span>    len <span class="token operator">=</span> <span class="token function">GetSystemDirectory</span><span class="token punctuation">(</span>npcap_dir<span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Error in GetSystemDirectory: %x"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">_tcscat_s</span><span class="token punctuation">(</span>npcap_dir<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token function">_T</span><span class="token punctuation">(</span><span class="token string">"\\Npcap"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">SetDllDirectory</span><span class="token punctuation">(</span>npcap_dir<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Error in SetDllDirectory: %x"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 4 bytes IP address */</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ip_address</span> <span class="token punctuation">&#123;</span>    u_char byte1<span class="token punctuation">;</span>    u_char byte2<span class="token punctuation">;</span>    u_char byte3<span class="token punctuation">;</span>    u_char byte4<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ip_address<span class="token punctuation">;</span><span class="token comment">/* IPv4 header */</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ip_header</span> <span class="token punctuation">&#123;</span>    u_char  ver_ihl<span class="token punctuation">;</span> <span class="token comment">// Version (4 bits) + IP header length (4 bits)</span>    u_char  tos<span class="token punctuation">;</span>     <span class="token comment">// Type of service </span>    u_short tlen<span class="token punctuation">;</span>    <span class="token comment">// Total length </span>    u_short identification<span class="token punctuation">;</span> <span class="token comment">// Identification</span>    u_short flags_fo<span class="token punctuation">;</span> <span class="token comment">// Flags (3 bits) + Fragment offset (13 bits)</span>    u_char  ttl<span class="token punctuation">;</span>      <span class="token comment">// Time to live</span>    u_char  proto<span class="token punctuation">;</span>    <span class="token comment">// Protocol</span>    u_short crc<span class="token punctuation">;</span>      <span class="token comment">// Header checksum</span>    ip_address  saddr<span class="token punctuation">;</span> <span class="token comment">// Source address</span>    ip_address  daddr<span class="token punctuation">;</span> <span class="token comment">// Destination address</span>    u_int  op_pad<span class="token punctuation">;</span>     <span class="token comment">// Option + Padding</span><span class="token punctuation">&#125;</span>ip_header<span class="token punctuation">;</span><span class="token comment">/* UDP header*/</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">udp_header</span> <span class="token punctuation">&#123;</span>    u_short sport<span class="token punctuation">;</span> <span class="token comment">// Source port</span>    u_short dport<span class="token punctuation">;</span> <span class="token comment">// Destination port</span>    u_short len<span class="token punctuation">;</span>   <span class="token comment">// Datagram length</span>    u_short crc<span class="token punctuation">;</span>   <span class="token comment">// Checksum</span><span class="token punctuation">&#125;</span>udp_header<span class="token punctuation">;</span><span class="token comment">/* prototype of the packet handler */</span><span class="token keyword">void</span> <span class="token function">packet_handler</span><span class="token punctuation">(</span>u_char<span class="token operator">*</span> param<span class="token punctuation">,</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">pcap_pkthdr</span><span class="token operator">*</span> header<span class="token punctuation">,</span>    <span class="token keyword">const</span> u_char<span class="token operator">*</span> pkt_data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">pcap_if_t</span><span class="token operator">*</span> alldevs<span class="token punctuation">;</span>    <span class="token class-name">pcap_if_t</span><span class="token operator">*</span> d<span class="token punctuation">;</span>    <span class="token keyword">int</span> inum<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">pcap_t</span><span class="token operator">*</span> adhandle<span class="token punctuation">;</span>    <span class="token keyword">char</span> errbuf<span class="token punctuation">[</span>PCAP_ERRBUF_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    u_int netmask<span class="token punctuation">;</span>    <span class="token keyword">char</span> packet_filter<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"ip and udp"</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">bpf_program</span> fcode<span class="token punctuation">;</span>    <span class="token comment">/* Load Npcap and its functions. */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">LoadNpcapDlls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Couldn't load Npcap\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* Retrieve the device list */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pcap_findalldevs_ex</span><span class="token punctuation">(</span>PCAP_SRC_IF_STRING<span class="token punctuation">,</span>        <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>alldevs<span class="token punctuation">,</span> errbuf<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Error in pcap_findalldevs: %s\n"</span><span class="token punctuation">,</span> errbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* Print the list */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>d <span class="token operator">=</span> alldevs<span class="token punctuation">;</span> d<span class="token punctuation">;</span> d <span class="token operator">=</span> d<span class="token operator">-></span>next<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d. %s"</span><span class="token punctuation">,</span> <span class="token operator">++</span>i<span class="token punctuation">,</span> d<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token operator">-></span>description<span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" (%s)\n"</span><span class="token punctuation">,</span> d<span class="token operator">-></span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" (No description available)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nNo interfaces found! Make sure Npcap is installed.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter the interface number (1-%d):"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>inum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>inum <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> inum <span class="token operator">></span> i<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nInterface number out of range.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* Free the device list */</span>        <span class="token function">pcap_freealldevs</span><span class="token punctuation">(</span>alldevs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* Jump to the selected adapter */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>d <span class="token operator">=</span> alldevs<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>d <span class="token operator">=</span> d<span class="token operator">-></span>next<span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* Open the adapter */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>adhandle <span class="token operator">=</span> <span class="token function">pcap_open</span><span class="token punctuation">(</span>d<span class="token operator">-></span>name<span class="token punctuation">,</span> <span class="token comment">// name of the device</span>        <span class="token number">65536</span><span class="token punctuation">,</span> <span class="token comment">// portion of the packet to capture. </span>               <span class="token comment">// 65536 grants that the whole packet</span>               <span class="token comment">// will be captured on all the MACs.</span>        PCAP_OPENFLAG_PROMISCUOUS<span class="token punctuation">,</span> <span class="token comment">// promiscuous mode</span>        <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token comment">// read timeout</span>        <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// remote authentication</span>        errbuf <span class="token comment">// error buffer</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span>            <span class="token string">"\nUnable to open the adapter. %s is not supported by Npcap\n"</span><span class="token punctuation">,</span>            d<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* Free the device list */</span>        <span class="token function">pcap_freealldevs</span><span class="token punctuation">(</span>alldevs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* Check the link layer. We support only Ethernet for simplicity. */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pcap_datalink</span><span class="token punctuation">(</span>adhandle<span class="token punctuation">)</span> <span class="token operator">!=</span> DLT_EN10MB<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nThis program works only on Ethernet networks.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* Free the device list */</span>        <span class="token function">pcap_freealldevs</span><span class="token punctuation">(</span>alldevs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token operator">-></span>addresses <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token comment">/* Retrieve the mask of the first address of the interface */</span>        netmask <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>d<span class="token operator">-></span>addresses<span class="token operator">-></span>netmask<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">.</span>S_un<span class="token punctuation">.</span>S_addr<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token comment">/* If the interface is without addresses         * we suppose to be in a C class network */</span>        netmask <span class="token operator">=</span> <span class="token number">0xffffff</span><span class="token punctuation">;</span>    <span class="token comment">//compile the filter</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pcap_compile</span><span class="token punctuation">(</span>adhandle<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fcode<span class="token punctuation">,</span> packet_filter<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> netmask<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nUnable to compile the packet filter. Check the syntax.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* Free the device list */</span>        <span class="token function">pcap_freealldevs</span><span class="token punctuation">(</span>alldevs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//set the filter</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pcap_setfilter</span><span class="token punctuation">(</span>adhandle<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fcode<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nError setting the filter.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* Free the device list */</span>        <span class="token function">pcap_freealldevs</span><span class="token punctuation">(</span>alldevs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nlistening on %s...\n"</span><span class="token punctuation">,</span> d<span class="token operator">-></span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* At this point, we don't need any more the device list. Free it */</span>    <span class="token function">pcap_freealldevs</span><span class="token punctuation">(</span>alldevs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* start the capture */</span>    <span class="token function">pcap_loop</span><span class="token punctuation">(</span>adhandle<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> packet_handler<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Callback function invoked by libpcap for every incoming packet */</span><span class="token keyword">void</span> <span class="token function">packet_handler</span><span class="token punctuation">(</span>u_char<span class="token operator">*</span> param<span class="token punctuation">,</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">pcap_pkthdr</span><span class="token operator">*</span> header<span class="token punctuation">,</span>    <span class="token keyword">const</span> u_char<span class="token operator">*</span> pkt_data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">tm</span> ltime<span class="token punctuation">;</span>    <span class="token keyword">char</span> timestr<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    ip_header<span class="token operator">*</span> ih<span class="token punctuation">;</span>    udp_header<span class="token operator">*</span> uh<span class="token punctuation">;</span>    u_int ip_len<span class="token punctuation">;</span>    u_short sport<span class="token punctuation">,</span> dport<span class="token punctuation">;</span>    <span class="token class-name">time_t</span> local_tv_sec<span class="token punctuation">;</span>    <span class="token comment">/*     * Unused variable     */</span>    <span class="token punctuation">(</span>VOID<span class="token punctuation">)</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* convert the timestamp to readable format */</span>    local_tv_sec <span class="token operator">=</span> header<span class="token operator">-></span>ts<span class="token punctuation">.</span>tv_sec<span class="token punctuation">;</span>    <span class="token function">localtime_s</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ltime<span class="token punctuation">,</span> <span class="token operator">&amp;</span>local_tv_sec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strftime</span><span class="token punctuation">(</span>timestr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> timestr<span class="token punctuation">,</span> <span class="token string">"%H:%M:%S"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ltime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* print timestamp and length of the packet */</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s.%.6d len:%d "</span><span class="token punctuation">,</span> timestr<span class="token punctuation">,</span> header<span class="token operator">-></span>ts<span class="token punctuation">.</span>tv_usec<span class="token punctuation">,</span> header<span class="token operator">-></span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* retireve the position of the ip header */</span>    ih <span class="token operator">=</span> <span class="token punctuation">(</span>ip_header<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>pkt_data <span class="token operator">+</span>        <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//length of ethernet header</span>      <span class="token comment">/* retireve the position of the udp header */</span>    ip_len <span class="token operator">=</span> <span class="token punctuation">(</span>ih<span class="token operator">-></span>ver_ihl <span class="token operator">&amp;</span> <span class="token number">0xf</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>    uh <span class="token operator">=</span> <span class="token punctuation">(</span>udp_header<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>u_char<span class="token operator">*</span><span class="token punctuation">)</span>ih <span class="token operator">+</span> ip_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* convert from network byte order to host byte order */</span>    sport <span class="token operator">=</span> <span class="token function">ntohs</span><span class="token punctuation">(</span>uh<span class="token operator">-></span>sport<span class="token punctuation">)</span><span class="token punctuation">;</span>    dport <span class="token operator">=</span> <span class="token function">ntohs</span><span class="token punctuation">(</span>uh<span class="token operator">-></span>dport<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* print ip addresses and udp ports */</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d.%d.%d.%d.%d -> %d.%d.%d.%d.%d\n"</span><span class="token punctuation">,</span>        ih<span class="token operator">-></span>saddr<span class="token punctuation">.</span>byte1<span class="token punctuation">,</span>        ih<span class="token operator">-></span>saddr<span class="token punctuation">.</span>byte2<span class="token punctuation">,</span>        ih<span class="token operator">-></span>saddr<span class="token punctuation">.</span>byte3<span class="token punctuation">,</span>        ih<span class="token operator">-></span>saddr<span class="token punctuation">.</span>byte4<span class="token punctuation">,</span>        sport<span class="token punctuation">,</span>        ih<span class="token operator">-></span>daddr<span class="token punctuation">.</span>byte1<span class="token punctuation">,</span>        ih<span class="token operator">-></span>daddr<span class="token punctuation">.</span>byte2<span class="token punctuation">,</span>        ih<span class="token operator">-></span>daddr<span class="token punctuation">.</span>byte3<span class="token punctuation">,</span>        ih<span class="token operator">-></span>daddr<span class="token punctuation">.</span>byte4<span class="token punctuation">,</span>        dport<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>运行如下：</p><p><img src="https://i.imgur.com/oO5Otcu.png" /></p><p>首先，我们将过滤器设置为“ip and udp”。通过这种方式，我们可以确定<code>packet_handler()</code> 将只接收 IPv4 上的 UDP数据包：这简化了解析并提高了程序的效率。</p><p>我们还创建了几个描述 IP 和 UDP标头的结构。<code>packet_handler()</code>使用这些结构来正确定位各种标头字段。</p><p><code>packet_handler()</code> 虽然仅限于单个协议解析器（UDP overIPv4），但它显示了 tcpdump/WinDump等复杂的“嗅探器”如何解码网络流量。由于我们对 MAC标头不感兴趣，因此我们跳过它。为简单起见，在开始捕获之前，我们使用<code>pcap_datalink()</code> 检查 MAC层，以确保我们正在处理以太网网络。这样我们就可以确定 MAC 报头正好是 14个字节。</p><p>IP 标头位于 MAC 标头之后。我们将从 IP 标头中提取 IP源地址和目标地址。</p><p>到达 UDP 报头有点复杂，因为 IP 报头没有固定的长度。因此，我们使用 IP头的长度字段来知道它的大小。一旦我们知道 UDP标头的位置，我们就提取源端口和目标端口。</p><h2 id="习题与思考题">习题与思考题</h2><p>1、WINPCAP(Npcap)是否能实现服务质量的控制？</p><p>答：不能。WinPcap可以独立地通过主机协议发送和接受数据，如同TCP-IP。这就意味着WinPcap不能阻止、过滤或操纵同一机器上的其他应用程序的通讯：它仅仅能简单地"监视"在网络上传输的数据包。所以，它不能提供类似网络流量控制、服务质量调度和个人防火墙之类的支持，因而不能实现服务质量的控制。</p><hr /><p>参考：<br />1、<a href="https://npcap.com/guide/npcap-tutorial.html"class="uri">https://npcap.com/guide/npcap-tutorial.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>作业</tag>
      
      <tag>实验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机游戏设计第二次上机</title>
    <link href="/2022/05/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%B8%8A%E6%9C%BA/"/>
    <url>/2022/05/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%B8%8A%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<p>题目描述：</p><p>一个冒险家到达一个旧的废墟，主入口的大门由一个巨大的石头人看守，只有说服了这个石头人，冒险家才能通过，玩家手头有2种不同的对话方式：<strong>胁迫、赞美</strong>。为这种情况编写一个有底稿的交谈，在这个交谈的每一个菜单中，玩家对应每一种方法都有一个可供选择的选项。你的交谈<strong>至少应该包含四个交换</strong>，如果玩家选择从头到尾都选择一种一致的方法，那么石头人就打开大门；如果玩家没有，那么石头人就拒绝打开大门然后交谈就此结束。</p><p><img src="https://i.imgur.com/l67yIZU.png" /></p>]]></content>
    
    
    
    <tags>
      
      <tag>作业</tag>
      
      <tag>上机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机游戏设计上机一 游戏世界分析</title>
    <link href="/2022/05/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E4%B8%8A%E6%9C%BA%E4%B8%80-%E6%B8%B8%E6%88%8F%E4%B8%96%E7%95%8C%E5%88%86%E6%9E%90/"/>
    <url>/2022/05/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E4%B8%8A%E6%9C%BA%E4%B8%80-%E6%B8%B8%E6%88%8F%E4%B8%96%E7%95%8C%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>题目：</p><p>《...》游戏世界分析</p><p>要求：</p><ul><li>内容：6 个维度分析，先简要介绍所选择游戏</li><li>游戏类型：RPG 或 RTS</li><li>时间 1.5 次上机完成</li><li>提交方式<ul><li>每人提交电子文档，以学号和姓名为文件名，pdf 或 word2007 格式</li><li>班长收集和压缩，以专业班级为文件名</li></ul></li></ul><h1 id="尼尔自动人形游戏世界分析">《尼尔：自动人形》游戏世界分析</h1><h2 id="游戏介绍">游戏介绍</h2><p>《尼尔：自动人形》（日语：ニーアオートマタ，英语：NieR:Automata，又译作“尼尔：机械纪元”），是由白金工作室开发，史克威尔艾尼克斯发行的动作角色扮演游戏，2017年于PlayStation4与Microsoft Windows平台推出，隔年移植至XboxOne平台。本作是《龙背上的骑兵》的外传游戏——2010年发行的《尼尔》之续作。故事设定在遥远的未来，地球被外星机械生物全面占领，而人类只能移往月球上生存；为了重回地球，人类派出人造人部队“寄叶”降下地球以消灭机械生物。本作以部队中的新型人造人二号B型与九号S型等为中心，描述著两方势力间漫长的战争。共有27种结局（A-Z及DLC结局），主要剧情结局有5种。</p><p>《尼尔：自动人形》于2014年开始计划制作，由齐藤阳介担当项目制作人，并由横尾太郎负责总监与剧本编写，音乐由冈部启一、帆足圭吾创作。白金工作室的稻叶敦志设计本作标题，吉田明彦担纲主要人物设定。本作所有版本的出货量合计超过600万套，因口碑与销量俱佳，也促使了官方将《尼尔》自此作为一个系列发展。</p><h2 id="游戏世界分析">游戏世界分析</h2><p>从物理维度、时间维度、环境维度、感情维度、道德维度以及现实度六个维度分析《尼尔：自动人形》游戏世界。</p><h3 id="物理维度">物理维度</h3><p>所谓物理维度，我的理解是包括了游戏人物设计，人物动作设计，玩家操作方式、游戏音乐设计等方面的分析。下面就其中的一条或者几条对游戏的物理维度进行具体分析。</p><p>首先，本作是一款经典的 3d游戏。这是毋庸置疑的。作品中的所有人物以及场景都采用 3D建模。游戏中的整体物理系统是和我们现实世界的物理规则大部分是吻合的。比如碰撞系统，重力系统等。</p><p>接下来，我们具体分析游戏中人物的物理动作设计。</p><p>尼尔中的闪避和跳跃这两个使用频率较高适用性较广的两个动作，被设定为能取消任何当前动作，只要按下按键就立即施放。在游戏中具体体现就是，不论玩家是站立状态，跳跃状态还是各种攻击招式途中，不论你是什么姿势下，按下回避键，她就能回避。这个设计是可以在相当程度上提高用户的游戏体验度。但是，在游戏中其实还是存在着玩家无法回避的时候，比如收到伤害的途中，这是游戏设计者经过平衡过的设计。这些无法回避的场合确实会让游戏体验变得更好。</p><p>然后是对尼尔的开放世界这一模式的分析。</p><p>尼尔的开放世界，从准确的角度来看，它其实不是严格的开放世界。我们知道，一般我们在谈论游戏的自由度时，脑海浮现的可能就是那种大型开放式的沙盒游戏，即有很大的地图，可以探索很多区域的游戏。从这个角度来看，其实我们很难将尼尔完全定义为开放世界游戏。游戏的开发者也承认，他在制作尼尔这款游戏的地图的时候，就是把《塞尔达传说：时光之笛》的地图抄一遍，包括地图区域的划分，甚至是从这一头移动到那一头的所需要的时间，都是严格按照塞尔达传说的设定。虽然没法完全定义尼尔为开放世界游戏，但是玩家在游玩的过程中，可以随意穿梭于地图中，在游戏中具体的表现就是使用穿梭机，穿梭于地球的各个地图，也可以穿梭回月球，玩家也可以探索已完成的场景，就这点而言，尼尔提供的自由感是不属于一些开放世界沙盒游戏的。</p><p>另外，要提到一点，游戏的音乐制作非常优秀，与其说优秀，不如说是相当惊艳。尼尔拥有数十首质量上乘的OST，能够数小时不重复。这些bgm能够完美地与剧情和场景结合在一起，不论是战斗时的热血恢弘还是在营地时的祥和轻松，都能给玩家的游戏体验带来生化。尼尔的很多经典音乐的旋律其实比较简单，但是简单的旋律中却蕴含着很醇厚的情感，因此，可以与剧情和画面有着很好的交融，很容易让人沉浸其中。</p><h3 id="时间维度">时间维度</h3><p>游戏的整体时间系统与现实并无关联。其时间系统是固定的设计。</p><p>上面的物理维度也提到过，在地图区域从这一头移动到那一头所需要的时间，是严格按照塞尔达传说的设定，因此，可以猜测，在时间的维度这一块，尼尔在一定程度上借鉴了塞尔达的时间设定。</p><p>在正常的探索过程中，游戏中的时间在某种意义上是静止的，因为玩家可以花费任意时间来刷支线任务，或者联系人物的招式。在战斗的过程中，与普通小怪进行战斗不会有时间的限制。在某些主线章节的末尾，战斗是有一定的时间限制的，如果玩家没有在规定的时间内战胜关卡怪物，那么，时间将会重置，同样地，如果玩家在战斗过程中死亡，时间以及游戏进度同样将会重置至挑战章节怪物的节点。另外，有一些挑战性的支线任务，比如训练角色的某项能力去挑战一些地下修罗场，每一场战斗也是有时间限制的，当玩家满足在规定的时间内杀死怪物这个条件之后，才能够获取最终的奖励。</p><p>游戏系统有一个玩家游玩时间的记录。游戏主线的攻略时间大概在40小时以上，但是尼尔有一个有趣的设定，就是游戏的解决有很多种，并且，有所谓的“真结局”，所以，整个游戏的游玩时间可以达到80小时以上。</p><h3 id="环境维度">环境维度</h3><p>尼尔的环境设计，主要采用了末日风格。尼尔作为末世题材世界观的游戏，各个大地图的创意设计是非常优秀的，从破败却又充满生机的废墟都市，到被漫天黄沙埋葬的人类遗址，又或者是巨人生存过一般的森林王国，山与流水，铺满青苔的城堡，飞鸟与鹿，每一个场景都能感受到制作的用心。</p><p>但是不能追求细节。有很多环境的建模欠缺细节，游戏中出现的场景并不是都能够探索，甚至有的时候还会出现穿模的情况。好在它有爽快的战斗系统来进行弥补。</p><h3 id="感情维度">感情维度</h3><p>这个游戏是我两年前打通的，我至今对其一句台词记忆犹新：</p><blockquote><p>最后都没有看我一眼。</p></blockquote><p>在游戏中，游乐园有一个诡异的boss，名为simone，其实是用了法国存在主义文学家的名字西蒙娜·德·波伏娃(Simonede Beauvoir)。</p><p><img src="https://i.imgur.com/Pound6i.png" /></p><p>用2b打完这个boss会出现这个boss的回忆(走二周目9s路线更能体现，打完boss之后的字幕其实是波伏娃著作《第二性》中原文的再表达)。她似乎深爱着一个机器人，这个机器人的名字是法国存在主义代表人物——让·保罗·萨特(Jean-PaulSartre)。游戏里在帕斯卡村的机器人正是他，萨特的存在主义三大原则：一、“存在先于本质”，二、“自由选择”，三、“世界是荒诞的”。萨特与波伏娃是情侣，两人终生未婚，萨特一生风流，游戏中让·保罗的信体现了这一点。</p><p>在9s视角下打败波伏娃后的字幕：</p><blockquote><p>呐 你看到了吗 我变得很漂亮了吧 所以 你喜欢我吗<br />呐 看看我吧 我变得很漂亮了 可以只注视着我吗<br />这个衣服很漂亮吧<br />说到底 这种感情到底是什么呢 我不知道<br />但是为了得到那个人的注意 我会加油<br />所以 我决定了<br />以前 听其他老机器人说过 美丽的东西可以获得爱<br />美丽的东西 那是什么<br />我们机械生命体没有这种概念 调查了以前人类的资料 通过装饰让肌肤变得漂亮<br />借以变得美丽 我要为了那个人 变得美丽<br />听说东方发现了贵重宝石 为了得到它 我摔得满身是伤<br />真是闪闪发光的宝石呢<br />又听到一个传闻说 吃掉人造人可以获得永恒的美丽<br />真是愚蠢呢 但是只要有一丝可能 我就会去做<br />吃起来就像腐烂的油一样我吃了好多 但是他还是不看我<br />我又去学唱歌 他还是不看我<br />不看我 不看我 不看我 不看我 不看我 不看我<br />不看我 不看我 不看我 不看我 不看我 不看我 不看我<br />他对这些都没兴趣 我到底是为了什么变成这样的 我看着镜子发出了悲鸣</p></blockquote><p>不得不说，在游戏的过程中，看到这样的字幕，给人感情上的冲击是有的。机器人的感情，这不是现在游戏作品中新鲜的话题，可是，这个台词的设计却给人一种很悲伤的感觉。重要的是，这一段台词有联系波伏娃的著作《第二性》中的内容：</p><blockquote><p>一、但情况依然是，女人打扮得越漂亮，她就越受到尊重；她越是需要工作，绝佳的外貌对她就越是有利；姣好容貌是一种武器，一面旗帜，一种防御，一封推荐信。<br />二、服饰对许多女人之所以如此重要，是因为它们可以使女人凭借幻觉，同时重塑外部世界和她们的内在自我。<br />三、打扮不仅仅是修饰，它还表明了女人的社会处境。<br />四、人们常说，女人打扮是为了引起别的女人的嫉妒，而这种嫉妒实际上是成功的明显标志；但这并不是唯一的目的。通过被人嫉妒、羡慕或赞赏，她想得到的是对她的美、她的典雅、她的情趣——对她自己的绝对肯定；她为了实现自己而展示自己。</p></blockquote><p>如此看来，尼尔的感情维度是有经过精心的设计的。</p><h3 id="道德维度">道德维度</h3><p>对于道德维度的分析，我们可以联想到经典的机器人与人的关系。</p><p>尼尔是一部彻头彻尾的悲剧。无论是从整体的世界，还是从2b和a2和9s这几个游戏角色来看。整个世界的背景是人类灭亡，被机器人毁灭。而游戏的角色也是被赋予悲剧的命运，先赋予他们梦想和活着的意义，然后再把它们一一粉碎。于是作为旁观者的玩家只能难过，、遗憾、怒吼以及无能为力。</p><p>故事的一开始就注定了结局。并且是一种 badending。从这一点看，作者的道德观和我们传统的中国的道德观不太一样。中国的艺术作品，尤其是传统的艺术作品，其结局都是happyending。而尼尔所展现的是一种悲观的宿命观，这个和日本的文化有一定的联系。</p><p>我们再看其他方面，就游戏里面展现的，机器人似乎也有爱情，似乎也有友情，这一点我们不管是从主线还是支线，都可以看出。而主要角色的命运最后竟然是不断地重复之前的命运，那个悲惨的命运，仿佛堕入了无尽的深渊，无尽的地狱，这给玩家带来了极大的心灵上的沉重感。我无法主观地说这种道德观就一定不好，每个人都有自己的评判标准，尊重每个人自由的选择似乎才是我们应该做的。</p><h3 id="现实度维度">现实度维度</h3><p>故事的背景设定在地球。整个环境的设计也有地球的特色。没落残败的都市，却又长满荒草，典型的现代化都市。游乐园场景也是根据现实中的游乐园来进行建模设计，沙漠的现实感也很强。当然，有一些超现代化的建筑充满了科幻感，这个明显超越了现实。另外，月球的场景设计同样超越了现实。</p><p>但是，整个游戏有一个出色的点，和现实的联系也非常强烈，就是最后我们打到真正的结局时，我们可以打破世界维度的限制，来到“现实”，那就是，pod会一次次问你，</p><blockquote><p>你是否还要继续？<br />你选择在此放弃吗？<br />你承认这个世界没有意义吗？<br />你认为区区游戏很愚蠢吧？<br />要就此放弃吗？</p></blockquote><blockquote><p>当然。<br />不。<br />不。<br />不。<br />绝不。</p></blockquote><p>典型的日本的中二气息，却让人欲罢不能。</p><p>最后我们玩家可以利用弹幕机来攻击游戏的制作人名单，以此来改变人造人那该死的无尽的宿命，在此过程中，有无数的玩家献祭的自己的存档来帮助自己一次次复活，一次次来尝试打破命运的循环，整个过程充满了现实的味道，因为那个制作人的名单真真切切是尼尔的制作人名单。</p><p>接受救援之后BGM会变调，舒缓有力的女声变成了众人一起的合唱，那瞬间忽然有种错觉，仿佛看到了世界上有那么多同伴。</p><p>原来那么多人和我一样，为了拯救他们而努力着。</p><p>“原来我真的不是孤身一人”</p><p>虽然是单机游戏，最后确实给人一种有很多同伴的感觉。</p><p>当然，最后，我们可以选择献出自己的存档，来帮助其他玩家闯过最后一关。</p><p>至此，游戏结束。</p><hr /><p>参考：<br />1、<a href="https://www.bilibili.com/read/cv3530623"class="uri">https://www.bilibili.com/read/cv3530623</a><br />2、<a href="https://www.zhihu.com/question/48094475"class="uri">https://www.zhihu.com/question/48094475</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Visual Studio 2022 配置 winpcap 环境</title>
    <link href="/2022/05/28/Visual-Studio-2022-%E9%85%8D%E7%BD%AE-winpcap-%E7%8E%AF%E5%A2%83/"/>
    <url>/2022/05/28/Visual-Studio-2022-%E9%85%8D%E7%BD%AE-winpcap-%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<p>这个可以同样地应用到 npcap 中。可以说，npcap 的配置和 winpcap<strong>完全一致</strong>。</p><p>另，说明，虽然本篇博客写的是 winpcap的配置，但是本人在实验中使用的其实还是 npcap，另外，我也建议你使用npcap，因为那是针对 win10 和 win11 升级的，winpcap 的很多功能在 win10 和win11 中无法使用，比如有些适配器它根本识别不了。诸君，慎重。</p><p>之所以这篇博客没有改成 npcap 的配置教程，单纯是因为我懒。</p><h1 id="安装软件">安装软件</h1><p>首先，到 <a href="https://www.winpcap.org/">winpcap</a> 官网下载winpcap 这个软件。注意，这个是软件，下面我们还要下载一个开发包。</p><p><img src="https://i.imgur.com/3GHQPH6.png" /></p><p>然后，安装即可，注意，在安装的过程中有一个选项要勾选上：</p><p><img src="https://i.imgur.com/Gg8iQyV.png" /></p><h1 id="安装开发包">安装开发包</h1><p>即开发者所需要用到的 api。</p><p>来着<ahref="https://www.winpcap.org/devel.htm">开发包下载网页</a>，然后解压到一个没有中文路径的目录即可：</p><p><img src="https://i.imgur.com/kqk9npg.png" /></p><h1 id="测试">测试</h1><p>上面的目录解压后，有一个官方示例：</p><p><img src="https://i.imgur.com/hGBjutV.png" /></p><p>这个我们使用 VS 打开工程的话，IDE会自动给我们升级项目，在这样的情况下，项目是可以正常运行的。</p><h1 id="配置">配置</h1><p>下面我们来手动配置这个环境。</p><p>打开项目配置，</p><p><img src="https://i.imgur.com/3dPp0Cz.png" /></p><p>然后将刚刚解压的目录中的 Include 路径和 Lib路径分别添加到包含目录和库目录中，</p><p><img src="https://i.imgur.com/xaW6hFH.png" /></p><p>然后设置预处理器，即添加<strong>WIN32;WPCAP;HAVE_REMOTE</strong>，</p><p><img src="https://i.imgur.com/InJzIdB.png" /></p><p>然后是链接器，添加这个附加库目录，<strong>注意</strong>这个附加库目录是Lib 目录下的 x64 子目录，</p><p><img src="https://i.imgur.com/ZE4Khav.png" /></p><p>然后添加两个附加依赖项，即<strong>wpcap.lib;Packet.lib</strong>，</p><p><img src="https://i.imgur.com/vkX5thl.png" /></p><p>然后在写代码时，我们需要添加经典的预定义：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_MSC_VER</span></span><span class="token comment">/* * we do not want the warnings about the old deprecated and unsecure CRT functions * since these examples can be compiled under *nix as well */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>之后就可以愉快地写代码了。</p><p>下面是测试：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_MSC_VER</span></span><span class="token comment">/* * we do not want the warnings about the old deprecated and unsecure CRT functions * since these examples can be compiled under *nix as well */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"pcap.h"</span></span> <span class="token comment">// 函数原型</span><span class="token keyword">void</span> <span class="token function">ifprint</span><span class="token punctuation">(</span><span class="token class-name">pcap_if_t</span><span class="token operator">*</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">iptos</span><span class="token punctuation">(</span>u_long in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">pcap_if_t</span><span class="token operator">*</span> alldevs<span class="token punctuation">;</span><span class="token class-name">pcap_if_t</span><span class="token operator">*</span> d<span class="token punctuation">;</span><span class="token keyword">char</span> errbuf<span class="token punctuation">[</span>PCAP_ERRBUF_SIZE <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> source<span class="token punctuation">[</span>PCAP_ERRBUF_SIZE <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter the device you want to list:\n"</span><span class="token string">"rpcap://              ==> lists interfaces in the local machine\n"</span><span class="token string">"rpcap://hostname:port ==> lists interfaces in a remote machine\n"</span><span class="token string">"                          (rpcapd daemon must be up and running\n"</span><span class="token string">"                           and it must accept 'null' authentication)\n"</span><span class="token string">"file://foldername     ==> lists all pcap files in the give folder\n\n"</span><span class="token string">"Enter your choice: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fgets</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> PCAP_ERRBUF_SIZE<span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>source<span class="token punctuation">[</span>PCAP_ERRBUF_SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token comment">/* 获得接口列表 */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pcap_findalldevs_ex</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>alldevs<span class="token punctuation">,</span> errbuf<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Error in pcap_findalldevs: %s\n"</span><span class="token punctuation">,</span> errbuf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 扫描列表并打印每一项 */</span><span class="token keyword">for</span> <span class="token punctuation">(</span>d <span class="token operator">=</span> alldevs<span class="token punctuation">;</span> d<span class="token punctuation">;</span> d <span class="token operator">=</span> d<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">ifprint</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">pcap_freealldevs</span><span class="token punctuation">(</span>alldevs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 打印所有可用信息 */</span><span class="token keyword">void</span> <span class="token function">ifprint</span><span class="token punctuation">(</span><span class="token class-name">pcap_if_t</span><span class="token operator">*</span> d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">pcap_addr_t</span><span class="token operator">*</span> a<span class="token punctuation">;</span><span class="token comment">/* 设备名(Name) */</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> d<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 设备描述(Description) */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token operator">-></span>description<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tDescription: %s\n"</span><span class="token punctuation">,</span> d<span class="token operator">-></span>description<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* Loopback Address*/</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tLoopback: %s\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>d<span class="token operator">-></span>flags <span class="token operator">&amp;</span> PCAP_IF_LOOPBACK<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"yes"</span> <span class="token operator">:</span> <span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* IP addresses */</span><span class="token keyword">for</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> d<span class="token operator">-></span>addresses<span class="token punctuation">;</span> a<span class="token punctuation">;</span> a <span class="token operator">=</span> a<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tAddress Family: #%d\n"</span><span class="token punctuation">,</span> a<span class="token operator">-></span>addr<span class="token operator">-></span>sa_family<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>addr<span class="token operator">-></span>sa_family<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> AF_INET<span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tAddress Family Name: AF_INET\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>addr<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tAddress: %s\n"</span><span class="token punctuation">,</span> <span class="token function">iptos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token operator">-></span>addr<span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>netmask<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tNetmask: %s\n"</span><span class="token punctuation">,</span> <span class="token function">iptos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token operator">-></span>netmask<span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>broadaddr<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tBroadcast Address: %s\n"</span><span class="token punctuation">,</span> <span class="token function">iptos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token operator">-></span>broadaddr<span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>dstaddr<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tDestination Address: %s\n"</span><span class="token punctuation">,</span> <span class="token function">iptos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token operator">-></span>dstaddr<span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tAddress Family Name: Unknown\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 将数字类型的IP地址转换成字符串类型的 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IPTOSBUFFERS</span>    <span class="token expression"><span class="token number">12</span></span></span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">iptos</span><span class="token punctuation">(</span>u_long in<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token keyword">char</span> output<span class="token punctuation">[</span>IPTOSBUFFERS<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">short</span> which<span class="token punctuation">;</span>u_char<span class="token operator">*</span> p<span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token punctuation">(</span>u_char<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>in<span class="token punctuation">;</span>which <span class="token operator">=</span> <span class="token punctuation">(</span>which <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> IPTOSBUFFERS <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> which <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>output<span class="token punctuation">[</span>which<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"%d.%d.%d.%d"</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> output<span class="token punctuation">[</span>which<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>运行结果：</p><p><img src="https://i.imgur.com/fvrgHvp.png" /></p><h1 id="其它可能会出现的问题">其它可能会出现的问题</h1><p>如果出现如下的错误：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">ErrorLNK2019unresolved external symbol __imp_getnameinfo referenced in function ip6tos<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/HGCG4DO.png" /></p><p>那么，解决的方法很简单，只需要在链接器的输入的附加依赖中。</p><p><img src="https://i.imgur.com/HucWZkc.png" /></p><p>至于为什么要添加这个库，只需要稍微到网上了解一下这个库就行。</p><hr /><p>参考：</p><p>1、<a href="https://blog.csdn.net/qsycn/article/details/4455531"class="uri">https://blog.csdn.net/qsycn/article/details/4455531</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>计网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode Couldn&#39;t download IntelliCode model. Please check your network connectivity 问题解决</title>
    <link href="/2022/05/16/VSCode-Couldn-t-download-IntelliCode-model-Please-check-your-network-connectivity-%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <url>/2022/05/16/VSCode-Couldn-t-download-IntelliCode-model-Please-check-your-network-connectivity-%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<p>今天被这个问题困扰了好久没有解决。</p><p>经过一番查找探究，发现其实应该是微软的这个官方扩展的版本更新之后出了问题。所以回退到上一个版本即可。</p><p><img src="https://i.imgur.com/3X5tItq.png" /></p><p>在此之前，试了各种方案，什么设置 Proxy Support 的 mode，设置 StrictSSL，都不管用，</p><p><img src="https://i.imgur.com/unWAEWn.png" /></p><p>其实，微软官方描述了这个问题，详见<ahref="https://docs.microsoft.com/en-us/visualstudio/intellicode/intellicode-visual-studio-code">这个链接</a>，</p><p><img src="https://i.imgur.com/hTVJwbs.png" /></p><p>我也是点进它给的几个链接才学到切换版本的方法，毕竟在今天之前一直这个扩展一直都是正常运行的。</p>]]></content>
    
    
    <categories>
      
      <category>VSCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VSCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C 语言关于 %d 打印 double 值的问题</title>
    <link href="/2022/05/15/C-%E8%AF%AD%E8%A8%80%E5%85%B3%E4%BA%8E-d-%E6%89%93%E5%8D%B0-double-%E5%80%BC%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/05/15/C-%E8%AF%AD%E8%A8%80%E5%85%B3%E4%BA%8E-d-%E6%89%93%E5%8D%B0-double-%E5%80%BC%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>先贴上我在 v2ex 上问的<ahref="https://www.v2ex.com/t/852434">这个问题</a>：</p><p>让我疑惑的代码：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">3.3f</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> a <span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>运行截图：</p><p><img src="https://i.imgur.com/vBxXbL8.png" /></p><p>运行环境：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">Microsoft Windows [版本 10.0.19043.1645]gcc version 11.3.0 (MinGW-W64 x86_64-ucrt-posix-seh, built by Brecht Sanders)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>在这个环境下每一次运行出来的结果都是一样的。</p><p>然后切换到 Linux 的环境：</p><p>运行截图：</p><p><img src="https://i.imgur.com/ytf92lJ.png" /></p><p>运行环境：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">cenosgcc version 8.5.0 20210514 (Red Hat 8.5.0-4) (GCC)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>在 Linux 这个环境下每一次的运行结果都是不一样的。</p><p>然后我想弄清楚的是，这个问题是不是就是<strong>将 double类型的值在内存中截掉一半</strong>然后打印出来(截掉前半段)。</p><p>所以我们用一个程序来验证一下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">union</span> HEXDOUBLE<span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> num<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> bnum<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">float</span> m <span class="token operator">=</span> <span class="token number">3.3f</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">union</span> HEXDOUBLE a<span class="token punctuation">;</span>    a<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>m <span class="token operator">*</span> n<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token comment">//大端模式顺着来0-8，小端模式逆着来8-0</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x "</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>bnum<span class="token punctuation">[</span><span class="token number">8</span> <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>运行结果：</p><p><img src="https://i.imgur.com/d3pO6xQ.png" /></p><p>(double) a * b = 0x40 1a 66 66 60 00 00 00, 截断四个字节后 0x60 00 0000 = 1610612736</p><p>我利用这个<a href="https://tooltt.com/floatconverter/">工具网</a>将16 进制的数转换了一下，使用 IEEE754 标准，如下：</p><p><img src="https://i.imgur.com/GjH8NrJ.png" /></p><p>发现在 Windows 下，C 语言 %d 打印 double 的结果确实是把 double类型在内存中的值截掉一半然后打印。</p><p>对于 Linux 系统中的值，我在 v 站中得到了这样的解释：</p><blockquote><p>在 x86_64下，整数和指针参数通过通用寄存器传递，浮点数通过浮点数寄存器传递。<br />这里调用时往浮点数寄存器写入了参数，但函数里面却去通用寄存器里读取，所以结果是随机的。<br />在 x86 下，参数都通过栈传递，结果应该是 double 截断的结果。</p></blockquote><p>但是，新的问题又来了，为什么第二次打印 <code>a.num</code> 的值一直是<code>10</code> 呢？</p><p><img src="https://i.imgur.com/gJlMDv9.png" /></p><p>也罢，暂时把这个问题先搁置在这里，汇编编译出来的代码如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-s" data-language="s"><code class="language-s">.file&quot;test_format_d.c&quot;.text.section.rodata.LC1:.string&quot;%d\n&quot;.LC2:.string&quot;%x &quot;.LC3:.string&quot;%lf&quot;.text.globlmain.typemain, @functionmain:.LFB0:.cfi_startprocpushq%rbp.cfi_def_cfa_offset 16.cfi_offset 6, -16movq%rsp, %rbp.cfi_def_cfa_register 6subq$32, %rspmovss.LC0(%rip), %xmm0movss%xmm0, -8(%rbp)movl$2, -12(%rbp)cvtss2sd-8(%rbp), %xmm1cvtsi2sd-12(%rbp), %xmm0mulsd%xmm1, %xmm0movsd%xmm0, -24(%rbp)movsd-24(%rbp), %xmm0movl$.LC1, %edimovl$1, %eaxcallprintfmovsd-24(%rbp), %xmm0movl$.LC1, %edimovl$1, %eaxcallprintfmovl$0, -4(%rbp)jmp.L2.L3:movl$7, %eaxsubl-4(%rbp), %eaxcltqmovzbl-24(%rbp,%rax), %eaxmovzbl%al, %eaxmovl%eax, %esimovl$.LC2, %edimovl$0, %eaxcallprintfaddl$1, -4(%rbp).L2:cmpl$7, -4(%rbp)jle.L3movl$10, %edicallputcharmovsd-24(%rbp), %xmm0movl$.LC1, %edimovl$1, %eaxcallprintfmovsd-24(%rbp), %xmm0movl$.LC3, %edimovl$1, %eaxcallprintfmovl$0, %eaxleave.cfi_def_cfa 7, 8ret.cfi_endproc.LFE0:.sizemain, .-main.section.rodata.align 4.LC0:.long1079194419.ident&quot;GCC: (GNU) 8.5.0 20210514 (Red Hat 8.5.0-4)&quot;.section.note.GNU-stack,&quot;&quot;,@progbits<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/y0bv5PU.png" /></p>]]></content>
    
    
    <categories>
      
      <category>C 语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C 语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git 学习记录</title>
    <link href="/2022/02/09/Git-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/02/09/Git-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="git-回退版本">git 回退版本</h1><p>git reset 命令用于回退版本，可以指定退回某一次提交的版本。</p><p>git reset 命令语法格式如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset <span class="token punctuation">[</span>--soft <span class="token operator">|</span> <span class="token parameter variable">--mixed</span> <span class="token operator">|</span> --hard<span class="token punctuation">]</span> <span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><code>--mixed</code>为默认，可以不用带该参数，用于重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset  <span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>实例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> reset HEAD^            <span class="token comment"># 回退所有内容到上一个版本  </span>$ <span class="token function">git</span> reset HEAD^ hello.php  <span class="token comment"># 回退 hello.php 文件的版本到上一个版本  </span>$ <span class="token function">git</span> reset  052e            <span class="token comment"># 回退到指定版本</span>$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD^^    <span class="token comment"># 回退到上上个版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>HEAD 说明：</p><ul><li>HEAD 表示当前版本</li><li>HEAD^ 上一个版本</li><li>HEAD^^ 上上一个版本</li><li>HEAD^^^ 上上上一个版本</li></ul><p>以此类推...</p><p>也可以使用 ~ 数字表示：</p><ul><li>HEAD~0 表示当前版本</li><li>HEAD~1 上一个版本</li><li>HEAD^2 上上一个版本</li><li>HEAD^3 上上上一个版本</li></ul><h1 id="git-撤销或者丢掉本地修改">git 撤销或者丢掉本地修改</h1><p>在没有 <code>git add</code> 的情况下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> checkout -- filepathname<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>在已经 <code>git add</code> 的情况下就只能使用 <code>git reset</code>这样的命令。</p><h1 id="一些常用的命令">一些常用的命令</h1><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"fanyfull"</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"lxyfl6688@gmail.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"Add a banana to the shopping list"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>同</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit <span class="token parameter variable">--message</span> <span class="token string">"Add a banana to the shopping list"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>m 是 message 的意思。参见 <ahref="https://git-scm.com/docs/git-commit"class="uri">https://git-scm.com/docs/git-commit</a>，可以查看各种options。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit <span class="token parameter variable">--amend</span> --reset-author<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><blockquote><p>When used with -C/-c/--amend options, or when committing after aconflicting cherry-pick, declare that the authorship of the resultingcommit now belongs to the committer. This also renews the authortimestamp.</p></blockquote><p>这个命令应用的场景是，clone别人的项目之后，然后自己再进行开发，然后在本地提交。</p><hr /><p>参考：</p><p>1、<a href="https://www.runoob.com/git/git-reset.html"class="uri">https://www.runoob.com/git/git-reset.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一台电脑搭建两个 Hexo 博客</title>
    <link href="/2022/01/24/%E4%B8%80%E5%8F%B0%E7%94%B5%E8%84%91%E6%90%AD%E5%BB%BA%E4%B8%A4%E4%B8%AA-Hexo-%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/01/24/%E4%B8%80%E5%8F%B0%E7%94%B5%E8%84%91%E6%90%AD%E5%BB%BA%E4%B8%A4%E4%B8%AA-Hexo-%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>2022.05.23 更新：</p><p>遇到了一个连接超时的问题，在<ahref="https://www.jianshu.com/p/c3aac5024877">这里</a>得到了解决。</p><p>修改后的 ssh 的 config 文件如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">Host github.com    HostName ssh.github.com    User git    IdentityFile ~&#x2F;.ssh&#x2F;id_rsa    Port 443#第二个新账号，#&quot;xxxxxx&quot;为前缀名，可以任意设置，要记住，后面需要用到Host luflyan.github.comHostName ssh.github.comUser gitIdentityFile ~&#x2F;.ssh&#x2F;luflyan    Port 443<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>另外</strong>，</p><p>不需要取消 git 的全局用户名和邮箱。只需要在另一个博客的 git目录下更改用户名和邮箱即可。</p><p>以下是原博客。</p><hr /><h1 id="前言">前言</h1><p>因为我比较喜欢重装系统，最近也确实重装了不少次，仗着学校可以免费使用Windows系统，我确实有点不知道收敛了。说回来，不收敛也有不收敛的好处，每次重装完系统还是能够收获很多快乐的。</p><p>之前也配置过不少次了，想着每一次都是去看别人的博客，这一次自己也记录一下子吧。下一次就方便了。而且，更方便我去重装系统了。</p><p>下面就开工。</p><h1 id="配置过程">配置过程</h1><p>首先，本操作是建立在电脑上本身就已经搭建好一个 Hexo博客的情况下。关于搭建一个 Hexo 博客的参考，可以参见<ahref="https://fanyfull.github.io/2021/10/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA-GitHub-%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/#%E4%BD%BF%E7%94%A8-hexo-%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6">GiHub+ Hexo 真·从零开始搭建个人博客</a>。</p><p>然后，创建密钥：</p><figure><div class="code-wrapper"><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">ssh-keygen <span class="token operator">-</span>t rsa <span class="token operator">-</span>C <span class="token string">"user.email"</span> <span class="token comment"># user.email 为 GitHub 上注册的邮箱</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这里最好要在 <code>.ssh</code>的目录下执行命令。否则新创建的密钥文件可能会跑到<code>C:\Users\FanyFull\</code> 目录下面。</p><p>注意，回车后要输入文件名称，不可以像搭建一个博客那样什么都不做，三个回车，</p><p>然后，两个回车就行，</p><p>新密钥创建完毕。</p><p><img src="https://i.imgur.com/ko7IS0Q.png" /></p><p>然后，在 <code>C:\Users\FanyFull\.ssh\</code> 目录下创建一个<code>config</code> 文件：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">#第一个账号，默认使用的账号，不用做任何更改Host github.comHostName github.comUser gitIdentityFile ~&#x2F;.ssh&#x2F;id_rsa#第二个新账号，#&quot;xxxxxx&quot;为前缀名，可以任意设置，要记住，后面需要用到Host xxxxxx.github.comHostName github.comUser gitIdentityFile ~&#x2F;.ssh&#x2F;这里是你创建的新密钥的名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我这里的设置：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">#第一个账号，默认使用的账号，不用做任何更改Host github.comHostName github.comUser gitIdentityFile ~&#x2F;.ssh&#x2F;id_rsa#第二个新账号，#&quot;xxxxxx&quot;为前缀名，可以任意设置，要记住，后面需要用到Host luflyan.github.comHostName github.comUser gitIdentityFile ~&#x2F;.ssh&#x2F;luflyan<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>然后，到 GitHub 中添加刚刚新建的密钥。</p><p>然后，到 <code>.ssh</code> 目录下依次执行如下几条命令（这些命令必须到git bash 中执行）：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-agent <span class="token function">bash</span>ssh-add <span class="token parameter variable">-D</span>ssh-add xxxxxx <span class="token comment">#旧密钥名称，一般是id_rsa</span>ssh-add xxxxxx <span class="token comment">#新创建的密钥名称</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/TEozAM5.png" /></p><h1 id="验证是否成功">验证是否成功</h1><p>依次执行以下命令，第一个为默认 ssh_key 验证；第二个为新的 ssh_key验证，其中 "xxxxxx" 为先前在 config 文件中的命名。</p><figure><div class="code-wrapper"><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">ssh <span class="token operator">-</span>T git@github<span class="token punctuation">.</span>comssh <span class="token operator">-</span>T git@xxxxxx<span class="token punctuation">.</span>github<span class="token punctuation">.</span>com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/xsH07mA.png" /></p><h1id="取消全局用户名邮箱配置单独设置用户名邮箱">取消全局用户名/邮箱配置，单独设置用户名/邮箱</h1><p>执行如下命令，取消全局用户名和邮箱配置（如果已经设置了全局的话）：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">git config --global --unset user.namegit config --global --unset user.email<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>分别进入你的两个 Hexo 博客 .git目录下执行以下命令单独设置用户名/邮箱：</p><p><img src="https://i.imgur.com/9c2noNi.png" /></p><p><img src="https://i.imgur.com/nuIYdKK.png" /></p><h1 id="hexo-配置文件修改-git-地址">hexo 配置文件修改 git 地址</h1><p>打开你的第二个博客 Hexo 目录下的 _config.yml 文件，找到 deploy关键字，写入以下配置并保存：</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> git@xxxxxx.github.com<span class="token punctuation">:</span>你的用户名/你的用户名.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>到这里，第二个博客就部署完成了。</p><hr /><p>参考：</p><p>1、<ahref="https://blog.csdn.net/qq_36759224/article/details/86546729">CSDN</a></p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MarkText 快捷键整理</title>
    <link href="/2022/01/21/MarkText-%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%95%B4%E7%90%86/"/>
    <url>/2022/01/21/MarkText-%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<ul><li>侧边文件信息显示：Ctrl + J</li><li>插入图片：Ctrl + Shift + I</li></ul><p>算了，还是用回 VSCode 好了。</p><p>配置一下用户代码片段和自动提示，VSCode就挺好用的。插入图片什么的，直接用快捷键来解决。</p>]]></content>
    
    
    <categories>
      
      <category>软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件</tag>
      
      <tag>杂</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的重装电脑记录</title>
    <link href="/2022/01/07/%E6%88%91%E7%9A%84%E9%87%8D%E8%A3%85%E7%94%B5%E8%84%91%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/01/07/%E6%88%91%E7%9A%84%E9%87%8D%E8%A3%85%E7%94%B5%E8%84%91%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>最重要的文件夹应该是 <code>HDisk</code>，备份。</p><p>系统重新装好后，一些必备软件：</p><ul><li>Chrome</li><li>Snipaste</li><li>Firefox，这个主要是为了使用 imgur 的图床。</li><li>Windows Terminal</li><li>Scoop<ul><li>pandoc</li><li>latex</li><li>nodejs</li></ul></li><li>hexo</li><li>Python</li><li>VSCode</li><li>WPS</li><li>Adobe Acrobat DC</li><li>Office</li><li>Telegram</li><li>clash</li><li>Goldendict: <ahref="https://github.com/goldendict/goldendict/wiki/Early-Access-Builds-for-Windows">github</a></li></ul><p>差不多就这些了。</p><p>当然，还有一些非必备的工具，比如</p><ul><li>Potplayer</li></ul><p>还有一些必备的操作，比如，给本机设置 GitHub 的SSH。而且是两个博客。其实，我感觉最麻烦的部分就是这个地方了。其他的装软件的部分都还好，不过，如果没有一台电脑上需要两个博客的需求，那么，这个也就没有什么烦人的地方。</p>]]></content>
    
    
    <categories>
      
      <category>电脑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>电脑</tag>
      
      <tag>系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些软件的常用使用技巧</title>
    <link href="/2022/01/07/%E4%B8%80%E4%BA%9B%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%B8%B8%E7%94%A8%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <url>/2022/01/07/%E4%B8%80%E4%BA%9B%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%B8%B8%E7%94%A8%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的 URL 收藏夹</title>
    <link href="/2022/01/07/%E6%88%91%E7%9A%84-URL-%E6%94%B6%E8%97%8F%E5%A4%B9/"/>
    <url>/2022/01/07/%E6%88%91%E7%9A%84-URL-%E6%94%B6%E8%97%8F%E5%A4%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="下载-youtube-视频">下载 Youtube 视频</h1><p>y2mate.com</p><h1 id="同一台电脑部署两个-github-pages">同一台电脑部署两个 githubpages</h1><p><ahref="https://blog.csdn.net/qq_36759224/article/details/86546729">CSDN</a></p><h1 id="一个-go-语言-clone-的-google-keep">一个 go 语言 clone 的 GoogleKeep</h1><p><a href="https://github.com/anselm94/googlekeepclone">github</a></p><h1 id="给-powershell-设置永久代理">给 PowerShell 设置永久代理</h1><p><ahref="https://www.yixuju.cn/other/talking-about-proxy/">逸絮居</a></p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线性代数笔记</title>
    <link href="/2022/01/04/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/01/04/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="矩阵的初等变换与线性方程组">矩阵的初等变换与线性方程组</h1><blockquote><p>矩阵的初等行变换？</p></blockquote><p><img src="https://i.imgur.com/sM4qR0q.png" /></p><blockquote><p>矩阵的初等列变换？</p></blockquote><p><img src="https://i.imgur.com/DZo8zLB.png" /></p><blockquote><p>矩阵的初等变换？</p></blockquote><p>矩阵的初等行变换与初等列变换，统称初等变换。</p><blockquote><p>矩阵的等价？</p></blockquote><p><img src="https://i.imgur.com/3FALS5H.png" /></p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
      <tag>工科数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 31-35 记录</title>
    <link href="/2022/01/03/LeetCode-31-35-%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/01/03/LeetCode-31-35-%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="section">31</h1><p><a href="https://leetcode.com/problems/next-permutation/"class="uri">https://leetcode.com/problems/next-permutation/</a></p><p><img src="https://i.imgur.com/V2YxcSy.png" /></p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">nextPermutation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Do not return anything, modify nums in-place instead.        """</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token keyword">if</span> nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">return</span>        i <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">and</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>            i <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        left <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span>        nums<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">break</span>        nums<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    solu <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>    nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>    nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>    solu<span class="token punctuation">.</span>nextPermutation<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>思路其实是比较简单的，只是一开始想要暴力解决，结果反而误入歧途，不过，也因此重新复习了一下如何生成一个列表的全排列。或许，有时间研究一下<code>itertool</code> 中的库函数是一个不错的注意。</p><p>说回思路，就是判断列表最后两个元素的大小，如果是正序，直接交换两个元素即可，如果不是，则一直往前寻找到第一个打破秩序的数字，然后将这个元素和后面的列表切片中刚好大于这个数字的元素交换，最后，再将后面的部分排个序即可。</p><h1 id="section-1">32</h1><p><a href="https://leetcode.com/problems/longest-valid-parentheses/"class="uri">https://leetcode.com/problems/longest-valid-parentheses/</a></p><p><img src="https://i.imgur.com/jkm1DW4.png" /></p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestValidParentheses</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> s<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> stack <span class="token keyword">and</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        res<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        ans <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> ans        ans <span class="token operator">=</span> <span class="token number">1</span>        index <span class="token operator">=</span> <span class="token number">0</span>        tmp_res <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">while</span> index <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> res<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> res<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span>                tmp_res <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                tmp_res <span class="token operator">=</span> <span class="token number">1</span>                index <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">continue</span>            <span class="token keyword">if</span> tmp_res <span class="token operator">></span> ans<span class="token punctuation">:</span>                ans <span class="token operator">=</span> tmp_res            index <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> ans<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    solu <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    s <span class="token operator">=</span> <span class="token string">')(()())'</span>    Output <span class="token operator">=</span> solu<span class="token punctuation">.</span>longestValidParentheses<span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Output<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="section-2">33</h1><p><ahref="https://leetcode.com/problems/search-in-rotated-sorted-array/"class="uri">https://leetcode.com/problems/search-in-rotated-sorted-array/</a></p><p><img src="https://i.imgur.com/Bsrnhgl.png" /></p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> nums<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span> <span class="token keyword">if</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span>        left <span class="token operator">=</span> <span class="token number">0</span>        right <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>  <span class="token comment"># 如果中间值等于目标值，直接返回</span>                <span class="token keyword">return</span> mid            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># 右边有序</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># 如果目标值在左边有序的区间内，则右边查找</span>                    right <span class="token operator">=</span> mid                <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># 否则，左边查找</span>                    left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># 左边有序</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># 如果目标值在右边有序的区间内，则左边查找</span>                    left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># 否则，右边查找</span>                    right <span class="token operator">=</span> mid            <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># nums[mid] == nums[right]</span>                right <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token comment"># 如果目标值等于中间值，则返回中间值的下标，否则返回-1</span>        <span class="token keyword">return</span> left <span class="token keyword">if</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span>solu <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>solu<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>依然是二分查找，只不过判断条件比普通的二分查找多了一些。</p><h1 id="section-3">34</h1>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>Python</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode tricks track</title>
    <link href="/2022/01/02/VSCode-tricks-track/"/>
    <url>/2022/01/02/VSCode-tricks-track/</url>
    
    <content type="html"><![CDATA[<h1 id="设置运行-python-代码快捷键">设置运行 Python 代码快捷键</h1><p>参考：<ahref="https://stackoverflow.com/questions/69984897/current-shortcut-to-run-python-in-vs-code">stackoverflow</a></p><p><code>file-&gt;preference-&gt;keyboard shortcuts</code></p><p>我这里直接将其设置成 <code>Ctrl + Alt + P</code>。</p><p><img src="https://i.imgur.com/6JraeJ2.png" /></p><h1id="设置光标在编辑区和内置的控制台之间切换">设置光标在编辑区和内置的控制台之间切换</h1><p>参考：<ahref="https://stackoverflow.com/questions/42796887/switch-focus-between-editor-and-integrated-terminal-in-visual-studio-code">stackoverflow</a></p><p>照着设置，就可以使用 <code>Ctrl + `</code> 快捷键切换了。</p><h1 id="show-and-hide-the-terminal-shortcut">show and hide the terminalshortcut</h1><p><code>Ctrl + J</code> both.</p><h1 id="format-codes-shortcut">format codes shortcut</h1><p><code>Shift + Alt + F</code></p><h1 id="switch-between-terminals">switch between terminals</h1><p><ahref="https://stackoverflow.com/questions/48440673/how-to-switch-between-terminals-in-visual-studio-code">stackoverflow</a></p><p>快捷键：<code>Ctrl + PgUp</code> 和 <code>Ctrl + PgDn</code>。</p>]]></content>
    
    
    <categories>
      
      <category>VSCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>VSCode</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数学建模上机实验报告</title>
    <link href="/2021/12/31/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    <url>/2021/12/31/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<p>按：有待进一步施工，尤其是最后一个问题...</p><p>这一届(19级)的数学建模的上机题目是在晚上上机的三个小时(可以适当延时一到两个小时)完成一道题目的建模与求解。可以使用任何方法，如果使用计算机求解，那么需要给出代码。因此，这里在建模之后，当然是选择使用Python来求解。而题目本身则是一道经典的运筹学问题。在网上也比较容易找到相关的题目。</p><h1 id="问题描述">问题描述</h1><p><img src="https://i.imgur.com/DxYgs5n.png" /></p><p><img src="https://i.imgur.com/Zima8vd.png" /></p><p><img src="https://i.imgur.com/Jwxf84O.png" /></p><p>以下没有排版的文字描述仅供搜索引擎检索时使用。</p><p>某医院每天各时间段内需要的值班护士数如表1所示：该医院护士上班分五个班次，每班8小时，具体上班时间为第一班2:00<sub>10:00，第二班6:00</sub>14:00，第三班10:00<sub>18:00，第四班14:00</sub>22:00，第五班18:00~2:00（次日）。每名护士每周上5个班，并被安排在不同的日子，由一名总护士长负责护士的值班安排。值班方案要做到在人员或经济上比较节省，又做到尽可能合情合理。下面是一些正在考虑中的值班方案：方案1：每名护士连续上班5天，休息2天，并从上班第一天起按从上第一班到第五班顺序安排。方案2：考虑到方案1中每名护士在周末（周六、周日）两天内休息安排不均匀，于是规定每名护士在周六、周日两天内安排一天、且只安排一天休息，再在周一至周五期间安排4个班，同样上班的5天内分别顺序安排5个不同班次。在对方案1、2建立线性规划模型并求解后发现，方案2虽然在安排周末休息上比较合理，但所需值班人员要比方案1有较多增加，经济上不太合算，于是又提出了第3方案。方案3：在方案2的基础上，动员一部分护士放弃周末休息，即每周在周一至周五间由总护士长给安排三天值班，加周六周日共上五个班，同样五个班分别安排不同班次。作为奖励，规定放弃周末休息的护士，其工资和奖金总额比其他护士增加a%。根据上述方案，帮助总护士长分析研究：（1）对方案1、2建立使值班护士人数为最少的线性规划模型并求解。（2）对方案3，同样建立使值班护士人数为最少的线性规划模型并求解，然后回答a的值为多大时，第3方案较第2方案更经济。</p><h1id="对方案-12-建立使值班护士人数为最少的线性规划模型并求解">（1）对方案1、2 建立使值班护士人数为最少的线性规划模型并求解。</h1><h2 id="对方案-1">对方案 1</h2><p>设 <span class="math inline">\(x_i\)</span> 表示星期 <spanclass="math inline">\(i\)</span> 上第一班的人数(<spanclass="math inline">\(i =1,2,3,...,7\)</span>)，于是我们可以画出护士的值班表，然后我们可以对方案1 建模</p><p><span class="math display">\[min \; z = x_1 + x_2 + x_3 + x_4 + x_5 + x_6 + x_7\]</span></p><p>s.t.</p><p><span class="math display">\[\begin{align}&amp; x_1 + x_7 \geq 21 \\&amp; x_6 + x_7 \geq 21 \\&amp; x_6 + x_5 \geq 21 \\&amp; x_5 + x_4 \geq 21 \\&amp; x_4 + x_3 \geq 21 \\&amp; x_3 + x_2 \geq 21 \\&amp; x_2 + x_1 \geq 21 \\&amp; x_i \geq 11 (i = 1,2...7)\end{align}\]</span></p><p><code>Python</code> 代码如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> scipy<span class="token punctuation">.</span>optimize <span class="token keyword">import</span> linprog<span class="token comment"># 需要优化的函数对应的参数</span>c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment"># 不等式对应的参数矩阵</span>A <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 不等式对应的上界</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">,</span>      <span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">,</span>      <span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">,</span>      <span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">,</span>      <span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">,</span>      <span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">,</span>      <span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">]</span>x0_bounds <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>x1_bounds <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>x2_bounds <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>x3_bounds <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>x4_bounds <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>x5_bounds <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>x6_bounds <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token comment"># 代入参数，利用 Linprog 求解</span>res <span class="token operator">=</span> linprog<span class="token punctuation">(</span>c<span class="token punctuation">,</span> A_ub<span class="token operator">=</span>A<span class="token punctuation">,</span> b_ub<span class="token operator">=</span>b<span class="token punctuation">,</span> bounds<span class="token operator">=</span><span class="token punctuation">(</span>x0_bounds<span class="token punctuation">,</span> x1_bounds<span class="token punctuation">,</span> x2_bounds<span class="token punctuation">,</span> x3_bounds<span class="token punctuation">,</span> x4_bounds<span class="token punctuation">,</span> x5_bounds<span class="token punctuation">,</span> x6_bounds<span class="token punctuation">)</span><span class="token punctuation">,</span> options<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"disp"</span><span class="token punctuation">:</span><span class="token boolean">True</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>运行结果如下</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">Primal Feasibility  Dual Feasibility    Duality Gap         Step             Path Parameter      Objective1.0                 1.0                 1.0                 -                1.0                 84.00.2809006503072     0.2809006503072     0.2809006503072     0.7236863182761  0.2809006503072     91.03677956402      0.08188226522114    0.08188226522115    0.08188226522115    0.7562200719556  0.08188226522115    77.6110644976       0.003285103873164   0.003285103873165   0.003285103873165   0.9666015052536  0.003285103873165   77.04759485173      4.141424664791e-07  4.141424663523e-07  4.141424663529e-07  0.9998761933313  4.141424663523e-07  77.00000725134      2.070722078688e-11  2.070712356167e-11  2.070712356152e-11  0.9999499999994  2.070712356154e-11  77.00000000036      Optimization terminated successfully.        Current function value: 77.000000           Iterations: 5    con: array([], dtype=float64)    fun: 77.00000000036258message: &#39;Optimization terminated successfully.&#39;    nit: 5slack: array([ 1.,  1.,  1., 12.,  1.,  1.,  1.])status: 0success: True    x: array([11., 11., 11., 11., 11., 11., 11.])</code></pre></div></figure><p>所以得到的结果是：</p><p><span class="math display">\[x_1 = 11, x2 = 11, x_3 = 11, x_4 = 11, x_5 = 11, x_6 = 11, x_7 = 11\]</span></p><h1 id="对方案-2">对方案 2</h1><p>周一到周五连续安排 4个班，所以可以先安排周末的护士值班情况：周六、周末两天共 10 个班次，用<span class="math inline">\(x_j(j = 1...10)\)</span> 表示周六周末两天 10个班次的护士人数，其中 <span class="math inline">\(x_1 ...x_5\)</span>分别代表周六第 1 个到第 5 个班次的护士人数，<spanclass="math inline">\(x_6...x_{10}\)</span> 分别代表周日从第 1 个到第 5个班次的护士人数。因此，我们可以列出其值班表(这里略)。</p><p>对方案 2 建立如下线性规划模型：</p><p><span class="math inline">\(min \; w = x_1 + \cdots +x_{10}\)</span></p><p>s.t.</p><p><span class="math display">\[\begin{align}x_1 + x_5 + x_9 + x_{10} \geq 21 \\x_4 + x_5 + x_8 + x_9 \geq 21 \\x_1 + x_2 + x_6 + x_{10} \geq 21 \\x_2 + x_3 + x_6 + x_7 \geq 20 \\x_3 + x_4 + x_7 + x_8 \geq 19 \\x_1 + x_2 \geq 19 \\x_6 + x_{10} \geq 19 \\x_2 + x_3 \geq 21 \\x_6 + x_7 \geq 21 \\x_3 + x_4 \geq 21 \\x_7 + x_8 \geq 21 \\x_8 + x_9 \geq 20 \\x_4 + x_5 \geq 20 \\x_1 + x_5 \geq 18 \\x_9 + x_{10} \geq 18 \\x_4 + x_8 \geq 11 \\x_3 + x_7 \geq 11 \\x_2 + x_6 \geq 11 \\x_5 + x_9 \geq 11 \\x_1, x_2, x_5, x_6, x_9, x_{10} \geq 11 \\x_j \geq 0  \; (j = 1,2,...,10)\end{align}\]</span></p><p><code>Python</code> 代码如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> scipy<span class="token punctuation">.</span>optimize <span class="token keyword">import</span> linprog<span class="token comment"># 需要优化的函数对应的参数</span>c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment"># 不等式对应的参数矩阵</span>A <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 不等式对应的上界</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">,</span>     <span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">,</span>     <span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">,</span>     <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span>     <span class="token operator">-</span><span class="token number">19</span><span class="token punctuation">,</span>     <span class="token operator">-</span><span class="token number">19</span><span class="token punctuation">,</span>     <span class="token operator">-</span><span class="token number">19</span><span class="token punctuation">,</span>     <span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">,</span>     <span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">,</span>     <span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">,</span>     <span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">,</span>     <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span>     <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span>     <span class="token operator">-</span><span class="token number">18</span><span class="token punctuation">,</span>     <span class="token operator">-</span><span class="token number">18</span><span class="token punctuation">,</span>     <span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">,</span>     <span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">,</span>     <span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">,</span>     <span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">]</span>x0_bounds <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>x1_bounds <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>x2_bounds <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>x3_bounds <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>x4_bounds <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>x5_bounds <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>x6_bounds <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>x7_bounds <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>x8_bounds <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>x9_bounds <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token comment"># 代入参数，利用 Linprog 求解</span>res <span class="token operator">=</span> linprog<span class="token punctuation">(</span>c<span class="token punctuation">,</span> A_ub<span class="token operator">=</span>A<span class="token punctuation">,</span> b_ub<span class="token operator">=</span>b<span class="token punctuation">,</span> bounds<span class="token operator">=</span><span class="token punctuation">(</span>x0_bounds<span class="token punctuation">,</span> x1_bounds<span class="token punctuation">,</span> x2_bounds<span class="token punctuation">,</span> x3_bounds<span class="token punctuation">,</span> x4_bounds<span class="token punctuation">,</span> x5_bounds<span class="token punctuation">,</span> x6_bounds<span class="token punctuation">,</span>x7_bounds<span class="token punctuation">,</span> x8_bounds<span class="token punctuation">,</span> x9_bounds<span class="token punctuation">)</span><span class="token punctuation">,</span> options<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"disp"</span><span class="token punctuation">:</span><span class="token boolean">True</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>运行结果如下：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">Primal Feasibility  Dual Feasibility    Duality Gap         Step             Path Parameter      Objective1.0                 1.0                 1.0                 -                1.0                 76.00.1665271036098     0.1665271036098     0.1665271036098     0.8426664003083  0.1665271036098     99.77035462588      0.02577816616616    0.02577816616617    0.02577816616617    0.8554761926722  0.02577816616617    141.9514028382      0.004990687117403   0.004990687117402   0.004990687117402   0.8274173331906  0.004990687117403   107.7426696988      0.0002950591091504  0.0002950591091505  0.0002950591091506  0.9487415264061  0.0002950591091506  107.9482724078      5.696569995622e-08  5.696569991676e-08  5.696569979366e-08  0.9998223879716  5.696569998307e-08  108.00000478        2.848279017625e-12  2.84830035367e-12   2.848388191978e-12  0.9999499996825  2.848288065828e-12  108.0000000002      Optimization terminated successfully.        Current function value: 108.000000          Iterations: 6    con: array([], dtype=float64)    fun: 108.000000000239message: &#39;Optimization terminated successfully.&#39;    nit: 6slack: array([ 2.30000000e+01,  2.07164358e+01,  2.30000000e+01,  2.42835642e+01,        2.30000000e+01,  3.00000000e+00,  3.00000000e+00,  1.14178209e+00,        1.14178209e+00, -4.13713508e-10, -4.13720613e-10,  8.58217912e-01,        8.58217913e-01,  4.00000000e+00,  4.00000000e+00,  8.71643582e+00,        1.12835642e+01,  1.10000000e+01,  1.10000000e+01])status: 0success: True    x: array([11.        , 11.        , 11.14178209,  9.85821791, 11.        ,    11.        , 11.14178209,  9.85821791, 11.        , 11.        ])</code></pre></div></figure><p>所以得到的结果是：</p><p><span class="math display">\[x_1 = 11 \\x_2 = 11 \\x_3 = 12 \\x_4 = 10 \\x_5 = 11 \\x_6 = 11 \\x_7 = 12 \\x_8 = 10 \\x_9 = 11 \\x_{10} = 11\]</span></p><h1id="对方案-3同样建立使值班护士人数为最少的线性规划模型并求解然后回答-a-的值为多大时第-3-方案较第-2-方案更经济">对方案3，同样建立使值班护士人数为最少的线性规划模型并求解，然后回答 a的值为多大时，第 3 方案较第 2 方案更经济。</h1><p><code>Python</code> 代码如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> scipy<span class="token punctuation">.</span>optimize <span class="token keyword">import</span> linprog<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment"># 需要优化的函数对应的参数</span><span class="token comment"># 不等式对应的参数矩阵</span><span class="token keyword">from</span> scipy<span class="token punctuation">.</span>optimize <span class="token keyword">import</span> linprog<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment"># 需要优化的函数对应的参数</span><span class="token comment"># 不等式对应的参数矩阵</span>A <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 不等式对应的上界</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">,</span>     <span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span>c <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 代入参数，利用 Linprog 求解</span>res <span class="token operator">=</span> linprog<span class="token punctuation">(</span>c<span class="token punctuation">,</span> A_ub<span class="token operator">=</span>A<span class="token punctuation">,</span> b_ub<span class="token operator">=</span>b<span class="token punctuation">,</span> options<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"disp"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>结果如下：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">Primal Feasibility  Dual Feasibility    Duality Gap         Step             Path Parameter      Objective1.0                 1.0                 1.0                 -                1.0                 37.00.2426475349467     0.2426475349467     0.2426475349467     0.7716251234008  0.2426475349467     55.01818412195      0.04252842427154    0.04252842427153    0.04252842427153    0.8355997887823  0.04252842427153    104.247705703       0.009356747800954   0.009356747800955   0.009356747800955   0.7953997093281  0.009356747800955   103.5089480738      0.0005030671623338  0.000503067162334   0.0005030671623341  0.949055846188   0.000503067162334   104.012914924       7.859317598419e-08  7.859317820896e-08  7.859317829872e-08  0.9998545163766  7.859317721648e-08  103.9999952247      3.929662644848e-12  3.929721186398e-12  3.929745417963e-12  0.9999499992073  3.929678577412e-12  103.9999999998      Optimization terminated successfully.        Current function value: 104.000000          Iterations: 6[ 7.14875174  2.83528395  6.35115075  7.24511069  6.60703322 11.11.          8.         13.          7.          4.39296678  6.765940714.2500236   4.64884925  3.75488931]</code></pre></div></figure><p>由于放弃周末休息的护士其工资和奖金总额比其他护士增加a%，假设未放弃周末休息的护士的工资为A 园，若使方案三比方案2更经济，可列一下方程：66<em>A + 38 </em> A (1+a%) &lt; 108 *A 解以上方程可得： a% &lt;10.5263% 即a&lt;10.5263时，方案三比方案二更经济。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 26 - 30 记录</title>
    <link href="/2021/12/28/LeetCode-26-30-%E8%AE%B0%E5%BD%95/"/>
    <url>/2021/12/28/LeetCode-26-30-%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="section">26</h1><p><ahref="https://leetcode.com/problems/remove-duplicates-from-sorted-array/"class="uri">https://leetcode.com/problems/remove-duplicates-from-sorted-array/</a></p><p><img src="https://i.imgur.com/kg36Rlt.png" /></p><p>简单的题目。</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        index <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                index <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span>                nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    solu <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    Input <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>    Output <span class="token operator">=</span> solu<span class="token punctuation">.</span>removeDuplicates<span class="token punctuation">(</span>Input<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Input<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Output<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="section-1">27</h1><p><a href="https://leetcode.com/problems/remove-element/"class="uri">https://leetcode.com/problems/remove-element/</a></p><p><img src="https://i.imgur.com/sTixaim.png" /></p><p>和上一题类似。</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">from</span> singly_list_utils <span class="token keyword">import</span> print_linked_list<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        index <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            <span class="token keyword">if</span> num <span class="token operator">!=</span> val<span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> num                index <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> index<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    solu <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>    val <span class="token operator">=</span> <span class="token number">3</span>    Output <span class="token operator">=</span> solu<span class="token punctuation">.</span>removeElement<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> val<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Output<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>Output<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="section-2">28</h1><p><a href="https://leetcode.com/problems/implement-strstr/"class="uri">https://leetcode.com/problems/implement-strstr/</a></p><p><img src="https://i.imgur.com/ucrXyTS.png" /></p><p>真是让人生气的一题。看到 downvotes 就比 upvotes差一点点，我就应该知道这道题是什么情况了。</p><p>本来是想直接使用遍历的，不用 Python的切片。那个超时的用例给我整懵了。算了，就用切片好了。</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">strStr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> haystack<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> needle<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> needle <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        res <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>haystack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> haystack<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> needle<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> haystack<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>needle<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span>needle<span class="token punctuation">:</span>                    res <span class="token operator">=</span> i            <span class="token keyword">if</span> res <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token keyword">return</span> res<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    solu <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    haystack <span class="token operator">=</span> <span class="token string">'hello'</span>    needle <span class="token operator">=</span> <span class="token string">'ll'</span>    Output <span class="token operator">=</span> solu<span class="token punctuation">.</span>strStr<span class="token punctuation">(</span>haystack<span class="token punctuation">,</span> needle<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Output<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="section-3">29</h1><p><a href="https://leetcode.com/problems/divide-two-integers/"class="uri">https://leetcode.com/problems/divide-two-integers/</a></p><p><img src="https://i.imgur.com/ZB99qo4.png" /></p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">divide</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dividend<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> divisor<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        INT_MAX <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">31</span> <span class="token operator">-</span> <span class="token number">1</span>        INT_MIN <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">31</span>        <span class="token comment"># dividend is INT_MIN</span>        <span class="token keyword">if</span> dividend <span class="token operator">==</span> INT_MIN<span class="token punctuation">:</span>            <span class="token keyword">if</span> divisor <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> dividend            <span class="token keyword">elif</span> divisor <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> INT_MAX        <span class="token comment"># ddivisor is INT_MIN</span>        <span class="token keyword">if</span> divisor <span class="token operator">==</span> INT_MIN<span class="token punctuation">:</span>            <span class="token keyword">if</span> dividend <span class="token operator">==</span> INT_MIN<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">if</span> divisor <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> dividend        <span class="token keyword">if</span> divisor <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span>dividend        <span class="token keyword">if</span> dividend <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>                <span class="token comment"># normal situation</span>        <span class="token comment"># recursive method, this is the core method</span>        <span class="token keyword">def</span> <span class="token function">recurse_div</span><span class="token punctuation">(</span>dividend<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> divisor<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> dividend <span class="token operator">&lt;</span> divisor<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">0</span>            cur_min <span class="token operator">=</span> <span class="token number">1</span>            util_num <span class="token operator">=</span> divisor            <span class="token keyword">while</span> util_num <span class="token operator">&lt;=</span> dividend <span class="token operator">-</span> util_num<span class="token punctuation">:</span> <span class="token comment"># the fisrt clause to detect overflow</span>                cur_min <span class="token operator">+=</span> cur_min                util_num <span class="token operator">+=</span> util_num <span class="token comment"># equals to multiply by 2</span>            <span class="token keyword">return</span> cur_min <span class="token operator">+</span> recurse_div<span class="token punctuation">(</span>dividend <span class="token operator">-</span> util_num<span class="token punctuation">,</span> divisor<span class="token punctuation">)</span>                flag <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dividend <span class="token operator">>=</span> <span class="token number">0</span> <span class="token keyword">and</span> divisor <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>dividend <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">and</span> divisor <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">if</span> dividend <span class="token operator">==</span> INT_MIN<span class="token punctuation">:</span>            <span class="token keyword">if</span> divisor <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                ans <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> recurse_div<span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span>dividend <span class="token operator">-</span> divisor<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>divisor<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> divisor <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                ans <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> recurse_div<span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span>dividend <span class="token operator">+</span> divisor<span class="token punctuation">)</span><span class="token punctuation">,</span> divisor<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            ans <span class="token operator">=</span> recurse_div<span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span>dividend<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>divisor<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token operator">-</span>ans<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    solu <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    Output <span class="token operator">=</span> solu<span class="token punctuation">.</span>divide<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2147483648</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Output<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>代码写得不好，题目本身的限制有点烦。好在终于 AC 了。</p><p>我看很多人的题解都没有考虑 32 位数的限制。</p><p>我这里本来是这样来判断的：</p><p>把</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">util_num <span class="token operator">+</span> uitl_num <span class="token operator">&lt;=</span> INT_MAX<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>转化成减法即可：</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">util_num <span class="token operator">&lt;=</span> INT_MAX <span class="token operator">-</span> util_num<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>后来发现其实把 <code>while</code></p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">util_num <span class="token operator">+</span> util_num <span class="token operator">&lt;=</span> dividend<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>转化成</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">util_num <span class="token operator">&lt;=</span> dividend <span class="token operator">-</span> util_num<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>就行了。</p><p>另外，边界处理是真的烦人。我这里对 <code>-2147483648</code>的处理是先将其剪掉一个<code>divisor</code>，然后在用核心代码来处理。即：</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> dividend <span class="token operator">==</span> INT_MIN<span class="token punctuation">:</span>    <span class="token keyword">if</span> divisor <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        ans <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> recurse_div<span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span>dividend <span class="token operator">-</span> divisor<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>divisor<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> divisor <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        ans <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> recurse_div<span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span>dividend <span class="token operator">+</span> divisor<span class="token punctuation">)</span><span class="token punctuation">,</span> divisor<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="section-4">30</h1><p><ahref="https://leetcode.com/problems/substring-with-concatenation-of-all-words/"class="uri">https://leetcode.com/problems/substring-with-concatenation-of-all-words/</a></p><p><img src="https://i.imgur.com/gZDWPxU.png" /></p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token comment"># 先用效率低一点的遍历方式来遍历试一下</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> words<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">from</span> collections <span class="token keyword">import</span> Counter        words_counter <span class="token operator">=</span> Counter<span class="token punctuation">(</span>words<span class="token punctuation">)</span>        single_word_len <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        word_num <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span>        all_word_len <span class="token operator">=</span> word_num <span class="token operator">*</span> single_word_len        s_len <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> s_len <span class="token operator">-</span> all_word_len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            sub_string <span class="token operator">=</span> s<span class="token punctuation">[</span>index<span class="token punctuation">:</span>index <span class="token operator">+</span> all_word_len<span class="token punctuation">]</span>            flag <span class="token operator">=</span> <span class="token boolean">True</span>            words_counter_copy <span class="token operator">=</span> Counter<span class="token punctuation">(</span>words_counter<span class="token punctuation">)</span>            <span class="token keyword">for</span> index2 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> all_word_len <span class="token operator">-</span> single_word_len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> single_word_len<span class="token punctuation">)</span><span class="token punctuation">:</span>                each_word <span class="token operator">=</span> sub_string<span class="token punctuation">[</span>index2<span class="token punctuation">:</span>index2<span class="token operator">+</span>single_word_len<span class="token punctuation">]</span>                words_counter_copy<span class="token punctuation">[</span>each_word<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>                <span class="token keyword">if</span> words_counter_copy<span class="token punctuation">[</span>each_word<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                    flag <span class="token operator">=</span> <span class="token boolean">False</span>                    <span class="token keyword">break</span>            <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>index<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    solu <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># Input</span>    s <span class="token operator">=</span> <span class="token string">"barfoothefoobarman"</span>    words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"foo"</span><span class="token punctuation">,</span><span class="token string">"bar"</span><span class="token punctuation">]</span>    <span class="token comment"># s = "barfoofoobarthefoobarman"</span>    <span class="token comment"># words = ["bar","foo","the"]</span>    s <span class="token operator">=</span> <span class="token string">"wordgoodgoodgoodbestword"</span>    words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"word"</span><span class="token punctuation">,</span><span class="token string">"good"</span><span class="token punctuation">,</span><span class="token string">"best"</span><span class="token punctuation">,</span><span class="token string">"good"</span><span class="token punctuation">]</span>    Output <span class="token operator">=</span> solu<span class="token punctuation">.</span>findSubstring<span class="token punctuation">(</span>s<span class="token punctuation">,</span> words<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Output<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里用了简单的遍历，对每一个子串利用字典进行判断是否符合条件。这个字典其实就是hash 表，但我感觉，这个和我学过的 hash 是不一样的。</p><p>注意题目的条件，给定的字符串数组中的每一个字符串的长度是一样的。</p><p>还有，关于 Python 的字符统计，有一个库函数<code>Counter</code>，具体使用的方法可以参见：<ahref="https://www.guru99.com/python-counter-collections-example.html"class="uri">https://www.guru99.com/python-counter-collections-example.html</a></p><p>按：有例子的讲述最容易理解了。</p><p>这道题目可以用滑动窗口来优化，暂时搁置。</p>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>Python</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库第四次上机实验报告</title>
    <link href="/2021/12/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E5%9B%9B%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    <url>/2021/12/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E5%9B%9B%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<p>咳咳，数据库实验十三准备重构中...</p><p>之前摆烂，现在得还债了。</p><h1 id="实验十一-数据库的备份与恢复">实验十一 数据库的备份与恢复</h1><h2 id="一实验目的">一、实验目的</h2><p>了解 Navicat 的数据备份和恢复机制，掌握 Navicat中数据库备份和恢复的方法。</p><h2 id="二实验内容">二、实验内容</h2><p>1、备份</p><p>步骤：使用用户 root 打开连接 MySQL —打开数据库 world—点击界面上方的“备份”—新建备份，如图所示：</p><p><img src="https://i.imgur.com/5syemCi.png" /></p><p><img src="https://i.imgur.com/MacUG55.png" /></p><p>点击“backup”—成功完成后点击保存—保存名称为 world—确定，结果如图1.2所示：</p><p><img src="https://i.imgur.com/6Zp5b6g.png" /></p><p><img src="https://i.imgur.com/56HYLAy.png" /></p><p><img src="https://i.imgur.com/iFSpurc.png" /></p><p>2、恢复还原</p><p>步骤：接第1部分操作—删除数据库 world — 在连接 MySQL中新建一个空的数据库world（名称需相同）--打开—点击“备份”可以看到如图所示界面：</p><p><img src="https://i.imgur.com/yR8kCpc.png" /></p><p>选择标有时间的备份文件—点击“还原备份”，会弹出如所示对话框：</p><p><img src="https://i.imgur.com/jaU0043.png" /></p><p>点击开始—确定。</p><p>过程成功之后会发现数据库 world已成功恢复（可能需要先关闭再打开）。</p><p><img src="https://i.imgur.com/U0G8ifT.png" /></p><p><img src="https://i.imgur.com/CtatXhd.png" /></p><p>3、用 Navicat 计划任务备份 MySQL 数据库。</p><p>备份连接 MySQL中的所有数据库（也可以单独选择某一数据库进行备份）：</p><p>① 点击“计划” -&gt; “新建批处理作业” ② 默认就有“Backup ServerMySQL”这个备份动作。如图所示：</p><p><img src="https://i.imgur.com/dG8mylR.png" /></p><p>③ 双击它，它就被加入到了如图所示的计划队列中：</p><p><img src="https://i.imgur.com/euv8DoD.png" /></p><p>④点击“保存”，弹出设置文件名的对话框，输入这个计划的名称即可，如图所示：</p><p><img src="https://i.imgur.com/Lt6G8cR.png" /></p><p>⑤保存之后，任务栏上的“设置计划任务”变成可用状态。点击“设置计划任务”（可能会报错：“指定的错误：0x80041315，任务计划程序服务没有运行。”或者“指定错误：0x80070005：拒绝访问”解决方法见本实验的步骤4），弹出设置的对话框。在“任务”标签下设置密码，就是数据库所在电脑的登录密码，没有的话可以不设。如图所示：</p><p><img src="https://i.imgur.com/qkX01bX.png" /></p><p><img src="https://i.imgur.com/NaJTprK.png" /></p><p><img src="https://i.imgur.com/0KZoriQ.png" /></p><p>⑦设置完之后，点击确定，等这个计划运行过之后（可以控制设置的时间以尽快看到结果），看一下备份的效果，备份的文件的位置为：“我的文档”-&gt; “Navicat” -&gt; “MySQL” -&gt; “servers” -&gt;“MySQL”，里面就有各个数据库对应的文件夹，如图所示：</p><p><img src="https://i.imgur.com/ESzgRCK.png" /></p><p>⑧ 各文件中会生成 <code>.psc</code>文件，包含了这个库的数据，以后可以用来做还原。如图所示：</p><p><img src="https://i.imgur.com/szp48Av.png" /></p><h2 id="三课后练习题">三、课后练习题</h2><p>1、创建一个备份设备用于备份数据库 master，并尝试还原数据库master。</p><p>备份：</p><p><img src="https://i.imgur.com/tVVY2wR.png" /></p><p><img src="https://i.imgur.com/cVjoGHI.png" /></p><p><img src="https://i.imgur.com/5VOht1M.png" /></p><p>还原：</p><p><img src="https://i.imgur.com/V7A94Vq.png" /></p><p><img src="https://i.imgur.com/UMlBQ7z.png" /></p><p><img src="https://i.imgur.com/rfiCMSB.png" /></p><p><img src="https://i.imgur.com/yEdMRGZ.png" /></p><p>2、实验二中所用到的导出和导入方法也可以达到备份的效果，尝试用该方法备份和还原数据库world。</p><p>备份：</p><p><img src="https://i.imgur.com/E7GrK7f.png" /></p><p><img src="https://i.imgur.com/Xk4W0Le.png" /></p><p><img src="https://i.imgur.com/4M3IJQt.png" /></p><p>还原：</p><p><img src="https://i.imgur.com/R3vy0cB.png" /></p><p><img src="https://i.imgur.com/AdiFjwK.png" /></p><p><img src="https://i.imgur.com/31h8sFj.png" /></p><p>3、思考题：备份策略和备份规划指的分别是什么？</p><p>备份策略：全量数据备份、增量数据备份、日志备份</p><p>备份规划：备份的时间、内容、频率等等</p><p>4、给数据库 world设计一个备份规划（频率和时间自定，要可看到结果）。</p><p><img src="https://i.imgur.com/i1Csi7R.png" /></p><p><img src="https://i.imgur.com/6sXmneV.png" /></p><p><img src="https://i.imgur.com/2t5qQxm.png" /></p><p>结果：</p><p><img src="https://i.imgur.com/YUYwajU.png" /></p><h1 id="实验十三-综合实验">实验十三 综合实验</h1><h2 id="一实验目的-1">一、实验目的</h2><p>1、熟悉数据库应用系统需求分析；</p><p>2、熟悉数据库设计的基本方法；</p><p>3、掌握数据库和数据表的创建方法；</p><p>4、掌握视图的创建方法；</p><p>5、了解各种数据完整性约束；</p><p>6、对存储过程和触发器有一个完整的认识。</p><h2 id="二实验要求">二、实验要求</h2><p>给出网上书店管理系统的需求分析报告（见四），要求根据功能分析和数据分析设计概念模型，实现完整的数据库（包括：各种表，视图，必要的存储过程，触发器等）。</p><h2 id="三实验内容和步骤">三、实验内容和步骤</h2><p>1、需求分析：</p><p>一个书店中的书籍类别、数量是非常庞大的，虽然书籍的分类是非常规范，但仅仅局限于概念上的分类仍无法运用于实践当中，这就给管理人员带来了极大的工作量，因此就需要一个比较科学的管理办法来解决此问题——利用MySQL 数据库来进行数据管理。</p><p>2、概要分析：</p><p>该系统主要分为两部分，一个为普通会员用户部分，亦即前台系统。另外一个是系统的管理员部分，即后台系统。网上书店前台系统部分主要是实现网上选书、购书、产生订单等功能的系统。后台实现书籍管理、用户管理、订单处理等功能。</p><p>3、开发技术：</p><p>MySQL 8.0.25，Navicat。</p><p>开发语言：MySQL</p><p>开发技术：数据库开发技术</p><p>面向对象：需求者</p><p>4、系统 E-R 图</p><p><img src="https://i.imgur.com/ptQ14JN.png" /></p><p>5、概念结构设计</p><p>系统共有 6个实体：图书目录、图书库存、采购、客户、订单、发货、供应商</p><p>（1）图书目录的属性：书号、书名、作者、出版社、价格、关键字、本书的目录、封皮</p><p>（2）图书库存的属性：书号、存货量、供书商、丛书、库存存放位置</p><p>（3）采购的属性：书号、书名、出版社、供书商、数量、登记日期、顾客email</p><p>（4）客户的属性：网上ID、登录密码、名称、地址、帐户余额、信用等级</p><p>（5）订单的属性：订单号、订货日期、客户ID、书号、订书数量、金额、发货地址、发货情况</p><p>（6）供应商的属性：供应商编号、供应商基本信息、供应商供货信息、现有书目信息</p><p>6、逻辑结构设计</p><p>图书（书号，书名，出版社，价格，目录，封皮）</p><p>作者（作者名，书号，顺序号）</p><p>关键字（关键字，书号）</p><p>供应（书号，供书商）</p><p>丛书（书号，书名）</p><p>库存（书号，存货量，库存存放位置）</p><p>采购单（书号，数量，登记日期，顾客email）</p><p>客户（网上ID，登录密码，名称，地址，帐户余额，信用等级，信用额度）</p><p>订单（订单号，订货日期，客户ID，订单金额）</p><p>订单中的书（订单号，书号，数量）</p><p>发货（订单号，发货情况）</p><p>供应商（供应商编号，供应商基本信息）</p><p>供应商供货（供应商编号，供应商供货信息）</p><p>供应商现有书目（供应商编号，书号，数量）</p><p>7、细化表结构</p><ol type="1"><li>图书信息表book_info：</li></ol><p><img src="https://i.imgur.com/QBzALcc.png" /></p><ol start="2" type="1"><li>作者信息表 author_list：</li></ol><p><img src="https://i.imgur.com/WhUw8EC.png" /></p><ol start="3" type="1"><li>关键字表 keywords_list：</li></ol><p><img src="https://i.imgur.com/0N6fvKY.png" /></p><ol start="4" type="1"><li>供应表 provide_list：</li></ol><p><img src="https://i.imgur.com/xLuSelR.png" /></p><ol start="5" type="1"><li>丛书情况表 series_book：</li></ol><p><img src="https://i.imgur.com/Hkx3QgN.png" /></p><ol start="6" type="1"><li>库存情况表 reserve_info：</li></ol><p><img src="https://i.imgur.com/f9ovJ2M.png" /></p><ol start="7" type="1"><li>采购表 purchase_list：</li></ol><p><img src="https://i.imgur.com/kgp1sMR.png" /></p><ol start="8" type="1"><li>客户表 customer_info：</li></ol><p><img src="https://i.imgur.com/bMwb5k1.png" /></p><ol start="9" type="1"><li>订单表 order_list：</li></ol><p><img src="https://i.imgur.com/uUP2I1b.png" /></p><ol start="10" type="1"><li>订单中的书 books_in_order：</li></ol><p><img src="https://i.imgur.com/T4soVAb.png" /></p><ol start="11" type="1"><li>发货表 delivery_info：</li></ol><p><img src="https://i.imgur.com/LKeBT8W.png" /></p><ol start="12" type="1"><li>供应商 provider_list：</li></ol><p><img src="https://i.imgur.com/ZfXACo1.png" /></p><ol start="13" type="1"><li>供应商供货 provider_supply：</li></ol><p><img src="https://i.imgur.com/xAcxr7K.png" /></p><ol start="14" type="1"><li>供应商现有书目 provider_books：</li></ol><p><img src="https://i.imgur.com/UaD0xNz.png" /></p><p>8、创建数据库</p><p><img src="https://i.imgur.com/dSXxtMD.png" /></p><p>9、创建数据表及必要的约束：</p><p><img src="https://i.imgur.com/b81103u.png" /></p><p>10、建立必要的视图：</p><p><img src="https://i.imgur.com/QgHQWYQ.png" /></p><p>11、创建必要的外键：</p><p><img src="https://i.imgur.com/DndpFW1.png" /></p><p>12、创建必要的触发器：</p><p><img src="https://i.imgur.com/eeFLXLI.png" /></p><h2 id="四相关资料">四、相关资料</h2><p><strong>网上书店管理系统的需求分析报告</strong></p><p>设计一个小型的数据库应用系统，服务于一个网上书店的日常处理业务及网上购书业务，包括供书目录、库存管理、采购管理、客户管理，顾客订单管理、发货管理，供应商管理及网上浏览等。</p><p>总体设计要求：书店内部日常处理业务通过C/S模式来实现，而顾客可通过Internet进行网上订书及查询浏览，为改善性能，应尽量将业务规则放在中间层或数据库服务器一端。该系统的主要功能如下：</p><p>1、供书目录及库存管理</p><p>供书目录管理及库存管理为书店的主要日常业务，应包括建立和更新供书目录，新书入库功能等。需要记录供书的信息有：书号，书名，作者（最多可包括四个作者，有序），出版社，价格，关键字（最多10个），本书的目录（可选），封皮（可选），存货量，供书商（一本书可有多个供应商，可选）等，并且需考虑丛书的问题（即一个书号包含多本书），库存存放位置（可采用示意图表示，可选）。</p><p>2、采购管理</p><p>采购管理为书店的主要日常业务之一，包括缺书登记管理及采购单管理。<br />缺书登记可通过以下几种方法生成：</p><ul><li>1）直接进行缺书登记，包括书号，书名，出版社，供书商，数量，登记日期。</li><li>2）存书量低于一定限度时，自动生成缺书记录（注：不能有重复）,最低存书量可设定。（可选）</li><li>3）顾客在网上进行缺书登记或订货数量超出库存时，生成缺书记录（注：不能有重复），必要时，应记录下顾客的缺书请求，以便答复。（可选）采购单管理：根据缺书记录单可选择生成采购单，到货时对采购单作相应处理，并增加库存量，删除缺书记录，EMAIL通知缺书登记的顾客（可选）等。</li></ul><p>采购单管理：根据缺书记录单可选择生成采购单，到货时对采购单作相应处理，并增加库存量，删除缺书记录，EMAIL通知缺书登记的顾客（可选）等。</p><p>3、客户管理</p><p>客户管理包括客户信息管理及信用管理。需要记录客户的信息包括：网上ID，登录密码，名称，地址，帐户余额，信用等级等。</p><p>有关客户信息的管理，分别由书店管理和客户网上管理完成，书店管理包括收到客户的款项后，增加客户的帐户余额；调整信用额度。客户其他信息由客户在网上维护，如注册一个新的用户，修改用户信息等等。</p><p>信用等级分为五级，一级为 10% 的折扣，不能透支；二级为 15%的折扣，不能透支；三级为15%的折扣，可先发书再付款，透支有额度限制；四级为20% 的折扣，可先发书再付款，透支有额度限制；五级为 25%的折扣，可先发书再付款，透支无额度限制。信用等级管理有两种形式：一种是书店进行管理；一种是自动进行管理，即在每月月初根据该帐户的余额或累计购书总金额进行调整，如帐户余额超过一定金额，提升其信用额度，或者累计购书总金额超过一定金额提升其信用额度（可选）。</p><p>4、顾客订单管理和发货管理</p><p>顾客订单包括订单号，订货日期，客户ID，书号，订书数量，金额，发货地址，发货情况等。</p><p>订单由顾客在网上申请生成。一个订单可订多本书（可选）。并仅能对书库中已有的书目进行订购，库存量不足时可以先订货；当客户查询的书目在书库中没有找到时，将会询问客户是否希望做进一步的询价及报价。</p><p>发货管理为书店日常业务管理之一，必须根据订单情况及客户的信用等级判断其付款额是否到帐，并相应扣减其帐户余额后，才能发货。对一个订单可分次发货（可选）</p><p>5、供应商管理</p><p>供应商相关信息，包括：供应商基本信息，供应商供货信息，并且不同的供应商发布自己现有书目信息。</p><p>6、网上浏览查询</p><p>可查询以下二类信息：</p><ul><li>1）客户相关信息，包括：客户基本信息，客户历史订单信息，相关订单的发货信息等。</li><li>2）书目信息：可按照书号，书名，出版社，关键字（可指定匹配程度（可选））、作者（按第一，第二……作者查询（可选）），进行查询，并可进行模糊查询（可选）。要求：必须根据所有必选的功能和数据需求设计实现完整的数据库（包括：各种表，视图，必要的存储过程，触发器等）。</li></ul><hr /><p>参考：</p><p>1、<ahref="https://blog.csdn.net/lee1hong/article/details/105763631?spm=1001.2014.3001.5501">哆啦一泓</a></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象系统分析与设计作业四</title>
    <link href="/2021/12/22/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E4%BD%9C%E4%B8%9A%E5%9B%9B/"/>
    <url>/2021/12/22/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E4%BD%9C%E4%B8%9A%E5%9B%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="作业4-时序图及综合">作业4 时序图及综合</h1><p>设计一个建材超市的系统，该系统的用例包括收银员收银、采购员采购物品、库存管理员入库登记、出库登记和盘存，实体类的类模型如图1所示。其中Order 表示帐单类，一个账单对象表示一次购物，有该次购物的 dateTime即日期时间、total 即总金额等属性；OrderItem表示帐单项类，一个账单项对象表示一次购物中所购买的一种物品，包含所购买物品的inventoryId 即物品条码、qty 即本次购买该物品的数量、price即购买单价，共3个属性；Inventory表示物品类，一个物品对象表示超市里货架上的一种物品，有inventoryId 即物品条码、desc 即物品名称描述、factory即供货厂家、markedPrice 即物品标价、evenCost 即库存均价、qOH即当前库存量等属性。超市货架上的每件物品都贴有物品条码，为某种物品的唯一编码，用光笔扫描可有效输入。其中“收银员收银”用例的事件流描述如下：顾客选好物品后到收银台交给收银员，收银员为顾客建立一份帐单，逐一扫描每种物品上所贴的条码，核对此物品的库存名称描述，并输入此物品的本次购买数量，同时建立帐单项，计算账单项的小计金额，更新订单项物品的当前库存数量，直到所有物品的帐单项建立完成，得出累计总金额，顾客按金额缴纳现金，现金收讫后打印收据交顾客。</p><p>请在以上需求描述的基础上，完成下列设计：</p><p>1. 设计此建材超市系统的用例图；<br />2.依据收银用例的事件流描述，设计其时序图，其界面对象和控制对象分别用一个对象表示，实体对象依据图1，要求写明完整详细的消息交互；<br />3.细化结果2的界面对象和控制对象，写出此用例事件流的完整交互的时序图；<br />4. 设计此收银过程中，实体对象 inventory的状态图，并给出库物品对象的方法函数，及其部分伪码。</p><p><img src="https://i.imgur.com/GkvEO0y.png"alt="图1 建材超市系统的部分实体类类图" /></p><p>解：</p><p>1. 用例图如下：</p><p><img src="https://i.imgur.com/i8ugI03.png" /></p><p>2. 时序图如下：</p><p><img src="https://i.imgur.com/U4Uq3JR.png" /></p><p>3. 更详细的时序图如下：</p><p><img src="https://i.imgur.com/VHA1y53.png" /></p><p>4. 状态图及部分伪码如下：</p><p><img src="https://i.imgur.com/BTc7huG.png" /></p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Inventory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> inventoryId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> factory<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> markedPrice<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> evenCost<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> qOH<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">vertifyInformation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 检查库存是否符合情况</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">updateInformation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>        <span class="token comment">// 更新库存情况</span>    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>作业</category>
      
    </categories>
    
    
    <tags>
      
      <tag>作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android 布局学习</title>
    <link href="/2021/12/14/Android-%E5%B8%83%E5%B1%80%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/12/14/Android-%E5%B8%83%E5%B1%80%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>Youtube 学习记录。</p><p>主要是根据 Youtube 的一个安卓 Youtuber的视频教程来学习，或者说复习一下安卓的布局。以前看过《Android第一行代码》第二版。</p><h1 id="linearlayout">LinearLayout</h1><p>线性布局。</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>padding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>16dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>hint</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>First Name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>hint</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Last Name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>hint</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Birth Date<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>hint</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Country<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Apply<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">xmlns:android="http://schemas.android.com/apk/res/android"xmlns:app="http://schemas.android.com/apk/res-auto"xmlns:tools="http://schemas.android.com/tools"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>一般来说，这三个命名空间是必须的。</p><p>我们设置 <code>layout_width</code> 的值常用的有三种：</p><ul><li>match-parent: 最外面的 <code>LinearLayout</code>如果使用这个值，会填充整个屏幕。</li><li>wrap-content: 包裹内容的大小即可。</li><li>20dp: 20 仅仅是一个示例，实际可以设置成任何值。</li></ul><p><code>orientation</code> 是放置的方式。分为水平和垂直两种方式。</p><p>在 <code>LinearLayout</code> 布局中可以再嵌套<code>LinearLayout</code> 布局。</p><p><img src="https://i.imgur.com/CAD8ahy.png" /></p><h1 id="constraintlayout">ConstraintLayout</h1><p><a href="https://youtu.be/PqkWT92BT3U">Youtube link</a></p><p>首先，熟悉一下 Android Studio 的使用。</p><p><img src="https://i.imgur.com/gvRffiy.png" /></p><p>创建三个按钮，并让它们水平和垂直居中：</p><p><img src="https://i.imgur.com/oqD9hDb.png" /></p><p><img src="https://i.imgur.com/FbEzZwj.png" /></p><p>然后依然是一些关于调整位置方面的东西。</p><ul><li>chains</li><li>baseline</li></ul><p>利用纯拖拽创建的一个页面：</p><p><img src="https://i.imgur.com/OrTq2bv.png" /></p><p><img src="https://i.imgur.com/44Jdg6j.png" /></p><h1 id="section"></h1><p>Rename 快捷键：<code>Shift + F6</code></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kotlin Learning Notes</title>
    <link href="/2021/12/13/Kotlin-Learning-Notes/"/>
    <url>/2021/12/13/Kotlin-Learning-Notes/</url>
    
    <content type="html"><![CDATA[<p>Just look through the basic grammers of Kotlin. To conclude, Kotlinseems so like Java, but has a lot of additional grammar sugar.</p><h1 id="ep01">ep01</h1><p>Why you should learn Kotlin?</p><ol type="1"><li>Complete null safety</li><li>Use all Java libraries in Kotin, too</li><li>Kotlin has coroutines</li></ol><h1 id="ep02-ep03">ep02 ep03</h1><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Hello World"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/U2DNTIV.png" /></p><h1 id="ep04">ep04</h1><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> myVariable<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">5</span>    <span class="token function">println</span><span class="token punctuation">(</span>myVariable<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> myVariable<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">5</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"The value of our variable is: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">myVariable</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> myVariable<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">5</span>    myVariable <span class="token operator">=</span> <span class="token number">1</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"The value of our variable is: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">myVariable</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> myVariable <span class="token operator">=</span> <span class="token number">5</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"The value of our variable is: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">myVariable</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    myVariable <span class="token operator">=</span> <span class="token number">1</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"The value is now: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">myVariable</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Because the tutorials are too basic, then I switch to officialguideline.</p><h1 id="package-definition-and-imports">Package definition andimports</h1><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">package</span> my<span class="token punctuation">.</span>demo<span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token operator">*</span><span class="token comment">// ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="program-entry-point">Program entry point</h1><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Hello world!"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">println</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">contentToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="print-to-the-standard-output">Print to the standard output</h1><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Hello "</span></span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"world!"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Hello world!"</span></span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h1 id="functions">Functions</h1><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Int<span class="token punctuation">,</span> b<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">&#125;</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"sum of 3 and 5 is "</span></span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Int<span class="token punctuation">,</span> b<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"sum of 19 and 23 is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression"><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">printSum</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Int<span class="token punctuation">,</span> b<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token punctuation">&#123;</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"sum of </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">a</span></span><span class="token string"> and </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">b</span></span><span class="token string"> is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">a <span class="token operator">+</span> b</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printSum</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>按：<code>Unit</code> 似乎和 Java 的 <code>void</code>比较像。<code>Unit</code> 可以省略。</p><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">printSum</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Int<span class="token punctuation">,</span> b<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"sum of </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">a</span></span><span class="token string"> and </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">b</span></span><span class="token string"> is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">a <span class="token operator">+</span> b</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printSum</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="variables">Variables</h1><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> a<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment">// immediate assignment</span>    <span class="token keyword">val</span> b <span class="token operator">=</span> <span class="token number">2</span>   <span class="token comment">// `Int` type is inferred</span>    <span class="token keyword">val</span> c<span class="token operator">:</span> Int  <span class="token comment">// Type required when no initializer is provided</span>    c <span class="token operator">=</span> <span class="token number">3</span>       <span class="token comment">// deferred assignment</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"a = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">a</span></span><span class="token string">, b = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">b</span></span><span class="token string">, c = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">c</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">5</span> <span class="token comment">// `Int` type is inferred</span>    x <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"x = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">x</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> PI <span class="token operator">=</span> <span class="token number">3.14</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">fun</span> <span class="token function">incrementX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     x <span class="token operator">+=</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"x = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">x</span></span><span class="token string">; PI = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">PI</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token function">incrementX</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"incrementX()"</span></span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"x = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">x</span></span><span class="token string">; PI = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">PI</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="creating-classes-and-instances">Creating classes andinstances</h1><p>To define a class, use the <code>class</code> keyword.</p><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Shape<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>Properties of a class can be listed in its declaration or body.</p><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token keyword">var</span> height<span class="token operator">:</span> Double<span class="token punctuation">,</span> <span class="token keyword">var</span> length<span class="token operator">:</span> Double<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> perimeter <span class="token operator">=</span> <span class="token punctuation">(</span>height <span class="token operator">+</span> length<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>The default constructor with parameters listed in the classdeclaration is available automatically.</p><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token keyword">var</span> height<span class="token operator">:</span> Double<span class="token punctuation">,</span> <span class="token keyword">var</span> length<span class="token operator">:</span> Double<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> perimeter <span class="token operator">=</span> <span class="token punctuation">(</span>height <span class="token operator">+</span> length<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> rectangle <span class="token operator">=</span> <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token number">5.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"The perimeter is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">rectangle<span class="token punctuation">.</span>perimeter</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Inheritance between classes is declared by a colon (<code>:</code>).Classes are final by default; to make a class inheritable, mark it as<code>open</code>.</p><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">open</span> <span class="token keyword">class</span> Shape<span class="token keyword">class</span> <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token keyword">var</span> height<span class="token operator">:</span> Double<span class="token punctuation">,</span> <span class="token keyword">var</span> length<span class="token operator">:</span> Double<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">Shape</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> perimeter <span class="token operator">=</span> <span class="token punctuation">(</span>height <span class="token operator">+</span> length<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="comments">Comments</h1><p>Just like most modern languages, Kotlin supports single-line (orend-of-line) and multi-line (block) comments.</p><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// This is an end-of-line comment</span><span class="token comment">/* This is a block comment   on multiple lines. */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Block comments in Kotlin can be nested.</p><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/* The comment starts here/* contains a nested comment *⁠/and ends here. */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="string-templates">String templates</h1><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment">// simple name in template:</span>    <span class="token keyword">val</span> s1 <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"a is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">a</span></span><span class="token string">"</span></span>     a <span class="token operator">=</span> <span class="token number">2</span>    <span class="token comment">// arbitrary expression in template:</span>    <span class="token keyword">val</span> s2 <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">s1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"is"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"was"</span></span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, but now is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">a</span></span><span class="token string">"</span></span>    <span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="conditional-expressions">Conditional expressions</h1><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">maxOf</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Int<span class="token punctuation">,</span> b<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> b    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"max of 0 and 42 is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression"><span class="token function">maxOf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">In Kotlin<span class="token punctuation">,</span> <span class="token keyword">if</span> can also be used <span class="token keyword">as</span> an expression<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="for-loop">for loop</h1><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> items <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"apple"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"banana"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"kiwifruit"</span></span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>item <span class="token keyword">in</span> items<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> items <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"apple"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"banana"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"kiwifruit"</span></span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>index <span class="token keyword">in</span> items<span class="token punctuation">.</span>indices<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"item at </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">index</span></span><span class="token string"> is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">items<span class="token punctuation">[</span>index<span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="while-loop">while loop</h1><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> items <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"apple"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"banana"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"kiwifruit"</span></span><span class="token punctuation">)</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"item at </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">index</span></span><span class="token string"> is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">items<span class="token punctuation">[</span>index<span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        index<span class="token operator">++</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="when-expression">when expression</h1><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">describe</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> Any<span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token operator">=</span>    <span class="token keyword">when</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token number">1</span>          <span class="token operator">-></span> <span class="token string-literal singleline"><span class="token string">"One"</span></span>        <span class="token string-literal singleline"><span class="token string">"Hello"</span></span>    <span class="token operator">-></span> <span class="token string-literal singleline"><span class="token string">"Greeting"</span></span>        <span class="token keyword">is</span> Long    <span class="token operator">-></span> <span class="token string-literal singleline"><span class="token string">"Long"</span></span>        <span class="token operator">!</span><span class="token keyword">is</span> String <span class="token operator">-></span> <span class="token string-literal singleline"><span class="token string">"Not a string"</span></span>        <span class="token keyword">else</span>       <span class="token operator">-></span> <span class="token string-literal singleline"><span class="token string">"Unknown"</span></span>    <span class="token punctuation">&#125;</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Hello"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"other"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="ranges">Ranges</h1><p>Check if a number is within a range using <code>in</code>operator.</p><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> x <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">val</span> y <span class="token operator">=</span> <span class="token number">9</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"fits in range"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Check if a number is out of range.</p><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"a"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"b"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"c"</span></span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">!</span><span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..</span>list<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"-1 is out of range"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span>size <span class="token operator">!</span><span class="token keyword">in</span> list<span class="token punctuation">.</span>indices<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"list size is out of valid list indices range, too"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Iterate over a range.</p><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>x <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Or over a progression.</p><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>x <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">10</span> step <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>x <span class="token keyword">in</span> <span class="token number">9</span> downTo <span class="token number">0</span> step <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="collection">Collection</h1><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> items <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"apple"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"banana"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"kiwifruit"</span></span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>item <span class="token keyword">in</span> items<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Check if a collection contains an object using <code>in</code>operator.</p><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> items <span class="token operator">=</span> <span class="token function">setOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"apple"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"banana"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"kiwifruit"</span></span><span class="token punctuation">)</span>    <span class="token keyword">when</span> <span class="token punctuation">&#123;</span>        <span class="token string-literal singleline"><span class="token string">"orange"</span></span> <span class="token keyword">in</span> items <span class="token operator">-></span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"juicy"</span></span><span class="token punctuation">)</span>        <span class="token string-literal singleline"><span class="token string">"apple"</span></span> <span class="token keyword">in</span> items <span class="token operator">-></span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"apple is fine too"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Using lambda expressions to filter and map collections:</p><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> fruits <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"banana"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"avocado"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"apple"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"kiwifruit"</span></span><span class="token punctuation">)</span>    fruits        <span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">&#123;</span> it<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"a"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">sortedBy</span> <span class="token punctuation">&#123;</span> it <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">&#123;</span> it<span class="token punctuation">.</span><span class="token function">uppercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">&#123;</span> <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="nullable-values-and-null-checks">Nullable values and nullchecks</h1><p>A reference must be explicitly marked as nullable when<code>null</code> value is possible. Nullable type names have<code>?</code> at the end.</p><p>Return <code>null</code> if <code>str</code> does not hold aninteger:</p><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> Int<span class="token operator">?</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>Use a function returning nullable value:</p><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> Int<span class="token operator">?</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toIntOrNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fun</span> <span class="token function">printProduct</span><span class="token punctuation">(</span>arg1<span class="token operator">:</span> String<span class="token punctuation">,</span> arg2<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> x <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span>    <span class="token keyword">val</span> y <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>arg2<span class="token punctuation">)</span>    <span class="token comment">// Using `x * y` yields error because they may hold nulls.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// x and y are automatically cast to non-nullable after null check</span>        <span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">*</span> y<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">arg1</span></span><span class="token string">' or '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">arg2</span></span><span class="token string">' is not a number"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printProduct</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"6"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"7"</span></span><span class="token punctuation">)</span>    <span class="token function">printProduct</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"a"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"7"</span></span><span class="token punctuation">)</span>    <span class="token function">printProduct</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"a"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"b"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> Int<span class="token operator">?</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toIntOrNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fun</span> <span class="token function">printProduct</span><span class="token punctuation">(</span>arg1<span class="token operator">:</span> String<span class="token punctuation">,</span> arg2<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> x <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span>    <span class="token keyword">val</span> y <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>arg2<span class="token punctuation">)</span>        <span class="token comment">// ...</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Wrong number format in arg1: '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">arg1</span></span><span class="token string">'"</span></span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Wrong number format in arg2: '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">arg2</span></span><span class="token string">'"</span></span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// x and y are automatically cast to non-nullable after null check</span>    <span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">*</span> y<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printProduct</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"6"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"7"</span></span><span class="token punctuation">)</span>    <span class="token function">printProduct</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"a"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"7"</span></span><span class="token punctuation">)</span>    <span class="token function">printProduct</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"99"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"b"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="type-checks-and-automatic-casts">Type checks and automaticcasts</h1><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">getStringLength</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> Any<span class="token punctuation">)</span><span class="token operator">:</span> Int<span class="token operator">?</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">is</span> String<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// `obj` is automatically cast to `String` in this branch</span>        <span class="token keyword">return</span> obj<span class="token punctuation">.</span>length    <span class="token punctuation">&#125;</span>    <span class="token comment">// `obj` is still of type `Any` outside of the type-checked branch</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fun</span> <span class="token function">printLength</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> Any<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Getting the length of '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">obj</span></span><span class="token string">'. Result: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression"><span class="token function">getStringLength</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">?:</span> <span class="token string-literal singleline"><span class="token string">"Error: The object is not a string"</span></span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> "</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printLength</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Incomprehensibilities"</span></span><span class="token punctuation">)</span>    <span class="token function">printLength</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token function">printLength</span><span class="token punctuation">(</span><span class="token function">listOf</span><span class="token punctuation">(</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">getStringLength</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> Any<span class="token punctuation">)</span><span class="token operator">:</span> Int<span class="token operator">?</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!</span><span class="token keyword">is</span> String<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token comment">// `obj` is automatically cast to `String` in this branch</span>    <span class="token keyword">return</span> obj<span class="token punctuation">.</span>length<span class="token punctuation">&#125;</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fun</span> <span class="token function">printLength</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> Any<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Getting the length of '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">obj</span></span><span class="token string">'. Result: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression"><span class="token function">getStringLength</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">?:</span> <span class="token string-literal singleline"><span class="token string">"Error: The object is not a string"</span></span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> "</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printLength</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Incomprehensibilities"</span></span><span class="token punctuation">)</span>    <span class="token function">printLength</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token function">printLength</span><span class="token punctuation">(</span><span class="token function">listOf</span><span class="token punctuation">(</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">getStringLength</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> Any<span class="token punctuation">)</span><span class="token operator">:</span> Int<span class="token operator">?</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// `obj` is automatically cast to `String` on the right-hand side of `&amp;&amp;`</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">is</span> String <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">.</span>length    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fun</span> <span class="token function">printLength</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> Any<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Getting the length of '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">obj</span></span><span class="token string">'. Result: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression"><span class="token function">getStringLength</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">?:</span> <span class="token string-literal singleline"><span class="token string">"Error: The object is not a string"</span></span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> "</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printLength</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Incomprehensibilities"</span></span><span class="token punctuation">)</span>    <span class="token function">printLength</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">""</span></span><span class="token punctuation">)</span>    <span class="token function">printLength</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>References:</p><ol type="1"><li><a href="https://www.youtube.com/channel/UCKNTZMRHPLXfqlbdOI7mCkg"class="uri">https://www.youtube.com/channel/UCKNTZMRHPLXfqlbdOI7mCkg</a></li><li><a href="https://kotlinlang.org/docs/basic-syntax.html"class="uri">https://kotlinlang.org/docs/basic-syntax.html</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Kotlin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Studio Usage List</title>
    <link href="/2021/12/13/Android-Studio-Usage-List/"/>
    <url>/2021/12/13/Android-Studio-Usage-List/</url>
    
    <content type="html"><![CDATA[<h1 id="unable-to-access-android-sdk-add-on-list">Unable to accessAndroid SDK add-on list</h1><p>One possible solution to this problem is as follows:</p><p>设置代理为访问外网相关软件的端口，我这里是 Clash for Windows，</p><p><img src="https://i.imgur.com/gu0fZHY.png" /></p><p>所以将端口设置成 7890 即可。</p><p>当然，网上还提供一个另外的做法，其实就是另外一个代理啦，但是，相比于直接访问国外的库，国内的镜像还是有一定的延时性的（可能）。这里建议，能够访问外网，尽量访问外网。直接，高效。</p><ol type="1"><li>Open Settings</li><li>Click HTTP Proxy, Choose Manual proxy configuration: set Host nameas: <code>mirrors.neusoft.edu.cn</code> and set Port number as: 80.</li></ol><h1id="安卓模拟器的截屏的图片存放在了哪里">安卓模拟器的截屏的图片存放在了哪里</h1><p>默认是放在桌面的。</p><h1 id="kotlin-无法直接使用按钮的-id">Kotlin 无法直接使用按钮的 id</h1><p>解决方法是，在 gradle 文件中引入插件：</p><figure><div class="code-wrapper"><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">id <span class="token string">'kotlin-android-extensions'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/pwzwK5f.png" /></p><p><img src="https://i.imgur.com/niLggaN.png" /></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 21 - 25 记录</title>
    <link href="/2021/12/09/LeetCode-21-25-%E8%AE%B0%E5%BD%95/"/>
    <url>/2021/12/09/LeetCode-21-25-%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="section">21</h1><p><ahref="https://leetcode.com/problems/merge-two-sorted-lists/submissions/"class="uri">https://leetcode.com/problems/merge-two-sorted-lists/submissions/</a></p><p><img src="https://i.imgur.com/m8EDkpP.png" /></p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Optional<span class="token punctuation">,</span> List<span class="token comment"># Definition for singly-linked list.</span><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token builtin">next</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> list1<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">,</span> list2<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> list1 <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> list2        <span class="token keyword">if</span> list2 <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> list1        res_head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token punctuation">)</span>        res_head_backup <span class="token operator">=</span> res_head        <span class="token keyword">while</span> list1 <span class="token operator">!=</span> <span class="token boolean">None</span> <span class="token keyword">and</span> list2 <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> list1<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> list2<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                res_head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> list1                res_head <span class="token operator">=</span> res_head<span class="token punctuation">.</span><span class="token builtin">next</span>                list1 <span class="token operator">=</span> list1<span class="token punctuation">.</span><span class="token builtin">next</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                res_head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> list2                res_head <span class="token operator">=</span> res_head<span class="token punctuation">.</span><span class="token builtin">next</span>                list2 <span class="token operator">=</span> list2<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">if</span> list1 <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            res_head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> list1        <span class="token keyword">elif</span> list2 <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            res_head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> list2        <span class="token keyword">return</span> res_head_backup<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token comment"># 将一个 List 转换成单向链表</span><span class="token keyword">def</span> <span class="token function">generate_linked_list</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span>List<span class="token punctuation">)</span><span class="token punctuation">:</span>    nodelist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> d <span class="token keyword">in</span> data<span class="token punctuation">:</span>        nodelist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ListNode<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nodelist<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        nodelist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> nodelist<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> nodelist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment"># 打印单向链表</span><span class="token keyword">def</span> <span class="token function">print_linked_list</span><span class="token punctuation">(</span>head<span class="token punctuation">:</span>ListNode<span class="token punctuation">)</span><span class="token punctuation">:</span>    cursor <span class="token operator">=</span> head    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Linked List: '</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> cursor <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span>val<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>        cursor <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token builtin">next</span>    <span class="token comment"># print('head: ', head.val)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    solu <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    list1 <span class="token operator">=</span> generate_linked_list<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    list2 <span class="token operator">=</span> generate_linked_list<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    Output <span class="token operator">=</span> solu<span class="token punctuation">.</span>mergeTwoLists<span class="token punctuation">(</span>list1<span class="token punctuation">,</span> list2<span class="token punctuation">)</span>    print_linked_list<span class="token punctuation">(</span>Output<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>简单的题目，和归并排序算法中的合并的那一步比较类似。</p><h1 id="section-1">22</h1><p><a href="https://leetcode.com/problems/generate-parentheses/"class="uri">https://leetcode.com/problems/generate-parentheses/</a></p><h2 id="解法一">解法一</h2><p><img src="https://i.imgur.com/LzgKHsU.png" /></p><p>繁琐的解法</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">from</span> leet15_20<span class="token punctuation">.</span>leet19 <span class="token keyword">import</span> print_linked_list<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">generateParenthesis</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment"># temporary modify, then change to str back</span>        self<span class="token punctuation">.</span>num <span class="token operator">=</span> n        self<span class="token punctuation">.</span>res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        nodevalue <span class="token operator">=</span> <span class="token number">1</span>        nodesum <span class="token operator">=</span> <span class="token number">1</span>        onePath <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>findOnePath<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> nodesum<span class="token punctuation">,</span> onePath<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># print('onePath -->', onePath)</span>        self<span class="token punctuation">.</span>findOnePath<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> nodesum<span class="token punctuation">,</span> onePath<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># print('test')</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> each <span class="token keyword">in</span> self<span class="token punctuation">.</span>res<span class="token punctuation">:</span>            tmp_str <span class="token operator">=</span> <span class="token string">''</span>            <span class="token keyword">for</span> _ <span class="token keyword">in</span> each<span class="token punctuation">:</span>                <span class="token keyword">if</span> _ <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                    tmp_str <span class="token operator">+=</span> <span class="token string">'('</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    tmp_str <span class="token operator">+=</span> <span class="token string">')'</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp_str<span class="token punctuation">)</span>            <span class="token comment"># print(each)</span>        <span class="token comment"># print('test')</span>        <span class="token keyword">return</span> result    <span class="token keyword">def</span> <span class="token function">findOnePath</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nodevalue<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> nodesum<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> onePath<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>onePath<span class="token punctuation">)</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">:</span>            tmp <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> onePath<span class="token punctuation">:</span>                tmp <span class="token operator">=</span> tmp <span class="token operator">+</span> i            <span class="token keyword">if</span> tmp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>onePath<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        nodesum <span class="token operator">=</span> nodesum <span class="token operator">+</span> nodevalue        onePath<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nodevalue<span class="token punctuation">)</span>        <span class="token keyword">if</span> nodesum <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">and</span> nodesum <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>num<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>findOnePath<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> nodesum<span class="token punctuation">,</span> onePath<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>findOnePath<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> nodesum<span class="token punctuation">,</span> onePath<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> nodesum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>findOnePath<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> nodesum<span class="token punctuation">,</span> onePath<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>findOnePath<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> nodesum<span class="token punctuation">,</span> onePath<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    solu <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    n <span class="token operator">=</span> <span class="token number">4</span>    Output <span class="token operator">=</span> solu<span class="token punctuation">.</span>generateParenthesis<span class="token punctuation">(</span>n<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Output<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'length of Output:'</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>Output<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> each <span class="token keyword">in</span> Output<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="解法二">解法二</h2><p><img src="https://i.imgur.com/uaEV8YM.png" /></p><p>动态规划，如果理解了，就十分简单。</p><p>实现起来，如果手熟的话，就比较简单。</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">from</span> leet15_20<span class="token punctuation">.</span>leet19 <span class="token keyword">import</span> print_linked_list<span class="token comment"># 使用动态规划</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">generateParenthesis</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        parenthesis_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        parenthesis_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token comment"># 0 --> None</span>        parenthesis_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'()'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 1 --> ['()']</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            cur_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                    <span class="token keyword">for</span> each <span class="token keyword">in</span> parenthesis_list<span class="token punctuation">[</span>i <span class="token operator">-</span> j<span class="token punctuation">]</span><span class="token punctuation">:</span>                        tmp <span class="token operator">=</span> <span class="token string">'('</span> <span class="token operator">+</span> <span class="token string">')'</span> <span class="token operator">+</span> each                        cur_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>                <span class="token keyword">elif</span> j <span class="token operator">==</span> i<span class="token punctuation">:</span>                    <span class="token keyword">for</span> each <span class="token keyword">in</span> parenthesis_list<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                        tmp <span class="token operator">=</span> <span class="token string">'('</span> <span class="token operator">+</span> each <span class="token operator">+</span> <span class="token string">')'</span>                        cur_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">for</span> left <span class="token keyword">in</span> parenthesis_list<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                        <span class="token keyword">for</span> right <span class="token keyword">in</span> parenthesis_list<span class="token punctuation">[</span>i <span class="token operator">-</span> j<span class="token punctuation">]</span><span class="token punctuation">:</span>                            tmp <span class="token operator">=</span> <span class="token string">'('</span> <span class="token operator">+</span> left <span class="token operator">+</span> <span class="token string">')'</span> <span class="token operator">+</span> right                            cur_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>            parenthesis_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur_list<span class="token punctuation">)</span>        <span class="token keyword">return</span> parenthesis_list<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    solu <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    Input <span class="token operator">=</span> <span class="token number">4</span>    Output <span class="token operator">=</span> solu<span class="token punctuation">.</span>generateParenthesis<span class="token punctuation">(</span>Input<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Output<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/igurO5n.jpg" /></p><h1 id="section-2">23</h1><p><ahref="https://leetcode.com/problems/merge-k-sorted-lists/submissions/"class="uri">https://leetcode.com/problems/merge-k-sorted-lists/submissions/</a></p><p><img src="https://i.imgur.com/O2ZSJTF.png" /></p><p>利用优先队列来解题。</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token punctuation">,</span> Optional<span class="token keyword">from</span> queue <span class="token keyword">import</span> PriorityQueue<span class="token comment"># Definition for singly-linked list.</span><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token builtin">next</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mergeKLists</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> lists<span class="token punctuation">:</span> List<span class="token punctuation">[</span>Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>lists<span class="token punctuation">)</span>        q <span class="token operator">=</span> PriorityQueue<span class="token punctuation">(</span>n<span class="token punctuation">)</span>        res <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token punctuation">)</span>        cursor <span class="token operator">=</span> res        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># print('test-->')</span>            <span class="token comment"># print(lists[i].val)</span>            <span class="token keyword">if</span> lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                q<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">,</span> i<span class="token punctuation">,</span> lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> q<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">:</span>            key<span class="token punctuation">,</span> index<span class="token punctuation">,</span> value <span class="token operator">=</span> q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># print(key)</span>            cursor<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> value            cursor <span class="token operator">=</span> value            value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token builtin">next</span>            <span class="token keyword">if</span> value <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                q<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>val<span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token keyword">def</span> <span class="token function">generate_linked_list</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span>List<span class="token punctuation">)</span><span class="token punctuation">:</span>    nodelist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> d <span class="token keyword">in</span> data<span class="token punctuation">:</span>        nodelist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ListNode<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nodelist<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        nodelist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> nodelist<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> nodelist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">print_linked_list</span><span class="token punctuation">(</span>head<span class="token punctuation">:</span>ListNode<span class="token punctuation">)</span><span class="token punctuation">:</span>    cursor <span class="token operator">=</span> head    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Linked List: '</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> cursor <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span>val<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>        cursor <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token builtin">next</span>    <span class="token comment"># print('head: ', head.val)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    solu <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    lists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    Input <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> each_list <span class="token keyword">in</span> lists<span class="token punctuation">:</span>        tmp_node <span class="token operator">=</span> generate_linked_list<span class="token punctuation">(</span>each_list<span class="token punctuation">)</span>        Input<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp_node<span class="token punctuation">)</span>    <span class="token comment"># for each_node in Input:</span>    <span class="token comment">#    print_linked_list(each_node)</span>    Output <span class="token operator">=</span> solu<span class="token punctuation">.</span>mergeKLists<span class="token punctuation">(</span>Input<span class="token punctuation">)</span>    print_linked_list<span class="token punctuation">(</span>Output<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="section-3">24</h1><p><a href="https://leetcode.com/problems/swap-nodes-in-pairs/"class="uri">https://leetcode.com/problems/swap-nodes-in-pairs/</a></p><p><img src="https://i.imgur.com/yBHknB2.png" /></p><p>这道题对照着链表的图，写起来的话，思路还是十分清晰的。</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Definition for singly-linked list.</span><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token builtin">next</span><span class="token keyword">from</span> typing <span class="token keyword">import</span> Optional<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> head <span class="token operator">==</span> <span class="token boolean">None</span> <span class="token keyword">or</span> head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> head        cursor <span class="token operator">=</span> head        new_head <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>        pre_tail_node <span class="token operator">=</span> <span class="token boolean">None</span>        <span class="token keyword">while</span> cursor <span class="token operator">!=</span> <span class="token boolean">None</span> <span class="token keyword">and</span> cursor<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            first_node <span class="token operator">=</span> cursor            second_node <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token builtin">next</span>            third_node <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>            second_node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> cursor            cursor<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> third_node            cursor <span class="token operator">=</span> third_node            <span class="token keyword">if</span> pre_tail_node <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                <span class="token keyword">pass</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                pre_tail_node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> second_node            pre_tail_node <span class="token operator">=</span> first_node        <span class="token keyword">return</span> new_head<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    solu <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">from</span> singly_list_utils <span class="token keyword">import</span> generate_linked_list<span class="token punctuation">,</span> print_linked_list    Input <span class="token operator">=</span> generate_linked_list<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    Output <span class="token operator">=</span> solu<span class="token punctuation">.</span>swapPairs<span class="token punctuation">(</span>Input<span class="token punctuation">)</span>    print_linked_list<span class="token punctuation">(</span>Output<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="section-4">25</h1><p><a href="https://leetcode.com/problems/reverse-nodes-in-k-group/"class="uri">https://leetcode.com/problems/reverse-nodes-in-k-group/</a></p><p><img src="https://i.imgur.com/Cv76rxf.png" /></p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token punctuation">,</span> Optional<span class="token comment"># Definition for singly-linked list.</span><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token builtin">next</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseKGroup</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> k <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> head        <span class="token keyword">def</span> <span class="token function">reverse_head</span><span class="token punctuation">(</span>head<span class="token punctuation">:</span>Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>            cursor <span class="token operator">=</span> head            pre_node <span class="token operator">=</span> <span class="token boolean">None</span>            next_node <span class="token operator">=</span> <span class="token boolean">None</span>            <span class="token keyword">while</span> cursor<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                next_node <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token builtin">next</span>                cursor<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> pre_node                pre_node <span class="token operator">=</span> cursor                cursor <span class="token operator">=</span> next_node            cursor<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> pre_node            <span class="token keyword">return</span> cursor        count <span class="token operator">=</span> <span class="token number">0</span>        part_head <span class="token operator">=</span> <span class="token boolean">None</span>        cursor <span class="token operator">=</span> head        flag <span class="token operator">=</span> <span class="token number">1</span>        new_head <span class="token operator">=</span> <span class="token boolean">None</span>        pre_raw_head <span class="token operator">=</span> <span class="token boolean">None</span>        <span class="token keyword">while</span> cursor <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token comment"># print('test-->', cursor.val)</span>            count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                part_head <span class="token operator">=</span> cursor            <span class="token keyword">if</span> count <span class="token operator">==</span> k<span class="token punctuation">:</span>                <span class="token keyword">if</span> pre_raw_head <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                    cur_pre_raw_head <span class="token operator">=</span> pre_raw_head                pre_raw_head <span class="token operator">=</span> part_head                next_part_head <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token comment"># save the next k nodes's head</span>                cursor<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>                cur_reversed_part_head <span class="token operator">=</span> reverse_head<span class="token punctuation">(</span>part_head<span class="token punctuation">)</span>                part_head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> next_part_head                count <span class="token operator">=</span> <span class="token number">0</span>                cursor <span class="token operator">=</span> next_part_head <span class="token comment"># update cursor</span>                <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                    new_head <span class="token operator">=</span> cur_reversed_part_head                    flag <span class="token operator">=</span> <span class="token number">0</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    cur_pre_raw_head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> cur_reversed_part_head                <span class="token keyword">continue</span>            cursor <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token comment"># update cursor</span>        <span class="token keyword">return</span> new_head<span class="token keyword">def</span> <span class="token function">generate_linked_list</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span>List<span class="token punctuation">)</span><span class="token punctuation">:</span>    nodelist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> d <span class="token keyword">in</span> data<span class="token punctuation">:</span>        nodelist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ListNode<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nodelist<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        nodelist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> nodelist<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> nodelist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">print_linked_list</span><span class="token punctuation">(</span>head<span class="token punctuation">:</span>ListNode<span class="token punctuation">)</span><span class="token punctuation">:</span>    cursor <span class="token operator">=</span> head    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Linked List: '</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> cursor <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span>val<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>        cursor <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token builtin">next</span>    <span class="token comment"># print('head: ', head.val)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    solu <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    data_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span>    Input_head <span class="token operator">=</span> generate_linked_list<span class="token punctuation">(</span>data_list<span class="token punctuation">)</span>    Input_k <span class="token operator">=</span> <span class="token number">3</span>    Output <span class="token operator">=</span> solu<span class="token punctuation">.</span>reverseKGroup<span class="token punctuation">(</span>Input_head<span class="token punctuation">,</span> Input_k<span class="token punctuation">)</span>    print_linked_list<span class="token punctuation">(</span>Output<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我这个代码写得真的有点乱啊。思路是清晰的，但是实现起来，总归是不利落。</p><p>也有可能是上课时候偷偷写的缘故，上课写leetcode，总归是没有在宿舍里面写要更加能够集中精力。</p>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>Python</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库第三次上机实验报告</title>
    <link href="/2021/12/08/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%B8%89%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    <url>/2021/12/08/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%B8%89%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="实验九-数据库的完整性设计">实验九 数据库的完整性设计</h1><h2 id="一实验目的">一、实验目的</h2><p>熟练掌握使用 Navicat 和 Transact-SQL语言两种方法创建、修改和删除表。掌握管理表的有关系统存储过程。</p><h2 id="二实验内容">二、实验内容</h2><p>1、利用 Navicat 创建满足以下要求的数据库：① 数据库存在于连接 MySQL中；② 数据库名称为 xsgl； ③ 字符集选择 utf8--UTF-8 Unicode；排序规则选择utf8_general_ci。</p><p><img src="https://i.imgur.com/ngvRIPT.png" /></p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> xsgl<span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8<span class="token keyword">COLLATE</span> utf8_general_ci<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>2、在数据库 xsgl 中，利用 Navicat 和 SQL 语句创建以下表格：</p><p>1）表格名为 xs（学生基本情况表），表格中各个属性的定义如下：</p><p><img src="https://i.imgur.com/yoQt07s.png" /></p><p><img src="https://i.imgur.com/vMuggV6.png" /></p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>xs<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>xh<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>xm<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>xb<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>nl<span class="token punctuation">`</span></span> <span class="token keyword">tinyint</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>zy<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>jtzz<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>2）表格名为 kc（课程情况表），表格中各个属性的定义如下：</p><p><img src="https://i.imgur.com/r9GibC9.png" /></p><p><img src="https://i.imgur.com/CuE7xbv.png" /></p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>kc<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>xh<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>kch<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>kcm<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>xss<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>xf<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>fs<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>&lt;1&gt;、在 xs 表中定义 xh 为主键。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> xs<span class="token keyword">ADD</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>xh<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>&lt;2&gt;、在 kc 表中定义 xh 和 kch 联合构成主键。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> kc<span class="token keyword">ADD</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>xh<span class="token punctuation">,</span> kch<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>&lt;3&gt;、定义 kc 表中的 kcm 列满足唯一性约束。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> kc<span class="token keyword">ADD</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">(</span>kcm<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>&lt;4&gt;、定义 kc 表中的 fs 列默认值为 0。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> kc<span class="token keyword">ALTER</span> <span class="token keyword">COLUMN</span> fs <span class="token keyword">SET</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>&lt;5&gt;、定义 xs 表中的 xb 列的 CHECK 约束“男”或“女”。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> xs<span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> xb<span class="token keyword">CHECK</span><span class="token punctuation">(</span>xb <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>参考：<ahref="https://stackoverflow.com/questions/62516860/how-to-create-a-check-constraint-to-allow-certain-strings-in-a-table-mysql-8">stackoverflow</a></p><p>&lt;6&gt;、在 xs 表与 kc 表之间定义外键 xh。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> kc<span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span><span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>xh<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> xs<span class="token punctuation">(</span>xh<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>&lt;7&gt;、以下将创建一个学生—课程数据库，包括学生关系Student、课程关系 Course 和选修关系 SC：</p><ul><li><p>① 建立学生-课程数据库 xskc，创建 Student 表，并将 Student 表中的Sno 属性定义为主键。</p><p><img src="https://i.imgur.com/Vi05SP7.png" /></p><p><img src="https://i.imgur.com/3iUAoj8.png" /></p><p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> xskc<span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8<span class="token keyword">COLLATE</span> utf8_general_ci<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>student<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>    <span class="token identifier"><span class="token punctuation">`</span>Sno<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>Sname<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>Ssex<span class="token punctuation">`</span></span> <span class="token keyword">smallint</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>Sdept<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>Sno<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p></li><li><p>② 创建 Course 表和 SC 表，并将 SC 表中的 Sno, Cno联合构成主键。</p><p><img src="https://i.imgur.com/aa4Ooj7.png" /></p><p><img src="https://i.imgur.com/lY5HJRm.png" /></p><p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>course<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>    <span class="token identifier"><span class="token punctuation">`</span>Cno<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>Cname<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>Cpno<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>Scredit<span class="token punctuation">`</span></span> <span class="token keyword">smallint</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb3<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>sc<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>    <span class="token identifier"><span class="token punctuation">`</span>Sno<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>Cno<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>Grade<span class="token punctuation">`</span></span> <span class="token keyword">smallint</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>Sno<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>Cno<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p></li><li><p>③ 定义 SC 表中的参照完整性</p><p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>sc<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>    <span class="token identifier"><span class="token punctuation">`</span>Sno<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>Cno<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>Grade<span class="token punctuation">`</span></span> <span class="token keyword">smallint</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>Sno<span class="token punctuation">,</span>Cno<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>Sno<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> Student<span class="token punctuation">(</span>Sno<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>Cno<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> Course<span class="token punctuation">(</span>Cno<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p></li><li><p>④ 显示说明参照完整性的违约处理示例</p><p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> SC<span class="token punctuation">(</span>Sno <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Cno <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Grade <span class="token keyword">SMALLINT</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>Sno<span class="token punctuation">,</span> Cno<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>Sno<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> Student<span class="token punctuation">(</span>Sno<span class="token punctuation">)</span>        <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span>        <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">,</span><span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>Cno<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> Course<span class="token punctuation">(</span>Cno<span class="token punctuation">)</span>        <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">NO</span> <span class="token keyword">ACTION</span>        <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p></li><li><p>⑤ 定义 SC 表 Grade 属性不允许为空</p><p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> SC<span class="token punctuation">(</span>Sno <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Cno <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Grade <span class="token keyword">SMALLINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>Sno<span class="token punctuation">,</span> Cno<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>Sno<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> Student<span class="token punctuation">(</span>Sno<span class="token punctuation">)</span>        <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span>        <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">,</span><span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>Cno<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> Course<span class="token punctuation">(</span>Cno<span class="token punctuation">)</span>        <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">NO</span> <span class="token keyword">ACTION</span>        <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p></li></ul><h2 id="三课后练习题">三、课后练习题</h2><p>1、新建名为 SPJ 的数据库。（其中数据表 S、P、J 和 SPJ的关系模式及其含义见实验八）</p><p>见实验八。</p><p>2、在数据库 SPJ 中，合理地为库中每一个数据表定义主键和外键。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>spj<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>SNO<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>PNO<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>JNO<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>QTY<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>SNO<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>PNO<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>JNO<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>PNO<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>PNO<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>JNO<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>JNO<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">CONSTRAINT</span> <span class="token identifier"><span class="token punctuation">`</span>spj_ibfk_1<span class="token punctuation">`</span></span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>SNO<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token identifier"><span class="token punctuation">`</span>s<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>SNO<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">CONSTRAINT</span> <span class="token identifier"><span class="token punctuation">`</span>spj_ibfk_2<span class="token punctuation">`</span></span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>PNO<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token identifier"><span class="token punctuation">`</span>p<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>PNO<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">CONSTRAINT</span> <span class="token identifier"><span class="token punctuation">`</span>spj_ibfk_3<span class="token punctuation">`</span></span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>JNO<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token identifier"><span class="token punctuation">`</span>j<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>JNO<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>3、适当为各数据表及其字段添加约束（唯一性、默认值等）。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>s<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>SNO<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>SNAME<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>STATUS<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>CITY<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>SNO<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>p<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>PNO<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>PNAME<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>COLOR<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>WEIGHT<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>PNO<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>j<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>JNO<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>JNAME<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>CITY<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>JNO<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="四思考题">四、思考题</h2><p>1、使用参考语句创建好 xs 和 kc 两个表之后，语句中对于 xb 列的 CHECK约束是否起作用？如果未起作用，思考语句通过却未起作用的原因。</p><p>是。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> xs<span class="token punctuation">(</span>xh<span class="token punctuation">,</span> xm<span class="token punctuation">,</span> xb<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token string">'张飞'</span><span class="token punctuation">,</span> <span class="token string">'N'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>output:</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">INSERT INTO xs(xh, xm, xb) VALUES(2021, &#39;张飞&#39;, &#39;N&#39;)&gt; 3819 - Check constraint &#39;xb&#39; is violated.&gt; Time: 0.001s</code></pre></div></figure><p>2、参考语句中参照完整性的违约处理示例“on delete cascade”和“on updatecascade”的含义是什么？“on delete no action”又代表什么？</p><p>“on delete cascade”：当删除 REFERENCE的表中的元组时，同时删除本表中相应的元组。</p><p>“on update cascade”：当更新 REFERENCE的表中的元组时，同时更新删除本表中相应的元组。</p><p>“on delete no action”：当删除 REFERENCE的表中元组造成与本表不一致时，拒绝删除。</p><h1 id="实验五-表数据的维护">实验五 表数据的维护</h1><h2 id="一实验目的-1">一、实验目的</h2><p>加深对数据安全性的理解，并掌握 Navicat中有关用户，角色及操作权限的管理方法。</p><h2 id="二实验内容-1">二、实验内容</h2><p>1、在 Navicat 中，管理建立用户和分配用户权限。</p><p>在这里，我们可以发现 root 是 MySQL最高级别权限的用户，它拥有查看、修改和删除 MySQL软件中所有数据库的权限。当需要有多个数据库，并且分配给不同的用户使用，多个用户之间只有查看自己对应数据库的权限，不相互干扰,需要建立多个数据库和用户，给用户设置管理指定数据库的权限。</p><p>操作方法如下：<br />① 右键点击“MySQL”连接，选择“连接属性”，将“保存密码”取消。 ②鼠标右键点击“MySQL”连接，选择“创建数据库”，创建名为 xunmei的数据库，字符集选择 utf8--UTF-8 Unicode 排序规则选择utf8_general_ci。<br />③ 打开数据库 xunmei后，点击界面上方的“用户”—“新建用户”—输入用户名“xmuser”、主机“localhost”、密码“1234”—保存（服务器权限自行定义）。<br />④点选新建的用户 xmuser—编辑用户—权限—添加权限--选择数据库xunmei，添加相应权限（可不全选），如图1.1所示：<br />⑥设置到此完成。为了验证我们的设置是否正确，我们可以用刚才建立的用户xmuser 和密码 1234 来连接 localhost 主机地址（方法：关闭连接MySQL，该连接属于最高权限用户 root。我们用新用户新建一个到 localhost的连接来模拟不同用户使用数据库的过程）。连上后，可使用用户 xmuser对数据库 xunmei或其他数据库进行操作，看是否与自己设置的权限相吻合。（可只添加添加少量权限，然后尝试在xunmei 里进行操作，看是否能成功）。</p><p><img src="https://i.imgur.com/v4Sq9Gv.png" /></p><p>按：这里要注意 <code>Server Privileges</code> 和<code>Privileges</code> 的使用，<code>Server Privileges</code>的权限是很大的，一般来说，我们只需要操作<code>Privileges</code>，不然，可能会出现 <code>Privileges</code> 被<code>Server Privileges</code> 覆盖的情况。</p><p><img src="https://i.imgur.com/yY32p1R.png" /></p><h2 id="三课后练习题-1">三、课后练习题</h2><p>1、使用两个不同的用户通过 Navicat 和查询分析器查看 world 数据库中country、city 两个表的所有数据。</p><p><img src="https://i.imgur.com/WhMGVDl.png" /></p><p><img src="https://i.imgur.com/E2MEF6t.png" /></p><p><img src="https://i.imgur.com/DZ6HEo4.png" /></p><p><img src="https://i.imgur.com/hNITSae.png" /></p><p>2、删除用户 xmuser，尝试新建另一个用户来管理数据库、表等：<br />添加新用户对数据库 world的权限，比较在有无相关权限的情况之下进行操作的区别：</p><ul><li>① Create。尝试新建表</li><li>② Update。尝试修改表数据或结构</li><li>③ Select。尝试查询表</li><li>④ Alt。尝试修改表</li><li>⑤ Drop。尝试删除表</li></ul><p>新建用户 fanyfull，密码 1234。</p><p>有权限的情况下：</p><p><img src="https://i.imgur.com/m1JeNBk.png" /></p><p><img src="https://i.imgur.com/GZFrdbd.png" /></p><p><img src="https://i.imgur.com/40NogiF.png" /></p><p><img src="https://i.imgur.com/PHmdpdM.png" /></p><p><img src="https://i.imgur.com/OQepBmO.png" /></p><p>没有权限：</p><p><img src="https://i.imgur.com/nwIXhAE.png" /></p><h2 id="四思考题-1">四、思考题</h2><p>1、解释 10 个数据库操作权限的含义和影响。</p><p><img src="https://i.imgur.com/RhycC2S.png" /></p><p>参考：<ahref="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html">MySQL8 docs</a></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象系统分析与设计作业三</title>
    <link href="/2021/12/06/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E4%BD%9C%E4%B8%9A%E4%B8%89/"/>
    <url>/2021/12/06/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E4%BD%9C%E4%B8%9A%E4%B8%89/</url>
    
    <content type="html"><![CDATA[<h2 id="用例图及用例开发">用例图及用例开发</h2><blockquote><p>考查常用的提供共享存储服务的网盘系统，分析其功能设计。为某个大学班级的同学开发一个专业学习资料的共享文件存储系统——“学霸网盘系统”。该系统包括客户端子系统和服务器端子系统两个部分。每位班级同学可以从客户端上传带有内容标注的本地文件，供本班同学下载使用。上传者应确定文件共享的有效时间，其上传文件及其内容标注需经过服务器端的管理员审查后才能被下载。</p><p>1）列举该网盘系统的 3 类参与者，解释每类参与者与系统的相关性；2）假设一个用例是上传文件，再设计 5 个以上的用例；3）设计该网盘系统的较为完整的用例图，简要说明每个用例的功能； 4）为其中5 个用例编写事件流。</p></blockquote><p>1）三类参与者如下：</p><ul><li>Normal user：普通的用户，可以上传本地文件。</li><li>Systemadministrator：系统管理员，负责审查上传到服务器的文件是否合法。</li><li>Repair technician：系统技术人员，负责维护和修理系统。</li></ul><p>2）设计用例如下：</p><ul><li>下载文件</li><li>审查文件</li><li>删除文件</li><li>隐藏文件</li><li>维护系统</li><li>升级系统</li><li>修理系统</li></ul><p>3）设计系统的用例图如下：</p><p><img src="https://i.imgur.com/RyLshm4.png" /></p><ul><li>上传文件：普通用户和系统管理员都可以上传文件</li><li>下载文件：普通用户和系统管理员都可以下载文件，普通用户只能下载其他用户分享的公开的文件以及审核通过的文件，系统管理员可以下载所有被上传的文件</li><li>审查文件：系统管理员审核用户上传的文件</li><li>删除文件：普通用户可以删除自己上传的文件，系统管理员可以删除系统的所有用户上传的文件</li><li>隐藏文件：普通用户可以选择将自己上传的文件设置为公开或者私有，系统管理员可以将所有公开的文件设置为私有或隐藏状态</li><li>维护系统：技术人员定期对系统进行维护</li><li>升级系统：技术人员对系统进行升级</li><li>修理系统：系统出故障时，技术人员对其进行维修</li></ul><p>4）编写事件流如下：</p><p>普通用户上传文件：</p><p><img src="https://i.imgur.com/Xzhp8Kj.png" /></p><p>普通用户下载文件：</p><p><img src="https://i.imgur.com/MdC2lFx.png" /></p><p>普通用户删除文件：</p><p><img src="https://i.imgur.com/q0lh2ON.png" /></p><p>升级系统：</p><p><img src="https://i.imgur.com/VsV97tk.png" /></p><p>修理系统：</p><p><img src="https://i.imgur.com/nmMODR4.png" /></p>]]></content>
    
    
    <categories>
      
      <category>作业</category>
      
    </categories>
    
    
    <tags>
      
      <tag>作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法4 阅读手记</title>
    <link href="/2021/12/06/%E7%AE%97%E6%B3%954-%E9%98%85%E8%AF%BB%E6%89%8B%E8%AE%B0/"/>
    <url>/2021/12/06/%E7%AE%97%E6%B3%954-%E9%98%85%E8%AF%BB%E6%89%8B%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="第二章">第二章</h1><h2 id="section">2.4</h2><blockquote><p>大多数在下沉排序期间重新插入堆的元素会被直接加入到堆底。Floyd 在 1964年观察发现，我们正好可以通过免去检查元素是否到达正确位置来节省时间。在下沉中总是直接提升较大的子结点直至到达堆底，然后再使元素上浮到正确的位置。这个想法几乎可以将比较次数减少一半——接近了归并排序所需的比较次数（随机数组）。这种方法需要额外的空间，因此在实际应用中只有当比较操作代价较高时才有用（例如，当我们在将字符串或者其他键值较长类型的元素进行排序时）。</p></blockquote><p>按：</p><p>这里在阅读的过程中一开始有点理解不清。后来想明白了，先看这一句话“大多数在下沉排序期间重新插入堆的元素会被直接加入到堆底。”，所谓堆底，对应数组中就是最右边界的位置，然后是为什么这句话是对的呢？因为本来我们取的就是上一个状体的堆底的元素，根据堆的性质，这个数据应该比较小，所以，它最终应该在的位置还是应该还是在堆的最底层。</p><p>然后，所以这里的方法就是我们在删除头结点(根结点)之后，不必将堆底的元素给提上来，而是一步一步把下一层的结点中较大的结点给提上来，最后一直这样操作到堆的最后一层，这种方法显然也能够达到最终的目的，并且更加省事儿。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algs4</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>优先队列(Priority Queues)</title>
    <link href="/2021/12/06/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97-Priority-Queues/"/>
    <url>/2021/12/06/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97-Priority-Queues/</url>
    
    <content type="html"><![CDATA[<h1 id="algs4">algs4</h1><p>目前已经把 algs4中的优先队列这一节阅读完毕。我改变以前的看法，以前我认为通过 algs4这本书我是一个算法都学不会，真要学算法还是得看算法导论，这是一年前在看KMP算法时的想法，更早之前阅读前几章时我也是这么想的，之前不管是哪一个时段，我都没有把书中的源码给跑起来，加上那个KMP算法它讲得确实有点地方有问题，现在我明白了，可能作者的水平真的是很高，所有很多东西他的脑袋里面是清清楚楚的，但是他水平太高了，所以写出来的时候不免思维有些跳跃，这对于我们想要去钻每一个牛角尖的读者来说就有些难搞了。</p><p>好在这个优先队列的部分写得很好，加上我的编程经验的提升，像编译源码之类的问题，是不可能绊住在这个地方的，因此，可以亲手运行得出正确的结果，这也增大了我学习这个算法的欲望。</p><p>至于其他的算法，用到的时候再来看一看，到时再作评价。</p><p>现在来看，这个代码的质量确实是经过千锤百炼的。很结实。</p><h2 id="用例">用例</h2><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/****************************************************************************** *  Compilation:  javac TopM.java *  Execution:    java TopM m &lt; input.txt *  Dependencies: MinPQ.java Transaction.java StdIn.java StdOut.java *  Data files:   https://algs4.cs.princeton.edu/24pq/tinyBatch.txt *  *  Given an integer m from the command line and an input stream where *  each line contains a String and a long value, this MinPQ client *  prints the m lines whose numbers are the highest. *  *  % java TopM 5 &lt; tinyBatch.txt  *  Thompson    2/27/2000  4747.08 *  vonNeumann  2/12/1994  4732.35 *  vonNeumann  1/11/1999  4409.74 *  Hoare       8/18/1992  4381.21 *  vonNeumann  3/26/2002  4121.85 * ******************************************************************************/</span><span class="token keyword">package</span> <span class="token namespace">algs4</span><span class="token punctuation">;</span><span class="token comment">/** *  The &#123;@code TopM&#125; class provides a client that reads a sequence of *  transactions from standard input and prints the &lt;em>m&lt;/em> largest ones *  to standard output. This implementation uses a &#123;@link MinPQ&#125; of size *  at most &lt;em>m&lt;/em> + 1 to identify the &lt;em>M&lt;/em> largest transactions *  and a &#123;@link Stack&#125; to output them in the proper order. *  &lt;p> *  For additional documentation, see &lt;a href="https://algs4.cs.princeton.edu/24pq">Section 2.4&lt;/a> *  of &lt;i>Algorithms, 4th Edition&lt;/i> by Robert Sedgewick and Kevin Wayne. * *  @author Robert Sedgewick *  @author Kevin Wayne */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopM</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// This class should not be instantiated.</span>    <span class="token keyword">private</span> <span class="token class-name">TopM</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token comment">/**     *  Reads a sequence of transactions from standard input; takes a     *  command-line integer m; prints to standard output the m largest     *  transactions in descending order.     *     * @param args the command-line arguments     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">MinPQ</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Transaction</span><span class="token punctuation">></span></span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MinPQ</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Transaction</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">hasNextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Create an entry from the next line and put on the PQ. </span>            <span class="token class-name">String</span> line <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Transaction</span> transaction <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transaction</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            pq<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// remove minimum if m+1 entries on the PQ</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pq<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> m<span class="token punctuation">)</span>                 pq<span class="token punctuation">.</span><span class="token function">delMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>   <span class="token comment">// top m entries are on the PQ</span>        <span class="token comment">// print entries on PQ in reverse order</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Transaction</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Transaction</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Transaction</span> transaction <span class="token operator">:</span> pq<span class="token punctuation">)</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Transaction</span> transaction <span class="token operator">:</span> stack<span class="token punctuation">)</span>            <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token comment">/****************************************************************************** *  Copyright 2002-2020, Robert Sedgewick and Kevin Wayne. * *  This file is part of algs4.jar, which accompanies the textbook * *      Algorithms, 4th edition by Robert Sedgewick and Kevin Wayne, *      Addison-Wesley Professional, 2011, ISBN 0-321-57351-X. *      http://algs4.cs.princeton.edu * * *  algs4.jar is free software: you can redistribute it and/or modify *  it under the terms of the GNU General Public License as published by *  the Free Software Foundation, either version 3 of the License, or *  (at your option) any later version. * *  algs4.jar is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *  GNU General Public License for more details. * *  You should have received a copy of the GNU General Public License *  along with algs4.jar.  If not, see http://www.gnu.org/licenses. ******************************************************************************/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>注意，我们最好把 alg4包中的所有代码全部编译出来，然后再执行程序。</p><p>然后，在 powershell 中测试用例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Get-Content</span> <span class="token punctuation">.</span>\tinyBatch<span class="token punctuation">.</span>txt <span class="token punctuation">|</span> java algs4<span class="token punctuation">.</span>TopM 5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/4u1mJ4T.png" /></p><h2 id="初级实现">初级实现</h2><p>随书代码给了一个优先队列的有序数组实现，这里来测试一下。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/****************************************************************************** *  Compilation:  javac OrderedArrayMaxPQ.java *  Execution:    java OrderedArrayMaxPQ *  Dependencies: StdOut.java  *   *  Priority queue implementation with an ordered array. * *  Limitations *  ----------- *   - no array resizing  *   - does not check for overflow or underflow. *   * ******************************************************************************/</span><span class="token keyword">package</span> <span class="token namespace">exer</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderedArrayMaxPQ</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Key</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">Key</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Key</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pq<span class="token punctuation">;</span>          <span class="token comment">// elements</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span>             <span class="token comment">// number of elements</span>    <span class="token comment">// set inititial size of heap to hold size elements</span>    <span class="token keyword">public</span> <span class="token class-name">OrderedArrayMaxPQ</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pq <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Key</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparable</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token class-name">Key</span> <span class="token function">delMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> pq<span class="token punctuation">[</span><span class="token operator">--</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Key</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">less</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> pq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            pq<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> pq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            i<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        pq<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>        n<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token comment">/***************************************************************************    * Helper functions.    ***************************************************************************/</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">less</span><span class="token punctuation">(</span><span class="token class-name">Key</span> v<span class="token punctuation">,</span> <span class="token class-name">Key</span> w<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token comment">/***************************************************************************    * Test routine.    ***************************************************************************/</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">OrderedArrayMaxPQ</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderedArrayMaxPQ</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pq<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"this"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pq<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"is"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pq<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pq<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pq<span class="token punctuation">.</span><span class="token function">delMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> …\myalgs4\exer> java exer<span class="token punctuation">.</span>OrderedArrayMaxPQthistestisa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>无序数组实现：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/****************************************************************************** *  Compilation:  javac UnorderedArrayMaxPQ.java *  Execution:    java UnorderedArrayMaxPQ *  Dependencies: StdOut.java  *   *  Priority queue implementation with an unsorted array. *  *  Limitations *  ----------- *   - no array resizing *   - does not check for overflow or underflow. * ******************************************************************************/</span><span class="token keyword">package</span> <span class="token namespace">exer</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnorderedArrayMaxPQ</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Key</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">Key</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Key</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pq<span class="token punctuation">;</span>      <span class="token comment">// elements</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span>         <span class="token comment">// number of elements</span>    <span class="token comment">// set inititial size of heap to hold size elements</span>    <span class="token keyword">public</span> <span class="token class-name">UnorderedArrayMaxPQ</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pq <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Key</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Comparable</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Key</span> x<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span> pq<span class="token punctuation">[</span>n<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Key</span> <span class="token function">delMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">less</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> max <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token function">exch</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pq<span class="token punctuation">[</span><span class="token operator">--</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token comment">/***************************************************************************    * Helper functions.    ***************************************************************************/</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">less</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> pq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>pq<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">exch</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Key</span> swap <span class="token operator">=</span> pq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        pq<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pq<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        pq<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> swap<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token comment">/***************************************************************************    * Test routine.    ***************************************************************************/</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UnorderedArrayMaxPQ</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnorderedArrayMaxPQ</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pq<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"this"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pq<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"is"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pq<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pq<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pq<span class="token punctuation">.</span><span class="token function">delMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> …\myalgs4\exer> java exer<span class="token punctuation">.</span>UnorderedArrayMaxPQthistestisa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="基于堆的优先队列">基于堆的优先队列</h2><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/****************************************************************************** *  Compilation:  javac MaxPQ.java *  Execution:    java MaxPQ &lt; input.txt *  Dependencies: StdIn.java StdOut.java *  Data files:   https://algs4.cs.princeton.edu/24pq/tinyPQ.txt *   *  Generic max priority queue implementation with a binary heap. *  Can be used with a comparator instead of the natural order, *  but the generic Key type must still be Comparable. * *  % java MaxPQ &lt; tinyPQ.txt  *  Q X P (6 left on pq) * *  We use a one-based array to simplify parent and child calculations. * *  Can be optimized by replacing full exchanges with half exchanges *  (ala insertion sort). * ******************************************************************************/</span><span class="token keyword">package</span> <span class="token namespace">algs4</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Comparator</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">NoSuchElementException</span></span><span class="token punctuation">;</span><span class="token comment">/** *  The &#123;@code MaxPQ&#125; class represents a priority queue of generic keys. *  It supports the usual &lt;em>insert&lt;/em> and &lt;em>delete-the-maximum&lt;/em> *  operations, along with methods for peeking at the maximum key, *  testing if the priority queue is empty, and iterating through *  the keys. *  &lt;p> *  This implementation uses a &lt;em>binary heap&lt;/em>. *  The &lt;em>insert&lt;/em> and &lt;em>delete-the-maximum&lt;/em> operations take *  &amp;Theta;(log &lt;em>n&lt;/em>) amortized time, where &lt;em>n&lt;/em> is the number *  of elements in the priority queue. This is an amortized bound  *  (and not a worst-case bound) because of array resizing operations. *  The &lt;em>min&lt;/em>, &lt;em>size&lt;/em>, and &lt;em>is-empty&lt;/em> operations take  *  &amp;Theta;(1) time in the worst case. *  Construction takes time proportional to the specified capacity or the *  number of items used to initialize the data structure. *  &lt;p> *  For additional documentation, see *  &lt;a href="https://algs4.cs.princeton.edu/24pq">Section 2.4&lt;/a> of *  &lt;i>Algorithms, 4th Edition&lt;/i> by Robert Sedgewick and Kevin Wayne. * *  @author Robert Sedgewick *  @author Kevin Wayne * *  @param &lt;Key> the generic type of key on this priority queue */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MaxPQ</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Key</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Key</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Key</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pq<span class="token punctuation">;</span>                    <span class="token comment">// store items at indices 1 to n</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span>                       <span class="token comment">// number of items on priority queue</span>    <span class="token keyword">private</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Key</span><span class="token punctuation">></span></span> comparator<span class="token punctuation">;</span>  <span class="token comment">// optional comparator</span>    <span class="token comment">/**     * Initializes an empty priority queue with the given initial capacity.     *     * @param  initCapacity the initial capacity of this priority queue     */</span>    <span class="token keyword">public</span> <span class="token class-name">MaxPQ</span><span class="token punctuation">(</span><span class="token keyword">int</span> initCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pq <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Key</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initCapacity <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Initializes an empty priority queue.     */</span>    <span class="token keyword">public</span> <span class="token class-name">MaxPQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Initializes an empty priority queue with the given initial capacity,     * using the given comparator.     *     * @param  initCapacity the initial capacity of this priority queue     * @param  comparator the order in which to compare the keys     */</span>    <span class="token keyword">public</span> <span class="token class-name">MaxPQ</span><span class="token punctuation">(</span><span class="token keyword">int</span> initCapacity<span class="token punctuation">,</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Key</span><span class="token punctuation">></span></span> comparator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>comparator <span class="token operator">=</span> comparator<span class="token punctuation">;</span>        pq <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Key</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initCapacity <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Initializes an empty priority queue using the given comparator.     *     * @param  comparator the order in which to compare the keys     */</span>    <span class="token keyword">public</span> <span class="token class-name">MaxPQ</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Key</span><span class="token punctuation">></span></span> comparator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Initializes a priority queue from the array of keys.     * Takes time proportional to the number of keys, using sink-based heap construction.     *     * @param  keys the array of keys     */</span>    <span class="token keyword">public</span> <span class="token class-name">MaxPQ</span><span class="token punctuation">(</span><span class="token class-name">Key</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keys<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        n <span class="token operator">=</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        pq <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Key</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>keys<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            pq<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> k <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token function">sink</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> <span class="token function">isMaxHeap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>          <span class="token comment">/**     * Returns true if this priority queue is empty.     *     * @return &#123;@code true&#125; if this priority queue is empty;     *         &#123;@code false&#125; otherwise     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns the number of keys on this priority queue.     *     * @return the number of keys on this priority queue     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns a largest key on this priority queue.     *     * @return a largest key on this priority queue     * @throws NoSuchElementException if this priority queue is empty     */</span>    <span class="token keyword">public</span> <span class="token class-name">Key</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token string">"Priority queue underflow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pq<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// resize the underlying array to have the given capacity</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">assert</span> capacity <span class="token operator">></span> n<span class="token punctuation">;</span>        <span class="token class-name">Key</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Key</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        pq <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Adds a new key to this priority queue.     *     * @param  x the new key to add to this priority queue     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Key</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// double size of array if necessary</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> pq<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> pq<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// add x, and percolate it up to maintain heap invariant</span>        pq<span class="token punctuation">[</span><span class="token operator">++</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token function">swim</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> <span class="token function">isMaxHeap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Removes and returns a largest key on this priority queue.     *     * @return a largest key on this priority queue     * @throws NoSuchElementException if this priority queue is empty     */</span>    <span class="token keyword">public</span> <span class="token class-name">Key</span> <span class="token function">delMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token string">"Priority queue underflow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Key</span> max <span class="token operator">=</span> pq<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">exch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sink</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pq<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>     <span class="token comment">// to avoid loitering and help with garbage collection</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token punctuation">(</span>pq<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">resize</span><span class="token punctuation">(</span>pq<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> <span class="token function">isMaxHeap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token comment">/***************************************************************************    * Helper functions to restore the heap invariant.    ***************************************************************************/</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">less</span><span class="token punctuation">(</span>k<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">exch</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> k<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            k <span class="token operator">=</span> k<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sink</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>k <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>k<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> <span class="token function">less</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">less</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token function">exch</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>            k <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>   <span class="token comment">/***************************************************************************    * Helper functions for compares and swaps.    ***************************************************************************/</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">less</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>comparator <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Key</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> pq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>pq<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> comparator<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>pq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> pq<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">exch</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Key</span> swap <span class="token operator">=</span> pq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        pq<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pq<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        pq<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> swap<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// is pq[1..n] a max heap?</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isMaxHeap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pq<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pq<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pq<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pq<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">isMaxHeapOrdered</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// is subtree of pq[1..n] rooted at k a max heap?</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isMaxHeapOrdered</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>k<span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left  <span class="token operator">&lt;=</span> n <span class="token operator">&amp;&amp;</span> <span class="token function">less</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> left<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;=</span> n <span class="token operator">&amp;&amp;</span> <span class="token function">less</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">isMaxHeapOrdered</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isMaxHeapOrdered</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token comment">/***************************************************************************    * Iterator.    ***************************************************************************/</span>    <span class="token comment">/**     * Returns an iterator that iterates over the keys on this priority queue     * in descending order.     * The iterator doesn't implement &#123;@code remove()&#125; since it's optional.     *     * @return an iterator that iterates over the keys in descending order     */</span>    <span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Key</span><span class="token punctuation">></span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HeapIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">HeapIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Key</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// create a new pq</span>        <span class="token keyword">private</span> <span class="token class-name">MaxPQ</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Key</span><span class="token punctuation">></span></span> copy<span class="token punctuation">;</span>        <span class="token comment">// add all items to copy of heap</span>        <span class="token comment">// takes linear time since already in heap order so no keys move</span>        <span class="token keyword">public</span> <span class="token class-name">HeapIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>comparator <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> copy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MaxPQ</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Key</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                    copy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MaxPQ</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Key</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                copy<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>pq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token operator">!</span>copy<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">Key</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> copy<span class="token punctuation">.</span><span class="token function">delMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Unit tests the &#123;@code MaxPQ&#125; data type.     *     * @param args the command-line arguments     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MaxPQ</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MaxPQ</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> item <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> pq<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>pq<span class="token punctuation">.</span><span class="token function">delMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"("</span> <span class="token operator">+</span> pq<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" left on pq)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/****************************************************************************** *  Copyright 2002-2020, Robert Sedgewick and Kevin Wayne. * *  This file is part of algs4.jar, which accompanies the textbook * *      Algorithms, 4th edition by Robert Sedgewick and Kevin Wayne, *      Addison-Wesley Professional, 2011, ISBN 0-321-57351-X. *      http://algs4.cs.princeton.edu * * *  algs4.jar is free software: you can redistribute it and/or modify *  it under the terms of the GNU General Public License as published by *  the Free Software Foundation, either version 3 of the License, or *  (at your option) any later version. * *  algs4.jar is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *  GNU General Public License for more details. * *  You should have received a copy of the GNU General Public License *  along with algs4.jar.  If not, see http://www.gnu.org/licenses. ******************************************************************************/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="使用优先队列的多项归并">使用优先队列的多项归并</h2><p>这里需要重点理解一下，我复习这个优先队列的目的其实就是在做 LeetCode的第 22题时，那个题目需要用到这个数据结构，然后，这里的多项归并所用到的思想和解那一道题的思路是一模一样的。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/****************************************************************************** *  Compilation:  javac Multiway.java *  Execution:    java Multiway input1.txt input2.txt input3.txt ... *  Dependencies: IndexMinPQ.java In.java StdOut.java *  Data files:   https://algs4.cs.princeton.edu/24pq/m1.txt *                https://algs4.cs.princeton.edu/24pq/m2.txt *                https://algs4.cs.princeton.edu/24pq/m3.txt *  *  Merges together the sorted input stream given as command-line arguments *  into a single sorted output stream on standard output. * *  % more m1.txt  *  A B C F G I I Z * *  % more m2.txt  *  B D H P Q Q *  *  % more m3.txt  *  A B E F J N * *  % java Multiway m1.txt m2.txt m3.txt  *  A A B B B C D E F F G H I I J N P Q Q Z  * ******************************************************************************/</span><span class="token keyword">package</span> <span class="token namespace">algs4</span><span class="token punctuation">;</span><span class="token comment">/** *  The &#123;@code Multiway&#125; class provides a client for reading in several *  sorted text files and merging them together into a single sorted *  text stream. *  This implementation uses a &#123;@link IndexMinPQ&#125; to perform the multiway *  merge.  *  &lt;p> *  For additional documentation, see &lt;a href="https://algs4.cs.princeton.edu/24pq">Section 2.4&lt;/a> *  of &lt;i>Algorithms, 4th Edition&lt;/i> by Robert Sedgewick and Kevin Wayne. * *  @author Robert Sedgewick *  @author Kevin Wayne */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Multiway</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// This class should not be instantiated.</span>    <span class="token keyword">private</span> <span class="token class-name">Multiway</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token comment">// merge together the sorted input streams and write the sorted result to standard output</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token class-name">In</span><span class="token punctuation">[</span><span class="token punctuation">]</span> streams<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> streams<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token class-name">IndexMinPQ</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexMinPQ</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>streams<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                pq<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> streams<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Extract and print min and read next from its stream. </span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>pq<span class="token punctuation">.</span><span class="token function">minKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">delMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>streams<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                pq<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> streams<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     *  Reads sorted text files specified as command-line arguments;     *  merges them together into a sorted output; and writes     *  the results to standard output.     *  Note: this client does not check that the input files are sorted.     *     * @param args the command-line arguments     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token class-name">In</span><span class="token punctuation">[</span><span class="token punctuation">]</span> streams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">In</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            streams<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">In</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">merge</span><span class="token punctuation">(</span>streams<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/****************************************************************************** *  Copyright 2002-2020, Robert Sedgewick and Kevin Wayne. * *  This file is part of algs4.jar, which accompanies the textbook * *      Algorithms, 4th edition by Robert Sedgewick and Kevin Wayne, *      Addison-Wesley Professional, 2011, ISBN 0-321-57351-X. *      http://algs4.cs.princeton.edu * * *  algs4.jar is free software: you can redistribute it and/or modify *  it under the terms of the GNU General Public License as published by *  the Free Software Foundation, either version 3 of the License, or *  (at your option) any later version. * *  algs4.jar is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *  GNU General Public License for more details. * *  You should have received a copy of the GNU General Public License *  along with algs4.jar.  If not, see http://www.gnu.org/licenses. ******************************************************************************/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">java algs4<span class="token punctuation">.</span>Multiway <span class="token punctuation">.</span>\m1<span class="token punctuation">.</span>txt <span class="token punctuation">.</span>\m2<span class="token punctuation">.</span>txt <span class="token punctuation">.</span>\m3<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/yiYnwGf.png" /></p><p>这个程序的作用，用这里的<code>m1.txt</code>、<code>m2.txt</code>、<code>m3.txt</code>来辅助说明，就是每一次把每一个文件中的最左边的数据取出来，然后从中挑出最小的数据。之后再重复这个过程。最终输出的结果是所有文件中的所有数据得到有序的排列。</p><h2 id="堆排序">堆排序</h2><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/****************************************************************************** *  Compilation:  javac Heap.java *  Execution:    java Heap &lt; input.txt *  Dependencies: StdOut.java StdIn.java *  Data files:   https://algs4.cs.princeton.edu/24pq/tiny.txt *                https://algs4.cs.princeton.edu/24pq/words3.txt *   *  Sorts a sequence of strings from standard input using heapsort. * *  % more tiny.txt *  S O R T E X A M P L E * *  % java Heap &lt; tiny.txt *  A E E L M O P R S T X                 [ one string per line ] * *  % more words3.txt *  bed bug dad yes zoo ... all bad yet * *  % java Heap &lt; words3.txt *  all bad bed bug dad ... yes yet zoo   [ one string per line ] * ******************************************************************************/</span><span class="token keyword">package</span> <span class="token namespace">algs4</span><span class="token punctuation">;</span><span class="token comment">/** *  The &#123;@code Heap&#125; class provides a static method to sort an array *  using &lt;em>heapsort&lt;/em>. *  &lt;p> *  This implementation takes &amp;Theta;(&lt;em>n&lt;/em> log &lt;em>n&lt;/em>) time *  to sort any array of length &lt;em>n&lt;/em> (assuming comparisons *  take constant time). It makes at most  *  2 &lt;em>n&lt;/em> log&lt;sub>2&lt;/sub> &lt;em>n&lt;/em> compares. *  &lt;p> *  This sorting algorithm is not stable. *  It uses &amp;Theta;(1) extra memory (not including the input array). *  &lt;p> *  For additional documentation, see *  &lt;a href="https://algs4.cs.princeton.edu/24pq">Section 2.4&lt;/a> of *  &lt;i>Algorithms, 4th Edition&lt;/i> by Robert Sedgewick and Kevin Wayne. * *  @author Robert Sedgewick *  @author Kevin Wayne */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Heap</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// This class should not be instantiated.</span>    <span class="token keyword">private</span> <span class="token class-name">Heap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Rearranges the array in ascending order, using the natural order.     * @param pq the array to be sorted     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Comparable</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pq<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> pq<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment">// heapify phase</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> k <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token function">sink</span><span class="token punctuation">(</span>pq<span class="token punctuation">,</span> k<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// sortdown phase</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">exch</span><span class="token punctuation">(</span>pq<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sink</span><span class="token punctuation">(</span>pq<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>   <span class="token comment">/***************************************************************************    * Helper functions to restore the heap invariant.    ***************************************************************************/</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sink</span><span class="token punctuation">(</span><span class="token class-name">Comparable</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pq<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>k <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>k<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> <span class="token function">less</span><span class="token punctuation">(</span>pq<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">less</span><span class="token punctuation">(</span>pq<span class="token punctuation">,</span> k<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token function">exch</span><span class="token punctuation">(</span>pq<span class="token punctuation">,</span> k<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>            k <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>   <span class="token comment">/***************************************************************************    * Helper functions for comparisons and swaps.    * Indices are "off-by-one" to support 1-based indexing.    ***************************************************************************/</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">less</span><span class="token punctuation">(</span><span class="token class-name">Comparable</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pq<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> pq<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>pq<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">exch</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pq<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> swap <span class="token operator">=</span> pq<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        pq<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> pq<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        pq<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> swap<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// print array to standard output</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">Comparable</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Reads in a sequence of strings from standard input; heapsorts them;      * and prints them to standard output in ascending order.      *     * @param args the command-line arguments     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readAllStrings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Heap</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">show</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/****************************************************************************** *  Copyright 2002-2020, Robert Sedgewick and Kevin Wayne. * *  This file is part of algs4.jar, which accompanies the textbook * *      Algorithms, 4th edition by Robert Sedgewick and Kevin Wayne, *      Addison-Wesley Professional, 2011, ISBN 0-321-57351-X. *      http://algs4.cs.princeton.edu * * *  algs4.jar is free software: you can redistribute it and/or modify *  it under the terms of the GNU General Public License as published by *  the Free Software Foundation, either version 3 of the License, or *  (at your option) any later version. * *  algs4.jar is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *  GNU General Public License for more details. * *  You should have received a copy of the GNU General Public License *  along with algs4.jar.  If not, see http://www.gnu.org/licenses. ******************************************************************************/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/11UrtNw.png" /></p><p><img src="https://i.imgur.com/54YwiS5.png" /></p><p><img src="https://i.imgur.com/YaVzwJl.png" /></p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algs4</tag>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 烹饪笔记</title>
    <link href="/2021/12/04/Java-%E7%83%B9%E9%A5%AA%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/12/04/Java-%E7%83%B9%E9%A5%AA%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="小碎点">小碎点</h1><blockquote><p>命令行查看 Java 版本。</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">java -version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><blockquote><p>更改 PowerShell(或 CMD)中 javac 的输出为英文。</p></blockquote><p>在环境变量中添加这么一行：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">JAVA_TOOL_OPTIONS&#x3D;-Duser.language&#x3D;en<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/iRR60c0.png" /></p><p>效果：</p><p><img src="https://i.imgur.com/znxxOjY.png" /></p><p>参考：<ahref="https://blog.csdn.net/icyfox_bupt/article/details/109499926">CSDN</a></p><blockquote><p>在 PowerShell 中编译很多个 java 文件。</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">javac <span class="token string">"@sources.txt"</span> <span class="token operator">-</span>encoding UTF8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><blockquote><p><code>error: unmappable character for encoding GBK</code> 问题。</p></blockquote><p>编码问题，解决方法：</p><p>加上 <code>-encoding UTF8</code> 选项即可。</p><h1 id="在-windows-的-powershell-中编译和运行-java-的代码">在 Windows 的PowerShell 中编译和运行 Java 的代码</h1><p>这里以我编译 algs4 源码的经历为例。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>烹饪</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 烹饪笔记</title>
    <link href="/2021/12/04/Ubuntu-%E7%83%B9%E9%A5%AA%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/12/04/Ubuntu-%E7%83%B9%E9%A5%AA%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="一些常用的-linux-命令">一些常用的 Linux 命令</h1><h2 id="解压缩">解压缩</h2><p>对于 <code>.tar.gz</code> 的解压缩：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">tar -zxvf filename.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>参考：<a href="https://www.cnblogs.com/cursorhu/p/5891699.html"class="uri">https://www.cnblogs.com/cursorhu/p/5891699.html</a></p><h1 id="一些快捷键">一些快捷键</h1><blockquote><p>截图快捷键。</p></blockquote><ul><li><code>PrtSc</code>：全屏捕捉，截取的图片保存在 Pictures目录下。</li><li><code>Shift + PrtSc</code>：自由选定区域，截取的图片保存在 Pictures目录下。</li><li><code>Alt + PtrSc</code>：截图当前窗口，截取的图片保存在 Pictures目录下。</li><li><code>Ctrl + PrtSc</code>：全屏截图，保存到剪贴板中。</li><li><code>Ctrl + Shift + PrtSc</code>：自由选定区域，截取的图片保存到剪贴板中。</li><li><code>Ctrl + Alt + PrtSc</code>：截取当前窗口，截取的图片保存到剪贴板中。</li></ul><h1 id="一些常用软件的存放位置">一些常用软件的存放位置</h1><ol type="1"><li>Android Studio: /opt</li></ol><h1 id="在后台运行一个命令">在后台运行一个命令</h1><p>同时，这意味着关掉 shell 那个命令将会继续运行。</p><p>我把它用来运行我的 <code>clash</code>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ setsid ./clash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>参考：<ahref="https://askubuntu.com/questions/106351/running-programs-in-the-background-from-terminal">askubuntu</a></p><h1 id="笔记本设置合盖不休眠">笔记本设置合盖不休眠</h1><p>我的笔记本除了一个问题，装的版本是 Ubuntu21.10，然后每一次合上盖子之后，然后再打开，都会出现无法唤醒的情况，有时候能够唤醒，但是要花费好几分钟，无奈之下，只能设置合上盖子之后也让它不休眠了。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">vim</span> /etc/systemd/logind.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>然后修改这一行：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">#HandleLidSwitch&#x3D;suspend<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>将注释符号去掉，然后修改为：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">HandleLidSwitch&#x3D;ignore<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>然后重启系统。</p><p>按：似乎也可以重启服务，但是我没有试过：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">sudo restart systemd-logind  # 或者service systemd-logind restart# 或者sudo shutdown -r now<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>参考：<ahref="https://www.jianshu.com/p/3fe469fc60c9">jianshu</a></p><h1 id="关闭系统的动画">关闭系统的动画</h1><p>由于我这个 Ubuntu 21.10 动画系统出了Bug，即原生的动画的坐标对准，另一台笔记本上的 Ubuntu 20.04还是好好的。无奈之下，只好关掉这个动画。</p><p>在 bash 中执行如下命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gsettings <span class="token builtin class-name">set</span> org.gnome.desktop.interface enable-animations <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这样就已经关闭了。</p><p>如果想要重新开启动画，执行如下命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gsettings <span class="token builtin class-name">set</span> org.gnome.desktop.interface enable-animations <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>参考：<ahref="https://www.imaegoo.com/2021/disable-ubuntu-animation/">iMaeGoo</a></p><h1 id="安装-java8">安装 java8</h1><p>执行命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> openjdk-8-jdk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>安装完后，检查 java 版本：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">java</span> <span class="token parameter variable">-version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>output:</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">openjdk version &quot;1.8.0_302&quot;OpenJDK Runtime Environment (build 1.8.0_302-8u302-b08-0ubuntu2-b08)OpenJDK 64-Bit Server VM (build 25.302-b08, mixed mode)</code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL 烹饪笔记</title>
    <link href="/2021/12/04/MySQL-%E7%83%B9%E9%A5%AA%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/12/04/MySQL-%E7%83%B9%E9%A5%AA%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="说明">说明</h1><p>这里的学习过程主要来自于此网站：<ahref="https://www.mysqltutorial.org/"class="uri">https://www.mysqltutorial.org/</a>，以前读过什么《MySQL必知必会》，现在在学数据库系统概论这门课，比起这个时新的网站，其时效性还是差了些，更重要的是，目前看来，这个网站的教程质量很好，并且有示例的数据库，这个示例的数据库的质量也很好。</p><p>数据库的脚本我复整了一份 gist：<ahref="https://gist.github.com/fanlumaster/128af90a3f35cead9ca7905dfd393bb9">mysqlsampledatabase</a></p><p>这个脚本可以直接复制到 Navicat 中去执行，或者利用 Navicat 导入 sql脚本。</p><p>我目前的数据库版本是 MySQL 8.0.25，可以把脚本复制到 Navicat中去执行，没有出现问题。</p><p><img src="https://i.imgur.com/MVO1yaC.png" /></p><h1 id="mysql-subquery">MySQL SubQuery</h1><p><a href="https://www.mysqltutorial.org/mysql-subquery/"class="uri">https://www.mysqltutorial.org/mysql-subquery/</a></p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>lastName<span class="token punctuation">,</span> firstName<span class="token keyword">FROM</span>employees<span class="token keyword">WHERE</span>officeCode <span class="token operator">IN</span><span class="token punctuation">(</span>    <span class="token keyword">SELECT</span>     officeCode    <span class="token keyword">FROM</span>    offices    <span class="token keyword">WHERE</span>    country <span class="token operator">=</span> <span class="token string">'USA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>在这个例子中：</p><ul><li>子查询返回所有位于美国的办公室的 <em>office codes</em>。</li><li>外面的查询 select 在子查询中查询到的办公室工作的员工的 lastName 和firstName。</li></ul><p><img src="https://i.imgur.com/rOIRltd.png" /></p><p>然后就是执行一下几个示例。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>     customerNumber<span class="token punctuation">,</span>     checkNumber<span class="token punctuation">,</span>     amount<span class="token keyword">FROM</span>    payments<span class="token keyword">WHERE</span>    amount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span> <span class="token keyword">FROM</span> payments<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/8HOMZ6L.png" /></p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>     customerNumber<span class="token punctuation">,</span>     checkNumber<span class="token punctuation">,</span>     amount<span class="token keyword">FROM</span>    payments<span class="token keyword">WHERE</span>    amount <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span>             <span class="token function">AVG</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span>        <span class="token keyword">FROM</span>            payments<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>纠正一个错误的认识：我之前看的不认真，以为可以独立的子查询一定是先于外查询执行的，实际上人家并没有这么说，只有当用到<code>IN</code> 操作符时，才会这样。</p><h1 id="select">SELECT</h1><h1 id="order-by">ORDER BY</h1><h1 id="where">WHERE</h1><h1 id="select-distinct">SELECT DISTINCT</h1><h1 id="and">AND</h1><h1 id="or">OR</h1><h1 id="in">IN</h1><h1 id="between">BETWEEN</h1><h1 id="like">LIKE</h1><h1 id="limit">LIMIT</h1><h1 id="is-null">IS NULL</h1><h1 id="table-column-aliases">Table &amp; Column Aliases</h1><h1 id="joins">Joins</h1><h1 id="inner-join">INNER JOIN</h1><h1 id="left-join">LEFT JOIN</h1><h1 id="right-join">RIGHT JOIN</h1><h1 id="self-join">Self Join</h1><h1 id="cross-join">CROSS JOIN</h1><h1 id="group-by">GROUP BY</h1><h1 id="having">HAVING</h1><h1 id="rollup">ROLLUP</h1><h1 id="subquery">Subquery</h1><p><a href="https://www.mysqltutorial.org/mysql-subquery/"class="uri">https://www.mysqltutorial.org/mysql-subquery/</a></p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>lastName<span class="token punctuation">,</span> firstName<span class="token keyword">FROM</span>employees<span class="token keyword">WHERE</span>officeCode <span class="token operator">IN</span><span class="token punctuation">(</span>    <span class="token keyword">SELECT</span>     officeCode    <span class="token keyword">FROM</span>    offices    <span class="token keyword">WHERE</span>    country <span class="token operator">=</span> <span class="token string">'USA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>在这个例子中：</p><ul><li>子查询返回所有位于美国的办公室的 <em>office codes</em>。</li><li>外面的查询 select 在子查询中查询到的办公室工作的员工的 lastName 和firstName。</li></ul><p><img src="https://i.imgur.com/rOIRltd.png" /></p><p>然后就是执行一下几个示例。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>     customerNumber<span class="token punctuation">,</span>     checkNumber<span class="token punctuation">,</span>     amount<span class="token keyword">FROM</span>    payments<span class="token keyword">WHERE</span>    amount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span> <span class="token keyword">FROM</span> payments<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/8HOMZ6L.png" /></p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>     customerNumber<span class="token punctuation">,</span>     checkNumber<span class="token punctuation">,</span>     amount<span class="token keyword">FROM</span>    payments<span class="token keyword">WHERE</span>    amount <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span>             <span class="token function">AVG</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span>        <span class="token keyword">FROM</span>            payments<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>纠正一个错误的认识：我之前看的不认真，以为可以独立的子查询一定是先于外查询执行的，实际上人家并没有这么说，只有当用到<code>IN</code> 操作符时，才会这样。</p><h1 id="derived-tables">Derived Tables</h1><h1 id="exists">EXISTS</h1><h1 id="union">UNION</h1><h1 id="minus">MINUS</h1><h1 id="intersect">INTERSECT</h1><h1 id="insert">INSERT</h1><h1 id="insert-multiple-rows">Insert Multiple Rows</h1><h1 id="insert-into-select">INSERT INTO SELECT</h1><h1 id="insert-on-duplicate-key-update">Insert On Duplicate KeyUpdate</h1><h1 id="insert-ignore">INSERT IGNORE</h1><h1 id="update">UPDATE</h1><h1 id="update-join">UPDATE JOIN</h1><h1 id="delete">DELETE</h1><h1 id="delete-join">DELETE JOIN</h1><h1 id="on-delete-cascade">ON DELETE CASCADE</h1><h1 id="replace">REPLACE</h1>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python Some Tricks</title>
    <link href="/2021/12/01/Python-Some-Tricks/"/>
    <url>/2021/12/01/Python-Some-Tricks/</url>
    
    <content type="html"><![CDATA[<h1 id="list-的复制">list 的复制</h1><p>一般来说，有三种方法：</p><ul><li>直接使用 <code>=</code>赋值，这种方式的复制相当于给一个盒子贴上两个不同的标签，因此，如果操作任何一个标签，都会对另外一个标签进行数据同步。</li><li>使用 <code>copy()</code> 方法，这种方式属于浅复制(shallowcopy)，对于一般的字面值，如数字，不管是修改源 list 还是复制之后的list，都不会影响另一个。但是，如果修改的是列表中的对象(Object)，那么，这个修改也会反映到另一个list 中。</li><li>使用 <code>deepcopy()</code> 方法，这种方式属于深复制(deepcopy)，不管是一般的字面值，还是对象，对一个 list修改都不会影响到另外一个 list。</li></ul><p>按：使用 <code>deepcopy()</code> 需要引入 <code>copy</code> 库。</p><p>一些代码示例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># working of '=' and copy()</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> list1list3 <span class="token operator">=</span> list1<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'list1 == list2?'</span><span class="token punctuation">,</span> list1 <span class="token operator">==</span> list2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'list1 == list3?'</span><span class="token punctuation">,</span> list1 <span class="token operator">==</span> list3<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'before modified, the data of list1~list3 are as follows'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'list1 ='</span><span class="token punctuation">,</span> list1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'list2 ='</span><span class="token punctuation">,</span> list2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'list3 ='</span><span class="token punctuation">,</span> list3<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"then we modify list1, let's see what will happen in list1~list3"</span><span class="token punctuation">)</span>list1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'list1 ='</span><span class="token punctuation">,</span> list1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'list2 ='</span><span class="token punctuation">,</span> list2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'list3 ='</span><span class="token punctuation">,</span> list3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>output:</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">list1 == list2? Truelist1 == list3? Truebefore modified, the data of list1~list3 are as followslist1 = [1, 2, 3, 4]list2 = [1, 2, 3, 4]list3 = [1, 2, 3, 4]then we modify list1, let&#39;s see what will happen in list1~list3list1 = [1, 2, 3, 4, 5]list2 = [1, 2, 3, 4, 5]list3 = [1, 2, 3, 4]</code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># working of list.copy()</span><span class="token comment"># Initializing list</span>lis1 <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">]</span><span class="token comment"># Using copy() to create a shallow copy</span>lis2 <span class="token operator">=</span> lis1<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># Printing new list</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"The new list created is : "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>lis2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Adding new element to new list</span>lis2<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment"># Printing lists after adding new element</span><span class="token comment"># No change in old list</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"The new list after adding new element : "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>lis2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"The old list after adding new element to new list : "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>lis1<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>output:</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">The new list created is : [1, 2, 3, 4]The new list after adding new element : [1, 2, 3, 4, 5]The old list after adding new element to new list : [1, 2, 3, 4]</code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># techniques of deep and shallow copy</span><span class="token keyword">import</span> copy<span class="token comment"># Initializing list</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">]</span><span class="token comment"># all changes are reflected</span>list2 <span class="token operator">=</span> list1<span class="token comment"># shallow copy - changes to</span><span class="token comment"># nested list is reflected,</span><span class="token comment"># same as copy.copy(), slicing</span>list3 <span class="token operator">=</span> list1<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># deep copy - no change is reflected</span>list4 <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>list1<span class="token punctuation">)</span>list1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>list1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">999</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"list 1 after modification:\n"</span><span class="token punctuation">,</span> list1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"list 2 after modification:\n"</span><span class="token punctuation">,</span> list2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"list 3 after modification:\n"</span><span class="token punctuation">,</span> list3<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"list 4 after modification:\n"</span><span class="token punctuation">,</span> list4<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">list 1 after modification: [1, [2, 999], 4, 5]list 2 after modification: [1, [2, 999], 4, 5]list 3 after modification: [1, [2, 999], 4]list 4 after modification: [1, [2, 3], 4]</code></pre></div></figure><p>这里其实还有一种方法，即利用切片进行复制：</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">list2 <span class="token operator">=</span> list1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象系统分析与设计作业二</title>
    <link href="/2021/12/01/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E4%BD%9C%E4%B8%9A%E4%BA%8C/"/>
    <url>/2021/12/01/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E4%BD%9C%E4%B8%9A%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<blockquote><p>1. A simple digital watch has a display and two buttons to set it,the A button and the B button. The watch has two modes of operation,display time and set time. In the display time mode, the watch displayshours and minutes, separated by a flashing colon. The set time mode hastwo sub modes, set hours and set minutes. The A button selects modes.Each time it is pressed, the mode advances in the sequence: display, sethours, set minutes, display, etc. Within the sub modes, the B buttonadvances the hours or minutes once each time it is pressed. Buttons mustbe released before they can generate another event. Prepare a statediagram of the watch.</p></blockquote><p><img src="https://i.imgur.com/1bwMtIO.png" /></p><blockquote><p>2.考察一台闹钟，有如下关于状态和事件的描述，在此基础上，设计此闹钟的状态图。</p></blockquote><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">State: AlamRingingDescription: alarm on watch is ringing to indicate target timeEvent sequence that produces the state:    setAlarm(targetTime);     any sequence not including ClearAlarm;     when(currentTime=targetTime)Condition that characterizes the state:    alarm = on, alarm set to targetTime, targetTime &lt;= currentTime &lt;= targetTime + 20 seconds, and no button has been pushed since targetTimeEvents accepted in the state:Event response next state:    When(currentTime=targetTime+20), resetAlarm, normal;    buttonPushed(any button),resetAlarm, normal.</code></pre></div></figure><p><img src="https://i.imgur.com/piZCNet.png" /></p><p><img src="https://i.imgur.com/ZNkqfzJ.png" /></p><blockquote><p>3.考察你常用的某种中文输入法，分析中文输入的状态有哪些？状态之间是如何切换的？做一个状态图。</p></blockquote><p>我常用的是微软输入法。</p><p>状态有：</p><ul><li>起始模式</li><li>正常模式</li><li>简体模式</li><li>繁体模式</li><li>v 模式</li><li>全角模式</li><li>半角模式</li><li>符号(表情) 输入模式</li></ul><p><img src="https://i.imgur.com/8Xj7QD4.png" /></p><blockquote><p>4. 在探索一处古老城堡的时候, 你和一个朋友发现了一个书柜,你怀疑它是通往秘密通道的入口。在你检查书柜的时候,你的朋友从烛台上拿开一根蜡烛, 发现烛台是入口的控制开关。书柜转了半圈,把你推向前去, 你和朋友因而分开。你的朋友把蜡烛放回。这次书柜转了一整圈,你仍然在书柜后面。<br />你的朋友把蜡烛拿开。书柜又开始要转一圈, 但这次你用身体堵住它,以防它转一整圈。你的朋友递给你蜡烛, 你们俩设法让书柜转回半圈,但这使你的朋友转到书柜后面,而你又在书柜前面。你把蜡烛放回。当书柜开始旋转时, 你拿开蜡烛,书柜在四分之一圈后停止。你和朋友然后就可以继续前往探索。<br />为书柜的控制过程绘制一个状态图,要符合前面的场景。你应该先做些什么才能最不费事地进去?</p></blockquote><p><img src="https://i.imgur.com/hlRpVuU.png" /></p><p>应该先拿起蜡烛，在书架刚开始旋转的时候就把蜡烛放回。</p><blockquote><p>5.图1中有一个类图，描述的是两人打一局乒乓球。乒乓球的规则如下。在游戏开始时，两名选手先试打以选择发球（pingforserve）——也就是说，他们击球越网，来回打几次。赢家先发球。试打的赢家要连续发5次球。然后另一名选手发5次球。接下来，试打的赢家再发5次。这种交替发球一直持续到选手赢得比赛为止。如果对方得零分（shutout,11-0），或者选手达到21分，并且至少有两分领先，那么该选手获胜。如果比分在20-20持平，选手要开始交替单独发球，直到有选手领先2分并获胜。<br />请给出类Player和类 Volley相对应的状态模型。</p></blockquote><p><img src="https://i.imgur.com/ode12uZ.png" /></p><p><img src="https://i.imgur.com/NReoqDD.png" /></p>]]></content>
    
    
    <categories>
      
      <category>作业</category>
      
    </categories>
    
    
    <tags>
      
      <tag>作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PowerShell 使用笔记</title>
    <link href="/2021/11/30/PowerShell-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/11/30/PowerShell-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="小碎点">小碎点</h1><blockquote><p>在 WT 里面使用 PS 的翻页键。</p></blockquote><p><code>Ctrl + Shift + PageUp/PageDown</code>。</p><blockquote><p>复制多个文件到某一文件夹下。</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Copy-Item</span> <span class="token punctuation">.</span>\m1<span class="token punctuation">.</span>txt<span class="token punctuation">,</span> <span class="token punctuation">.</span>\m2<span class="token punctuation">.</span>txt<span class="token punctuation">,</span> <span class="token punctuation">.</span>\m3<span class="token punctuation">.</span>txt <span class="token operator">-</span>Destination <span class="token punctuation">.</span><span class="token punctuation">.</span>\myalgs4\algs4\<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>按：主要是分隔符 <code>,</code> 的使用，以及<code>-Destination</code> 选项的使用。</p><blockquote><p>PowerShell 中无法执行 <code>javac @sources.txt</code> 命令。</p></blockquote><p>替换成：</p><figure><div class="code-wrapper"><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">javac <span class="token string">"@sources.txt"</span> <span class="token operator">-</span>encoding UTF8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>即可。</p><blockquote><p>在 PowerShell 中编译很多个 java 文件。</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">javac <span class="token string">"@sources.txt"</span> <span class="token operator">-</span>encoding UTF8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><blockquote><p>移动多个文件。</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">$ <span class="token function">Move-Item</span> <span class="token operator">-</span>Path <span class="token punctuation">.</span>\main<span class="token punctuation">.</span>c<span class="token punctuation">,</span> <span class="token punctuation">.</span>\main<span class="token punctuation">.</span>exe <span class="token operator">-</span>Destination <span class="token punctuation">.</span>\ex01\<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>按：重要的是这里的分隔符不能像在 Linux 中那样是空格。</p><blockquote><p>统计当前目录下的文件个数。</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">(</span><span class="token function">Get-ChildItem</span> <span class="token punctuation">|</span> <span class="token function">Measure-Object</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Count<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><blockquote><p>快速删除一个单词。</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">Ctrl <span class="token operator">+</span> W<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><blockquote><p>PowerShell 显示当前路径。</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">echo</span> <span class="token variable">$PWD</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>或者</p><figure><div class="code-wrapper"><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Get-Location</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><blockquote><p>PowerShell 进入上一次的目录。</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">cd <span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><blockquote><p>PowerShell 的安装路径。</p></blockquote><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">C:\Program Files\PowerShell</code></pre></div></figure><blockquote><p>查看 PowerShell 的安装路径。</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">echo</span> <span class="token variable">$PSHOME</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><blockquote><p><code>more</code> 命令是啥？</p></blockquote><p>Linux <code>more</code> 命令类似 cat，不过会以一页一页的形式显示，更方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按b 键就会往回（back）一页显示，而且还有搜寻字串的功能（与 vi 相似）。</p><p>参考：<ahref="https://www.runoob.com/linux/linux-comm-more.html">菜鸟教程</a></p><h1 id="如何为-powershell-创建一个-profile">如何为 PowerShell 创建一个profile？</h1><p><ahref="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-7.2">MicrosoftDocs</a></p><p>根据文档，然后创建一个 <code>Profile.ps1</code> 文件，我这里是使用vim 创建的：</p><p><img src="https://i.imgur.com/Y1pAPMG.png" /></p><p><img src="https://i.imgur.com/1jr56G0.png" /></p><p>然后自己想改变 PowerShell的什么特性，就直接往这个文件里面写配置即可。</p><p>小知识：<code>$PSHOME</code> 这个是指 PowerShell 的安装路径，可以使用<code>echo $PSHOME</code>打印这个路径，然后我们进入这个目录创建这个配置文件即可。</p><h1 id="如何使-powershell-的提示路径prompt不要显示那么长">如何使PowerShell 的提示路径(Prompt)不要显示那么长？</h1><p>在 profile 文件中添加如下配置：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">function global:prompt &#123;  $dirSep &#x3D; [IO.Path]::DirectorySeparatorChar  $pathComponents &#x3D; $PWD.Path.Split($dirSep)  $displayPath &#x3D; if ($pathComponents.Count -le 3) &#123;    $PWD.Path  &#125; else &#123;    &#39;…&#123;0&#125;&#123;1&#125;&#39; -f $dirSep, ($pathComponents[-2,-1] -join $dirSep)  &#125;  &quot;PS &#123;0&#125;$(&#39;&gt;&#39; * ($nestedPromptLevel + 1)) &quot; -f $displayPath&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>修改之前：</p><p><img src="https://i.imgur.com/vk11RpS.png" /></p><p>之后：</p><p><img src="https://i.imgur.com/VB3foQc.png" /></p><p>参考：<ahref="https://stackoverflow.com/questions/58574397/how-can-i-change-the-powershell-prompt-to-show-just-the-parent-directory-and-cur">stackoverflow</a></p><h1 id="powershell-无法正常退出-python-的虚拟环境">Powershell无法正常退出 Python 的虚拟环境？</h1><p>参考：<a href="https://github.com/pypa/virtualenv/issues/1756"class="uri">https://github.com/pypa/virtualenv/issues/1756</a></p><p>直接运行：</p><figure><div class="code-wrapper"><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">deactivate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="给-powershell-设置代理">给 Powershell 设置代理</h1><p>在 PowerShell 中执行如下命令，这里是以设置本地代理为例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token variable">$env</span>:HTTP_PROXY=<span class="token string">"http://127.0.0.1:7890"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token variable">$env</span>:HTTPS_PROXY=<span class="token string">"http://127.0.0.1:7890"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>上面的命令只是临时设置代理，如果想要永久设置代理，建议使用如下方法：</p><p>1、在 PowerShell 窗口中运行如下指令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">Test-Path</span> <span class="token operator">-</span>Path <span class="token variable">$PROFILE</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">New-Item</span> <span class="token operator">-</span><span class="token function">Type</span> File <span class="token operator">-</span>Path <span class="token variable">$PROFILE</span> <span class="token operator">-</span>Force <span class="token punctuation">&#125;</span>notepad <span class="token variable">$PROFILE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>2、默认会使用记事本打开一个文件，在文件中加入上面设置代理的命令，保存关闭即可。</p><p>上面的配置文件在 <code>此电脑\文档\WindowsPowerShell</code>下，文件名为：<code>Microsoft.PowerShell_profile.ps1</code>，这个文件的内容会在 PowerShell的每次运行时使用。（注意不要修改文件位置，除非你明白这样操作的目的）</p><p>上述的自定义配置方法，便于设置和修改，故为我所推崇，如果你使用网上的永久设置，我想可能会有各种问题，不如这样设置的直观，当然观点仅供参考。</p><p>以上摘自：<a href="https://www.yixuju.cn/other/talking-about-proxy/"class="uri">https://www.yixuju.cn/other/talking-about-proxy/</a></p><h1 id="设置启动时窗口居中">设置启动时窗口居中</h1><p>实际上是设置 Windows Terminal 窗口启动时居中。</p><p>参考：<ahref="https://docs.microsoft.com/zh-cn/windows/terminal/customize-settings/startup#center-on-launch">文档</a></p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gdb 基本使用</title>
    <link href="/2021/11/30/gdb-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/11/30/gdb-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>本篇博客主要是对《LinuxC》相关章节中的学习笔记以及记录。在学习的过程中，为了减缓遗忘，以及将来需要时可以随时查阅自己的知识库，故整理如下。</p><h1 id="单步执行和跟踪函数调用">单步执行和跟踪函数调用</h1><p>首先写一段有问题的测试代码：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* main.c */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">add_range</span><span class="token punctuation">(</span><span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> sum<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> low<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> high<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>sum <span class="token operator">=</span> sum <span class="token operator">+</span> i<span class="token punctuation">;</span><span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> result<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">add_range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">add_range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"result[0]=%d\nresult[1]=%d\n"</span><span class="token punctuation">,</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>接下来，对于 gdb 的使用，我们主要是以调试这个程序的方式来理解。</p><p><img src="https://i.imgur.com/wFmHgXE.png" /></p><p>结果显然错误。</p><p>然后我们来调试，</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gcc <span class="token parameter variable">-g</span> .<span class="token punctuation">\</span>main.c <span class="token parameter variable">-o</span> main$ gdb .<span class="token punctuation">\</span>main.exeGNU gdb <span class="token punctuation">(</span>GDB<span class="token punctuation">)</span> <span class="token number">8.1</span>Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token number">2018</span> Free Software Foundation, Inc.License GPLv3+: GNU GPL version <span class="token number">3</span> or later <span class="token operator">&lt;</span>http://gnu.org/licenses/gpl.html<span class="token operator">></span>This is <span class="token function">free</span> software: you are <span class="token function">free</span> to change and redistribute it.There is NO WARRANTY, to the extent permitted by law.  Type <span class="token string">"show copying"</span>and <span class="token string">"show warranty"</span> <span class="token keyword">for</span> details.This GDB was configured as <span class="token string">"x86_64-w64-mingw32"</span><span class="token builtin class-name">.</span>Type <span class="token string">"show configuration"</span> <span class="token keyword">for</span> configuration details.For bug reporting instructions, please see:<span class="token operator">&lt;</span>http://www.gnu.org/software/gdb/bugs/<span class="token operator">></span>.Find the GDB manual and other documentation resources online at:<span class="token operator">&lt;</span>http://www.gnu.org/software/gdb/documentation/<span class="token operator">></span>.For help, <span class="token builtin class-name">type</span> <span class="token string">"help"</span><span class="token builtin class-name">.</span>Type <span class="token string">"apropos word"</span> to search <span class="token keyword">for</span> commands related to <span class="token string">"word"</span><span class="token punctuation">..</span>.Reading symbols from .<span class="token punctuation">\</span>main.exe<span class="token punctuation">..</span>.done.<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>-g</code>的作用是在目标文件中加入源代码的信息，比如目标文件的机器指令对应源代码的第几行，但并不是把整个源文件嵌入到目标文件中。所以在调试目标文件时必须保证gdb 也能找到源文件。</p><blockquote><p><code>help</code> 命令。</p></blockquote><p>查看命令的类别。</p><p><img src="https://i.imgur.com/Kv0TwDJ.png" /></p><blockquote><p><code>help files</code>。</p></blockquote><p>查看 files 类别下有那些命令可以用。</p><p><img src="https://i.imgur.com/nMs1Mu3.png" /></p><blockquote><p><code>list 1</code>。</p></blockquote><p>从第一行开始列出源代码。一次只列 10 行。</p><p><code>list</code> 命令可以简写成为 <code>l</code>。</p><p><img src="https://i.imgur.com/7uJuFKn.png" /></p><blockquote><p><code>list</code>。</p></blockquote><p>接上一条，继续从 11 行列出源代码。</p><p><img src="https://i.imgur.com/JB7cyGb.png" /></p><blockquote><p>直接回车。</p></blockquote><p>重复上一条命令。</p><blockquote><p><code>l add_range</code>。</p></blockquote><p><img src="https://i.imgur.com/Lqj9qZo.png" /></p><p>列出一个函数的源代码。</p><p><img src="https://i.imgur.com/4DjnuNH.png" /></p><blockquote><p><code>quit</code>。</p></blockquote><p>退出 gdb 环境。</p><blockquote><p><code>start</code>。</p></blockquote><p>开始执行命令。</p><p><img src="https://i.imgur.com/ZbJEAvY.png" /></p><p>这表示停在 main 函数中变量定义之后的第一条语句处等待我们发命令，gdb列出这条语句表示它还没执行，并且马上要执行。</p><blockquote><p><code>next</code>(简写为 <code>n</code>)。</p></blockquote><p>接上条。一条一条执行语句。</p><p><img src="https://i.imgur.com/m8n1YD2.png" /></p><blockquote><p><code>start</code>。</p></blockquote><p>重新来过。</p><p><img src="https://i.imgur.com/5GLKQNO.png" /></p><blockquote><p><code>step</code>(简写为 <code>s</code>)。</p></blockquote><p>进入函数中去执行。</p><p><img src="https://i.imgur.com/2ohvT0p.png" /></p><blockquote><p><code>backtrace</code>(简写为 <code>bt</code>)。</p></blockquote><p>在函数中查看函数调用的栈帧。</p><p><img src="https://i.imgur.com/OMFwabH.png" /></p><blockquote><p><code>info</code>(简写为 <code>i</code>)。</p></blockquote><p>查看局部变量(locals)的值：</p><p><img src="https://i.imgur.com/URw1VCt.png" /></p><blockquote><p><code>frame</code>(简写为 <code>f</code>)。</p></blockquote><p>选择栈帧。</p><p>示例，查看 main 函数当前局部变量的值，先用 <code>frame</code>命令选择 1 号栈帧然后再查看局部变量：</p><p><img src="https://i.imgur.com/piu3gaU.png" /></p><blockquote><p><code>print</code>(简写为 <code>p</code>)。</p></blockquote><p>打印变量的值。</p><p>示例，打印 sum 的值：</p><p><img src="https://i.imgur.com/0zZm821.png" /></p><p>这里的 <code>$1</code> 表示 gdb 保存着这些中间结果，<code>$</code>后面的编号会自动增长，在命令中可以用 <code>$1、$2、$3</code>等编号代替相应的值。</p><blockquote><p><code>finish</code>。</p></blockquote><p>让程序一直运行到当前函数返回为止。</p><p>按：这里出了一个大问题，我现在的 mingw 中的 gdb 版本是gdb8.1，在这个版本中，执行 <code>finish</code> 命令会直接退出gdb！无奈之下，换了 mingw 的版本，现在继续整理。</p><p><img src="https://i.imgur.com/fdgYOO1.png" /></p><p><img src="https://i.imgur.com/Tzfhoim.png" /></p><p>按：改换了 gdb版本之后，这个程序的第一个结果变得正确了。但是这不是很重要，我们只是需要理解其背后的逻辑。</p><p>接下来，继续调试：</p><p><img src="https://i.imgur.com/jkseAv2.png" /></p><p><img src="https://i.imgur.com/kX34K1l.png" /></p><p>然后发现 sum 有问题。</p><p>之后我们就可以退出 gdb 去修改程序了。</p><blockquote><p><code>set</code>。</p></blockquote><p>但是，我们也可以使用 <code>set</code> 命令去立刻把 sum的值改过来，然后继续执行代码，继续调试，</p><p><img src="https://i.imgur.com/tvbXpo2.png" /></p><p>修改变量的值也可以用 <code>print</code> 命令，我们可以用<code>print</code> 来修改变量的值，或者调用函数：</p><p><img src="https://i.imgur.com/UpEsRGp.png" /></p><p><img src="https://i.imgur.com/gr4Fj6w.png" /></p><p>按：<code>printf</code>的返回值表示实际要打印的字符数，同时，这里要明确将 <code>printf</code>的返回值 cast 成 int 类型。</p><table><thead><tr class="header"><th>命令</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>backtrace(或 bt)</td><td>查看各级函数调用及参数</td></tr><tr class="even"><td>finish</td><td>执行到当前函数返回，然后停下来等待命令</td></tr><tr class="odd"><td>frame(或 f) 帧编号</td><td>选择栈帧</td></tr><tr class="even"><td>info(或 i) locals</td><td>查看当前栈帧局部变量的值</td></tr><tr class="odd"><td>list(或 l)</td><td>列出源代码，接着上次的位置往下列，每次列 10 行</td></tr><tr class="even"><td>list 行号</td><td>列出从第几行开始的源代码</td></tr><tr class="odd"><td>list 函数名</td><td>列出某个函数的源代码</td></tr><tr class="even"><td>next(或 n)</td><td>执行下一行语句</td></tr><tr class="odd"><td>print(或 p)</td><td>打印表达式的值，通过表达式可以修改变量的值或者调用函数</td></tr><tr class="even"><td>set var</td><td>修改变量的值</td></tr><tr class="odd"><td>start</td><td>开始执行程序，停在 main 函数第一行语句前面等待命令</td></tr><tr class="even"><td>step(或 s)</td><td>执行下一行语句，如果有函数调用则进入到函数中</td></tr></tbody></table><h1 id="断点">断点</h1><p>测试代码：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* main.c */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> input<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">)</span>sum <span class="token operator">=</span> sum <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input=%d\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gcc 常用选项整理</title>
    <link href="/2021/11/29/gcc-%E5%B8%B8%E7%94%A8%E9%80%89%E9%A1%B9%E6%95%B4%E7%90%86/"/>
    <url>/2021/11/29/gcc-%E5%B8%B8%E7%94%A8%E9%80%89%E9%A1%B9%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<blockquote><p><code>-c</code></p></blockquote><p>编译生成目标文件(Relocatable)。</p><p>举个例子，</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gcc main.c <span class="token parameter variable">-o</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>等价于</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gcc <span class="token parameter variable">-S</span> main.c$ gcc <span class="token parameter variable">-c</span> main.s$ gcc main.o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>按：<code>-S</code> 选项生成汇编代码，<code>-c</code>选项生成目标文件，最后一步是链接。</p><p><img src="https://i.imgur.com/Ii0BFUnh.png" /></p><blockquote><p><code>-Dmacro[=defn]</code></p></blockquote><p>定义一个宏。</p><p>例如：</p><p><code>-DMACHINE=8086</code>，这个和在 C 语言中使用<code>#define MACHINE 8086</code> 是一样的。</p><blockquote><p><code>-E</code></p></blockquote><p>只做预处理而不编译，<code>cpp</code> 命令也可以达到同样的效果。</p><blockquote><p><code>-g</code></p></blockquote><p>在生成的目标文件中添加调试信息，所谓调试信息就是源代码和指令之间的对应关系，在gdb 调试和 objdump 反汇编时要用到这些信息。</p><p>按：在编译时要加上 <code>-g</code> 选项，生成的目标文件才能用 gdb进行调试。</p><blockquote><p><code>-Idir</code></p></blockquote><p>dir 是头文件所在的目录。</p><p>例如，一个目录：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ tree<span class="token builtin class-name">.</span><span class="token operator">|</span>-- main.c<span class="token variable"><span class="token variable">`</span>-- stack     <span class="token operator">|</span>-- stack.c     <span class="token variable">`</span></span>-- stack.h    <span class="token number">1</span> directory, <span class="token number">3</span> files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我们需要使用 <code>gcc -c main.c -Istack</code> 编译。用<code>-I</code> 选项告诉 gcc 头文件要到子目录 stack 里找。</p><p>按：在 <code>#include</code>预处理指示中可以使用相对路径，如果我们在代码中使用<code>#include "stack/stack.h"</code>，那么编译时就不需要加<code>-Istack</code> 选项了。</p><blockquote><p><code>-Ldir</code></p></blockquote><p>dir 是库文件所在的目录。</p><p>例如：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gcc main.c -L. <span class="token parameter variable">-lstack</span> <span class="token parameter variable">-Istack</span> <span class="token parameter variable">-o</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><code>-L.</code> 表示在当前目录找。<code>-lstack</code>告诉编译器要链接 libstack 库。</p><blockquote><p><code>-M</code> 和 <code>-MM</code></p></blockquote><p>输出 <code>".o文件:.c文件 .h文件"</code> 这种形式的 Makefile规则，<code>-MM</code> 的输出不包括系统头文件。</p><p>按：暂时不去深究。</p><blockquote><p><code>-o outfile</code></p></blockquote><p>outfile 是输出文件的文件名。</p><blockquote><p><code>-O?</code></p></blockquote><p>各种编译优化的选项。</p><blockquote><p><code>-print-search-dirs</code></p></blockquote><p>打印库文件的默认搜索路径。</p><blockquote><p><code>-S</code></p></blockquote><p>编译生成汇编代码。</p><blockquote><p><code>-v</code></p></blockquote><p>打印详细的编译链接过程。</p><blockquote><p><code>-Wall</code></p></blockquote><p>打印所有的警告信息。</p><blockquote><p><code>-Wl,optinos</code></p></blockquote><p>按：小写字母 <code>l</code>。</p><p>options 是传递给链接器的选项。</p><p>举例：</p><p><img src="https://i.imgur.com/H722W4uh.png" /></p><hr /><p>参考：</p><p>1、《Linux C》(宋劲杉)</p>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim 的搜索和替换</title>
    <link href="/2021/11/28/vim-%E7%9A%84%E6%90%9C%E7%B4%A2%E5%92%8C%E6%9B%BF%E6%8D%A2/"/>
    <url>/2021/11/28/vim-%E7%9A%84%E6%90%9C%E7%B4%A2%E5%92%8C%E6%9B%BF%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<p>原文地址：<a href="https://linuxize.com/post/vim-find-replace/"class="uri">https://linuxize.com/post/vim-find-replace/</a></p><p>这篇文章描述了如何在 Vim/Vi 中查找和替换文本。</p><p>Vim 是最流行的命令行文本编辑器，它在 macOS 和很多 Linux发行版系统中是预装的软件。在 Vim中查找和替换文本是比较快速而且容易的。</p><h1 id="基本的查找和替换">基本的查找和替换</h1><p>在 Vim 中，你可以使用 <code>:substitute</code>命令进行查找和替换。</p><p>为了在 Vim 中执行这个指令，你必须使 Vim 处于 normal 模式——即启动 Vim编辑器时的默认模式。你可以按 'Esc' 键来从其他任何模式返回到 normal模式。</p><p>替换命令的通用格式如下：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">:[range]s/&#123;pattern&#125;/&#123;string&#125;/[flags] [count]</code></pre></div></figure><p>这个命令在 <code>[range]</code> 中的每一行中查找一个<code>&#123;pattern&#125;</code>，然后使用一个 <code>&#123;string&#125;</code>来替换它。<code>[count]</code> 是一个乘以此命令的正整数。</p><p>如果没有提供 <code>[range]</code> 和<code>[count]</code>，那么，只有在当前行中查找到第一个的 pattern会被替换掉。当前行是指光标所在的那一行。</p><p>举个例子，来搜索当前行中第一次出现的字符串 <code>'foo'</code> 然后用<code>'bar'</code> 来替换它，你可以使用</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">:s/foo/bar/</code></pre></div></figure><p>如果想替换调当前行中所有的被匹配的 pattern，你需要加上一个<code>g</code> 标志：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">:s/foo/bar/g</code></pre></div></figure><p>如果你想在整个文件中搜索和替换 pattern，那么可以使用百分号的符号<code>%</code> 来作为range。这个符号表示的范围是从第一行到最后一行：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">:%s/foo/bar/g</code></pre></div></figure><p>如果省略 <code>&#123;string&#125;</code> 部分，那么，此部分将会被认为是一个空字符串，然后，被匹配的 pattern就会被删除掉。下面的命令删除了当前行中所有的 <code>'foo'</code>字符串：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">:s/foo/g</code></pre></div></figure><p><code>/</code>在除了作为分隔符之外，你还可以使用其他任何非字母和数字的单字节符号来代替斜线符号<code>/</code>。这个选项在我们的需要搜索的 pattern中或者替换字符串中含有 <code>/</code> 符号的时候是很有用的。</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">:s|foo|bar|</code></pre></div></figure><p>按：实测，使用 <code>|</code>作为分隔符可以替换，但是替换完之后会报错，但是，像 <code>?</code>之类的符号作为分隔符就完全没有问题。</p><p>如果要手动确认每一个替换，使用 <code>c</code> 标志：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">:s/foo/bar/gc</code></pre></div></figure><p>output:</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">replace with bar (y/n/a/q/l/^E/^Y)?</code></pre></div></figure><p>按 <code>y</code> 来替换匹配到的结果，或者按 <code>l</code>来替换匹配到的结果并退出。</p><p>按 <code>n</code> 来跳过当前的匹配结果，然后按 <code>q</code> 或<code>Esc</code> 来退出替换模式。</p><p><code>a</code>选项是替换当前的匹配到的结果并且替换掉所有剩下的匹配的结果。向下滚动屏幕，使用<code>CTRL + Y</code>，向上滚动，使用 <code>CTRL + E</code>。</p><p>你也可以使用正则表达式来作为一个搜索 pattern。下面的命令会用<code>'Vim is the best'</code> 替换掉所有以 <code>'foo'</code>开头的行。</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">:%s/^foo.*/Vim is the best/gc</code></pre></div></figure><p><code>^</code> 符号匹配一行的开头，<code>.*</code>匹配任何数字或者字符串。</p><h1 id="大小写敏感">大小写敏感</h1><p>默认情况下，搜索操作时大小写敏感的；搜索 <code>"FOO"</code>将不会匹配 <code>"Foo"</code>。</p><p>为了让搜索 pattern 忽略大小写，可以使用 <code>i</code> 标志：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">:s/Foo/bar/gi</code></pre></div></figure><p>另外一个强制忽略大小写的方法是在搜索 pattern 后面添加<code>\c</code>。举个例子，<code>/Linux\c</code>就是一个忽略大小写的搜索。</p><p>如果你改变了默认的大小写敏感设置(比如在 Vim的配置文件中)，然后你想在搜索中使用大小写敏感的方式，可以使用<code>I</code> 标志：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">:s/foo/bar/gI</code></pre></div></figure><p>类似的，在 pattern 后面加上 <code>\C</code>也可以强制大小写敏感。</p><h1 id="搜索范围">搜索范围</h1><p>当在命令中没有给出 <code>range</code>时，那么，替换命令只会操作当前行。</p><p>这个 <code>range</code> 既可以是一行也可以是两行之间。具体的 line值使用 <code>,</code> 或者 <code>;</code> 来分隔。这个<code>range</code> 可以使用绝对的行号或者一些特殊的符号来具体化。</p><p>举个例子，来替换第 3 行到第 10 行之间的所有的 <code>'foo'</code> 为<code>'bar'</code>，可以使用：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">:3,10s/foo/bar/g</code></pre></div></figure><p>这个范围是闭区间，也就是说，第一行和最后一行也被包括在<code>range</code> 中。</p><p>点 <code>.</code> 符号表示当前行，美元符号 <code>$</code>表示最后一行。来替换从当前行到最后一行的 <code>'foo'</code> 为<code>'bar'</code>，可以使用：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">:.,$/foo/bar/g</code></pre></div></figure><p>按：原文中没有加 <code>g</code>。</p><p>我们也可以使用 <code>+</code> 或者 <code>-</code>符号来设置具体的行，它的后面跟着具体的数字，这个数字将被当前行数字给加上或者减去。如果<code>+</code> 或 <code>-</code>后面的数字被省略，那么，该数字将默认被设置成 1。</p><p>举例，从当前行到接下来的四行(一共是 5 行)中替换每一个<code>'each'</code> 为 <code>'bar'</code>，可以使用：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">:.,+4s/foo/bar/g</code></pre></div></figure><p><img src="https://i.imgur.com/BCukecO.png" /></p><h1 id="替换整个单词">替换整个单词</h1><p>substitute 命令是以字符串的形式来寻找 pattern的，而不是一整个单词。如果，举例来说，你想要搜索<code>"gnu"</code>，那么将会搜索到在更长的单词中所包含的<code>"gnu"</code>，比如 <code>"cygnus"</code> 或<code>"magnum"</code>。</p><p>想要搜索一整个单词，键入 <code>\&lt;</code>来标记一个单词的开始，然后输入搜索的 pattern，然后键入<code>\&gt;</code> 来标记单词的结尾。</p><p>举例来说，要搜索单词 <code>"foo"</code>，你可以使用<code>\&lt;foo\&gt;</code>：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">:s/\&lt;foo\&gt;/bar/</code></pre></div></figure><h1 id="替换历史">替换历史</h1><p>Vim会跟踪你在当前会话中运行的所有命令。要浏览先前替代命令的历史记录，请输入<code>:s</code>并使用向上/向下箭头键查找先前的替换操作。要运行该命令，只需按Enter。您也可以在执行操作之前编辑命令。</p><h1 id="例子">例子</h1><p>替换从 20 行开始的 3 行(20, 21, 22)中的每一行中的第一个<code>'foo'</code> 为 <code>'bar'</code>：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">:20,20s/foo/bar/ 3</code></pre></div></figure><p><img src="https://i.imgur.com/IBNV9Xv.png" /></p><p><img src="https://i.imgur.com/CRnFNW2.png" /></p><p>替换文件中每一行的第一个 <code>'foo'</code> 为<code>'bar'</code>：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">:%s/foo/bar/</code></pre></div></figure><p><img src="https://i.imgur.com/G5XVEj6.png" /></p><p><img src="https://i.imgur.com/WpqW0a7.png" /></p><p><img src="https://i.imgur.com/72oT5S4.png" /></p><p>注释 5 到 20 行：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">:5,20s/^/#/</code></pre></div></figure><p><img src="https://i.imgur.com/LUzXdNd.png" /></p><p>取消 5 到 20 行的注释，恢复先前的更改：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">:5,20s/^#//</code></pre></div></figure><p><img src="https://i.imgur.com/SBsnoXP.png" /></p><p>将 <code>'apple'</code>，<code>'orange'</code>，和<code>'mango'</code> 替换成 <code>'fruit'</code>：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">:%s/apple\|orange\|mango/fruit/g</code></pre></div></figure><p>删除每行末尾的尾随空格：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">:%s/\s\+$//e</code></pre></div></figure><p>按：</p><p>这里似乎不应该用 <code>e</code>，虽然用了也没什么影响。而<code>e</code> 似乎只有在使用 <code>/</code> 搜索字符串时才有用。</p><p>关于 <code>e</code> 标志，有如下解释：</p><blockquote><p>Where you land</p><p>Searches in Vim put the cursor on the first character of the matchedstring by default; if you search for Debian, it would put the cursor onthe D. That’s usually fine, but Vim has a few options for offsetting thecursor placement from the beginning of the matched string.</p><p>To land on the last character in the matched string, rather than thebeginning, add an /e to your search:</p><p>/Debian/e</p><p>That will place the cursor on the n rather than the D. Vim alsoallows you to specify a cursor offset by line, or from the beginning orend of the string. To have the cursor land two lines above a matchedstring, for example, use /string/-2. To place the cursor two lines belowthe string, use /string/+2.</p><p>To offset from the beginning of the string, add a /b or /s with theoffset that you want. For example, to move three characters from thebeginning of the search, you’d use /string/s+3 or /string/b+3 — “s” for“start” or “b” for “begin.” To count from the end of the string, use /einstead, so /string/e-3 will place the cursor on the third characterfrom the last character of the matched string.</p></blockquote><p>来源：<ahref="https://www.linux.com/training-tutorials/vim-tips-basics-search-and-replace/"class="uri">https://www.linux.com/training-tutorials/vim-tips-basics-search-and-replace/</a></p><p><img src="https://i.imgur.com/zjNLndE.png" /></p><p><img src="https://i.imgur.com/dSt9pml.png" /></p><p>给 38 到 42 行加注释：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">:38,42s/p/# /</code></pre></div></figure><p><img src="https://i.imgur.com/zWlMri6.png" /></p><h1 id="总结">总结</h1><p>搜索和替换是 Vim的一个很强大的功能，它可以使你快速对你的文本做出改变。</p>]]></content>
    
    
    <categories>
      
      <category>vim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>翻译</tag>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 15 - 20 记录</title>
    <link href="/2021/11/28/LeetCode-15-20-%E8%AE%B0%E5%BD%95/"/>
    <url>/2021/11/28/LeetCode-15-20-%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="section">15</h1><p><img src="https://i.imgur.com/xPZlly6l.png" /></p><p><a href="https://leetcode.com/problems/3sum/"class="uri">https://leetcode.com/problems/3sum/</a></p><p>求所有满足三数之和为 0 的子数组。</p><p>这道题主要是利用双指针来做。</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">threeSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        leng <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> <span class="token boolean">None</span> <span class="token keyword">or</span> leng <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> res        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># sort the nums list</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>leng<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">if</span> i <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment"># remove the dumplicated</span>                <span class="token keyword">continue</span>            <span class="token comment"># double pointers</span>            L <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>            R <span class="token operator">=</span> leng <span class="token operator">-</span> <span class="token number">1</span>            <span class="token keyword">while</span> L <span class="token operator">&lt;</span> R<span class="token punctuation">:</span>                <span class="token builtin">sum</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>L<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>R<span class="token punctuation">]</span>                <span class="token keyword">if</span> <span class="token builtin">sum</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>L<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">while</span> L <span class="token operator">&lt;</span> R <span class="token keyword">and</span> nums<span class="token punctuation">[</span>L<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>L <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                        L <span class="token operator">=</span> L <span class="token operator">+</span> <span class="token number">1</span>                    <span class="token keyword">while</span> L <span class="token operator">&lt;</span> R <span class="token keyword">and</span> nums<span class="token punctuation">[</span>R<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>R <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                        R <span class="token operator">=</span> R <span class="token operator">-</span> <span class="token number">1</span>                    L <span class="token operator">=</span> L <span class="token operator">+</span> <span class="token number">1</span>                    R <span class="token operator">=</span> R <span class="token operator">-</span> <span class="token number">1</span>                <span class="token keyword">elif</span> <span class="token builtin">sum</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                    L <span class="token operator">=</span> L <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    R <span class="token operator">=</span> R <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">return</span> res<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    solu <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token builtin">input</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>    output <span class="token operator">=</span> solu<span class="token punctuation">.</span>threeSum<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="section-1">16</h1><p><a href="https://leetcode.com/problems/3sum-closest/"class="uri">https://leetcode.com/problems/3sum-closest/</a></p><p><img src="https://i.imgur.com/tIwDDS0l.png" /></p><p>求三数之和最接近给定的 <code>target</code>的情况。返回找到的三个数之和。</p><p>依然是双指针。</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">threeSumClosest</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            start <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>            end <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>            <span class="token keyword">while</span> start <span class="token operator">&lt;</span> end<span class="token punctuation">:</span>                <span class="token builtin">sum</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span>                <span class="token keyword">if</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>target <span class="token operator">-</span> <span class="token builtin">sum</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>target <span class="token operator">-</span> res<span class="token punctuation">)</span><span class="token punctuation">:</span>                    res <span class="token operator">=</span> <span class="token builtin">sum</span>                <span class="token keyword">if</span> <span class="token builtin">sum</span> <span class="token operator">></span> target<span class="token punctuation">:</span>                    end <span class="token operator">=</span> end <span class="token operator">-</span> <span class="token number">1</span>                <span class="token keyword">elif</span> <span class="token builtin">sum</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>                    start <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> res        <span class="token keyword">return</span> res<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    solu <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token builtin">input</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>    target <span class="token operator">=</span> <span class="token number">1</span>    output <span class="token operator">=</span> solu<span class="token punctuation">.</span>threeSumClosest<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="section-2">17</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">letterCombinations</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> digits<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>digits<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> digits <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">return</span>  res        mydict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'2'</span><span class="token punctuation">:</span><span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">:</span><span class="token string">'def'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">:</span><span class="token string">'ghi'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">:</span><span class="token string">'jkl'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">:</span><span class="token string">'mno'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">:</span><span class="token string">'pqrs'</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">:</span><span class="token string">'tuv'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">:</span><span class="token string">'wxyz'</span><span class="token punctuation">&#125;</span>        <span class="token comment"># print(len(digits))</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment"># print(res)</span>        res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>s <span class="token keyword">for</span> s <span class="token keyword">in</span> mydict<span class="token punctuation">[</span>digits<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> mystr <span class="token keyword">in</span> res<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> s <span class="token keyword">in</span> mydict<span class="token punctuation">[</span>digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>mystr <span class="token operator">+</span> s<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>digits<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    solu <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token builtin">input</span> <span class="token operator">=</span> <span class="token string">"23"</span>     <span class="token builtin">input</span> <span class="token operator">=</span> <span class="token string">""</span>    <span class="token builtin">input</span> <span class="token operator">=</span> <span class="token string">"2"</span>    output <span class="token operator">=</span> solu<span class="token punctuation">.</span>letterCombinations<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>直观的想法是把这个电话号码的组合想象成一棵树，根节点是一个空字符串，然后根据输入的数字，一层一层地向下面生长。但是，这个和那种简单地暴力循环一样，是不容易实现的。注意到，这里的最终的结果字符串是有顺序的，所以，我们可以把上一次的结果暂存起来，然后把接下来一次的所有情况给遍历一下，生成新的一次的情况，直至最后得到想要的结果。上面的代码是把所有的中间结果都存储了起来。但是，实际上，我们只需要size 为 2 的数组。因此，下面的代码进行了优化：</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">letterCombinations</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> digits<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>digits<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> digits <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">return</span>  res        mydict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'2'</span><span class="token punctuation">:</span><span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">:</span><span class="token string">'def'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">:</span><span class="token string">'ghi'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">:</span><span class="token string">'jkl'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">:</span><span class="token string">'mno'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">:</span><span class="token string">'pqrs'</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">:</span><span class="token string">'tuv'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">:</span><span class="token string">'wxyz'</span><span class="token punctuation">&#125;</span>        <span class="token comment"># print(len(digits))</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment"># print(res)</span>        res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>s <span class="token keyword">for</span> s <span class="token keyword">in</span> mydict<span class="token punctuation">[</span>digits<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> mystr <span class="token keyword">in</span> res<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> s <span class="token keyword">in</span> mydict<span class="token punctuation">[</span>digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>mystr <span class="token operator">+</span> s<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>digits<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    solu <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token builtin">input</span> <span class="token operator">=</span> <span class="token string">"23"</span>     <span class="token builtin">input</span> <span class="token operator">=</span> <span class="token string">""</span>    <span class="token builtin">input</span> <span class="token operator">=</span> <span class="token string">"2"</span>    output <span class="token operator">=</span> solu<span class="token punctuation">.</span>letterCombinations<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/UNzV7f8.png" /></p><h1 id="section-3">18</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">fourSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># print(nums)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            num1 <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token comment"># print('num1:', num1)</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                num2 <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                left <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span>                right <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>                <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>                    num3 <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span>                    num4 <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span>                    <span class="token builtin">sum</span> <span class="token operator">=</span> num1 <span class="token operator">+</span> num2 <span class="token operator">+</span> num3 <span class="token operator">+</span> num4                    <span class="token comment"># print('sum:', sum)</span>                    <span class="token keyword">if</span> <span class="token builtin">sum</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                        res<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3<span class="token punctuation">,</span> num4<span class="token punctuation">)</span><span class="token punctuation">)</span>                        left <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span>                    <span class="token keyword">elif</span> <span class="token builtin">sum</span> <span class="token operator">></span> target<span class="token punctuation">:</span>                        right <span class="token operator">=</span> right <span class="token operator">-</span> <span class="token number">1</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        left <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">list</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> res<span class="token punctuation">]</span>        <span class="token keyword">return</span> res<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    solu <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token builtin">input</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>    <span class="token builtin">input</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>    target <span class="token operator">=</span> <span class="token number">0</span>    target <span class="token operator">=</span> <span class="token number">8</span>    output <span class="token operator">=</span> solu<span class="token punctuation">.</span>fourSum<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>一言以蔽之，双指针。</p><p>注意一点，最后要去重。所以我一开始使用了 set，最后再转化成list。可是，这样似乎有效率问题，而且，本题应该有更好的方法。抽时间研究。</p><p><img src="https://i.imgur.com/mcmn1gs.png" /></p><h1 id="section-4">19</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># use fast and slow pointer</span><span class="token comment"># this method can't be forgot any more!!</span><span class="token keyword">from</span> typing <span class="token keyword">import</span> Optional<span class="token punctuation">,</span> List<span class="token comment"># Definition for singly-linked list.</span><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token builtin">next</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>        slow <span class="token operator">=</span> head        fast <span class="token operator">=</span> head        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">if</span> fast <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">while</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span>        slow<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">return</span> head<span class="token keyword">def</span> <span class="token function">generate_linked_list</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span>List<span class="token punctuation">)</span><span class="token punctuation">:</span>    nodelist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> d <span class="token keyword">in</span> data<span class="token punctuation">:</span>        nodelist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ListNode<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nodelist<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        nodelist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> nodelist<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> nodelist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">print_linked_list</span><span class="token punctuation">(</span>head<span class="token punctuation">:</span>ListNode<span class="token punctuation">)</span><span class="token punctuation">:</span>    cursor <span class="token operator">=</span> head    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Linked List: '</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> cursor <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span>val<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>        cursor <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token builtin">next</span>    <span class="token comment"># print('head: ', head.val)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    headlist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>    head <span class="token operator">=</span> generate_linked_list<span class="token punctuation">(</span>headlist<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'before removed:'</span><span class="token punctuation">)</span>    print_linked_list<span class="token punctuation">(</span>head<span class="token punctuation">)</span>    <span class="token comment"># print_linked_list(head)</span>    solu <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    n <span class="token operator">=</span> <span class="token number">2</span>    res <span class="token operator">=</span> solu<span class="token punctuation">.</span>removeNthFromEnd<span class="token punctuation">(</span>head<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'after removed:'</span><span class="token punctuation">)</span>    print_linked_list<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>经典快慢指针。</p><p><img src="https://i.imgur.com/cIPB0t8.png" /></p><h1 id="section-5">20</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isValid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        strstack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        strstack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> ch <span class="token keyword">in</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>strstack<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                strstack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>                <span class="token keyword">continue</span>            ch_lists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'&#123;'</span><span class="token punctuation">,</span> <span class="token string">'['</span><span class="token punctuation">,</span> <span class="token string">'('</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> strstack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'&#123;'</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> ch <span class="token operator">==</span> <span class="token string">'&#125;'</span><span class="token punctuation">:</span>                    strstack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span>                <span class="token keyword">elif</span> ch <span class="token keyword">in</span> ch_lists<span class="token punctuation">:</span>                    strstack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>                    <span class="token keyword">continue</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">if</span> strstack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'['</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> ch <span class="token operator">==</span> <span class="token string">']'</span><span class="token punctuation">:</span>                    strstack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span>                <span class="token keyword">elif</span> ch <span class="token keyword">in</span> ch_lists<span class="token punctuation">:</span>                    strstack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>                    <span class="token keyword">continue</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">if</span> strstack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> ch <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">:</span>                    strstack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span>                <span class="token keyword">elif</span> ch <span class="token keyword">in</span> ch_lists<span class="token punctuation">:</span>                    strstack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>                    <span class="token keyword">continue</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>strstack<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    solu <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    Input <span class="token operator">=</span> <span class="token string">"()"</span>    Input <span class="token operator">=</span> <span class="token string">"()[]&#123;&#125;"</span>    Input <span class="token operator">=</span> <span class="token string">"(]"</span>    Input <span class="token operator">=</span> <span class="token string">"([)]"</span>    <span class="token comment"># Input = "&#123;[]&#125;"</span>    <span class="token comment"># Input = "([])"</span>    Output <span class="token operator">=</span> solu<span class="token punctuation">.</span>isValid<span class="token punctuation">(</span>Input<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Output<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>经典堆栈问题。</p><p><img src="https://i.imgur.com/fbfdIkJ.png" /></p>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>Python</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 库函数学习记录</title>
    <link href="/2021/11/28/Python-%E5%BA%93%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/2021/11/28/Python-%E5%BA%93%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>当前正在写 leetcode 的题目，所以可能会经常用到 Python的库函数，因此，在这里作一个记录，好记性不如烂键盘。</p><h1 id="sort-函数">sort 函数</h1><p>A simple ascending sort is very easy: just call the sorted()function. It returns a new sorted list:</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">>></span><span class="token operator">></span> sorted<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span>, <span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">1</span>, <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">4</span>, <span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>You can also use the list.sort() method. It modifies the listin-place (and returns None to avoid confusion). Usually it’s lessconvenient than sorted() - but if you don’t need the original list, it’sslightly more efficient.</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span>, <span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">1</span>, <span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a.sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">4</span>, <span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Another difference is that the list.sort() method is only defined forlists. In contrast, the sorted() function accepts any iterable.</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">>></span><span class="token operator">></span> sorted<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">1</span>: <span class="token string">'D'</span>, <span class="token number">2</span>: <span class="token string">'B'</span>, <span class="token number">3</span>: <span class="token string">'B'</span>, <span class="token number">4</span>: <span class="token string">'E'</span>, <span class="token number">5</span>: <span class="token string">'A'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">4</span>, <span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h1 id="abs-函数">abs 函数</h1><blockquote><p><code>abs(x)</code></p></blockquote><p>Return the absolute value of a number. The argument may be aninteger, a floating point number, or an object implementing<strong>abs</strong>(). If the argument is a complex number, itsmagnitude is returned.</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>傅里叶级数推导过程中的一个问题</title>
    <link href="/2021/11/28/%E5%82%85%E9%87%8C%E5%8F%B6%E7%BA%A7%E6%95%B0%E6%8E%A8%E5%AF%BC%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E4%B8%80%E4%B8%AA%E9%97%AE%E9%A2%98/"/>
    <url>/2021/11/28/%E5%82%85%E9%87%8C%E5%8F%B6%E7%BA%A7%E6%95%B0%E6%8E%A8%E5%AF%BC%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E4%B8%80%E4%B8%AA%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>在看傅里叶级数推导的过程中，有一个地方一开始没有看明白，之后通过查找资料以及再次思考，终于把其中的关节给弄懂，在这里记录一下，防止以后再次遇到的时候会遗忘掉。</p><p><img src="https://i.imgur.com/9T0hXUQ.png" /></p><p><img src="https://i.imgur.com/sm91Ys2.png" /></p><p>首先，<span class="math inline">\(a_0\)</span>很容易得到，直接对第一个式子两边同时积分即可。因为 <spanclass="math inline">\(\text{sin}\,nx\)</span> 和 <spanclass="math inline">\(\text{cos}\,nx\)</span> 在 <spanclass="math inline">\([-\pi, \pi]\)</span> 上的积分都为 0。</p><p>然后，两边同时乘以 <spanclass="math inline">\(\text{cos}\,mx\)</span>，最后得到结果</p><p><span class="math display">\[a_n = \frac{1}{\pi} \int_{-\pi}^{\pi} f(x) \text{cos} \, nxdx\]</span></p><p>我的<strong>问题</strong>就出在了这里，明明说自身乘积的积分是 <spanclass="math inline">\(\pi\)</span>，但是这里明显把 <spanclass="math inline">\(a_n \text{cos} \, nx \cdot \text{cos} \,nx\)</span></p><p>然后，问题的<strong>解释</strong>是：</p><p>应该理解成 <span class="math inline">\(m\)</span> 而不是单单的 <spanclass="math inline">\(n\)</span>，即，应该是</p><p><span class="math display">\[a_m = \frac{1}{\pi} \int_{-\pi}^{\pi} f(x) \text{cos} \, mxdx\]</span></p><p>左边的相加的项中，只要不是 <span class="math inline">\(n\)</span>的，也都要被归 <span class="math inline">\(0\)</span> 的。</p><p>我们选定一个 <span class="math inline">\(m\)</span>，<spanclass="math inline">\(m\)</span> 是 <spanclass="math inline">\(1\)</span> 到 <spanclass="math inline">\(\infty\)</span> 中的任意一个值，然后，用 <spanclass="math inline">\(\text{cos} \, mx\)</span>同时去乘等号两边的式子，那么，<span class="math inline">\(\displaystyle\frac{a_0}{2} \cdot \text{cos} \, mx\)</span> 积分之后是 <spanclass="math inline">\(0\)</span>，<spanclass="math inline">\(\displaystyle \sum_{n = 1}^{\infty} a_n \,\text{cos} \, nx \cdot \text{cos} \, mx\)</span> 的所有项中，除了 <spanclass="math inline">\(\text{cos} \, mx\)</span>这一项外，其他的项在积分之后全部都变成了 <spanclass="math inline">\(0\)</span>，对于 <spanclass="math inline">\(\displaystyle \sum_{n = 1}^{\infty} b_n \,\text{sin} \, nx \cdot \text{cos} \, mx\)</span>，积分以后显然全部变成<span class="math inline">\(0\)</span>。</p><p>这里用到了一个关系，</p><p><img src="https://i.imgur.com/kB7IgZYm.png" /></p><p>这个证明暂时从略。</p><p>然后，<span class="math inline">\(a_n\)</span>自然就可以求出来了，发现，和 PPT 中给的是相符的。</p><p>对于 <span class="math inline">\(b_n\)</span> 的求解，同理。</p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
      <tag>问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数的连续与间断</title>
    <link href="/2021/11/28/%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%9E%E7%BB%AD%E4%B8%8E%E9%97%B4%E6%96%AD/"/>
    <url>/2021/11/28/%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%9E%E7%BB%AD%E4%B8%8E%E9%97%B4%E6%96%AD/</url>
    
    <content type="html"><![CDATA[<h1 id="定义-1">定义 1</h1><p>设 <span class="math inline">\(f(x)\)</span> 在点 <spanclass="math inline">\(x_0\)</span> 的某邻域内有定义. 若</p><p><span class="math display">\[\lim_{x \to x_0}f(x) = f(x_0) \qquad \qquad (1)\]</span></p><p>则说 <span class="math inline">\(f(x)\)</span> 在点 <spanclass="math inline">\(x_0\)</span> <strong>连续</strong>, 并称 <spanclass="math inline">\(x_0\)</span> 为 <spanclass="math inline">\(f(x)\)</span> 的一个<strong>连续点</strong>. 若<span class="math inline">\(f(x)\)</span> 在某个 <spanclass="math inline">\(\mathop{N}\limits^{\circ}(x_0)\)</span> 上有定义,则当 <span class="math inline">\(x_0\)</span> 不是 <spanclass="math inline">\(f(x)\)</span> 的连续点时,称 <spanclass="math inline">\(x_0\)</span> 为 <spanclass="math inline">\(f(x)\)</span> 的<strong>间断点</strong>, 或说<span class="math inline">\(f(x)\)</span> 在 <spanclass="math inline">\(x_0\)</span> 间断. 若 <spanclass="math inline">\(f(x)\)</span> 在区间 <spanclass="math inline">\((a, b)\)</span> 内每点连续, 则说 <spanclass="math inline">\(f(x)\)</span> 在 <span class="math inline">\((a,b)\)</span> 内连续.</p><p>按:</p><p><span class="math display">\[\mathop{N}\limits^{\circ}(a, r) = (a - r, a) \cup (a, a + r): 点 a的半径为 r 的空心邻域.\]</span></p><p>再按：<span class="math inline">\(N\)</span> 是 Near 的意思？</p><p>若令 <span class="math inline">\(\Delta x = x - x_0\)</span>, <spanclass="math inline">\(\Delta y = f(x) - f(x_0)\)</span>, 则式 (1)等价于</p><p><span class="math display">\[\Delta y \rightarrow 0(\Delta x \rightarrow 0).\]</span></p><p>将式 (1) 与极限定义(<spanclass="math inline">\(\S2.2(5)\)</span>)结合起来, 得到"<spanclass="math inline">\(f(x)\)</span> 在 <spanclass="math inline">\(x_0\)</span> 连续"的"<spanclass="math inline">\(\varepsilon \text{-} \delta\)</span>刻画"如下:</p><p><span class="math display">\[\forall \varepsilon &gt; 0, \exists \delta &gt; 0, \forall x \in N(x_0,\delta): |f(x) - f(x_0)| &lt; \varepsilon.\]</span></p><p>按:</p><p>1. 对于 <span class="math inline">\(\S 2.2(5)\)</span>:</p><p>设 <span class="math inline">\(l\)</span> 是一常数. 设 <spanclass="math inline">\(f(x)\)</span> 在 <spanclass="math inline">\(a\)</span> 的某个去心邻域上有定义. 若</p><p><span class="math display">\[\forall \varepsilon &gt; 0, \exists \delta &gt; 0, \forall x \in N(a,\delta): |f(x) - l| &lt; \varepsilon,\]</span></p><p>则说当 <span class="math inline">\(x\)</span> 趋于 <spanclass="math inline">\(a\)</span> 时 <spanclass="math inline">\(f(x)\)</span> 收敛于(或趋于) <spanclass="math inline">\(l\)</span>, 称 <spanclass="math inline">\(l\)</span> 为当 <span class="math inline">\(x\rightarrow a\)</span> 时 <span class="math inline">\(f(x)\)</span>的<strong>极限</strong>, 记作</p><p><span class="math display">\[\lim_{x \rightarrow a} f(x) = l \quad \text{or} \quad f(x) \rightarrowl(x \rightarrow a).\]</span></p><p>2. 对于 <span class="math inline">\(N(a, r)\)</span> 的含义:</p><p><span class="math display">\[N(a, r) = (a - r, a + r): 点 a 的半径为 r 的邻域.\]</span></p><p>一些例子:</p><p><img src="https://i.imgur.com/RTNS6X4.png" /></p><h1 id="定义-2">定义 2</h1><p>单侧连续. 略.</p><h1 id="定义-3">定义 3</h1><p>若极限 <span class="math inline">\(l = \lim_{x \rightarrow x_0}f(x)\)</span> 存在, 但 <span class="math inline">\(f(x_0) \neql\)</span> 或 <span class="math inline">\(f(x_0)\)</span> 无定义, 则称<span class="math inline">\(x_0\)</span> 为 <spanclass="math inline">\(f(x)\)</span>的<strong>可去间断点</strong>(重新定义 <spanclass="math inline">\(f(x_0) = l\)</span> 后即消去间断).</p><p>若 <span class="math inline">\(f(x_0^-)\)</span> 与 <spanclass="math inline">\(f(x_0^+)\)</span> 皆存在但不相等, 则称 <spanclass="math inline">\(x_0\)</span> 为 <spanclass="math inline">\(f(x)\)</span> 的<strong>跳跃间断点</strong>, 称<span class="math inline">\(f(x_0^+) - f(x_0^-)\)</span> 为 <spanclass="math inline">\(f(x)\)</span> 在 <spanclass="math inline">\(x_0\)</span> 处的跃度.</p><p>以上两种间断点合称为<strong>第一类间断点</strong>.</p><p>称非第一类的间断点为<strong>第二类间断点</strong>.</p><p>举例: <span class="math inline">\(f(x) = 1 / x\)</span> 以 <spanclass="math inline">\(x = 0\)</span> 为第二类间断点.</p><hr /><p>参考:</p><p>1、华科微积分教材。</p>]]></content>
    
    
    <categories>
      
      <category>高数</category>
      
    </categories>
    
    
    <tags>
      
      <tag>高数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows 和 Linux 下 clock 函数对 scanf 函数的测量问题</title>
    <link href="/2021/11/27/Windows-%E5%92%8C-Linux-%E4%B8%8B-clock-%E5%87%BD%E6%95%B0%E5%AF%B9-scanf-%E5%87%BD%E6%95%B0%E7%9A%84%E6%B5%8B%E9%87%8F%E9%97%AE%E9%A2%98/"/>
    <url>/2021/11/27/Windows-%E5%92%8C-Linux-%E4%B8%8B-clock-%E5%87%BD%E6%95%B0%E5%AF%B9-scanf-%E5%87%BD%E6%95%B0%E7%9A%84%E6%B5%8B%E9%87%8F%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>这个问题的来由是《算法竞赛入门经典（第 2 版）》P27：</p><blockquote><p>输入 "20"，按 Enter之后...键盘输入的时间也被计算在内——这确实是程序启动之后才进行的。</p></blockquote><p>所以，作者建议使用 <code>echo</code> 命令来消除键盘输入的影响：</p><blockquote><p>在 Windows 命令行下执行 <code>echo 20|abc</code>，操作系统会自动把 20输入，其中 abc 是程序名。Linux 下需要输入<code>echo 20|./abc</code>，因为在默认情况下，当前目录不在可执行文件的搜索路径中。</p></blockquote><p>根据我的猜测，在 Windows 下使用 <code>clock()</code>函数，<code>scanf</code> 函数的输入时间是要被算进去的，而在 Linux环境下，<code>scanf</code> 的时间则会被省去。</p><p>下面就来测试一下。</p><p>测试程序如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;time.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MOD <span class="token operator">=</span> <span class="token number">1000000</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> S <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> factorial <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>factorial <span class="token operator">=</span> <span class="token punctuation">(</span>factorial <span class="token operator">*</span> j <span class="token operator">%</span> MOD<span class="token punctuation">)</span><span class="token punctuation">;</span>S <span class="token operator">=</span> <span class="token punctuation">(</span>S <span class="token operator">+</span> factorial<span class="token punctuation">)</span> <span class="token operator">%</span> MOD<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>  S<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Time used = %.2f\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> CLOCKS_PER_SEC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>在 Windows 下测试如下：</p><p><img src="https://i.imgur.com/9GEaKxx.png" /></p><p>在 Ubuntu 20.04 下测试如下：</p><p><img src="https://i.imgur.com/rnFNSpm.png" /></p><p>由此，可以知道，前面的猜测是正确的。但是具体原因是为什么，这个就需要去看两个操作系统的具体实现了。暂时没有这个必要。</p><p>然后，我们使用 <code>echo</code> 命令再试一下：</p><p><img src="https://i.imgur.com/Ca92yBN.png" /></p><p><img src="https://i.imgur.com/V7B3vDw.png" /></p>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用 Python 替换字符</title>
    <link href="/2021/11/26/%E5%88%A9%E7%94%A8-Python-%E6%9B%BF%E6%8D%A2%E5%AD%97%E7%AC%A6/"/>
    <url>/2021/11/26/%E5%88%A9%E7%94%A8-Python-%E6%9B%BF%E6%8D%A2%E5%AD%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<p>之前读《算法竞赛入门经典（第 2版）》的时候，以为算法没什么用，现在发现其实还挺有用的，简单的题目就很有用，比如替换字符啦，比如整一些加密啦。</p><p>现在就有一个需求，之前用的 Hexo 框架的数学插件写行内数学公式需要在<code>$</code>左右再加上一对反引号，现在我用的是另一个数学插件，它不需要加反引号，所以有些之前的文章就需要把反引号给去掉。这里，Python就派上了用场。</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">raw_str <span class="token operator">=</span> <span class="token triple-quoted-string string">"""## 1、图的定义图（Graph）是由两个集合构成，一个是非空但有限的顶点集合 $V$，另一个是描述顶点之间关系——边的集合 $E$（可以是 $\varnothing$）。因此，图可以表示为 $G = (V, E)$。每条边是一顶点对 $(v, w)$ 且 $v, w \in V$。通常用 $|V|$ 表示顶点的数量，用 $|E|$ 表示边的数量。## 2、图的术语(1)、无向图（Underected Graphs）：无向图中顶点之间的边（Edge）没有方向，即边 $(v, w)$ 等同于 $(w, v)$。用圆括号“()”表示无向边。边的起点 $w$ 和终点 $v$ 次序并不重要。![图一　　无向图](https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210608212819.png)(2)、有向图（Directed Graphs）：有向图中顶点之间的所有边都有方向，即 $&lt;v, w>$ 不同于 $&lt;w, v>$。用尖括号“&lt;>”表示有向边。有向边也称弧（Are）。弧的“起点（弧头）”和“终点（弧尾）”的次序不能随意颠倒。在不会混淆的场合，有向边和无向边都简称为“边”。![图二　　有向图](https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210608213830.png)(3)、简单图（Simple Graph）：如果图中出现重边（即边的集合 $E$ 中有相同的重复元素）或者自回路边（即边的起点和终点是同一个顶点），就叫做非简单图。![图三　　两种非简单图](https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210608220507.png)(4)、邻接点（Adjacent Vertices）：如果 $(v, w)$ 是无向图中任意一条边，那么称 $v$ 和 $w$ 互为邻接点；如果 $&lt;v, w>$ 是有向图中任意一条边，那么称起点 `$v$` “邻接到”（Adjacent to）终点 `$w$`，也称终点 `$w$` “邻接自”（Adjacent from）起点 `$v$`。比如，考察图二这个有向图 `$G_2$`，顶点 2 邻接到顶点 1，或者说顶点 1 邻接自顶点 2。(5)、路径（Path）、简单路径（Simple Path）、回路（Cycle，也叫做“环”）、无环图（Acyclic Graph）：图中的一条路径是一顶点序列 `$v_1, v_2, ..., v_N$`，序列中任何相邻的两顶点都能在图中找到对应的边，即 `$(v_i, v_&#123;i + 1&#125;) \in E (1 \leqslant i &lt; N)$`。一条路径的长度是这条路径所包含的边数。一条**简单路径**是指除了路径的首尾顶点外，其余顶点都是不同的。有向图中的一条回路是指 `$v_1 = v_N$` 的一条路径。路径长度为 1 的回路是一个自回路（属于非简单图）。简单路径形成的回路称为简单回路（Simple Cycle）。如果在一个有向图中不存在回路，那么这个有向图称为无环图。对于无向图，由于顶点是无序的，环路的长度要大于等于 3。按：本文所有术语和定义皆摘自浙江大学《数据结构 第二版》（陈越、何钦铭），且省略了部分我认为不重要的内容。(12)、连通图（Connected Graph）、连通分量（Connected Component）：在无向图中，如果从一个顶点 `$v_i$` 到另一个顶点 `$v_j(i \leq j)$` 有路径，则称顶点 `$v_i$` 和 `$v_j$` 是连通的（Connected）。如果图中任意两顶点都是连通的，则称该图是连通图。无向图的极大连通子图称为连通分量。连通分量的概念包含以下 4 个要点：- 子图：连通分量应该是原图的子图；- 连通：连通分量本身应该是连通的；- 极大顶点数：连通子图含有极大顶点数，即再加入其他顶点将会导致子图不连通；- 极大边数：具有极大顶点数的连通子图包含依附于这些顶点的所有边。因此，连通的无向图只有一个连通分量，这个连通分量就是本图。不连通的无向图有多于一个的连通分量。(13)、强连通图（Strongly Connected Graph）、强连通分量（Strongly Connected Component）；对于有向图来说，若图中任意一对顶点 `$v_i$` 和 `$v_j(i \leq j)$` 均既有从 `$v_i$` 到 `$v_j$` 的路径，也有从 `$v_j$` 到 `$v_i$` 的路径，则称该有向图是强连通图。有向图的极大强连通子图称为强连通分量。强连通分量的概念与连通分量类似，也包含 4 个要点。强连通图本身就是一个强连通分量。不是强连通的有向图有多于一个的强连通分量。"""</span>reverted_str <span class="token operator">=</span> <span class="token triple-quoted-string string">""""""</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> raw_str<span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">'`'</span><span class="token punctuation">:</span>        <span class="token comment"># print(i)</span>        count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">continue</span>    reverted_str <span class="token operator">=</span> reverted_str <span class="token operator">+</span> i<span class="token keyword">print</span><span class="token punctuation">(</span>reverted_str<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>raw_str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>reverted_str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>按：这里只作了简答的替换，以后有需要的时候会更新。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode 配置修改记录(settings.json)</title>
    <link href="/2021/11/26/VSCode-%E9%85%8D%E7%BD%AE%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-settings-json/"/>
    <url>/2021/11/26/VSCode-%E9%85%8D%E7%BD%AE%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95-settings-json/</url>
    
    <content type="html"><![CDATA[<p>最近发现 VSCode 用来写 Python其实还蛮不错的，然后就遇到了一些配置的问题，比如控制台默认Shell(Console) 的设置，比如 Shell 的缓冲区(Buffer)的行数限制修改，因此，为了以后换环境(例如，重装系统)时能够快速同步配置，就在这里记录一下对于VSCode 配置的修改。</p><p>首先，给出目前我的 VSCode 的 <code>settings.json</code> 的配置：</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"workbench.startupEditor"</span><span class="token operator">:</span> <span class="token string">"newUntitledFile"</span><span class="token punctuation">,</span>    <span class="token property">"explorer.confirmDelete"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"markdown-preview-enhanced.mathRenderingOption"</span><span class="token operator">:</span> <span class="token string">"MathJax"</span><span class="token punctuation">,</span>    <span class="token property">"markdown-preview-enhanced.previewTheme"</span><span class="token operator">:</span> <span class="token string">"one-dark.css"</span><span class="token punctuation">,</span>    <span class="token property">"editor.fontFamily"</span><span class="token operator">:</span> <span class="token string">" ‘宋体’, Consolas, monospace"</span><span class="token punctuation">,</span>    <span class="token property">"editor.fontSize"</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span>    <span class="token property">"picgo.picBed.current"</span><span class="token operator">:</span> <span class="token string">"github"</span><span class="token punctuation">,</span>    <span class="token property">"picgo.picBed.github.branch"</span><span class="token operator">:</span> <span class="token string">"master"</span><span class="token punctuation">,</span>    <span class="token property">"picgo.picBed.github.customUrl"</span><span class="token operator">:</span> <span class="token string">"https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master"</span><span class="token punctuation">,</span>    <span class="token property">"picgo.picBed.github.path"</span><span class="token operator">:</span> <span class="token string">"blogs/pictures/"</span><span class="token punctuation">,</span>    <span class="token property">"picgo.picBed.github.repo"</span><span class="token operator">:</span> <span class="token string">"fanlumaster/BlogMaps"</span><span class="token punctuation">,</span>    <span class="token property">"picgo.picBed.github.token"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token property">"editor.minimap.enabled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"explorer.confirmDragAndDrop"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"picgo.customOutputFormat"</span><span class="token operator">:</span> <span class="token string">"![]($&#123;url&#125;)"</span><span class="token punctuation">,</span>    <span class="token property">"editor.mouseWheelZoom"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"security.workspace.trust.untrustedFiles"</span><span class="token operator">:</span> <span class="token string">"open"</span><span class="token punctuation">,</span>    <span class="token property">"security.workspace.trust.enabled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"editor.wordWrap"</span><span class="token operator">:</span> <span class="token string">"on"</span><span class="token punctuation">,</span>    <span class="token property">"vscode-imgur.client_id"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token property">"vscode-imgur.client_secret"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token property">"vscode-imgur.preferUserUpload"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"picgo.picBed.imgur.clientId"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token property">"picgo.picBed.imgur.proxy"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:7890"</span><span class="token punctuation">,</span>    <span class="token property">"liveServer.settings.CustomBrowser"</span><span class="token operator">:</span> <span class="token string">"microsoft-edge"</span><span class="token punctuation">,</span>    <span class="token property">"picgo.picBed.uploader"</span><span class="token operator">:</span> <span class="token string">"github"</span><span class="token punctuation">,</span>    <span class="token comment">// I want my default to be 4, but JavaScript or HTML to be 2</span>    <span class="token property">"editor.tabSize"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>    <span class="token property">"[javascript]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"editor.tabSize"</span><span class="token operator">:</span> <span class="token number">2</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"[html]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"editor.tabSize"</span><span class="token operator">:</span> <span class="token number">2</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// This one forces the tab to be **space**</span>    <span class="token property">"editor.insertSpaces"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"editor.largeFileOptimizations"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"terminal.integrated.profiles.windows"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"PowerShell"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"source"</span><span class="token operator">:</span> <span class="token string">"PowerShell"</span><span class="token punctuation">,</span>            <span class="token comment">// "path": "C:\\Program Files\\PowerShell\\7\\pwsh.exe",</span>            <span class="token property">"icon"</span><span class="token operator">:</span> <span class="token string">"terminal-powershell"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"Command Prompt"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"path"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"$&#123;env:windir&#125;\\Sysnative\\cmd.exe"</span><span class="token punctuation">,</span>                <span class="token string">"$&#123;env:windir&#125;\\System32\\cmd.exe"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"icon"</span><span class="token operator">:</span> <span class="token string">"terminal-cmd"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"Git Bash"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"source"</span><span class="token operator">:</span> <span class="token string">"Git Bash"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"PowerShell7"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"C:\\Program Files\\PowerShell\\7\\pwsh.exe"</span><span class="token punctuation">,</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"icon"</span><span class="token operator">:</span> <span class="token string">"terminal-powershell"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"terminal.integrated.defaultProfile.windows"</span><span class="token operator">:</span> <span class="token string">"PowerShell7"</span><span class="token punctuation">,</span>    <span class="token property">"terminal.integrated.scrollback"</span><span class="token operator">:</span> <span class="token number">10000</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>按：此配置文件删去了图床的 Token。</p><h1 id="修改控制台缓冲区的大小">修改控制台缓冲区的大小</h1><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"terminal.integrated.scrollback"</span><span class="token operator">:</span> <span class="token number">10000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>按：默认的大小似乎是 1000，太小了，不够用。</p><h1id="当系统语言为英文时设置-vscode-中文字体为宋体">当系统语言为英文时，设置VSCode 中文字体为宋体</h1><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"editor.fontFamily"</span><span class="token operator">:</span> <span class="token string">"Consolas, '宋体', monospace"</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>本来 '宋体' 是排在首位的，现在把它挪到第二个位置，就奏效了。</p>]]></content>
    
    
    <categories>
      
      <category>VSCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VSCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>修改 VSCode 默认 Shell 为 Powershell7</title>
    <link href="/2021/11/26/%E4%BF%AE%E6%94%B9-VSCode-%E9%BB%98%E8%AE%A4-Shell-%E4%B8%BA-Powershell7/"/>
    <url>/2021/11/26/%E4%BF%AE%E6%94%B9-VSCode-%E9%BB%98%E8%AE%A4-Shell-%E4%B8%BA-Powershell7/</url>
    
    <content type="html"><![CDATA[<p>首先，我们的 VSCode 默认的 Shell(Terminal) 应该是这个：</p><p><img src="https://i.imgur.com/u7kdIja.png" /></p><p>然后，我们访问它给的网址<a href="https://aka.ms/PSWindows"class="uri">https://aka.ms/PSWindows</a>，去下载最新的 PowerShell，</p><p><img src="https://i.imgur.com/xIkYDjb.png" /></p><p><img src="https://i.imgur.com/ysvWqCS.png" /></p><p>这里推荐使用 MSI 包来安装，下载好之后，直接双击安装即可。</p><p>然后，<code>Ctrl + Shift + P</code>，输入<code>open settings</code>，打开 <code>settings.json</code>：</p><p><img src="https://i.imgur.com/Te5EluN.png" /></p><p>然后添加如下配置：</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"terminal.integrated.profiles.windows"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"PowerShell"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"source"</span><span class="token operator">:</span> <span class="token string">"PowerShell"</span><span class="token punctuation">,</span>        <span class="token property">"icon"</span><span class="token operator">:</span> <span class="token string">"terminal-powershell"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"Command Prompt"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"path"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"$&#123;env:windir&#125;\\Sysnative\\cmd.exe"</span><span class="token punctuation">,</span>            <span class="token string">"$&#123;env:windir&#125;\\System32\\cmd.exe"</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"icon"</span><span class="token operator">:</span> <span class="token string">"terminal-cmd"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"Git Bash"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"source"</span><span class="token operator">:</span> <span class="token string">"Git Bash"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"PowerShell7"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"C:\\Program Files\\PowerShell\\7\\pwsh.exe"</span><span class="token punctuation">,</span>        <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"icon"</span><span class="token operator">:</span> <span class="token string">"terminal-powershell"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"terminal.integrated.defaultProfile.windows"</span><span class="token operator">:</span> <span class="token string">"PowerShell7"</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>然后，我们新建一个 Terminal 来看一下，</p><p><img src="https://i.imgur.com/Pp12pqi.png" /></p><p>发现配置已经生效。</p><hr /><p>参考：</p><p>1. <ahref="https://stackoverflow.com/questions/65908987/vs-code-how-to-open-settings-json-file"class="uri">https://stackoverflow.com/questions/65908987/vs-code-how-to-open-settings-json-file</a></p><p>2. <ahref="https://stackoverflow.com/questions/67601161/the-new-way-to-configure-default-shell-and-argument-commands-in-vscode"class="uri">https://stackoverflow.com/questions/67601161/the-new-way-to-configure-default-shell-and-argument-commands-in-vscode</a></p>]]></content>
    
    
    <categories>
      
      <category>VSCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VSCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 简单字符替换</title>
    <link href="/2021/11/26/Python-%E7%AE%80%E5%8D%95%E5%AD%97%E7%AC%A6%E6%9B%BF%E6%8D%A2/"/>
    <url>/2021/11/26/Python-%E7%AE%80%E5%8D%95%E5%AD%97%E7%AC%A6%E6%9B%BF%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<p>这里仅仅是作了一个简单的操作，即，将一个含有很多汉字的文本中的所有汉字都替换成unicode 表中对应的下一个字符。然后输出。</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># print all the Chinese characters</span><span class="token comment"># for i in range(0x4e00,0x9fa6):</span><span class="token comment"># print (chr(i))</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token triple-quoted-string string">"""【第一章】道可道，非常道；名可名，非常名。无名天地之始，有名万物之母。故常无欲，以观其妙；常有欲，以观其徼（jiào）。此两者同出而异名，同谓之玄，玄之又玄，众妙之门。〖译文〗【第二章】天下皆知美之为美，斯恶（è）已；皆知善之为善，斯不善已。故有无相生，难易相成，长短相较，高下相倾，音声相和（hè），前后相随。是以圣人处无为之事，行不言之教，万物作焉而不辞，生而不有，为而不恃，功成而弗居。夫（fú）唯弗居，是以不去。 〖译文〗"""</span><span class="token comment"># judge whether a char is a chinese character</span><span class="token keyword">def</span> <span class="token function">is_chinese</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> char <span class="token operator">>=</span> <span class="token string">u'\u4e00'</span> <span class="token keyword">and</span> char <span class="token operator">&lt;=</span> <span class="token string">u'\u9fa5'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>reverted_str <span class="token operator">=</span> <span class="token triple-quoted-string string">""""""</span><span class="token keyword">for</span> char <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> char <span class="token operator">==</span> <span class="token string">"\n"</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">r"\n"</span><span class="token punctuation">,</span> <span class="token string">'\t'</span><span class="token punctuation">,</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'\t'</span><span class="token punctuation">,</span> <span class="token string">r'\n'</span><span class="token punctuation">)</span>        reverted_str <span class="token operator">=</span> reverted_str <span class="token operator">+</span> char        <span class="token keyword">continue</span>    <span class="token keyword">if</span> char <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">r"blank"</span><span class="token punctuation">,</span> <span class="token string">'\t'</span><span class="token punctuation">,</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'\t'</span><span class="token punctuation">,</span> char<span class="token punctuation">)</span>        reverted_str <span class="token operator">=</span> reverted_str <span class="token operator">+</span> char        <span class="token keyword">continue</span>    <span class="token keyword">if</span> is_chinese<span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>char<span class="token punctuation">,</span> <span class="token string">'\t'</span><span class="token punctuation">,</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'\t'</span><span class="token punctuation">,</span> char<span class="token punctuation">)</span>        reverted_str <span class="token operator">=</span> reverted_str <span class="token operator">+</span> char        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>char<span class="token punctuation">,</span> <span class="token string">'\t'</span><span class="token punctuation">,</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'\t'</span><span class="token punctuation">,</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    reverted_str <span class="token operator">=</span> reverted_str <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>reverted_str<span class="token punctuation">)</span><span class="token comment"># print('>', '\t', ord('>'), '\t', chr(ord('>') + 1))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>output:</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">\n       10      \n【       12304   【第       31532   笭一       19968   丁章       31456   竡】       12305   】道       36947   達可       21487   台道       36947   達，       65292   ，非       38750   靟常       24120   帹道       36947   達；       65307   ；名       21517   后可       21487   台名       21517   后，       65292   ，非       38750   靟常       24120   帹名       21517   后。       12290   。无       26080   旡名       21517   后天       22825   太地       22320   圱之       20043   乌始       22987   姌，       65292   ，有       26377   朊名       21517   后万       19975   丈物       29289   牪之       20043   乌母       27597   毎。       12290   。故       25925   敆常       24120   帹无       26080   旡欲       27442   欳，       65292   ，以       20197   仦观       35266   觃其       20854   具妙       22937   妚；       65307   ；常       24120   帹\n       10      \n有       26377   朊欲       27442   欳，       65292   ，以       20197   仦观       35266   觃其       20854   具徼       24508   徽（       65288   （j        106     ji        105     ià        224     ào        111     o）       65289   ）。       12290   。此       27492   步两       20004   严者       32773   耆同       21516   名出       20986   击而       32780   耍异       24322   弃名       21517   后，       65292   ，同       21516   名谓       35859   谔之       20043   乌玄       29572   玅，       65292   ，玄       29572   玅之       20043   乌又       21448   叉玄       29572   玅，       65292   ，众       20247   优妙       22937   妚之       20043   乌门       38376   闩。       12290   。〖       12310   〖译       35793   诒文       25991   斈〗       12311   〗\n       10      \n【       12304   【第       31532   笭二       20108   亍章       31456   竡】       12305   】天       22825   太下       19979   丌皆       30342   皇知       30693   矦美       32654   羏之       20043   乌为       20026   主美       32654   羏，       65292   ，斯       26031   新恶       24694   恷（       65288   （è        232     è）       65289   ）已       24050   巳；       65307   ；皆       30342   皇知       30693   矦善       21892   喅之       20043   乌为       20026   主善       21892   喅，       65292   ，斯       26031   新不       19981   与善       21892   喅已       24050   巳。       12290   。故       25925   敆有       26377   朊无       26080   旡相       30456   盹生       29983   甠，       65292   ，难       38590   隿易       26131   昔相       30456   盹成       25104   我，       65292   ，长       38271   門短       30701   矮相       30456   盹\n       10      \n较       36739   辄，       65292   ，高       39640   髙下       19979   丌相       30456   盹倾       20542   倿，       65292   ，音       38899   韴声       22768   壱相       30456   盹和       21644   咍（       65288   （h        104     hè        232     è）       65289   ），       65292   ，前       21069   剎后       21518   吏相       30456   盹随       38543   隐。       12290   。是       26159   昰以       20197   仦圣       22307   圤人       20154   亻处       22788   夅无       26080   旡为       20026   主之       20043   乌事       20107   二，       65292   ，行       34892   衍不       19981   与言       35328   訁之       20043   乌教       25945   敚，       65292   ，万       19975   丈物       29289   牪作       20316   佝焉       28937   焊而       32780   耍不       19981   与辞       36766   辟，       65292   ，生       29983   甠而       32780   耍\n       10      \n不       19981   与有       26377   朊，       65292   ，为       20026   主而       32780   耍不       19981   与恃       24643   恄，       65292   ，是       26159   昰以       20197   仦不       19981   与去       21435   厼。       12290   。blank    32〖       12310   〖译       35793   诒文       25991   斈〗       12311   〗\n       10      \n【笭丁竡】達台達，靟帹達；后台后，靟帹后。旡后太圱乌姌，朊后丈牪乌毎。敆帹旡欳，仦觃具妚；帹朊欳，仦觃具徽（jiào）。步严耆名击耍弃后，名谔乌玅，玅乌叉玅，优妚乌闩。〖诒斈〗【笭亍竡】太丌皇矦羏乌主羏，新恷（è）巳；皇矦喅乌主喅，新与喅巳。敆朊旡盹甠，隿昔盹我，門矮盹辄，髙丌盹倿，韴壱盹咍（hè），剎吏盹隐。昰仦圤亻夅旡主乌二，衍与訁乌敚，丈牪佝焊耍与辟，甠耍与朊，主耍与恄，加我耍弘屆。夬（fú）唰弘屆，昰仦与厼。 〖诒斈〗</code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>小脚本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>华科软院计算机组成原理实验整理</title>
    <link href="/2021/11/25/%E5%8D%8E%E7%A7%91%E8%BD%AF%E9%99%A2%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C%E6%95%B4%E7%90%86/"/>
    <url>/2021/11/25/%E5%8D%8E%E7%A7%91%E8%BD%AF%E9%99%A2%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>一共应该是四次实验，但是最后只检查实验二和实验四。</p><p>关于这些实验的说明，老师给的时间是一个星期，从前一周的星期四晚上开始讲解，到接下来一周的周四就要检查实验成果。而且，由于接下来的那一周的周二还有考试，同样是计算机组成原理的考试，所以老师应该是隐晦地降低了要求，最后只要求检查实验结果，并且要理解实验原理（这个最后检查的时候要问），然而，却不管这个实验是否是独立做出来的，可以讨论，可以从网上找参考。</p><p>基于这些情况，我决定使用计算机学院在慕课上给的实验材料，因为那个材料可以找到的参考资料比较多，而实验助教给的那份材料就先放在一边。毕竟最终的目的是理解实验原理。</p><h1 id="实验一">实验一</h1><p>暂时按下不表。</p><h1 id="实验二">实验二</h1><h2 id="一实验目的">一、实验目的</h2><ul><li>熟悉 Logisim 软件平台。</li><li>掌握运算器基本工作原理</li><li>掌握运算溢出检测的原理和实现方法；</li><li>理解有符号数和无符号数运算的区别；</li><li>理解基于补码的加/减运算实现原理；</li><li>熟悉运算器的数据传输通路。</li></ul><h2 id="二实验环境">二、实验环境</h2><p>Logisim是一款数字电路模拟的教育软件，用户都可以通过它来学习如何创建逻辑电路，方便简单。它是一款基于 Java 的应用程序，可运行在任何支持 JAVA环境的平台，方便学生来学习设计和模仿数字逻辑电路。Logisim中的主要组成部分之一就在于设计并以图示来显示 CPU。当然 Logisim中还有其他多种组合分析模型来对你进行帮助，如转换电路，表达式，布尔型和真值表等等。同时还可以重新利用小规模的电路来作为大型电路的一部分。</p><p><a href="http://www.cburch.com/logisim/docs.html"class="uri">http://www.cburch.com/logisim/docs.html</a></p><h2 id="三实验内容">三、实验内容</h2><h3 id="八位串行可控加减法电路设计">1. 八位串行可控加减法电路设计</h3><p>利用已经封装好的全加器（封装 1）设计 8位串行可控加减法电路，其（指八位串行可控加减法器）引脚电路如下图所示</p><p><img src="https://i.imgur.com/y0QhTHh.png"alt="八位串行可控加减法电路引脚定义" /></p><p>封装 1 的电路如下图所示：</p><p><img src="https://i.imgur.com/quI7Ovn.png" alt="封装 1" /></p><p>初始电路如下：</p><p><img src="https://i.imgur.com/e6jJRNI.png" /></p><p>完成电路如下：</p><p><img src="https://i.imgur.com/TrCSihK.png" /></p><p>完成之后，可以使用上面的引脚区域进行测试：</p><p><img src="https://i.imgur.com/D0fo21y.png" /></p><p>按：这个引脚的 X 和 Y 输入可以一位一位地点击来改变其数值。</p><p>一些测试用例：</p><ul><li>1. x=0000 0000，y=0000 0001，sub=0；s=0000 0001，Cout=0，OF=0</li><li>2. x=0000 1000，y=0000 0101，sub=1；s=0000 0011 - Cout=1，OF=0</li><li>3. x=0100 1000，y=0100 0001，sub=0；s=1000 1001 - Cout=0，OF=1</li><li>4. x=0000 0111，y=1000 0111，sub=1；s=1000 0000，Cout=0，OF=1</li></ul><p><strong>实验原理：</strong></p><p>输入：</p><ul><li>操作数 1 为 <span class="math inline">\(X\)</span>，<spanclass="math inline">\(X\)</span> 的 8 位数据 <spanclass="math inline">\(X_7 \sim X_0\)</span>，操作数 2 为 <spanclass="math inline">\(Y\)</span>，<span class="math inline">\(Y\)</span>的 8 位数据 <span class="math inline">\(Y_7 \sim Y_0\)</span>。</li><li>最低位进位 <span class="math inline">\(Cin\)</span>。</li><li>加减法控制项 <span class="math inline">\(Sub\)</span>。</li></ul><p>输出：</p><ul><li>运算结果 <span class="math inline">\(S\)</span> 的 8 位数据 <spanclass="math inline">\(S_7 \sim S_0\)</span>。</li><li>最高位进位 <span class="math inline">\(Cout\)</span>。</li><li>有符号运算溢出判断 <span class="math inline">\(OF\)</span>。</li></ul><p>首先，研究一下预置部件一位全加器 FA。</p><p>对于一位加法，显然有输入：</p><ul><li>操作数 1：x</li><li>操作数 2：y</li></ul><p>有输出：</p><ul><li>本位和：s</li><li>进位产生：Cout</li></ul><p>则有：</p><ul><li><span class="math inline">\(0 + 0 = 0\)</span>，进位 <spanclass="math inline">\(0\)</span></li><li><span class="math inline">\(0 + 1 = 1\)</span>，进位 <spanclass="math inline">\(0\)</span></li><li><span class="math inline">\(1 + 0 = 1\)</span>，进位 <spanclass="math inline">\(0\)</span></li><li><span class="math inline">\(1 + 1 = 0\)</span>，进位 <spanclass="math inline">\(1\)</span></li></ul><p>然而，在实际的运算中，对于一位加法，还有从低位进位引入的进位值，在运算中不可忽略，我们把这个进位值记作Cin，同样要与 x 和 y 一起参与加法运算。</p><p>那么对于一位加法运算，有 x，y 以及 Cin 三个输入数据，同时有 s 和 Cout两个输出数据。</p><p>对于这个运算过程，其逻辑表达式为</p><p><span class="math display">\[\begin{split}Cout &amp;= X_i \cdot Y_i + Cin \cdot (X_i \oplus Y_i) \\S_i &amp;= X_i \oplus Y_i \oplus Cin\end{split}\]</span></p><p>根据一位加法的原理，可以设计出一位全加器 FA：</p><p><img src="https://i.imgur.com/uBMfRMP.png" alt="一位全加器 FA" /></p><p>已经封装好的电路可以在其他电路中直接拖拽使用，一位加法器 FA在其他电路中的效果如图所示：</p><p><img src="https://i.imgur.com/5npCeQK.png" /></p><p>将 8 个 FA 的进位链串联即可得到 8 位串行加法器。</p><p><img src="https://i.imgur.com/qXDzOpb.png" /></p><p>将 8 个一位全加器 FA 的进位链串联即可得到 n位加法器，由于补码符号位也可以参与运算，所以此电路既可以用于有符号数运算，也可以用于无符号数运算，但二者在溢出检测上有一定区别，这里OF 的判定以有符号数加法运算是否溢出为标准。</p><p>按：存疑。为什么要以有符号数加法运算是否溢出为标准。</p><p>教材给出了溢出的定义，即：运算结果超出数据类型所能表示的数据范围的现象称为溢出。有多种方法可以检测溢出，课本上给出了3 种常用的方法来检测溢出。</p><blockquote><p>溢出检测方法 1. 根据操作数和运算结果的符号位是否一致来进行检测</p></blockquote><p>在有符号运算加法中，只有当两个符号相同的数相加时才有可能产生溢出，因此，可以根据操作数与运算结果的符号位是否一致来进行检测。</p><p>设 <span class="math inline">\(X_f\)</span>，<spanclass="math inline">\(Y_f\)</span> 分别为两个操作数的符号位，<spanclass="math inline">\(S_f\)</span> 为结果的符号位，<spanclass="math inline">\(V\)</span> 为溢出标志位，<spanclass="math inline">\(V = 1\)</span>时即表示溢出，那么有逻辑表达式：</p><p><span class="math display">\[V = X_f Y_f \overline{S}_f + \overline{X}_f \overline{Y}_f S_f\]</span></p><p>这个逻辑表达式表明，有符号加法运算溢出的条件是：两个操作数都是正数结果却为负数，或者两个运算数都是负数结果却是正数。</p><blockquote><p>溢出检测方法 2.根据运算过程中，最高数据位与符号位的进位位是否一致进行检测（推荐）</p></blockquote><p>设运算时最高数据位产生的进位信号为 <spanclass="math inline">\(C_d\)</span>，符号位产生的进位信号为 <spanclass="math inline">\(C_f\)</span>，那么相应的检测逻辑表达式为：</p><p><span class="math display">\[V = C_d \oplus C_f\]</span></p><p>这个表达式表明，运算过程中最高数据位的进位 <spanclass="math inline">\(C_d\)</span> 与符号位的进位 <spanclass="math inline">\(C_f\)</span>不同步时，就表明有符号运算结果发生了溢出。</p><p>可以用异或门实现。</p><blockquote><p>溢出检测方法 3. 利用变形补码进行检测</p></blockquote><p>略。暂时用不到，而且讲课的时候有讲。</p><p>对于这个封装好的 8 位串行加法器，采用的是上述的方法 2 来实现 OF的溢出检测。</p><p><img src="https://i.imgur.com/qXDzOpb.png" /></p><p>在电路中，我们把最高数据位 <spanclass="math inline">\(X_6\)</span>，<spanclass="math inline">\(Y_6\)</span> 的运算结果的进位输出 <spanclass="math inline">\(Cout_6\)</span> 与符号位 <spanclass="math inline">\(X_7\)</span>，<spanclass="math inline">\(Y_7\)</span> 的运算结果的进位输出 <spanclass="math inline">\(Cout_7\)</span> 一同送入 XOR gate 进行判定，结果送OF，实现检测功能。</p><p>然后，我们来研究八位串行可控加减法器的实现。</p><p>再次给一下八位串行可控加减法器的输入输出引脚：</p><p><img src="https://i.imgur.com/y0QhTHh.png" /></p><p>输入：</p><ul><li>操作数 1 为 <span class="math inline">\(X\)</span>，<spanclass="math inline">\(X\)</span> 的 8 位数据 <spanclass="math inline">\(X_7 \sim X_0\)</span>，操作数 2 为 <spanclass="math inline">\(Y\)</span>，<span class="math inline">\(Y\)</span>的 8 位数据 <span class="math inline">\(Y_7 \sim Y_0\)</span>。</li><li>最低位进位 <span class="math inline">\(Cin\)</span>。</li><li>加减法控制项 <span class="math inline">\(Sub\)</span>。</li></ul><p>输出：</p><ul><li>运算结果 <span class="math inline">\(S\)</span> 的 8 位数据 <spanclass="math inline">\(S_7 \sim S_0\)</span>。</li><li>最高位进位 <span class="math inline">\(Cout\)</span>。</li><li>有符号运算溢出判断 <span class="math inline">\(OF\)</span>。</li></ul><p>之前已经给出了 8位串行加法器的电路实现，相当于已经有了“加法”功能。根据这个思路，在本实验中，需要完成“减法”功能，以及“加减法控制”功能。</p><p>实验文件中已经给的 8 位串行加法器的实现：</p><p><img src="https://i.imgur.com/88sbir0.png" /></p><p>预备知识：补码减法</p><p>对补码加法有：</p><p><span class="math display">\[[x]_补 + [y]_补 = [x + y]_补 (mod \; M)\]</span></p><p>对补码减法有：</p><p><span class="math display">\[[x]_补 + [-y]_补 = [x - y]_补\]</span></p><p>根据以上规则，把补码减法转换为补码加法。这样，我们就可以简单地利用“加法器”来实现减法运算。</p><blockquote><p>“加减法控制”功能与 Sub。</p></blockquote><p>这里建议 Sub 值为 1 时表示减法运算，Sub 为 0 时表示加法运算。</p><blockquote><p>有符号数运算溢出检测 OF？</p></blockquote><p>采用和上述八位串行加法器一样的思路。</p><p>最后再贴一次参考测试用例：</p><ul><li>1. x=0000 0000，y=0000 0001，sub=0；s=0000 0001，Cout=0，OF=0</li><li>2. x=0000 1000，y=0000 0101，sub=1；s=0000 0011 - Cout=1，OF=0</li><li>3. x=0100 1000，y=0100 0001，sub=0；s=1000 1001 - Cout=0，OF=1</li><li>4. x=0000 0111，y=1000 0111，sub=1；s=1000 0000，Cout=0，OF=1</li></ul><p>再贴一次完成电路：</p><p><img src="https://i.imgur.com/TrCSihK.png" /></p><h3 id="四位先行进位电路">2. 四位先行进位电路</h3><p>根据下图定义的输入输出引脚完成 4 位先行进位电路。</p><p><img src="https://i.imgur.com/rngpsTs.png"alt="四位先行进位电路引脚定义" /></p><p>初始电路：</p><p><img src="https://i.imgur.com/Y8P38CK.png" /></p><p>完成电路：</p><p><img src="https://i.imgur.com/lr9jAIo.png" /></p><p><strong>实验原理：</strong></p><p>首先研究一下输入输出：</p><p><img src="https://i.imgur.com/rngpsTs.png" /></p><ul><li><p>输入序列 <span class="math inline">\(G4 \; P4 \; G3\)</span><span class="math inline">\(P3 \; G2 \; P2 \; G1 \; P1 \;Cin\)</span></p></li><li><p>输出序列 <span class="math inline">\(C4 \; C3 \; C2\)</span><span class="math inline">\(C1 \; G^* P^*\)</span></p></li><li><p>1. 输入：0000 0001 1 输出：0001 00</p></li><li><p>2. 输入：0000 0111 0 输出：0011 00</p></li><li><p>3. 输入：1111 0000 0 输出：1100 10</p></li><li><p>4. 输入：1111 1110 0 输出：1111 10</p></li></ul><p>并行进位加法器的进位电路，74181 包含了 74182。</p>]]></content>
    
    
    <categories>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库第二次上机实验报告</title>
    <link href="/2021/11/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    <url>/2021/11/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="实验五-表数据的维护">实验五 表数据的维护</h1><h2 id="一实验目的">一、实验目的</h2><p>熟练掌握使用 Transact-SQL 语言和通过 Navicat输入表数据、修改表数据和删除表数据的操作。</p><h2 id="二实验内容">二、实验内容</h2><p>1、在数据库 world 中建立一个名为 newlanguage 的表，其结构与表countrylanguage完全一样（注意各字段的默认值、字符集、排序方式等），如图：</p><p><img src="https://i.imgur.com/Adfr5Te.png" /></p><p>这里要注意，<code>enum</code> 类型的字段要设置可供选择的值。</p><p>这里其实建议使用建表语句（可以直接使用<code>SHOW CREATE TABLE countrylanguage;</code> 来拷贝一下<code>countrylanguage</code>中的这个表，省去了一个一个设置字符集的麻烦，也解决了 enum 的问题）。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>newlanguage<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>CountryCode<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> latin1 <span class="token keyword">COLLATE</span> latin1_swedish_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>Language<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> latin1 <span class="token keyword">COLLATE</span> latin1_swedish_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>IsOfficial<span class="token punctuation">`</span></span> <span class="token keyword">enum</span><span class="token punctuation">(</span><span class="token string">'T'</span><span class="token punctuation">,</span><span class="token string">'F'</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> latin1 <span class="token keyword">COLLATE</span> latin1_swedish_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'F'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>Percentage<span class="token punctuation">`</span></span> <span class="token keyword">float</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0.0'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>CountryCode<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>Language<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>CountryCode<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>CountryCode<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>latin1 ROW_FORMAT<span class="token operator">=</span>COMPACT<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>注：这里在拷贝建表语句时，不能把外键的设置带上。</p><p>2、在表 newlanguage 中插入中国的客家话，其名称为CountryCode为CHN，language 为 Kejia，isOfficial 为 F，percentage 为0.3。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> newlanguage <span class="token punctuation">(</span>CountryCode<span class="token punctuation">,</span> <span class="token keyword">Language</span><span class="token punctuation">,</span> IsOfficial<span class="token punctuation">,</span> Percentage<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'CHN'</span><span class="token punctuation">,</span> <span class="token string">'Kejia'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>注：这里实验指南本身漏掉了第 3 题。</p><p>4、试将表 countrylanguage 中的所有记录插入到表 newlanguage 中去。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> newlanguage <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> countrylanguage<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>5、将表 newlanguage 中 Language 为 “Kejia” 的语言的 Percentage 改为0.4。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> newlanguage <span class="token keyword">SET</span> Percentage <span class="token operator">=</span> <span class="token number">0.4</span><span class="token keyword">WHERE</span> <span class="token keyword">Language</span> <span class="token operator">=</span> <span class="token string">'Kejia'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>6、将表 newlanguage 中语言的 Percentage 均减去 0.1。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> newlanguage <span class="token keyword">SET</span> Percentage <span class="token operator">=</span> Percentage <span class="token operator">-</span> <span class="token number">0.1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>修改前：</p><p><img src="https://i.imgur.com/3C70VDZ.png" /></p><p>修改后：</p><p><img src="https://i.imgur.com/bPjeFtS.png" /></p><p>7、删除表 newlanguage 中澳大利亚（CountrCode为“AUS”）的英语记录。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> newlanguage<span class="token keyword">WHERE</span> CountryCode <span class="token operator">=</span> <span class="token string">'AUS'</span> <span class="token operator">AND</span> <span class="token keyword">Language</span> <span class="token operator">=</span> <span class="token string">'English'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>8、清空表 newlanguage 中的所有数据。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> newlanguage<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="三课后练习题">三、课后练习题</h2><p>以下题目在数据库 world 中完成。</p><p>1、通过 Navicat，在 country、countrylanguage、和 city 三个表中各输入10 条记录。</p><p><img src="https://i.imgur.com/knRr7eq.png" /></p><p>其他两张表的插入略。</p><p>2、将一条新的城市记录（Name：Beijing，CountryCode：AFG，District：Beijing，Population：21148000）插入表city 中。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> city <span class="token punctuation">(</span>Name<span class="token punctuation">,</span> CountryCode<span class="token punctuation">,</span> District<span class="token punctuation">,</span> Population<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'Beijing'</span><span class="token punctuation">,</span> <span class="token string">'AFG'</span><span class="token punctuation">,</span> <span class="token string">'Beijing'</span><span class="token punctuation">,</span> <span class="token number">21148000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>3、插入一条语言记录（“CHN”，“Minnan”，“F”，0.5）到表countrylanguage。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> countrylanguage <span class="token punctuation">(</span>CountryCode<span class="token punctuation">,</span> <span class="token keyword">Language</span><span class="token punctuation">,</span> IsOfficial<span class="token punctuation">,</span> Percentage<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'CHN'</span><span class="token punctuation">,</span> <span class="token string">'Minnan'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>4、删除 CountryCode 为“ABW”的语言记录。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> countrylanguage<span class="token keyword">WHERE</span>CountryCode <span class="token operator">=</span> <span class="token string">'ABW'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="实验六-视图管理">实验六 视图管理</h1><h2 id="一实验目的-1">一、实验目的</h2><p>掌握视图的定义与维护操作，加深对视图在关系数据库中作用的理解。</p><h2 id="二实验内容-1">二、实验内容</h2><p>在数据库 world 中完成以下操作：</p><p>1、建立亚洲国家的视图asia_country，并要求进行修改和插入操作时仍需保证该视图只有亚洲国家，视图的属性名为Code，Name，Continent，Population，GNP，GovernmentForm。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">USE</span> world<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> asia_country<span class="token keyword">AS</span><span class="token keyword">SELECT</span> Code<span class="token punctuation">,</span> Name<span class="token punctuation">,</span> Continent<span class="token punctuation">,</span> Population<span class="token punctuation">,</span> GNP<span class="token punctuation">,</span> GovernmentForm<span class="token keyword">FROM</span> country<span class="token keyword">WHERE</span> Continent <span class="token operator">=</span> <span class="token string">'Asia'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>对于视图的使用，将其当做基本表即可，可用下面语句用来显示 asia_country表中的所有亚洲国家：</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> asia_country<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>或者直接在左侧目录【world】下的【视图】下多出的“asia_country”上点击右键，在弹出选项里选择“OpenView”。</p><p><img src="https://i.imgur.com/vVKGqZa.png" /></p><p>2、建立国家简称(country.Code)、城市名(city.Name)、语言名(countrylanguage.Language)的视图cc_language。本视图由三个基本表的连接操作导出。</p><p>结果如图：</p><p><img src="https://i.imgur.com/rQRr7up.png" /></p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> cc_language<span class="token keyword">AS</span><span class="token keyword">SELECT</span> country<span class="token punctuation">.</span>Code<span class="token punctuation">,</span> city<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>Name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> countrylanguage<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>Language<span class="token punctuation">`</span></span><span class="token keyword">FROM</span> country <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> city<span class="token keyword">ON</span> country<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>Code<span class="token punctuation">`</span></span> <span class="token operator">=</span> city<span class="token punctuation">.</span>CountryCode<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> countrylanguage<span class="token keyword">on</span> country<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>Code<span class="token punctuation">`</span></span> <span class="token operator">=</span> countrylanguage<span class="token punctuation">.</span>CountryCode<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>3、定义一个反映国家独立年份的视图 c_indepyear。</p><p>结果如图：</p><p><img src="https://i.imgur.com/dTiVghu.png" /></p><p>4、删除视图 c_indepyear。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> c_indepyear<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>5、在亚洲国家视图 asia_country 中找出国民生产总值 GNP 大于 50000的国家名称和 GNP。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>Name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> GNP<span class="token keyword">FROM</span> asia_country<span class="token keyword">WHERE</span> GNP <span class="token operator">></span> <span class="token number">50000</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>6、在 asia_country 视图中人口多于一千万的国家名称、政体。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>Name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> GovernmentForm<span class="token keyword">FROM</span> asia_country<span class="token keyword">WHERE</span> Population <span class="token operator">></span> <span class="token number">10000000</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>7、将亚洲国家视图 asia_country 中 Code为“AFG”的政体改为“Republic”。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> asia_country<span class="token keyword">SET</span> GovernmentForm <span class="token operator">=</span> <span class="token string">'Republic'</span><span class="token keyword">WHERE</span> Code <span class="token operator">=</span> <span class="token string">'AFG'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>8、向亚洲国家视图 asia_country 中插入一个新的国家记录，其中 Code为“DMC”、Name 为“Demacia”，Cotinent 为“Asia”，Population为“10000000”，GNP 为“50000”，GovernmentForm 为“Monarchy”。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> asia_country <span class="token punctuation">(</span>Code<span class="token punctuation">,</span> Name<span class="token punctuation">,</span> Continent<span class="token punctuation">,</span> Population<span class="token punctuation">,</span> GNP<span class="token punctuation">,</span> GovernmentForm<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'DMC'</span><span class="token punctuation">,</span> <span class="token string">'Demacia'</span><span class="token punctuation">,</span> <span class="token string">'Asia'</span><span class="token punctuation">,</span> <span class="token number">10000000</span><span class="token punctuation">,</span> <span class="token number">50000</span><span class="token punctuation">,</span> <span class="token string">'Monarchy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="三课后练习题-1">三、课后练习题</h2><p>1、建立共和国政体的国家的视图。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> republic_country<span class="token keyword">AS</span><span class="token keyword">SELECT</span> Code<span class="token punctuation">,</span> Name<span class="token punctuation">,</span> Continent<span class="token punctuation">,</span> Population<span class="token punctuation">,</span> GNP<span class="token punctuation">,</span> GovernmentForm<span class="token keyword">FROM</span> country<span class="token keyword">WHERE</span> GovernmentForm <span class="token operator">=</span> <span class="token string">'Republic'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>2、建立君主立宪制（ConstitutionalMonarchy）国家的视图，并要求进行修改和插入操作时仍须保证该视图只有君主立宪制国家。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> const_monarchy_country<span class="token keyword">AS</span><span class="token keyword">SELECT</span> Code<span class="token punctuation">,</span> Name<span class="token punctuation">,</span> Continent<span class="token punctuation">,</span> Population<span class="token punctuation">,</span> GNP<span class="token punctuation">,</span> GovernmentForm<span class="token keyword">FROM</span> country<span class="token keyword">WHERE</span> GovernmentForm <span class="token operator">=</span> <span class="token string">'Constitutional Monarchy'</span><span class="token keyword">WITH</span> <span class="token keyword">CASCADED</span> <span class="token keyword">CHECK</span> <span class="token keyword">OPTION</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/5ERX5Ap.png" /></p><p>3、建立共和国政体且国名生产总值在 10000 以上的国家视图。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> gnp_republic_country<span class="token keyword">AS</span><span class="token keyword">SELECT</span> Code<span class="token punctuation">,</span> Name<span class="token punctuation">,</span> Continent<span class="token punctuation">,</span> Population<span class="token punctuation">,</span> GNP<span class="token punctuation">,</span> GovernmentForm<span class="token keyword">FROM</span> country<span class="token keyword">WHERE</span> GovernmentForm <span class="token operator">=</span> <span class="token string">'Republic'</span> <span class="token operator">AND</span> GNP <span class="token operator">></span> <span class="token number">10000</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>注：这里并没有使用原来的表的全部属性名。</p><h1 id="实验七-数据类型的使用">实验七 数据类型的使用</h1><h2 id="一实验目的-2">一、实验目的</h2><p>熟练掌握使用 Navicat 和 Transact-SQL语言两种方法创建、修改和删除表。掌握管理表的有关系统存储过程。</p><h2 id="二实验内容-2">二、实验内容</h2><p>1、了解并尝试使用MySQL的各数据类型，不作实验操作内容上的硬性要求。</p><p>1.1 日期和时间数据类型</p><p>1.2 整型</p><p>1.3 浮点型</p><p>1.4 字符串类型</p><p>1.5 其他类型</p><p>2、了解 MySQL 数据类型属性，并依次实际操作、验证。</p><p>2.1 auto_increment</p><p>2.2 binary</p><p>2.3 default</p><p>2.4 index</p><p>2.5 not null</p><p>2.6 null</p><p>2.7 primary key</p><p>2.8 unique</p><p>2.9 zerofill</p><p>3、如果要设计一个表用来存放商品的基本信息，包括商品编号、商品名称、品牌商标、型号、产地、生产厂商、生产日期、保质期、进货价格、销售价格和商品图片等。请设计出这个表的表结构，包括表名、列名、列的数据类型和长度等等。</p><p>使用 Navicat 建表：</p><p><img src="https://i.imgur.com/QttqPmr.png" /></p><p>建表语句：</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>goodsinfo<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>number<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>trademark<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>model<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>madein<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>company<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>madedate<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>shelflife<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>rawprice<span class="token punctuation">`</span></span> <span class="token keyword">float</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>saleprice<span class="token punctuation">`</span></span> <span class="token keyword">float</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>picture<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>number<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8mb4_0900_ai_ci<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>4、将数据库 world 中 country 表的 capital 字段的数据类型改为varchar(20)。</p><ul><li>① Navicat—Design Table</li><li>② 查询编辑器，输入以下语句： <figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">USE</span> world<span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> country <span class="token keyword">modify</span> <span class="token keyword">column</span> Capital <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure></li></ul><p><img src="https://i.imgur.com/heYOga5.png" /></p><h2 id="三课后练习题-2">三、课后练习题</h2><p>1、用 Navicat 和 SQL 语言两种方式将数据库 world 中 Indepyear字段的数据类型改为 char(5)。</p><p>Navicat:</p><p>右键点击表，Design Table。</p><p>SQL 语句：</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> country <span class="token keyword">modify</span> <span class="token keyword">column</span> IndepYear <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>2、 在 MySQL 中建立一个表，有一列为 float(5, 3)。做以下试验： - ①插入 12.345，成功则查询该表得到结果； - ② 插入12.3456，成功则查询该表得到结果； - ③ 插入123.456，成功则查询该表得到结果。</p><p>比较三次结果的差异，并分析原因。</p><p>建表：</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>drafttable<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>money<span class="token punctuation">`</span></span> <span class="token keyword">float</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8mb4_0900_as_ci<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>插入数据：</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> drafttable <span class="token punctuation">(</span>id<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12.345</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> drafttable <span class="token punctuation">(</span>id<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12.3456</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> drafttable <span class="token punctuation">(</span>id<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">123.456</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/RaYmIYC.png" /></p><p><img src="https://i.imgur.com/y3wZ2yT.png" /></p><p>分析：</p><p>第一次数据插入正常。第二次插入数据因为小数部分位数超过了限制，所以MySQL进行自动舍入。第三次插入数据因为小数部分和整数部分都超出了范围，所以MySQL 报了一个 <code>Out of range</code> 的错误。</p><h1 id="实验八-表数据的高级查询">实验八 表数据的高级查询</h1><h2 id="一实验目的-3">一、实验目的</h2><p>本实验的目的是使学生熟练掌握 MySQL 查询分析器的使用方法，加深 SQL语言查询语句的理解。熟练掌握数据查询中的分组、统计、计算和集合的操作方法。</p><p>二、实验内容</p><p>在数据库 world 中完成以下操作。</p><p>1、查询所有国家名称及相应的城市、语言。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> co<span class="token punctuation">.</span>Name CountryName<span class="token punctuation">,</span> ci<span class="token punctuation">.</span>Name CityName<span class="token punctuation">,</span> cl<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>Language<span class="token punctuation">`</span></span><span class="token keyword">FROM</span> country co<span class="token punctuation">,</span> city ci<span class="token punctuation">,</span> countrylanguage cl<span class="token keyword">WHERE</span> co<span class="token punctuation">.</span>Code <span class="token operator">=</span> ci<span class="token punctuation">.</span>CountryCode <span class="token operator">AND</span> co<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>Code<span class="token punctuation">`</span></span> <span class="token operator">=</span> CL<span class="token punctuation">.</span>CountryCode<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>2、查询国家政体为共和国且国家人口在一千万以上的城市的名称和城市人口、所属国家。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> ci<span class="token punctuation">.</span>Name CityName<span class="token punctuation">,</span> ci<span class="token punctuation">.</span>Population<span class="token punctuation">,</span> co<span class="token punctuation">.</span>Name CountryName<span class="token keyword">FROM</span> country co<span class="token punctuation">,</span> city ci<span class="token keyword">WHERE</span>co<span class="token punctuation">.</span>GovernmentForm <span class="token operator">=</span> <span class="token string">'Republic'</span><span class="token operator">AND</span>co<span class="token punctuation">.</span>Population <span class="token operator">></span> <span class="token number">10000000</span><span class="token operator">AND</span>co<span class="token punctuation">.</span>Code <span class="token operator">=</span> ci<span class="token punctuation">.</span>CountryCode<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>3、统计 country 表中共和国政体的国家数。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> country<span class="token keyword">WHERE</span> GovernmentForm <span class="token operator">=</span> <span class="token string">'Republic'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>4、统计 country 表中共和国政体国家的平均人口。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>Population<span class="token punctuation">)</span> <span class="token keyword">FROM</span> country<span class="token keyword">WHERE</span> GovernmentForm <span class="token operator">=</span> <span class="token string">'Republic'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>按：</p><p>AVG 的使用：</p><p><code>AVG([distinct|all]x)</code></p><ul><li>[功能]：统计数据表选中行x列的平均值。</li><li>[参数]：all表示对所有的值求平均值，distinct只对不同的值求平均值，默认为 all。</li><li>如果有参数 distinct 或 all，需有空格与 x(列)隔开。</li></ul><p>5、统计 countrylanguage 表中官方语言数。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> countrylanguage<span class="token keyword">WHERE</span> IsOfficial <span class="token operator">=</span> <span class="token string">'T'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>6、分组统计 country 表中各政体的国家个数。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> GovernmentForm<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> country<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> GovernmentForm<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>7、分组统计各大洲平均每国人口数。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Continent<span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>Population<span class="token punctuation">)</span> <span class="token keyword">FROM</span> country<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> Continent<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>8、查询有超过两条城市记录的国家的名称。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> co<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>num <span class="token keyword">FROM</span>country co<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> CountryCode<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> num <span class="token keyword">FROM</span> city<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> CountryCode<span class="token punctuation">)</span> tmp<span class="token keyword">WHERE</span>co<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>Code<span class="token punctuation">`</span></span> <span class="token operator">=</span> tmp<span class="token punctuation">.</span>CountryCode<span class="token operator">AND</span> tmp<span class="token punctuation">.</span>num <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>9、查询非共和政体的国家的名称和政体。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Name<span class="token punctuation">,</span> GovernmentForm<span class="token keyword">FROM</span> country<span class="token keyword">WHERE</span>GovernmentForm <span class="token operator">!=</span> <span class="token string">'Republic'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>10、查询独立年份未知的国家的缩写和名称。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Code<span class="token punctuation">,</span> Name<span class="token keyword">FROM</span> country<span class="token keyword">WHERE</span> IndepYear <span class="token operator">is</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>11、查询欧洲国民生产总值 GNP 排名前 20 的国家名称及 GNP 值。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Name<span class="token punctuation">,</span> GNP<span class="token keyword">FROM</span> country<span class="token keyword">WHERE</span> Continent <span class="token operator">=</span> <span class="token string">'Europe'</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> GNP <span class="token keyword">DESC</span><span class="token keyword">LIMIT</span> <span class="token number">20</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>12、查询平均每国人口数高于非洲的大洲名称及该平均数，以平均数的降序排列。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> Continent<span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>Population<span class="token punctuation">)</span> <span class="token keyword">AS</span> avgPopulation <span class="token keyword">FROM</span> countryGROUP <span class="token keyword">BY</span> Continent<span class="token punctuation">)</span> <span class="token keyword">AS</span> tmp<span class="token keyword">WHERE</span> avgPopulation <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> avgPopulation <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> Continent<span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>Population<span class="token punctuation">)</span> <span class="token keyword">AS</span> avgPopulation <span class="token keyword">FROM</span> country <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> Continent<span class="token punctuation">)</span> <span class="token keyword">AS</span> tmp <span class="token keyword">WHERE</span> Continent <span class="token operator">=</span> <span class="token string">'Africa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>13、查询 city 表中多于 3 个城市记录且缩写以 “A”开头的国家的名称和城市平均人口，以平均人口的升序排列。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> tmp2<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>ci<span class="token punctuation">.</span>Population<span class="token punctuation">)</span> <span class="token keyword">AS</span> avgPopulation <span class="token keyword">FROM</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> co<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> co<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>Code<span class="token punctuation">`</span></span><span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>num <span class="token keyword">FROM</span>country co<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> CountryCode<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> num <span class="token keyword">FROM</span> city<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> CountryCode<span class="token punctuation">)</span> tmp<span class="token keyword">WHERE</span>co<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>Code<span class="token punctuation">`</span></span> <span class="token operator">=</span> tmp<span class="token punctuation">.</span>CountryCode<span class="token operator">AND</span> tmp<span class="token punctuation">.</span>num <span class="token operator">></span> <span class="token number">3</span><span class="token operator">AND</span> co<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>Code<span class="token punctuation">`</span></span> <span class="token operator">REGEXP</span> <span class="token string">'^A'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> tmp2<span class="token punctuation">,</span> city ci<span class="token keyword">WHERE</span> tmp2<span class="token punctuation">.</span>Code <span class="token operator">=</span> ci<span class="token punctuation">.</span>CountryCode<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> tmp2<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>Name<span class="token punctuation">`</span></span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> avgPopulation<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="三课后练习题-3">三、课后练习题</h2><p>1、建立名为 SPJ 的数据库。它包括 S、P、J、SPJ 4 个关系模式：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">S(SNO,SNAME,STATUS,CITY);P(PNO,PNAME,COLOR,WEIGHT);J(JNO,JNAME,CITY);SPJ(SNO,PNO,JNO,QTY)</code></pre></div></figure><ul><li>供应商表 S由供应商代码（SNO）、供应商姓名（SNAME）、供应商状态（STATUS）、供应商所在城市（CITY）组成；</li><li>零件表 P由零件代码(PNO)、零件名(PNAME)、颜色(COLOR)、重量(WEIGHT)组成；</li><li>工程项目表 J由工程项目代码(JNO)、工程项目名(JNAME)、工程项目所在城市(CITY)组成；</li><li>供应情况表 SPJ由供应商代码(SNO)、零件代码(PNO)、工程项目代码(JNO)、供应数量(QTY)组成，标识某供应商供应某种零件 给某工程项目的数量为QTY。</li></ul><p>今有若干数据如下：</p><p><img src="https://i.imgur.com/otJjaxI.png" /></p><p><img src="https://i.imgur.com/LKZjkcF.png" /></p><p><img src="https://i.imgur.com/5fXPka8.png" /></p><p><img src="https://i.imgur.com/lYAPmvc.png" /></p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Table structure for `j`</span><span class="token comment">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>j<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>j<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>JNO<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>JNAME<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>CITY<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>JNO<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Records of j</span><span class="token comment">-- ----------------------------</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>j<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'J1'</span><span class="token punctuation">,</span> <span class="token string">'三建'</span><span class="token punctuation">,</span> <span class="token string">'北京'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>j<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'J2'</span><span class="token punctuation">,</span> <span class="token string">'一汽'</span><span class="token punctuation">,</span> <span class="token string">'长春'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>j<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'J3'</span><span class="token punctuation">,</span> <span class="token string">'弹簧厂'</span><span class="token punctuation">,</span> <span class="token string">'天津'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>j<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'J4'</span><span class="token punctuation">,</span> <span class="token string">'造船厂'</span><span class="token punctuation">,</span> <span class="token string">'天津'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>j<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'J5'</span><span class="token punctuation">,</span> <span class="token string">'机车厂'</span><span class="token punctuation">,</span> <span class="token string">'唐山'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>j<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'J6'</span><span class="token punctuation">,</span> <span class="token string">'无线电厂'</span><span class="token punctuation">,</span> <span class="token string">'常州'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>j<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'J7'</span><span class="token punctuation">,</span> <span class="token string">'半导体厂'</span><span class="token punctuation">,</span> <span class="token string">'南京'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Table structure for `p`</span><span class="token comment">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>p<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>p<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>PNO<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>PNAME<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>COLOR<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>WEIGHT<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>PNO<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Records of p</span><span class="token comment">-- ----------------------------</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>p<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'P1'</span><span class="token punctuation">,</span> <span class="token string">'螺母'</span><span class="token punctuation">,</span> <span class="token string">'红'</span><span class="token punctuation">,</span> <span class="token string">'12'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>p<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'P2'</span><span class="token punctuation">,</span> <span class="token string">'螺栓'</span><span class="token punctuation">,</span> <span class="token string">'绿'</span><span class="token punctuation">,</span> <span class="token string">'17'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>p<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'P3'</span><span class="token punctuation">,</span> <span class="token string">'螺丝刀'</span><span class="token punctuation">,</span> <span class="token string">'蓝'</span><span class="token punctuation">,</span> <span class="token string">'14'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>p<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'P4'</span><span class="token punctuation">,</span> <span class="token string">'螺丝刀'</span><span class="token punctuation">,</span> <span class="token string">'红'</span><span class="token punctuation">,</span> <span class="token string">'14'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>p<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'P5'</span><span class="token punctuation">,</span> <span class="token string">'凸轮'</span><span class="token punctuation">,</span> <span class="token string">'蓝'</span><span class="token punctuation">,</span> <span class="token string">'40'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>p<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'P6'</span><span class="token punctuation">,</span> <span class="token string">'齿轮'</span><span class="token punctuation">,</span> <span class="token string">'红'</span><span class="token punctuation">,</span> <span class="token string">'30'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Table structure for `s`</span><span class="token comment">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>s<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>s<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>SNO<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>SNAME<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>STATUS<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>CITY<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>SNO<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Records of s</span><span class="token comment">-- ----------------------------</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>s<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'S1'</span><span class="token punctuation">,</span> <span class="token string">'精益'</span><span class="token punctuation">,</span> <span class="token string">'20'</span><span class="token punctuation">,</span> <span class="token string">'天津'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>s<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'S2'</span><span class="token punctuation">,</span> <span class="token string">'盛锡'</span><span class="token punctuation">,</span> <span class="token string">'10'</span><span class="token punctuation">,</span> <span class="token string">'北京'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>s<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'S3'</span><span class="token punctuation">,</span> <span class="token string">'东方红'</span><span class="token punctuation">,</span> <span class="token string">'30'</span><span class="token punctuation">,</span> <span class="token string">'北京'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>s<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'S4'</span><span class="token punctuation">,</span> <span class="token string">'丰泰盛'</span><span class="token punctuation">,</span> <span class="token string">'20'</span><span class="token punctuation">,</span> <span class="token string">'天津'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>s<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'S5'</span><span class="token punctuation">,</span> <span class="token string">'为民'</span><span class="token punctuation">,</span> <span class="token string">'30'</span><span class="token punctuation">,</span> <span class="token string">'上海'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Table structure for `spj`</span><span class="token comment">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>spj<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>spj<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>SNO<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>PNO<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>JNO<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>QTY<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>SNO<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>PNO<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>JNO<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>PNO<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>PNO<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>JNO<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>JNO<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">CONSTRAINT</span> <span class="token identifier"><span class="token punctuation">`</span>spj_ibfk_1<span class="token punctuation">`</span></span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>SNO<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token identifier"><span class="token punctuation">`</span>s<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>SNO<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">CONSTRAINT</span> <span class="token identifier"><span class="token punctuation">`</span>spj_ibfk_2<span class="token punctuation">`</span></span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>PNO<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token identifier"><span class="token punctuation">`</span>p<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>PNO<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">CONSTRAINT</span> <span class="token identifier"><span class="token punctuation">`</span>spj_ibfk_3<span class="token punctuation">`</span></span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>JNO<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token identifier"><span class="token punctuation">`</span>j<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>JNO<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Records of spj</span><span class="token comment">-- ----------------------------</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>spj<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'S1'</span><span class="token punctuation">,</span> <span class="token string">'P1'</span><span class="token punctuation">,</span> <span class="token string">'J1'</span><span class="token punctuation">,</span> <span class="token string">'200'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>spj<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'S1'</span><span class="token punctuation">,</span> <span class="token string">'P1'</span><span class="token punctuation">,</span> <span class="token string">'J3'</span><span class="token punctuation">,</span> <span class="token string">'100'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>spj<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'S1'</span><span class="token punctuation">,</span> <span class="token string">'P1'</span><span class="token punctuation">,</span> <span class="token string">'J4'</span><span class="token punctuation">,</span> <span class="token string">'700'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>spj<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'S2'</span><span class="token punctuation">,</span> <span class="token string">'P3'</span><span class="token punctuation">,</span> <span class="token string">'J1'</span><span class="token punctuation">,</span> <span class="token string">'100'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>spj<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'S2'</span><span class="token punctuation">,</span> <span class="token string">'P3'</span><span class="token punctuation">,</span> <span class="token string">'J2'</span><span class="token punctuation">,</span> <span class="token string">'400'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>spj<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'S2'</span><span class="token punctuation">,</span> <span class="token string">'P3'</span><span class="token punctuation">,</span> <span class="token string">'J3'</span><span class="token punctuation">,</span> <span class="token string">'200'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>spj<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'S2'</span><span class="token punctuation">,</span> <span class="token string">'P3'</span><span class="token punctuation">,</span> <span class="token string">'J4'</span><span class="token punctuation">,</span> <span class="token string">'500'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>spj<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'S2'</span><span class="token punctuation">,</span> <span class="token string">'P3'</span><span class="token punctuation">,</span> <span class="token string">'J5'</span><span class="token punctuation">,</span> <span class="token string">'400'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>spj<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'S2'</span><span class="token punctuation">,</span> <span class="token string">'P5'</span><span class="token punctuation">,</span> <span class="token string">'J1'</span><span class="token punctuation">,</span> <span class="token string">'400'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>spj<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'S2'</span><span class="token punctuation">,</span> <span class="token string">'P5'</span><span class="token punctuation">,</span> <span class="token string">'J2'</span><span class="token punctuation">,</span> <span class="token string">'100'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>spj<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'S3'</span><span class="token punctuation">,</span> <span class="token string">'P1'</span><span class="token punctuation">,</span> <span class="token string">'J1'</span><span class="token punctuation">,</span> <span class="token string">'200'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>spj<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'S3'</span><span class="token punctuation">,</span> <span class="token string">'P3'</span><span class="token punctuation">,</span> <span class="token string">'J1'</span><span class="token punctuation">,</span> <span class="token string">'200'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>spj<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'S4'</span><span class="token punctuation">,</span> <span class="token string">'P5'</span><span class="token punctuation">,</span> <span class="token string">'J1'</span><span class="token punctuation">,</span> <span class="token string">'100'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>spj<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'S4'</span><span class="token punctuation">,</span> <span class="token string">'P6'</span><span class="token punctuation">,</span> <span class="token string">'J3'</span><span class="token punctuation">,</span> <span class="token string">'300'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>spj<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'S4'</span><span class="token punctuation">,</span> <span class="token string">'P6'</span><span class="token punctuation">,</span> <span class="token string">'J4'</span><span class="token punctuation">,</span> <span class="token string">'200'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>spj<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'S5'</span><span class="token punctuation">,</span> <span class="token string">'P2'</span><span class="token punctuation">,</span> <span class="token string">'J4'</span><span class="token punctuation">,</span> <span class="token string">'100'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>spj<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'S5'</span><span class="token punctuation">,</span> <span class="token string">'P3'</span><span class="token punctuation">,</span> <span class="token string">'J1'</span><span class="token punctuation">,</span> <span class="token string">'200'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>spj<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'S5'</span><span class="token punctuation">,</span> <span class="token string">'P6'</span><span class="token punctuation">,</span> <span class="token string">'J2'</span><span class="token punctuation">,</span> <span class="token string">'200'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>spj<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'S5'</span><span class="token punctuation">,</span> <span class="token string">'P6'</span><span class="token punctuation">,</span> <span class="token string">'J4'</span><span class="token punctuation">,</span> <span class="token string">'500'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>第 2～8 题在数据库 SPJ 中完成。</p><p>2、查询重量最轻的零件的零件代码。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> PNO <span class="token keyword">FROM</span> p<span class="token keyword">WHERE</span> WEIGHT <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>WEIGHT<span class="token punctuation">)</span> <span class="token keyword">FROM</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/iELSDHx.png" /></p><p>3、查询由供应商 S1 提供零件的工程项目名。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> JNAME <span class="token keyword">FROM</span>spj <span class="token keyword">AS</span> T1<span class="token punctuation">,</span> j <span class="token keyword">AS</span> T2<span class="token keyword">WHERE</span> T1<span class="token punctuation">.</span>SNO <span class="token operator">=</span> <span class="token string">'S1'</span><span class="token operator">AND</span> T1<span class="token punctuation">.</span>JNO <span class="token operator">=</span> T2<span class="token punctuation">.</span>JNO<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/DzH5p20.png" /></p><p>4、查询同时为工程 J1 和 J2 提供零件的供应商代码。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> SNO <span class="token keyword">FROM</span> spj <span class="token keyword">WHERE</span> JNO <span class="token operator">=</span> <span class="token string">'J1'</span> <span class="token operator">AND</span> SNO <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> SNO <span class="token keyword">FROM</span> spj <span class="token keyword">WHERE</span> JNO <span class="token operator">=</span> <span class="token string">'J2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/MTvWbaZ.png" /></p><p>5、查询为位于天津的工程提供零件的供应商代码。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> SNO <span class="token keyword">FROM</span> spj<span class="token keyword">WHERE</span> JNO <span class="token operator">IN</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> JNO <span class="token keyword">FROM</span> j<span class="token keyword">WHERE</span> CITY <span class="token operator">=</span> <span class="token string">'天津'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/ykaGQhd.png" /></p><p>6、查询同时为位于天津或北京的工程提供红色零件的供应商代码。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> SNO <span class="token keyword">FROM</span> spj<span class="token keyword">WHERE</span> JNO <span class="token operator">IN</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> JNO <span class="token keyword">FROM</span> j<span class="token keyword">WHERE</span> CITY <span class="token operator">=</span> <span class="token string">'天津'</span><span class="token punctuation">)</span><span class="token operator">AND</span> SNO <span class="token operator">IN</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> SNO <span class="token keyword">FROM</span> spj<span class="token keyword">WHERE</span> JNO <span class="token operator">IN</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> JNO <span class="token keyword">FROM</span> j<span class="token keyword">WHERE</span> CITY <span class="token operator">=</span> <span class="token string">'北京'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">AND</span> PNO <span class="token operator">IN</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> PNO <span class="token keyword">FROM</span> p<span class="token keyword">WHERE</span> COLOR <span class="token operator">=</span> <span class="token string">'红'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/5L9iEfE.png" /></p><p>7、查询供应商和工程所在城市相同的供应商能提供的零件代码。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> PNO<span class="token keyword">FROM</span> spj<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> J<span class="token keyword">ON</span> J<span class="token punctuation">.</span>JNO <span class="token operator">=</span> spj<span class="token punctuation">.</span>JNO<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> S<span class="token keyword">ON</span> S<span class="token punctuation">.</span>SNO <span class="token operator">=</span> spj<span class="token punctuation">.</span>SNO<span class="token keyword">WHERE</span> S<span class="token punctuation">.</span>CITY <span class="token operator">=</span> J<span class="token punctuation">.</span>CITY<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> spj<span class="token punctuation">.</span>PNO<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/VGMk2ko.png" /></p><p>8、查询上海供应商不提供任何零件的工程代码。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> spj<span class="token punctuation">.</span>JNO<span class="token keyword">FROM</span> spj<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> S<span class="token keyword">ON</span> S<span class="token punctuation">.</span>SNO <span class="token operator">=</span> spj<span class="token punctuation">.</span>SNO<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> spj<span class="token punctuation">.</span>JNO<span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> S<span class="token punctuation">.</span>CITY <span class="token operator">=</span><span class="token string">'上海'</span> <span class="token keyword">THEN</span> <span class="token string">'1'</span> <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/eDtKOBf.png" /></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>matplotlib 绘制更加清晰（分辨率更高）的图像</title>
    <link href="/2021/11/24/matplotlib-%E7%BB%98%E5%88%B6%E6%9B%B4%E5%8A%A0%E6%B8%85%E6%99%B0%EF%BC%88%E5%88%86%E8%BE%A8%E7%8E%87%E6%9B%B4%E9%AB%98%EF%BC%89%E7%9A%84%E5%9B%BE%E5%83%8F/"/>
    <url>/2021/11/24/matplotlib-%E7%BB%98%E5%88%B6%E6%9B%B4%E5%8A%A0%E6%B8%85%E6%99%B0%EF%BC%88%E5%88%86%E8%BE%A8%E7%8E%87%E6%9B%B4%E9%AB%98%EF%BC%89%E7%9A%84%E5%9B%BE%E5%83%8F/</url>
    
    <content type="html"><![CDATA[<p>这里主要是采用设置图像 dpi(dots per inch) 的方法，matplot 默认的 dpi是 100，一般拉私活，我们将 dpi 设置成 300就差不多了，如果想获得更加清晰的图像，我们也可以设置 600、1200等这样的大数值。</p><p>下面是一个示例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltx <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token number">1.5</span>c <span class="token operator">=</span> <span class="token number">2</span>y <span class="token operator">=</span> m<span class="token operator">*</span>x <span class="token operator">+</span> cplt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"y=mx+c"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'x-axis'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'y-axis'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">"High resoltion.png"</span><span class="token punctuation">,</span>dpi<span class="token operator">=</span><span class="token number">1200</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>输出的图像效果如下：</p><p><img src="https://i.imgur.com/80qYOvc.png" /></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>三种常见的 Cache 地址映射及地址变换方法</title>
    <link href="/2021/11/23/%E4%B8%89%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84-Cache-%E5%9C%B0%E5%9D%80%E6%98%A0%E5%B0%84%E5%8F%8A%E5%9C%B0%E5%9D%80%E5%8F%98%E6%8D%A2%E6%96%B9%E6%B3%95/"/>
    <url>/2021/11/23/%E4%B8%89%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84-Cache-%E5%9C%B0%E5%9D%80%E6%98%A0%E5%B0%84%E5%8F%8A%E5%9C%B0%E5%9D%80%E5%8F%98%E6%8D%A2%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="主存与-cache-之间的映射方式">主存与 Cache 之间的映射方式</h1><ul><li>地址映射：将主存地址变换成 Cache 地址的方法</li><li>地址映射的作用：<ul><li>CPU 访问主存时，主存地址变换成 Cache 地址，从而查找 Cache。</li></ul></li><li>地址映射的实现：<ul><li>硬件实现，对软件人员（包括程序员和系统程序员）透明</li></ul></li><li>三种地址映射方法：<ul><li>全相联</li><li>直接相联</li><li>组相联</li></ul></li></ul><h1 id="全相联映射">1. 全相联映射</h1><p><img src="https://i.imgur.com/ImD1688.png" /></p><ul><li>主存分块，Cache 分行，包含相同数量的字</li><li></li></ul><h1 id="直接映射">2. 直接映射</h1><p><img src="https://i.imgur.com/W4XSIqo.png" /></p>]]></content>
    
    
    <categories>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《算法竞赛入门经典（第 2 版》阅读札记</title>
    <link href="/2021/11/22/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8%EF%BC%88%E7%AC%AC-2-%E7%89%88%E3%80%8B%E9%98%85%E8%AF%BB%E6%9C%AD%E8%AE%B0/"/>
    <url>/2021/11/22/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8%EF%BC%88%E7%AC%AC-2-%E7%89%88%E3%80%8B%E9%98%85%E8%AF%BB%E6%9C%AD%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="第-3-章-数组和字符串">第 3 章 数组和字符串</h1><blockquote><p><code>fgetc(fin)</code>；<code>fgetc(stdin)</code> 等价于<code>getchar()</code>，即从标准输入读取一个字符。</p></blockquote><p>按：</p><p>这里有一点要说明，从终端设备读有一个特点，用户输入一般字符并不会使<code>getchar</code>函数返回，而是仍然阻塞着，只有当用户输入回车或者文件结束标志时<code>getchar</code>才返回。这个特性取决于终端的工作模式，终端可以配置成一次输入一行的模式，也可以配置一次输入一个字符的模式，默认是一次输入一行的模式。</p><p>参考：Linux C 25.2.5</p>]]></content>
    
    
    <categories>
      
      <category>读书</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书</tag>
      
      <tag>专业书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象系统分析与设计作业一</title>
    <link href="/2021/11/22/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E4%BD%9C%E4%B8%9A%E4%B8%80/"/>
    <url>/2021/11/22/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E4%BD%9C%E4%B8%9A%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<blockquote><p>1. 讨论下列 4 类事物, 每类有哪些共同的属性(或描述值)和行为(或操作),在每个类上添加更多的事物.</p></blockquote><ul><li><ol type="a"><li>显微镜/望远镜/眼镜/瞄准镜/</li></ol></li><li><ol start="2" type="a"><li>自行车/卡车/飞机/摩托车/马</li></ol></li><li><ol start="3" type="a"><li>帐篷/宿舍/工棚/摩天大楼</li></ol></li><li><ol start="4" type="a"><li>手机/服务器/台式机/便携计算机</li></ol></li></ul><p>答：</p><ul><li><ol type="a"><li>显微镜/望远镜/眼镜/瞄准镜/</li></ol><ul><li>共同的属性：镜片、镜框</li><li>共同的行为：将景物映射到人的眼中，变换取景效果</li><li>添加：放大镜、护目镜</li></ul></li><li><ol start="2" type="a"><li>自行车/卡车/飞机/摩托车/马</li></ol><ul><li>共同的属性：速度、使用年限</li><li>共同的行为：载人、载物</li><li>添加：轮船、电动车</li></ul></li><li><ol start="3" type="a"><li>帐篷/宿舍/工棚/摩天大楼</li></ol><ul><li>共同的属性：面积、位置</li><li>共同的行为：供人居留</li><li>添加：小区楼、茅草屋</li></ul></li><li><ol start="4" type="a"><li>手机/服务器/台式机/便携计算机</li></ol><ul><li>共同的属性：处理器、性能、价格</li><li>共同的行为：提供计算服务</li><li>添加：单片机</li></ul></li></ul><blockquote><p>2. 当几个独立系统要确定同一对象时, 就会出现问题. 例如,机动车辆管理部门/保险公司/银行/警察可能都需要识别某台机动车.讨论使用以下识别方法的好处和或不足.</p></blockquote><ul><li><ol type="a"><li>根据车辆的拥有者识别;</li></ol></li><li><ol start="2" type="a"><li>根据厂商/模型编号/年份等属性确定;</li></ol></li><li><ol start="3" type="a"><li>使用由厂商分配给汽车的车辆识别号(VIN);</li></ol></li><li><ol start="4" type="a"><li>使用有关管理部门内部生成的ID.</li></ol></li></ul><p>答：</p><ul><li><ol type="a"><li>根据车辆的拥有者识别;</li></ol><ul><li>好处：查找人物相较于查找车，更加容易</li><li>不足：人物拥有多辆车的时候不好确定</li></ul></li><li><ol start="2" type="a"><li>根据厂商/模型编号/年份等属性确定;</li></ol><ul><li>好处：能唯一确定一辆车</li><li>不足：这类信息一般没有专门的数据库保存，不易查找</li></ul></li><li><ol start="3" type="a"><li>使用由厂商分配给汽车的车辆识别号(VIN);</li></ol><ul><li>好处：数据易于查找</li><li>不足：所有者可能会偷换车辆识别号</li></ul></li><li><ol start="4" type="a"><li>使用有关管理部门内部生成的 ID.</li></ol><ul><li>好处：数据易于获取和查找</li><li>不足：现实中变数太大，ID 可能没有及时更新而导致 ID 对应不上车辆</li></ul></li></ul><p><strong>参考答案</strong>：</p><p>选择c。因为是车辆的内在的固有属性，并且具有唯一性。所以应该选择这个。</p><blockquote><p>3. 所有的对象都有标识, 都可以辨别. 考察一张商品的购买发票, 如图所示,其中对买方和卖方分别采用了哪些标识, 这些标识如何设计的? 例如:购买方名称:"华中科技大学"字符串, 购买方名称全称.</p></blockquote><p><img src="https://i.imgur.com/sOXQFNc.png" /></p><p>答：</p><p>对买方：</p><ul><li>买方：“华中科技大学”，购买方名称全称；</li><li>纳税人识别号：“12100000441626842D”，购买方纳税识别号码；</li><li>地址、电话：空，购买方的地址和电话；</li><li>开户行及账号：空，购买方开户的银行及账号。</li></ul><p>对卖方（销售方）：</p><ul><li>名称：“四川金创越贸易有限公司”，销售方名称全称；</li><li>纳税人识别号：“91510000767291042W”，销售方纳税人识别号码；</li><li>地址、电话：“四川成都市武侯区一环路南二段十五号028-85482280”，销售方具体地址和电话；</li><li>开户行及账号：“成都银行洗面桥支行03042003219726800016”，销售方的开户银行及账号。</li></ul><blockquote><p>4. 绘制一个类模型来描述无向图. 无向图由一组顶点和边组成.边连接顶点对. 包括顶点的名称和位置, 边的名称/宽度和颜色. 类似的,绘制一个类模型来描述有向图, 有向图的边是有方向的.</p></blockquote><p>解：</p><p><img src="https://i.imgur.com/k9q2BHQ.png" /></p><p><img src="https://i.imgur.com/4b1Nuji.png" /></p><blockquote><p>5. 为哲学家就餐问题绘制一个类图. 圆桌周围有 5 位哲学家, 5 把餐叉.每位哲学家可以使用两把餐叉, 一边一把. 每把餐叉可以被两位哲学家使用.每把餐叉要么放在桌上, 要么正在被哲学家使用.哲学家必须用两把餐叉才能吃饭.</p></blockquote><p>解：</p><p><img src="https://i.imgur.com/63y7gjz.png" /></p>]]></content>
    
    
    <categories>
      
      <category>作业</category>
      
    </categories>
    
    
    <tags>
      
      <tag>作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>十进制小数转二进制小数</title>
    <link href="/2021/11/20/%E5%8D%81%E8%BF%9B%E5%88%B6%E5%B0%8F%E6%95%B0%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%B0%8F%E6%95%B0/"/>
    <url>/2021/11/20/%E5%8D%81%E8%BF%9B%E5%88%B6%E5%B0%8F%E6%95%B0%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%B0%8F%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>转自：<a href="https://www.cnblogs.com/xkfz007/articles/2590472.html"class="uri">https://www.cnblogs.com/xkfz007/articles/2590472.html</a></p><ul><li>十进制小数转换成二进制小数采用“乘 2 取整，顺序排列”法。</li><li>具体做法是：用 2 乘十进制小数，可以得到积，将积的整数部分取出，再用2乘余下的小数部分，又得到一个积，再将积的整数部分取出，如此进行，直到积中的小数部分为零，或者达到所要求的精度为止。</li><li>最后把取出的整数部分按顺序排列起来，先取的整数作为二进制小数的高位有效位，后取的整数作为低位有效位。</li></ul><p>如：0.625 = (0.101)B</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">0.625 * 2 = 1.25 ====== 取出整数部分 1 0.25 * 2 = 0.5 ======== 取出整数部分 0 0.5 * 2 = 1 ========== 取出整数部分 1 </code></pre></div></figure><p>再如：0.7 = (0.1011 0011 0...)B</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">0.7 * 2 = 1.4 ======== 取出整数部分 1 0.4 * 2 = 0.8 ======== 取出整数部分 0 0.8 * 2 = 1.6 ======== 取出整数部分 1 0.6 * 2 = 1.2 ======== 取出整数部分 1 0.2 * 2 = 0.4 ======== 取出整数部分 0　 0.4 * 2 = 0.8 ======== 取出整数部分 0 0.8 * 2 = 1.6 ======== 取出整数部分 1 0.6 * 2 = 1.2 ======== 取出整数部分 1 0.2 * 2 = 0.4 ======== 取出整数部分 0</code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机组成原理</tag>
      
      <tag>转载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机组成原理考试复习</title>
    <link href="/2021/11/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A0/"/>
    <url>/2021/11/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>考完回忆：那个字位扩展设计芯片的题目，地址范围我给计算错了，希望老师手下留情。另外，RISC和 CISC这两个本来考试之前时有打算看的，可是最后给整忘了，只能凭借记忆来写了。</p><h1 id="第一章-计算机系统概论">第一章 计算机系统概论</h1><blockquote><p>世界上第一台电子计算机 ENIAC（1946）</p></blockquote><blockquote><p>计算机的分类？</p></blockquote><ol type="1"><li>总体分为电子模拟计算机和电子数字计算机。</li><li>电子数字计算机又可以分为通用计算机和专用计算机。</li><li>通用计算机又可以分为：巨型机、大型机、中型机、小型机、微型机和单片机。</li></ol><blockquote><p>冯·诺伊曼认为计算机由哪五部分组成？</p></blockquote><ul><li>运算器</li><li>控制器</li><li>存储器</li><li>输入设备</li><li>输出设备</li></ul><blockquote><p>何为通道？</p></blockquote><p>一种专用部件，负责外部设备与内存之间信息的传输。</p><blockquote><p>何为中断？</p></blockquote><p>主机接到信号（来自 CPU 外部或内部）时，立即中止原来的工作，转去处理这一事件，处理完后，主机又回到原来工作点继续工作。</p><blockquote><p>多道运行的特征？</p></blockquote><ul><li>多道</li><li>保护</li><li>宏观并行，微观串行</li></ul><blockquote><p>PC 和 IR 寄存器的功能？</p></blockquote><ul><li>PC：存放下一条要执行的指令的地址，具有计数功能 <spanclass="math inline">\((PC) + 1 \rightarrow PC\)</span></li><li>存放当前欲执行的指令</li></ul><blockquote><p>何为时钟周期？</p></blockquote><p>又称为节拍周期或 T周期,是时钟频率的倒数。是处理器操作最基本的时间单位。例如，主频为 1GHz的 CPU 的时钟周期为 1ns。</p><p>按：</p><ul><li>时钟周期的定义其实应该是一个时钟脉冲所需要的时间。频率就是 1s内可以产生的时钟脉冲数量。</li><li>时钟频率应该表述为：<span class="math inline">\(f =\frac{1}{T}\)</span>，分子的 1 表示 1 秒钟。</li><li>从时钟频率转换成时钟周期应该是这样：<span class="math inline">\(T =\frac{1}{f} \times 1\)</span>，后面乘的 1 表示 1 秒钟，而前面的分子的 1表示占比。（f 个时钟周期中分出一个然后乘以 1 秒钟）</li></ul><blockquote><p>何为 <span class="math inline">\(CPI\)</span> 和 <spanclass="math inline">\(CPI_i\)</span>？</p></blockquote><ul><li>CPI：表示执行每条指令（一个程序中的所有指令）所需要的平均时钟周期数。</li><li><spanclass="math inline">\(CPI_i\)</span>：表示执行每条指令（一类指令中的所有指令）所需要的平均时钟周期数。</li></ul><p><span class="math display">\[CPI = 一个程序的 CPU 时钟周期数 ÷ 程序指令数量\]</span></p><p>设程序中每类指令的使用频度为 <spanclass="math inline">\(P_i\)</span>，每类指令的 <spanclass="math inline">\(CPI\)</span> 为 <spanclass="math inline">\(CPI_i\)</span>，每类指令的条数为 <spanclass="math inline">\(IC_i\)</span>，程序中的总指令条数为 <spanclass="math inline">\(IC\)</span>，则，程序的 <spanclass="math inline">\(CPI\)</span> 可用下列公式计算：</p><p><span class="math display">\[CPI = \sum_{i = i}^{n} (CPI_i \times P_i)\]</span></p><p><span class="math display">\[CPI = \sum_{i = 1}^{n} (CPI_i \times \frac{IC_i}{IC})\]</span></p><blockquote><p>何为 CPU 执行时间？</p></blockquote><p>是指 CPU 计算某个任务所花费的时间，不包括 I/O访问时的等待时间等。</p><p>CPU 执行时间 = CPU 时钟周期总数 × 时钟周期 = (指令条数 × CPI) ×时钟周期</p><p>CPU 执行时间 = CPU 时钟周期总数 / 时钟频率 = (指令条数 × CPI) /时钟频率</p><p>CPI = 一个程序的 CPU 时钟周期数 ÷ 程序指令数量</p><p>CPU 执行时间 = CPU 时钟周期总数 / 时钟频率</p><blockquote><p>何为 MIPS？</p></blockquote><p>是指 CPU 每秒可以执行的百万条机器指令数。</p><p>MIPS = 指令数 ÷ (程序执行的时间 <spanclass="math inline">\(\times\)</span> <spanclass="math inline">\(10^6\)</span>) = 时钟频率 ÷ (CPI <spanclass="math inline">\(\times\)</span> <spanclass="math inline">\(10^6\)</span>)</p><p>推导：</p><p><span class="math display">\[\begin{split}MIPS &amp;= \frac{指令数}{CPU 执行时间 \times 10^6 \quad \;} \\&amp;= \frac{指令数}{(CPU 时钟周期总数 / f) \times 10^6 \qquad} \\&amp;= \frac{f}{CPI \times 10^6}\end{split}\]</span></p><h1 id="第二章-计算机中的数据表示方法">第二章计算机中的数据表示方法</h1><blockquote><p>原码、反码、补码、移码相关？</p></blockquote><ul><li><ahref="https://fanlumaster.github.io/2021/09/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%A0%81%E3%80%81%E5%8F%8D%E7%A0%81%E5%92%8C%E8%A1%A5%E7%A0%81/">原码、反码、补码</a></li><li><ahref="https://fanyfull.github.io/2021/09/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%BB%E7%A0%81/">补码</a></li></ul><blockquote><p>如何理解定点数？</p></blockquote><p><img src="https://i.imgur.com/u08AVxQ.png" /></p><p>这张图其实是有点问题的，小数点不应该被显示出来，因为这会让人误解的。</p><p>所谓定点数，就是指小数的位置是固定的：</p><ul><li>对于小数，小数点的位置是在 <span class="math inline">\(X_1\)</span>的前面，<span class="math inline">\(X_0\)</span> 表示符号位；</li><li>对于整数，小数点的位置是在 <span class="math inline">\(X_n\)</span>的后面，<span class="math inline">\(X_0\)</span> 还是表示符号位。</li></ul><p>定点小数表示数的范围：</p><p><span class="math display">\[1 - 2^n \geqslant |x| \geqslant 2^{-n}\]</span></p><p>定点整数表示数的范围：</p><p><span class="math display">\[2^n - 1 \geqslant |x| \geqslant 1\]</span></p><blockquote><p>如何理解 IEEE754 标准浮点数？</p></blockquote><ul><li><ahref="https://fanyfull.github.io/2021/09/28/%E6%B5%AE%E7%82%B9%E6%95%B0%E4%B8%8E-IEEE754-%E6%A0%87%E5%87%86%E6%B5%AE%E7%82%B9%E6%95%B0/">IEEE754</a></li></ul><blockquote><p>浮点数的规格化？</p></blockquote><p>在浮点运算过程中，为了保证数据的精度，要求尾数的最高位为非 0数，即当尾数不为零时，其绝对值应大于或等于 <spanclass="math inline">\((1/2)_10\)</span>。</p><p>以补码表示为例，正数规格化后，尾数的形式为：</p><p><span class="math display">\[0.1xx \cdots x\]</span></p><p>负数规格化后，尾数的形式为：</p><p><span class="math display">\[1.0xx \cdots 1\]</span></p><blockquote><p>如何理解码距？</p></blockquote><ul><li>将一组编码中任何两个合法编码之间代码不同的最小位数称为这编码的距离，简称码距或海明距离。</li><li>四位二进制编码 0011 与 0001 的码距为 1；而 0011 与 0000两组编码的距离为 2。按：只有两个，所以任何两个合法编码之间代码不同的最小位数就是这两个编码的不同的位数。</li><li>若用四位二进制编码只表示0000、0011、0101、0110、1111、1001、1010、1100 等八种编码，则码距为2。此时，这 8 种编码中的任何一位发生改变，如 0000 变成 1000就从有效编码变成了无效编码，容易检测到这种错误。按：这里的码距指的是取这一组中任何两个编码之间的最小“距离”。</li></ul><p>这里的码距，有些地方叫做最小码距，而码距则是指两个编码之间的的不同位数。</p><h1 id="第三章-运算方法与运算器">第三章 运算方法与运算器</h1><blockquote><p>何为变形补码？</p></blockquote><p><span class="math display">\[[X]_{补} =\left\{\begin{matrix}\begin{aligned}&amp;X &amp; 0 &amp; \leqslant X &lt; 2 \\&amp; &amp; &amp; &amp; mod \; 4 \\&amp;4 + X &amp; -2 &amp; \leqslant X &lt; 0 \\\end{aligned}\end{matrix}\right.\]</span></p><p>此时，</p><p><span class="math display">\[[X]_{补} = X_{f1} X_{f2}.X_1 X_2 X_3 ... X_n\]</span></p><p>对于变形补码，其溢出的检测为：</p><ul><li>上溢：双符号位为 01</li><li>下溢：双符号位为 10</li><li>溢出的判断：<span class="math inline">\(V = X_{f1} \oplusX_{f2}\)</span></li></ul><p>注意，最高符号位（双符号位的第一位）为结果的真实符号。</p><blockquote><p>如何理解上溢和下溢？</p></blockquote><p>所谓上溢，就是指双符号位为 <code>01</code>时的溢出，上溢也叫正溢出，因为第一位符号位是对的，所以，可以形象理解为两个正数相加得到负数时候的溢出。</p><p>下溢的理解同理。</p><h1 id="第四章-存储系统">第四章 存储系统</h1><blockquote><p>何为存储字长？</p></blockquote><p>存储字长：主存的一个存储单元所包含的二进制位数</p><blockquote><p>和为数据字长？</p></blockquote><p>数据字长(字长)：计算机一次能处理的二进制数的位数</p><blockquote><p>何为大端（big-endian）和小端（little-endian）数据存放方式？</p></blockquote><ul><li>big-endian: 最高字节地址(最左边)作为字地址 (正常存放方式)</li><li>little-endian: 最低字节地址(最右边)作为字地址</li></ul><p>68000 采用大端，Intel 采用小端，ARM 两者都支持</p><p><strong>例</strong>：int a = 0x12345678，a 在内存中是如何保存的？</p><p>解：a 需要 4 个连续地址，从低地址变化到高地址</p><ul><li>若 a 变量中高字节（0x12）保存在低地址，则是大端模式</li><li>若 a 变量中低字节（0x78）保存在低地址，则是小端模式</li></ul><p>假设起始地址为 0x4000</p><p>大端模式（Big-endian）：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">内存地址   0x4000  0x4001  0x4002  0x4003  存放内容   0x12    0x34    0x56    0x78</code></pre></div></figure><p>小端模式（Little-endian）：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">内存地址    0x4000   0x4001   0x4002    0x4003存放内容    0x78     0x56     0x34      0x12</code></pre></div></figure><blockquote><p>三种常见的 Cache 地址映射及地址变换方法？</p></blockquote><h1 id="第五章-指令系统">第五章 指令系统</h1><blockquote><p>如何理解操作数的寻址方式？</p></blockquote><p>操作数的来源：</p><p>⑴ 操作数直接来自指令地址字段；<br />⑵ 操作数存放在寄存器中，即寄存器操作数；<br />⑶ 操作数存放在存储器中，即存储器操作数。</p><p>所谓操作数的寻址方式，就是如何从上述三种来源中为指令提供操作数。</p><blockquote><p>何为有效地址？</p></blockquote><p>操作数在内存中的地址，一般用 <span class="math inline">\(E\)</span>表示，则数据 <span class="math inline">\(S = (E)\)</span>。</p><blockquote><p>何为隐含寻址？</p></blockquote><p>操作数在寄存器中。</p><p>不明确地给出操作数的地址，而是在指令中隐含地给出。</p><blockquote><p>何为立即数寻址？</p></blockquote><p>操作数在指令中。</p><p>指令的地址字段指出的不是地址，而是操作数本身。</p><p>如：</p><figure><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">ADD AX, 2038H<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>不计算 E，S = 2038H。</p><blockquote><p>何为直接寻址？</p></blockquote><p>数据在内存中。</p><p>由指令的地址部分直接给出操作数的有效地址。</p><p>E = D， S = (D) = (E)</p><p>例如：</p><figure><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">MOV AX, [2038H]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><blockquote><p>何为间接寻址？</p></blockquote><p>操作数在内存中。</p><p>指令的形式地址部分给出的是操作数地址的地址，即是操作数地址的指示器。</p><p>E = (D), S = (E) = ((D))</p><blockquote><p>何为寄存器寻址和寄存器间接寻址？</p></blockquote><p>数据分别在寄存器和主存中。</p><ul><li>寄存器寻址：<ul><li>操作数不放在内存中，而是放在通用寄存器中，此时，指令的形式地址字段 D的值表示的是寄存器号。</li><li>不计算 E，<span class="math inline">\(S = (R_D)\)</span></li></ul></li><li>寄存器间接寻址：<ul><li>寄存器的内容不是操作数，而是操作数所在内存单元的地址。</li><li><span class="math inline">\(E = (R_D)\)</span>，<spanclass="math inline">\(S = (E) = ((R_D))\)</span></li></ul></li></ul><blockquote><p>何为相对寻址？</p></blockquote><p>数据在内存中。</p><p>E = (PC) + D, S = (E) = ((PC) + D)</p><p>把 PC 的值和指令中形式地址 D 的内容相加，作为有效地址。PC的值是下一条指令的地址。</p><blockquote><p>MIPS 的三类指令？</p></blockquote><p><img src="https://i.imgur.com/oEQZ4CJ.png" /></p><h1 id="第六章-中央处理器">第六章 中央处理器</h1><blockquote><p>CPU 的基本功能？</p></blockquote><ul><li>(1). 指令执行顺序的控制</li><li>(2). 指令的操作控制</li><li>(3). 时间控制</li><li>(4). 异常和中断处理</li><li>(5). 数据加工处理</li></ul><blockquote><p>CPU 由运算器和控制器组成。</p></blockquote><blockquote><p>控制器的主要功能部件有哪些，以及它们的作用？</p></blockquote><ul><li>(1). 程序计数器 PC，Program Counter<ul><li>给出并指示下一条指令的地址</li><li>完成顺序控制的功能</li><li>内容在取指完成后即可改变</li><li>转移指令直接修改 PC 值</li></ul></li><li>(2). 指令寄存器 IR，Instruction Register<ul><li>保存当前正执行的指令</li><li>指令的操作码字段和寻址方式送译码 按：第二条存疑。</li></ul></li><li>(3). 指令译码器 ID，Instruction Decoder<ul><li>对指令的 OP 字段和寻址方式译码，指出指令的操作方式</li><li>译码的结果是找到与该指令相关的微程序的入口</li></ul></li><li>(4). 操作控制器 OC，Operator Controller<ul><li>产生指令执行过程中所需要的控制信号</li><li>实现指令的操作控制功能</li></ul></li><li>(5). 时序产生器 TG，Timer Generator<ul><li>对操作控制信号进行同步</li><li>实现控制器的时间控制功能</li></ul></li><li>(6). 数据缓冲寄存器 DR，Data Register<ul><li>保存于主存之间交换的数据</li></ul></li><li>(7). 地址寄存器 AR，Address Register<ul><li>存放 CPU 将要访问的主存单元地址</li></ul></li></ul><blockquote><p>何为指令周期？</p></blockquote><p>一条指令从取出到执行完成所需时间。</p><blockquote><p>指令周期的划分？</p></blockquote><ul><li>(1). 取指令周期</li><li>(2). 译码/取操作数周期</li><li>(3). 执行周期</li></ul><blockquote><p>何为 PSW？</p></blockquote><p>Program Status Word，程序状态字。</p><p>在指令周期的执行周期中，用来记录状态信息（如溢出）。</p><blockquote><p>何为数据通路？</p></blockquote><p>数据在 CPU 各功能部件之间传送的路径。</p><blockquote><p>何为 MAR？</p></blockquote><p>Memory Address Register，内存地址寄存器。</p><blockquote><p>何为微命令？</p></blockquote><p>控制部件通过控制线向执行部件发出的各种控制信号（打开和关闭控制门）。</p><blockquote><p>何为微操作？</p></blockquote><p>执行部件接受微命令后所进行的操作。</p><blockquote><p>反馈线的作用？</p></blockquote><p>向控制部件反馈执行的状态信息，以便控制部件进行状态测试。</p><blockquote><p>微程序控制器的组成？</p></blockquote><ul><li>(1). 控制存储器<ul><li>存放用来实现全部指令的所有微程序，只读存储器，微程序固化在其中。</li></ul></li><li>(2). 微指令寄存器(<span class="math inline">\(\mu IR\)</span>)<ul><li>存放从控存中读出的微指令</li></ul></li><li>(3). 微地址寄存器(<span class="math inline">\(\mu AR\)</span>)<ul><li>存储访问 CM 的微地址 按：CM 大概就是控制存储器</li></ul></li><li>(4). 微地址产生逻辑<ul><li>用于产生后续微指令地址</li></ul></li></ul><h1 id="结合试题复习知识点">结合试题复习知识点</h1><blockquote><p>原码表示法中，零有两个编码，即 <spanclass="math inline">\(0.0...0\)</span> 和 <spanclass="math inline">\(1.0...0\)</span>。</p></blockquote><p>按：</p><p>实际上，原码表示法表示的零要分整数和小数来讨论，而且，不管是小数还是小数，各自都有两种方法来表示零：</p><ul><li>小数<ul><li><span class="math inline">\(0.0...0\)</span></li><li><span class="math inline">\(1.0...0\)</span></li></ul></li><li>整数<ul><li><span class="math inline">\(00...0\)</span></li><li><span class="math inline">\(10...0\)</span></li></ul></li></ul><blockquote><p>设 <span class="math inline">\(X =11001101\)</span>，数据采用奇校验时，其校验位 C = <spanclass="math inline">\(0\)</span>。</p></blockquote><p>按：</p><p>所谓奇校验，就是通过设置校验位的值，使待传数据中（含有一位校验位）1的个数为奇数。设校验位为 C，则：</p><p><span class="math display">\[C = \overline{X_0 \oplus X_1 \oplus \cdots \oplus X_{n - 1}}\]</span></p><blockquote><p>浮点表示法中，阶码决定浮点数的<strong>范围</strong>，尾数决定浮点数的<strong>精度</strong>。</p></blockquote><blockquote><p>设 <span class="math inline">\(X = -35 / 64\)</span>，<spanclass="math inline">\(X\)</span> 的补码为 <spanclass="math inline">\(1.011101\)</span>。</p></blockquote><blockquote><p>微程序控制器中的核心部件是<strong>控制存储器</strong>。</p></blockquote><p>按：</p><p>控制存储器：</p><ul><li>存放用来实现全部指令的所有微程序</li><li>只读存储器</li><li>微程序固化在其中</li></ul><blockquote><p>74181集成运算芯片能提供快速运算，是因为它内部具有<strong>并行</strong>逻辑。</p></blockquote><p>按：疑。</p><blockquote><p>冯·诺伊曼计算机的设计思想是<strong>指令和数据用二进制表示...</strong>。</p></blockquote><p>冯·诺伊曼计算机的特点（设计思想）：</p><ul><li>1. 计算机由五大部件组成</li><li>2. 指令和数据以同等地位存于存储器（存储程序和程序控制）</li><li>3. 指令和数据用二进制表示</li><li>4. 指令由操作码和地址码组成</li><li>5. 以运算器为中心</li></ul><blockquote><p>EPROM 芯片靠<strong>紫外线</strong>擦除原存信息。</p></blockquote><p>按：</p><p>ROM 的历史：</p><ul><li>MROM：Mask Read-Only Memory，掩模式只读存储器</li><li>PROM：Programmable Read-Only memory，一次可编程只读存储器</li><li>EPROM：Erasable Programmable Read-OnlyMemory，电写/光（紫外线）擦除可编程只读存储器</li><li>EEPROM：Electronically Erasable Programmable Read-OnlyMemory，电可擦除可编程只读存储器</li></ul><blockquote><p>固件是一种具有<strong>软件</strong>特性的硬件，通常是将程序<strong>固化</strong>在ROM 中实现。</p></blockquote><blockquote><p>指令寄存器用来保存<strong>正在执行的指令</strong>。指令计数器用来保存<strong>下一条要执行的指令</strong>。</p></blockquote><p>按：</p><p>The program counter (<strong>PC</strong>) holds the address of thenext instruction to be executed, while the instruction register(<strong>IR</strong>) holds the encoded instruction. Upon fetching theinstruction, the program counter is incremented by one "address value"(to the location of the next instruction).</p><ul><li>PC，存放下一条要执行的指令的地址</li><li>IR，存放当前要执行的指令</li></ul><blockquote><p>半导体 SRAM 存储元靠<strong>电路</strong>存储信息，而 DRAM存储元靠<strong>电荷</strong>存储信息。</p></blockquote><p>按：存疑。</p><blockquote><p>间接寻址方式中，操作数的有效地址 E 的表达式为 <spanclass="math inline">\(E = (D)\)</span>。</p></blockquote><blockquote><p>控制存储器主要用来存放<strong>微程序</strong>。</p></blockquote><blockquote><p>某机字长 32 位，主存容量位 16MB，若按字编址，其寻址范围为 <spanclass="math inline">\(0 \sim 4M\)</span>。</p></blockquote><p>按：</p><p>计算方法如下：</p><p>某计算机字长是 32 位，它的存储容量是 256KB，按字编址，它的寻址范围是0~64KB。</p><p>计算步骤：</p><p>256KB 字节 = <span class="math inline">\(256 \times 1024 \times8\)</span> 位，</p><p>计算机按 32 位字长单字编址。则单字的位数为 32 位，范围为 (<spanclass="math inline">\(256 \times 1024 \times 8\)</span> 位) / 32 位 =64KB。</p><p>此外若计算机按 32 位字长半字编址，则半字的位数为 16 位，范围为 (<spanclass="math inline">\(256 \times 1024 \times 8\)</span> 位) / 16 位 =128KB。</p><p>存储容量是指存储器可以容纳的二进制信息量，用存储器中存储地址寄存器MAR 的编址数与存储字位数的乘积表示。</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">1B = 8bit</code></pre></div></figure><p>所以寻址范围 = 256KB / 4B = 64K。</p><p>按：所谓寻址范围，就是内存一共可以编址成的数据的数目。</p><p>来源：<ahref="https://www.cnblogs.com/claudia529/p/11073779.html">博客园</a></p><blockquote><p>CPU 中，反映指令执行后 CPU 状态的寄存器是<strong>PSW</strong>。</p></blockquote><blockquote><p>某计算机有 100条指令，采用定长编码指令格式时，其操作码的长度应为<strong>7</strong>位。</p></blockquote><p>按：<span class="math inline">\(2^7 = 128\)</span>。</p><blockquote><p>计算机主机是指<strong>存储器 + CPU</strong>。</p></blockquote><blockquote><p>中断向量是<strong>中断服务程序入口地址</strong>。</p></blockquote><blockquote><p>设指令中的形式地址为 D，相对寻址时，操作数的有效地址 E = <strong>(PC)+ D</strong>。</p></blockquote><blockquote><p>DMA方式下，设备与主存间的数据交换以<strong>数据块</strong>为基本单位进行。</p></blockquote><blockquote><p>补码浮点加法运算步骤？</p></blockquote><ul><li>求补</li><li>对阶</li><li>求和</li><li>规格化</li></ul><blockquote><p>中断处理过程包括哪些步骤？</p></blockquote><ul><li>(1). 中断请求</li><li>(2). 中断响应</li><li>(3). 保护现场</li><li>(4). 中断处理</li><li>(5). 中断返回</li></ul>]]></content>
    
    
    <categories>
      
      <category>考试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机组成原理</tag>
      
      <tag>考试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微机原理考试复习</title>
    <link href="/2021/11/14/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A0/"/>
    <url>/2021/11/14/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="年样卷知识点">2018 年样卷知识点</h1><h2 id="一填空">一、填空</h2><p>1.字长指计算机一次可以直接处理的二进制（<strong>位数</strong>），字长越长运算精度越高。</p><p>2. -1 用 8 位 2 进制补码表示为（<strong>11111111</strong>）。</p><p>3. 在 8086CPU 中，由于 EU 和 BIU分开，所以取指令和执行指令可以重叠操作，提高了（<strong>CPU</strong>）的利用率，CPU中的 EU 部件完成（<strong>指令译码</strong>）和执行指令的工作。</p><p>EU（Execute Unit，执行单元）：负责执行指令或运算。</p><ul><li>从指令队列中取指令代码，译码，在 ALU中完成数据的运算，结果的特征保存在标志寄存器中。</li></ul><p>BIU（Bus Interface Unit，总线接口单元）：负责读指令和数据。</p><ul><li>具有预取指令的功能</li><li>指令执行顺序</li></ul><p>4. 已知一个数据段长度为 1K 字节，设 DS=6000H，数据段的偏移量为200H，则该数据段的首地址的物理地址为（<strong>60200H</strong>）。</p><p>5. 指令 XOR, AX, AX的寻址方式为（<strong>寄存器寻址</strong>），指令执行后 ZF内容为（<strong>1</strong>）。</p><p>ZF - ZeroFlag，如果数学/逻辑运算的结果为零或者以其他方式重置，则置位。</p><p>6. 8088CPU 在执行 MOV AX, [2000H]指令时，对存储器进行（<strong>读</strong>）操作。2000H 这个值由 CPU输出到（<strong>地址</strong>）总线上，2000H的内容由存储器输出到（<strong>数据</strong>）总线上。</p><p>7.汇编程序中控制汇编程序应如何工作的命令叫（<strong>伪指令</strong>），或称为汇编控制命令。</p><p>8. 按存储信息的类型不同分类，I/O端口分成（<strong>数据端口</strong>）、（<strong>状态端口</strong>）和控制端口三种。</p><p>9. 中断过程中，CPU执行的现行程序被中断时的下一条指令的地址被称为（<strong>断点</strong>）；CPU转去执行中断服务程序前的运行状态被称为（<strong>现场</strong>）。</p><h2 id="三判断题">三、判断题</h2><blockquote><p>10. 经典的冯·诺伊曼结构是咋样的？</p></blockquote><p><img src="https://i.imgur.com/ocuAiuh.png" /></p><h1 id="课堂练习复习">课堂练习复习</h1><h2 id="第二章">第二章</h2><p><img src="https://i.imgur.com/bpDfFqN.png" /></p><p><img src="https://i.imgur.com/T0ahFaI.png" /></p><p><img src="https://i.imgur.com/5tKq2tL.png" /></p><p><img src="https://i.imgur.com/u4c4Hq7.png" /></p><p><img src="https://i.imgur.com/ezXEN7f.png" /></p><p><img src="https://i.imgur.com/2oIWBvH.png" /></p><p><img src="https://i.imgur.com/pfT5nI6.png" /></p><p><img src="https://i.imgur.com/66Zq6Tb.png" /></p><p><img src="https://i.imgur.com/cYYTwUh.png" /></p>]]></content>
    
    
    <categories>
      
      <category>考试复习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>考试复习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客待整理内容目录</title>
    <link href="/2021/11/14/%E5%8D%9A%E5%AE%A2%E5%BE%85%E6%95%B4%E7%90%86%E5%86%85%E5%AE%B9%E7%9B%AE%E5%BD%95/"/>
    <url>/2021/11/14/%E5%8D%9A%E5%AE%A2%E5%BE%85%E6%95%B4%E7%90%86%E5%86%85%E5%AE%B9%E7%9B%AE%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="未完成">未完成</h1><div>            <input type="checkbox"  >gcc 编译选项整理          </div><div>            <input type="checkbox"  >gdb 调试用法整理          </div><div>            <input type="checkbox"  >编译原理作业三最后一题修正          </div><div>            <input type="checkbox"  >学习雅思          </div><h1 id="正在做">正在做</h1><div>            <input type="checkbox"  >vim 搜索和替换快捷键          </div><div>            <input type="checkbox"  >300 道 LeetCode          </div><h1 id="已完成">已完成</h1><div>            <input type="checkbox"  >C 语言 `clock` 函数现在还会不会把 `scanf` 的时间算进去呢？          </div><div>            <input type="checkbox"  >关于傅里叶级数推导的一个小问题          </div>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库第一次上机实验报告</title>
    <link href="/2021/11/14/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    <url>/2021/11/14/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="实验二-数据库的创建和管理">实验二 数据库的创建和管理</h1><h2 id="一实验目的">一、实验目的</h2><p>熟练掌握使用 Navicat 和 Transact-SQL语言两种方法创建、修改和删除数据库。学习在 Navicat中进行数据库的转储和导入。掌握管理数据库的有关系统存储过程。</p><h2 id="二实验内容">二、实验内容</h2><p>1、利用Navicat创建满足以下要求的数据库：</p><ul><li>1）数据库存在于连接 MySQL 中；</li><li>2）数据库名称为 mydb；</li><li>3）字符集选择 utf8 -- UTF-8 Unicode；</li><li>4）排序规则选择 utf8_general_ci</li></ul><p>具体步骤如下：</p><p>新建连接“MySQL”—单击选择并右键—“新建数据库”—输入数据库名“mydb”、字符集“utf8-- UTF-8 Unicode”、排序规则“utf8_general_ci”—“确定”。如图所示：</p><p><img src="https://i.imgur.com/UIaHpCh.png" /></p><p>右键—“Edit Database”，可以看到如下图所示结果：</p><p><img src="https://i.imgur.com/1wl4HUr.png" /></p><p>2、利用Transact-SQL语言创建满足以下要求的数据库：</p><ul><li>1）数据库存在于连接 MySQL 中；</li><li>2）数据库名称为 testdb；</li><li>3）字符集选择 utf8 -- UTF-8 Unicode；</li><li>4）排序规则选择 utf8_general_ci；</li></ul><p>具体步骤如下：</p><p>点击“新建查询”，在查询编辑器输入以下代码，选中代码后，点击“运行”，完成后，左侧列表中选中连接“MySQL”，点击“刷新”按钮，列表即可见到“testdb”。如图所示：</p><p><img src="https://i.imgur.com/wtRfYJs.png" /></p><p><img src="https://i.imgur.com/uQRfOL6.png" /></p><p>3、利用 Transact-SQL 语言查看数据库及表的信息。</p><p>① 查看连接中的所有数据库</p><p>步骤：点击“新建查询”，输入</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">DATABASES</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>后运行，</p><p><img src="https://i.imgur.com/6G5XEg6.png" /></p><p>② 查看数据库 mysql 中所有的表</p><p>步骤：打开查询窗口，输入</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token keyword">from</span> mysql<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>后运行，</p><p><img src="https://i.imgur.com/qn3QhYM.png" /></p><p>③ 查看数据库“mysql”中表“help_keyword”的结构。</p><p>步骤：打开查询窗口，输入</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">USE</span> mysql<span class="token punctuation">;</span><span class="token keyword">DESCRIBE</span> help_keyword<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>后运行，</p><p><img src="https://i.imgur.com/WvfZaEj.png" /></p><p>4、利用 Navicat 修改数据库 mydb，修改其排序方式为 utf8_bin。步骤：右键单击数据库“mydb”—EditDatabase，在排序方式中选择“utf8_bin”—“确定”。</p><p><img src="https://i.imgur.com/bKdz53M.png" /></p><p>5、利用 Transact-SQL 语言修改数据库 mydb 的字符集为 Latin1；</p><p>步骤：打开查询窗口，输入以下代码，点击运行</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">DATABASE</span> mydb <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> latin1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/ynDvj5T.png" /></p><p>关闭数据库“mydb”后重新打开，查看数据库属性，可以看到如下图所示结果：</p><p><img src="https://i.imgur.com/k6DhwMI.png" /></p><p>6、利用 Navicat 删除数据库 mydb。</p><p>步骤：直接右键点击 mydb 选择删除即可，注意要关闭当前的 SQL语句编写界面。</p><p>7、利用 Transact-SQL 语言删除数据库 testdb。</p><p>步骤：点击“新建查询”，输入</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> testdb<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>后运行，</p><p>刷新连接“MySQL”，查看结果。</p><p>8、转储 MySQL 数据库。</p><p>步骤：打开连接“MySQL”—右键单击数据库“mysql”—选择“转储 SQL文件”—将文件名改为“sql.sql”后保存在桌面。</p><p><img src="https://i.imgur.com/UBBFOZO.png" /></p><p>9、导入MySQL数据库。</p><p>① 在连接“MySQL”中新建数据库“sql”（字符集与排序方式尽量一致）。<br />② 打开数据库“sql”—右键单击—运行 SQL文件—选择桌面的“sql.sql”文件—点击“确定”。<br />③ 关闭数据库 sql后重新打开，对比数据库“sql”与最初的数据库“mysql”，看是否完全相同。</p><p>这里实际操作的时候有错误。</p><h2 id="三课后练习题">三、课后练习题</h2><p>1、分别用以下几种语句查看数据库“mysql”中任意表的结构或数据（先输入：<code>USE mysql;</code>）：</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">① <span class="token keyword">SHOW</span> <span class="token keyword">COLUMNS</span> <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span>② <span class="token keyword">DESCRIBE</span> 表名<span class="token punctuation">;</span>③ <span class="token keyword">DESC</span> 表名<span class="token punctuation">;</span>④ <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/jL6k95e.png" /></p><p><img src="https://i.imgur.com/sx5ZdCJ.png" /></p><p><img src="https://i.imgur.com/xq6rAj6.png" /></p><p><img src="https://i.imgur.com/Eqn6dUU.png" /></p><p>2、思考以下问题：</p><p>1）mysql 中 utf8 编码的 utf8_bin, utf8_general_cs, utf8_general_ci三者的区别。<br />2）不同编码方式的数据库之间进行转储和导入会不会出现错误。</p><p>答：</p><p>1）</p><ul><li><p><code>utf8_bin</code>将字符串中的每一个字符用二进制数据存储，区分大小写。</p></li><li><p><code>utf8_genera_ci</code> 不区分大小写，ci 为 case insensitive的缩写，即大小写不敏感。</p></li><li><p><code>utf8_general_cs</code> 区分大小写，cs 为 case sensitive的缩写，即大小写敏感。</p></li></ul><p>2）</p><p>会。</p><h1 id="实验三-表的创建和管理">实验三 表的创建和管理</h1><h2 id="一实验目的-1">一、实验目的</h2><p>熟练掌握使用 Navicat 和 Transact-SQL语言两种方法创建、修改和删除表。掌握管理表的有关系统存储过程。</p><h2 id="二实验内容-1">二、实验内容</h2><p>1、利用 Navicat 创建满足以下要求的数据库：</p><p>① 数据库存在于连接 MySQL 中；<br />② 数据库名称为xsgl；<br />③ 字符集选择utf8 -- UTF-8 Unicode；排序规则选择 utf8_general_ci。</p><p>2、在数据库 xsgl 中，利用 Navicat 创建以下表格：</p><p>1）表格名为xs（学生基本情况表）；<br />2）表格中各个属性的定义如下：</p><p><img src="https://i.imgur.com/VTlZWP5.png" /></p><p>具体步骤如下：打开新建的数据库“xsgl”–右键点击“表”--“新建表”。按照上表内容输入个属性的定义，填写“列名”、“数据类型”，并取消或选择“允许NULL值”前的选项，并右键点击“xh”，选择将其设为主键。</p><p>3、按照以下步骤向表格 xs 中添加如下记录：</p><p><img src="https://i.imgur.com/vH3jv8x.png" /></p><p>1）打开 Navicat； 2）打开连接 MySQL 找到数据库 xsgl 中的表格 xs；3）在表格 xs 上右击鼠标，选择“打开表”；4）在接着出现的记录录入界面上添加记录。（方向键下增加新纪录）</p><p>添加完后如图所示：</p><p><img src="https://i.imgur.com/PavkGQQ.png" /></p><p>4、向表xs中增加“入学时间”属性列，其列名为rxsj，数据类型为datetime型。</p><p>步骤：右键单击 xs 表—设计表—加入列 rxsj，设置数据类型为datetime。如图所示：</p><p><img src="https://i.imgur.com/IVIWC6M.png" /></p><p>5、将表 xs 中 nl（年龄）列的数据类型改为 int 型。</p><p>步骤：与第 4 项类似。</p><p>6、在数据库 xsgl 中，利用 Transact-SQL 语言创建以下表格：</p><p>1）表格名为 kc（课程情况表）；<br />2）表格中各个属性的定义如下：</p><p><img src="https://i.imgur.com/jDRKDgy.png" /></p><p>步骤：点击“新建查询”，输入以下代码，点击运行，</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">USE</span> xsgl<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> kc<span class="token punctuation">(</span>    kch <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    kcm <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    xss <span class="token keyword">int</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    xf <span class="token keyword">int</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>kch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">innodb</span> <span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8 <span class="token keyword">auto_increment</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/sKdaB2t.png" /></p><p><img src="https://i.imgur.com/mqop5eW.png" /></p><p>7、利用 Transact-SQL 语言修改 kc 表。</p><p>① 增加“成绩”一列 cj，int 型，允许为空值，默认为 0。</p><p>步骤：点击“新建查询”，输入以下代码，点击运行，</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> kc <span class="token keyword">ADD</span> <span class="token keyword">COLUMN</span> cj <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/o1c5xqG.png" /></p><p>② 修改 cj 列的类型为 char。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> kc <span class="token keyword">MODIFY</span> <span class="token keyword">COLUMN</span> cj <span class="token keyword">char</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/Ucu2c2z.png" /></p><p>③ 修改 cj 列的列名为 mark。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> kc <span class="token keyword">RENAME</span> <span class="token keyword">COLUMN</span> cj <span class="token keyword">TO</span> mark<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>④ 删除 mark 列。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> kc <span class="token keyword">DROP</span> <span class="token keyword">COLUMN</span> mark<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>8、利用 Navicat 和 Transact-SQL 语言两种方式删除表 kc。</p><p>① 步骤：右键点击表“kc”，选择删除。<br />② 步骤：点击“新建查询”，输入以下代码，点击执行</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> kc<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>9、利用 Transact-SQL 将表 xs 重命名为 Students。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">RENAME</span> <span class="token keyword">TABLE</span> xs <span class="token keyword">TO</span> Students<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="三课后练习题-1">三、课后练习题</h2><p>1、创建一个名为 cpxs 的数据库，在该数据库中分别通过 Navicat和查询分析器创建一个名为 cp的表（产品表），表格中各个属性的定义如下：</p><p><img src="https://i.imgur.com/FqsbP7t.png" /></p><p>答：</p><p>Navicat 建表从略。SQL 语句建表如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>cp<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>cpbh<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'主码'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>cpmc<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>jg<span class="token punctuation">`</span></span> <span class="token keyword">float</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>kcl<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>cpbh<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>2、思考以下问题：</p><p>1）如果要在一个已经存在的表格上删除一列并增加一列，能不能用一个 ALTERTABLE 语句来完成？</p><p>答：可以。</p><h1 id="实验四-表数据的简单查询">实验四 表数据的简单查询</h1><h2 id="一实验目的-2">一、实验目的</h2><p>掌握 SELECT 语句的基本用法。掌握计算列的用法。掌握 WHERE子句中各类查询条件的写法。</p><h2 id="二实验内容-2">二、实验内容</h2><p>1、在连接“MySQL”中新建数据库“world”，并将数据库文件 newworld.sql导入到该数据库之中。</p><p>2、查询 world 数据库的 country表中的国名（Name）、洲名（Continent）和地区（Region）。</p><p>步骤：点击“新建查询”，输入以下代码，点击执行，运行结果如图：</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">USE</span> world<span class="token punctuation">;</span><span class="token keyword">SELECT</span> NAME<span class="token punctuation">,</span> Continent<span class="token punctuation">,</span> Region <span class="token keyword">From</span> country<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/pM4C27L.png" /></p><p>3、从 world 数据库的 city 表中搜索返回前 20 条的数据。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> city <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>4、使用 WHERE 子句从 world 数据库的 country表中检索出所有领土面积超过一百万平方公里的国家名称（Name）、洲名（Continent）以及领土面积（SurfaceArea）。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Name<span class="token punctuation">,</span> Continent<span class="token punctuation">,</span> SurfaceArea <span class="token keyword">FROM</span> country<span class="token keyword">WHERE</span> SurfaceArea <span class="token operator">></span> <span class="token number">1000000</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>5、查询在 world 数据库的 country 表中 Name 以字母 C 开头的国家的洲名Continent，地区 Region。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Continent<span class="token punctuation">,</span> Region <span class="token keyword">FROM</span> country<span class="token keyword">WHERE</span> Name <span class="token operator">REGEXP</span> <span class="token string">'^C'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>6、查询 world 数据库 country 表中所有国家的 Name 和Continent，并按生日 SurfaceArea 从小到大进行排列。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Name<span class="token punctuation">,</span> Continent <span class="token keyword">FROM</span> country<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> SurfaceArea <span class="token keyword">ASC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>练习巩固</p><p>7、查询 country表中政体（GovernmentForm）属于共和国（Republic）的国家的 Name 和Population、GovernmentForm。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Name<span class="token punctuation">,</span> Population<span class="token punctuation">,</span> GovernmentForm <span class="token keyword">FROM</span> country<span class="token keyword">WHERE</span> GovernmentForm <span class="token operator">=</span> <span class="token string">'Republic'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>8、country 表中查询前 20 个非洲国家的名称。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Name <span class="token keyword">FROM</span> country<span class="token keyword">WHERE</span> Continent <span class="token operator">=</span> <span class="token string">'Africa'</span><span class="token keyword">LIMIT</span> <span class="token number">20</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>9、city 表中查询阿富汗（Countrycode 为AFG）的所有城市的名称和人口，并要求对查询结果按人口的降序排列。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Name<span class="token punctuation">,</span> Population <span class="token keyword">FROM</span> city<span class="token keyword">WHERE</span> CountryCode <span class="token operator">=</span> <span class="token string">'AFG'</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> Population <span class="token keyword">DESC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>10、Country表中查询领土面积介于一百万和五百万平方公里之间的国家的名称和领土面积（领土面积以除以一万的结果显示）。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Name<span class="token punctuation">,</span> SurfaceArea <span class="token operator">/</span> <span class="token number">10000</span> <span class="token keyword">FROM</span> country<span class="token keyword">WHERE</span> SurfaceArea <span class="token operator">></span> <span class="token number">1000000</span> <span class="token operator">AND</span> SurfaceArea <span class="token operator">&lt;</span> <span class="token number">5000000</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>11、查询名称以“C”开头的亚洲国家或非洲国家的名称和洲名。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Name<span class="token punctuation">,</span> Continent <span class="token keyword">FROM</span> country<span class="token keyword">WHERE</span> <span class="token punctuation">(</span>Continent <span class="token operator">=</span> <span class="token string">'Asia'</span> <span class="token operator">OR</span> Continent <span class="token operator">=</span> <span class="token string">'Africa'</span><span class="token punctuation">)</span> <span class="token operator">AND</span> Name <span class="token operator">REGEXP</span> <span class="token string">'^C'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>12、country 表中查询独立年份为空的国家的名称、国家年份。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Name<span class="token punctuation">,</span> IndepYear <span class="token keyword">FROM</span> country<span class="token keyword">WHERE</span> IndepYear <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="三课后练习题-2">三、课后练习题</h2><p>以下题目在数据库world中完成。</p><p>1、查询 country表中所有亚洲国家的名称、地区，要求查询结果按人口的升序排列。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Name<span class="token punctuation">,</span> Region <span class="token keyword">FROM</span> country<span class="token keyword">WHERE</span> Continent <span class="token operator">=</span> <span class="token string">'Asia'</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> Population <span class="token keyword">ASC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>2、查询 city 表中智利（CHL）或保加利亚（BGR）的城市名称。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Name <span class="token keyword">FROM</span> city<span class="token keyword">WHERE</span> CountryCode <span class="token operator">=</span> <span class="token string">'CHL'</span> <span class="token operator">OR</span> CountryCode <span class="token operator">=</span> <span class="token string">'BGR'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>3、查询 country 表中 Region 字段包含“Europe”的国家的全部信息。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> country<span class="token keyword">WHERE</span> Region <span class="token operator">like</span> <span class="token string">'%Europe%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>4、查询所有君主立宪制（ConstitutionalMonarchy）国家的名称和人口，按人口降序排列。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Name<span class="token punctuation">,</span> Population <span class="token keyword">FROM</span> country<span class="token keyword">WHERE</span> GovernmentForm <span class="token operator">=</span> <span class="token string">'Constitutional Monarchy'</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> Population <span class="token keyword">DESC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译原理考试复习</title>
    <link href="/2021/11/13/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A0/"/>
    <url>/2021/11/13/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>考完按：考完了，希望老师能给 60分。最后一题考了代码优化的问题，什么划分代码块啦，什么找出循环啦，没复习到。就这样。</p><blockquote><p>何为 <span class="math inline">\(L(G)\)</span>？</p></blockquote><p>文法 <span class="math inline">\(G\)</span>所产生的语言定义为集合</p><p><span class="math display">\[\{ x| S \mathop{\Rightarrow}\limits^* x, 其中 S 为文法识别符号，且 x \inV^*_T\}\]</span></p><p>可用 <span class="math inline">\(L(G)\)</span> 表示该集合。</p><blockquote><p>何为最左推导、最右推导、规范推导、右句型、规范句型？</p></blockquote><p>如果在推导的任何一步 <span class="math inline">\(\alpha \Rightarrow\beta\)</span>，其中，<span class="math inline">\(\alpha\)</span>、<spanclass="math inline">\(\beta\)</span> 是句型，都是对 <spanclass="math inline">\(\alpha\)</span>中的最左非终结符进行替换，则称这种推导为<strong>最左推导</strong>。</p><p>如果在推导的任何一步 <span class="math inline">\(\alpha \Rightarrow\beta\)</span>，其中，<span class="math inline">\(\alpha\)</span>、<spanclass="math inline">\(\beta\)</span> 是句型，都是对 <spanclass="math inline">\(\alpha\)</span>中的最右非终结符进行替换，则称这种推导为<strong>最右推导</strong>。</p><p>在形式语言中，最右推导常被称为<strong>规范推导</strong>。</p><p>由规范推导所得的句型称为<strong>右句型</strong>或<strong>规范句型</strong>。</p><blockquote><p>何为短语、直接短语、和句柄？</p></blockquote><p>令 <span class="math inline">\(G\)</span> 是一个文法，<spanclass="math inline">\(S\)</span> 是文法的开始符号，<spanclass="math inline">\(\alpha \beta \delta\)</span> 是文法 <spanclass="math inline">\(G\)</span> 的一个句型。如果有 <spanclass="math inline">\(S \mathop{\Rightarrow}\limits^* \alpha A\delta\)</span> 且 <span class="math inline">\(A\mathop{\Rightarrow}\limits^+ \beta\)</span>，则称 <spanclass="math inline">\(\beta\)</span> 是句型 <spanclass="math inline">\(\alpha \beta \delta\)</span> 相对于非终结符 <spanclass="math inline">\(A\)</span> 的<strong>短语</strong>。</p><p>特别地，如果有 <span class="math inline">\(A \Rightarrow\beta\)</span>，则称 <span class="math inline">\(\beta\)</span> 是句型<span class="math inline">\(\alpha \beta \delta\)</span> 相对于规则<span class="math inline">\(A \rightarrow \beta\)</span>的<strong>直接短语</strong>（也称<strong>简单短语</strong>）。</p><p>一个右句型的直接短语称为该句型的<strong>句柄</strong>。句柄的概念只适用于右句型。</p><blockquote><p>关于句柄的其他理解？</p></blockquote><p>在“移入-归约”分析中，每次归约的符号串称为“句柄”。</p><p>又：句柄是句型的最左直接短语。</p><blockquote><p>何为 3 型文法？</p></blockquote><p>设 <span class="math inline">\(G = (V_N, V_T, P, S)\)</span>，若<span class="math inline">\(P\)</span> 中的每一个产生式的形式都是 <spanclass="math inline">\(A \rightarrow aB\)</span> 或 <spanclass="math inline">\(A \rightarrow a\)</span>，其中 <spanclass="math inline">\(A\)</span> 和 <spanclass="math inline">\(B\)</span> 都是非终结符，<spanclass="math inline">\(a \in V_T^*\)</span>，则 <spanclass="math inline">\(G\)</span> 是 <strong>3 型文法</strong> 或<strong>正规文法</strong>。</p><blockquote><p>如何消除文法的直接左递归？</p></blockquote><p>将</p><p><span class="math display">\[A \rightarrow A \alpha | \beta \; (\alpha \neq \varepsilon, \beta \;不以A 开头)\]</span></p><p>转换成</p><p><span class="math display">\[\begin{split}A \rightarrow \beta A^{&#39;} \\A^{&#39;} \rightarrow \alpha A^{&#39;} | \varepsilon\end{split}\]</span></p><p><img src="https://i.imgur.com/LobTnUb.png" /></p><p><img src="https://i.imgur.com/BTAs20o.png" /></p><blockquote><p>如何消除文法的间接子递归？</p></blockquote><p><img src="https://i.imgur.com/ONRU6mw.png" /></p><blockquote><p>消除左递归的算法？</p></blockquote><p><img src="https://i.imgur.com/RCSsK8L.png" /></p><blockquote><p>何为上下文无关文法？</p></blockquote><p>设 <span class="math inline">\(G = (V_N, V_T, P, S)\)</span>。若<span class="math inline">\(P\)</span> 中的每一个产生式 <spanclass="math inline">\(\alpha \rightarrow \beta\)</span> 满足：<spanclass="math inline">\(\alpha\)</span> 是一个非终结符，<spanclass="math inline">\(\beta \in (V_N \cup V_T)^*\)</span>，则此文法称为<strong>2 型的</strong> 或<strong>上下文无关的（context-free）</strong></p><p><strong>上下文无关文法</strong> 即 CFG(Context-Free Grammer))。</p><blockquote><p>对 <span class="math inline">\(\text{FIRST}\)</span> 的理解？</p></blockquote><p><img src="https://i.imgur.com/s8YqiDv.png" /></p><p><img src="https://i.imgur.com/VmrkYxH.png" /></p><p><img src="https://i.imgur.com/hgG2AXE.png" /></p><blockquote><p>对 <span class="math inline">\(\text{FOLLOW}\)</span> 的理解？</p></blockquote><p><img src="https://i.imgur.com/BWChrVU.png" /></p><p><img src="https://i.imgur.com/T9YnsK5.png" /></p><blockquote><p>如何理解 <span class="math inline">\(\text{SELECT()}\)</span>？</p></blockquote><p>给定上下文无关文法的产生式 <span class="math inline">\(A \rightarrow\alpha\)</span> $, $ <span class="math inline">\(A \in V_N, \alpha \inV^*\)</span>，</p><ul><li>若 <span class="math inline">\(\alpha \stackrel{*}{\nRightarrow}\varepsilon\)</span>，则 <span class="math inline">\(\text{SELECT}(A\rightarrow \alpha)\)</span> <span class="math inline">\(=\)</span><span class="math inline">\(\text{FIRST}(\alpha)\)</span>。</li><li>若 <span class="math inline">\(\alpha \stackrel{*}{\Rightarrow}\varepsilon\)</span>，则 <span class="math inline">\(\text{SELECT}(A\rightarrow \alpha)\)</span> <span class="math inline">\(=\)</span><span class="math inline">\((\text{FIRST}(\alpha) -\{\varepsilon\})\)</span> <span class="math inline">\(\cup\)</span><span class="math inline">\(\text{FOLLOW}(A)\)</span>。</li></ul><blockquote><p>一个 <span class="math inline">\(\text{SELECT}\)</span> 的例子。</p></blockquote><p><img src="https://i.imgur.com/OQut1Ok.png" /></p><blockquote><p>一张预测分析表。</p></blockquote><p><img src="https://i.imgur.com/rqhlpyx.png" /></p><p>按：这张图中上面的那张表中差了一个表达式：<spanclass="math inline">\(T^{&#39;} \rightarrow \varepsilon\)</span>。</p><blockquote><p>何为 <span class="math inline">\(LL(1)\)</span> 文法？</p></blockquote><p><img src="https://i.imgur.com/SkZeZY1.png" /></p><p><img src="https://i.imgur.com/eC9gsif.png" /></p><p>一个上下文无关文法是 <spanclass="math inline">\(\text{LL}(1)\)</span> 的充分必要条件是,</p><p>对每个非终结符 <span class="math inline">\(A\)</span>的两个不同产生式，<span class="math inline">\(A \rightarrow\alpha\)</span> <span class="math inline">\(,\)</span> <spanclass="math inline">\(A \rightarrow \beta\)</span>，满足</p><p><span class="math display">\[\text{SELECT}(A \rightarrow \alpha) \cap \text{SELECT}(A \rightarrow\beta) = \varnothing\]</span></p><p>其中 <span class="math inline">\(\alpha、\beta\)</span> 不同时能<span class="math inline">\(\stackrel{*}{\Rightarrow}\epsilon\)</span>。</p><p><span class="math inline">\(\text{LL}(1)\)</span> 的含义是：第 1 个<span class="math inline">\(\text{L}\)</span>表明自顶向下分析是从左向右扫描输入串，第 2 个 <spanclass="math inline">\(\text{L}\)</span> 表明分析过程中将用最左推导，1表明只需要向右看一个符号便可决定如何推导，即选择哪个产生式（规则）进行推导。</p><blockquote><p>如何判别某文法是否是 <spanclass="math inline">\(\text{LL}(1)\)</span> 文法？</p></blockquote><p>首先计算 <span class="math inline">\(\text{FIRST}\)</span>、<spanclass="math inline">\(\text{FOLLOW}\)</span>、<spanclass="math inline">\(\text{SELECT}\)</span>集合，然后根据定义判别文法是否是 <spanclass="math inline">\(\text{LL}(1)\)</span> 文法。</p><blockquote><p>在基本块范围内进行的优化？</p></blockquote><p>局部优化指的是在一个基本块范围内进行的优化。常见的局部优化有：</p><ul><li>常量传播</li><li>常量合并</li><li>删除公共子表达式</li><li>复写传播</li><li>删除无用代码</li><li>代数化简</li></ul><blockquote><p>循环优化的常见方法？</p></blockquote><ul><li>代码外提</li><li>归纳变量的删除</li></ul><blockquote><p>文法描述的语言是<strong>由文法开始符推导的终结符号串</strong>的集合。</p></blockquote><blockquote><p>何为可归前缀和活前缀？</p></blockquote><p>设文法 <span class="math inline">\(G[S]\)</span>，如果 <spanclass="math inline">\(S \stackrel{*}{\Rightarrow} \alpha A\omega\)</span> <span class="math inline">\(\Rightarrow \alpha \beta\omega\)</span> 是句型 <span class="math inline">\(\alpha \beta\omega\)</span> 的规范推导，则 <span class="math inline">\(\alpha\beta\)</span> 称为<strong>可归前缀</strong>，<spanclass="math inline">\(\alpha \beta\)</span>的前缀称为<strong>活前缀</strong>。</p><p>活前缀就是可归前缀的前缀。</p><p>例如文法 <span class="math inline">\(G[S]\)</span>，</p><p><span class="math display">\[\begin{split}S &amp;\rightarrow aAcBe \\A &amp;\rightarrow b \\A &amp;\rightarrow Ab \\B &amp;\rightarrow d\end{split}\]</span></p><p>句型 <span class="math inline">\(aAbcde\)</span> 的句柄为 <spanclass="math inline">\(Ab\)</span>，活前缀有：<spanclass="math inline">\(\varepsilon\)</span>、<spanclass="math inline">\(a\)</span>、<spanclass="math inline">\(aA\)</span> 和 <spanclass="math inline">\(aAb\)</span>，其中，<spanclass="math inline">\(aAb\)</span> 为可归前缀。</p><blockquote><p>何为前缀？</p></blockquote><p>将符号串的任意含有头符号的子串称为<strong>前缀</strong>，特别地，空串<span class="math inline">\(\varepsilon\)</span> 为任意串的前缀。</p><blockquote><p>如何将正则表达式（正规式）转成 <spanclass="math inline">\(NFA\)</span>？</p></blockquote><p><img src="https://i.imgur.com/fOJVdfM.png" /></p><p><img src="https://i.imgur.com/RlWv45O.png" /></p><p><img src="https://i.imgur.com/Xz4JShv.png" /></p><blockquote><p>如何将 <span class="math inline">\(NFA\)</span> 转成 <spanclass="math inline">\(DFA\)</span>？</p></blockquote><p><img src="https://i.imgur.com/7kxQj4T.png" /></p><p>按：在这里，像状态 <span class="math inline">\(B\)</span> 遇到 <spanclass="math inline">\(a\)</span>，那么，其到达的状态是看成 <spanclass="math inline">\(\varnothing\)</span> 的。</p><p><img src="https://i.imgur.com/HwHiVfv.png" /></p><blockquote><p>一张预测分析表？</p></blockquote><p><img src="https://i.imgur.com/2kEstjG.png" /></p><p>按：此为非递归的预测分析法，也叫表驱动的预测分析法。</p>]]></content>
    
    
    <categories>
      
      <category>编译原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编译原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《一站式学习 C 编程》阅读手记</title>
    <link href="/2021/11/11/%E3%80%8A%E4%B8%80%E7%AB%99%E5%BC%8F%E5%AD%A6%E4%B9%A0-C-%E7%BC%96%E7%A8%8B%E3%80%8B%E9%98%85%E8%AF%BB%E6%89%8B%E8%AE%B0/"/>
    <url>/2021/11/11/%E3%80%8A%E4%B8%80%E7%AB%99%E5%BC%8F%E5%AD%A6%E4%B9%A0-C-%E7%BC%96%E7%A8%8B%E3%80%8B%E9%98%85%E8%AF%BB%E6%89%8B%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>对于整数中的位的位运算？</p></blockquote><ul><li><code>&amp;</code> 是按位与（Bitwise AND）运算符</li><li><code>|</code> 是按位或（Bitwise OR）运算符</li><li><code>~</code>（Tilde）是按位取反（Bitwise NOT）运算符</li><li><code>^</code>（Caret）是按位异或（Bitwise XOR）运算符</li></ul><blockquote><p>奇偶性的英文？</p></blockquote><p>Parity</p><blockquote><p>不借助额外的存储空间，交换两个变量的值？</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">a <span class="token operator">=</span> a<span class="token operator">^</span>b<span class="token punctuation">;</span>b <span class="token operator">=</span> b<span class="token operator">^</span>a<span class="token punctuation">;</span>a <span class="token operator">=</span> a<span class="token operator">^</span>b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>利用的原理是：</p><ul><li><code>x^x^y ==y</code></li><li>异或运算满足交换律和结合律</li></ul><blockquote><p>疑：RAID(Redundant Array of Independent Disks，独立磁盘冗余阵列)的实现原理？</p></blockquote><blockquote><p>gcc 的 <code>-g</code> option？</p></blockquote><p>在编译时要加上 <code>-g</code> 选项，生成的可执行文件才能用 gdb进行源码级调试。</p>]]></content>
    
    
    <categories>
      
      <category>读书</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书</tag>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软件体系结构考试复习</title>
    <link href="/2021/11/10/%E8%BD%AF%E4%BB%B6%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A0/"/>
    <url>/2021/11/10/%E8%BD%AF%E4%BB%B6%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="考完回忆">考完回忆</h1><p>华科软院以后如果还在的话，同志们可以参考一下。</p><p>题目的结构和打印店买的卷子的结构是一样的。</p><p>填空题考了一个关于性能的战术好像，总之是一个战术，要求写它的几个方面。</p><p>然后简答题有一题比较深刻，就是问架构师应如何和项目经理相互合作。</p><p>还有一个，为什么说架构师的沟通也很重要？</p><p>大题就是自选项目，然后什么 ADD 啦，ATAM啦，质量属性效用树啦等等分析。</p><p>最后一题是分析京东或者淘宝等购物网站针对双 11 采取的战术。</p><p>以上。</p><h1 id="前言">前言</h1><p>参考：<ahref="https://blog.csdn.net/yin__ren/article/details/83796176?utm_source=app&amp;app_version=4.18.0&amp;code=app_1562916241&amp;uLinkId=usr1mkqgl919blen">应该是学院某位前辈同志从老师的PPT 中整理下来的非常详细的知识点提纲，同时也有结合教材</a></p><h1 id="年软件体系结构试卷">2014 年软件体系结构试卷</h1><h2 id="一填空题">一、填空题</h2><h3 id="系统的质量属性有多种请列举其中六种">1.系统的质量属性有多种，请列举其中六种？</h3><ul><li>运行时可见属性<ul><li>可用性</li><li>性能</li><li>安全性</li><li>易用性</li></ul></li><li>维护时可见属性<ul><li>可修改性</li><li>可扩展性</li><li>可移植性</li><li>可集成性</li></ul></li></ul><h3 id="构架战术就是">2. 构架战术就是？</h3><p>战术是对质量属性的控制产生影响的设计决策。</p><h3 id="什么称为构架策略">3. 什么称为构架策略？</h3><p>架构策略是架构中所采用的战术的集合。</p><h3 id="构架驱动因素包括">4. 构架驱动因素包括？</h3><ul><li>比较重要的功能</li><li>质量属性</li><li>限制条件构成的某个子集</li></ul><h3 id="构架评审的六个优点是">5. 构架评审的六个优点是？</h3><p>优点就是收益。</p><ul><li>及早发现现有构架中存在的问题</li><li>构架的改进</li><li>财务收益</li><li>强制为评审做准备</li><li>捕获构架设计的基本思想</li><li>验证需求的有效性</li></ul><h3 id="架构结构可以分为-3-组">6. 架构结构可以分为 3 组？</h3><ul><li>静态的角度<ul><li>模块结构</li><li>分析类结构</li><li>类结构</li></ul></li><li>动态的角度<ul><li>进程结构</li><li>数据流</li><li>控制流</li><li>使用结构</li><li>调用结构</li><li>层次结构</li></ul></li><li>部署的角度<ul><li>物理结构</li></ul></li></ul><h3 id="构架的商业属性包括">7. 构架的商业属性包括？</h3><p>也叫商业限制。</p><ul><li>投放市场时间</li><li>成本和收益</li><li>预计的系统生命周期的长短</li><li>目标市场</li><li>推出计划</li><li>遗留系统集成</li></ul><h3 id="构架样式有多种其中四种是">8. 构架样式有多种，其中四种是？</h3><ul><li>以数据为中心的样式</li><li>数据流样式</li><li>虚拟机样式</li><li>调用-返回样式</li><li>独立组件样式</li><li>事件系统样式</li><li>通讯进程样式</li><li>C/S 样式</li><li>C2 样式</li></ul><h2 id="二名词解释">二、名词解释</h2><h3 id="软件架构">1. 软件架构</h3><p>软件架构——在一定的设计原则基础上，从不同角度对组成系统的各部分进行搭配和安排，形成系统的多个结构而组成架构，它包括该系统的各个组件、组件的外部可见属性及组件之间的相互关系。</p><p>组件的外部可见属性是指其它组件可对该组件所做的假设，如该组件提供的服务、具备的质量特征、错误处理、共享资源的使用。</p><p>架构定义可以从下面六个方面来理解：</p><ul><li>架构应建立在一定的设计原则之上，否则很容易失败。</li><li>系统可能由多个结构组成，其中任何一个结构都不能与构架等同。</li><li>每个软件系统都有自己的构架。</li><li>软件架构决定了各个组件。</li><li>只要某个组件的行为可以从其它组件的角度观察到或区别开，这样的行为就是软件架构的内容。</li><li>软件架构是抽象的，它不考虑实现、算法和数据表示的细节，而集中研究“黑盒”组件的行为和交互，是设计第一步。</li></ul><h3 id="软件架构商业周期用画图形式表示">2.软件架构商业周期（用画图形式表示）？</h3><p><img src="https://i.imgur.com/HaidJFv.png" /></p><p>该商业周期的运作：</p><ul><li>软件架构<strong>影响开发组织的内部结构和经营目标</strong></li><li>构架<strong>影响开发组织的目标</strong></li><li>软件架构可能会<strong>影响客户对下个系统的需求</strong></li><li>软件架构的过程丰富了整个开发团队的经验，从而<strong>影响设计师对后继系统的设计</strong></li><li>有些系统甚至会<strong>影响并实际改变软件工程的发展，以及开发人员学习和实践的技术环境</strong></li></ul><h2 id="三对错题">三、对错题</h2><p>1. 软件架构可以由几名设计师共同完成。（错）<br />2.设计师对系统的质量属性应平等看待，在系统设计中全部予以解决。（错）<br />3. 架构的文档应该完备，并使所有风险承担者都能看懂。（对）<br />4. 构架通常可以依靠某一特定产品或工具。（对）<br />5. 应将产生数据的模块和使用数据的模块分离开。（对）</p><h2 id="四简答题">四、简答题</h2><h3 id="为什么要分析软件架构">1. 为什么要分析软件架构？</h3><p>思想有多远，我们就能走多远。<br />高度决定思路，思路决定出路。</p><p>系统的建立是为了满足组织的需求（包括功能和质量），质量需求决定了系统必须达到的特征，包括性能、可靠性、互操作性以及生命周期等。随着软件系统的日益复杂，涉众对软件的要求已不局限于功能上的满足，而是更加注重质量。</p><p>很少有人注意到组织（开发组织、客户等）在系统设计和系统成败上扮演的角色。</p><p>系统的质量特征受到软件架构的限制，或者说构架设计的选择受到要达到的质量特征的影响。</p><h3 id="请说明模块结构和使用结构之间的联系和区别">2.请说明模块结构和使用结构之间的联系和区别。</h3><ul><li><p>模块结构——体现了任务的划分，每个模块都有其接口描述、代码和测试计划等，各模块通过父子关系联系起来，在开发和维护阶段用于分配任务和资源。模块结构是从静态的角度来分析的。</p></li><li><p>使用结构——描述过程或模块之间的联系，这种联系是“假设正确存在”的关系，用于设计可轻松扩展的系统。如果过程A 的运行必须以过程 B 的正确运行为前提，则说过程 A 使用过程 B</p></li></ul><p>然后根据这个定义再分析分析就成。</p><h2 id="五构架分析与设计">五、构架分析与设计</h2><p>针对一个网上购物系统或学生选课系统，请完成下面 4 个问题：</p><blockquote><p>1.说明系统的若干质量属性，并以场景图的形式分别描述一个可用性场景和一个安全性场景。<br />2. 使用 ADD 方法说明系统的初步设计。<br />3. 描述 ATAM 方法的九个步骤。<br />4. 选取两个质量属性以表格形式生成质量属性效用树。</p></blockquote><p>1. 质量属性有以下几种</p><ul><li>运行时可见属性<ul><li>可用性</li><li>性能</li><li>安全性</li><li>易用性</li></ul></li><li>维护时可见属性<ul><li>可修改性</li><li>可扩展性</li><li>可移植性</li><li>可集成性</li></ul></li></ul><p><img src="https://i.imgur.com/IJkLQbq.png" /></p><p>2. ADD 方法，</p><p>属性驱动的设计（Attribute Driven Design,ADD）把一组质量属性场景作为输入，利用对质量属性实现与构架设计之间的关系的了解，对构架进行设计。</p><p>ADD 构架设计的步骤如下：</p><ol type="1"><li>样本输入。</li><li>选择要分解的模块。</li><li>根据下列步骤对模块进行求精：<ol type="a"><li>从具体的质量场景和功能需求集合中选择构架驱动因素。<br /></li><li>选择满足构架驱动因素的构架模式。<br /></li><li>实例化模块并根据用例分配功能，使用多个视图进行表示。<br /></li><li>定义子模块的接口。<br /></li><li>验证用例和质量场景并对其进行求精，使它们成为子模块的限制。</li></ol></li><li>对需要进一步分解的每个模块重复上述步骤。</li></ol><p>对于本题，根据定义给出相关分析即可。</p><p>3. 九个步骤如下：</p><p>ATAM(Architecture Tradeoff Analysis Method)——构架权衡分析法。</p><ul><li>1. ATAM 方法的表述</li><li>2. 商业动机的表述</li><li>3. 构架的表述</li><li>4. 对构架方法进行分类</li><li>5. 生成质量属性效用树</li><li>6. 分析架构方法</li><li>7. 集体讨论并确定场景优先级</li><li>8. 再次分析构架方法</li><li>9. 结构的表述</li></ul><p>4. 所谓质量属性效用树，</p><ul><li>效用树的作用是使质量属性需求具体化，从而迫使设计师和客户代表准确地定义出他们的质量需求。</li><li>“效用”是效用树的根节点，表示系统的总体适宜性。</li><li>中间结点是质量属性及其求精。</li><li>叶结点是与质量属性对应的场景。</li></ul><p><img src="https://i.imgur.com/1vj6WZD.png" /></p><h1 id="针对-2015-年的卷子补充知识点">针对 2015 年的卷子补充知识点</h1><h2 id="填空题">填空题</h2><h3 id="何为涉众">何为涉众？</h3><p>涉众就是对系统构建感兴趣的人或组织。</p><p>如：客户、最终用户、开发人员、项目经理、维护人员、对系统进行市场营销活动的人。</p><h3 id="安全性的战术有哪些">安全性的战术有哪些？</h3><ul><li>1、<strong>抵抗攻击</strong><ul><li>对用户进行身份验证</li><li>对用户进行授权</li><li>维护数据的机密性</li><li>维护完整性</li><li>限制暴露的信息</li><li>限制访问</li><li>在外部用户和提供服务的系统之间设置认证服务器</li><li>把要保护的系统置于通讯防火墙之后</li><li>在某个可信内核的基础上构建内核，由该内核提供安全</li></ul></li><li>2、<strong>检测攻击</strong><ul><li>误用情况的检测是把通信模式与已知攻击的历史模式进行比较</li><li>异常情况的检测是把通信模式与其本身的历史基线（情况）进行比较</li></ul></li><li>3、<strong>从攻击中恢复</strong><ul><li>恢复状态</li><li>识别攻击者</li></ul></li></ul><h3 id="构架编档的基本原则是什么">构架编档的基本原则是什么？</h3><p>构架文档写作的基本原则是：从读者的角度出发。</p><h3 id="软件系统的质量属性是指">软件系统的质量属性是指？</h3><p>软件系统的质量属性是指系统在整个生命周期中所具有的特征。</p><h3 id="构架本身的质量属性包括">构架本身的质量属性包括？</h3><ul><li>一致性（概念完整性）</li><li>正确性和完整性</li><li>可构建性</li></ul><h2 id="对错题">对错题</h2><blockquote><p>软件构架可以由几名设计师共同完成，每位设计师都可以决策。（）<br />设计师对系统的质量属性应平等看待，在系统设计中全部予以解决。（）<br />构架的文档应该完备，并使所有风险承担者都能看懂。（）<br />构架的设计应有助于增量式实现。（）<br />架构就是系统的总体结构。（）</p></blockquote><blockquote><p>架构设计应尽量采用已知的设计模式。（）</p></blockquote><h2 id="简答题">简答题</h2><h3id="请说明构架框架和设计模式之间的联系和区别">请说明构架、框架和设计模式之间的联系和区别。</h3><ul><li>定义：软件框架使提取特定领域软件的共性部分形成的体系结构，不同领域的软件项目有着不同的框架类型</li><li>作用：开发过程中代码不需要从头编写，提高软件的质量，降低成本，缩短开发时间，形成良性循环</li></ul><p>1、框架和平台的关系：</p><ul><li>平台在应用层面主要指提供特定服务的系统软件</li><li>框架更侧重设计和开发过程，框架可通过调用平台提供的服务而起作用</li></ul><p>2、框架和类库的关系：</p><ul><li>框架构成了通用的、具有一般性的系统主体部分</li><li>二次开发人员根据具体业务，完成特定应用系统中与众不同的特殊部分</li></ul><p>3、框架和架构的关系：</p><ul><li>构架确定了系统整体结构、层次划分、不同部分之间的协作等设计考虑</li><li>框架更偏重于技术，确定框架后，其所对应的架构也随之确定，但在一个系统架构中可以集成多种框架</li></ul><p>4、框架和设计模式的关系：</p><ul><li>设计模式研究的是一个设计问题的解决方法，一个模式可应用于不同的框架和被不同的语言所实现</li><li>框架则是一个应用的体系结构，是一种或多种设计模式和代码的混合体</li></ul><p>共性：共同致力于使人们的设计可以被重用（设计模式的思想可以在框架设计中进行应用）</p><p>区别：</p><ul><li>从应用领域上分，框架给出的使整个应用的体系结构，而设计模式则给出了单一设计问题的解决方案</li><li>从内容上分，设计模式仅是一个单纯的设计；而框架则是设计和代码的一个混合体</li><li>设计模式比框架更容易移植</li></ul><h3id="请说明架构师的主要职责架构师与项目经理的职责区别">请说明架构师的主要职责，架构师与项目经理的职责区别。</h3><p>架构师的职责如下：</p><ul><li>了解所在组织的业务目标，使架构更好地支持业务目标</li><li>规划产品的开发与演进</li><li>规划和建设架构级的重用，如产品线等</li><li>领导并负责架构设计，定义系统的高层结构和接口</li><li>为项目管理提供支持，如技术可行性、任务划分、人员招聘</li><li>领导和协调项目组的主要技术活动，对主要技术产品负责实际参与架构原型的开发实现</li><li>讲解架构、指导详细设计和开发、协调冲突以实现既定的构架目标</li><li>规划和协助软件架构的评审</li><li>评估新技术并提出采用建议</li></ul><p>项目经理的职责如下：</p><ul><li>具有过程控制能力</li><li>具备文档能力</li><li>总结汇报</li><li>擅长分解任务</li><li>具有时间观念</li><li>具有计划能力</li><li>具有跨界思维</li><li>有亲和力</li><li>组织协调</li></ul><p>然后根据他们的职责分析它们的区别即可。</p><h3 id="请说明架构评审的主要方法">请说明架构评审的主要方法。</h3><p>评审的一般技巧有：</p><p>1、定性分析</p><p>是指凭分析者的直觉、经验，凭分析对象过去和现在的延续状况及最新的信息资料，对分析对象的性质、特点、发展变化规律作出判断的一种方法。</p><p>定性技巧——提问技巧：</p><ul><li>场景——描述风险承担者和系统之间的具体交互</li><li>评审清单——对同一领域的若干系统进行评估后提出的一组详细的问题</li><li>问卷——适用于所有构架的若干问题的清单</li></ul><p>2、定量分析</p><p>是依据实际统计数据，建立数学模型，并用数学模型计算出分析对象的各项指标及其数值的一种方法。</p><p>定量技巧：</p><ul><li>指标——对构架可观察到的参数的量化解释</li><li>模拟、原型与实验</li></ul><h3id="请说明以架构为中心的软件过程">请说明以架构为中心的软件过程。</h3><p>暂时按下不表。</p><h1 id="补充">补充</h1><p><img src="https://i.imgur.com/0YF8pzz.png" /></p>]]></content>
    
    
    <categories>
      
      <category>考试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>考试</tag>
      
      <tag>软件体系结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译原理实验手记</title>
    <link href="/2021/11/09/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C%E6%89%8B%E8%AE%B0/"/>
    <url>/2021/11/09/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C%E6%89%8B%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="知识点">知识点</h1><blockquote><p>如何理解 <code>bison -d</code> 的 <code>-d</code> 选项？</p></blockquote><p>可以在英文版 <em>flex and bison</em> 中的 P13 找到如下解释：</p><blockquote><p>First it runs bison with the -d (for “definitions” file) flag, whichcreates fb1-5.tab.c and fb1-5.tab.h, and it runs flex to createlex.yy.c.</p></blockquote><blockquote><p><code>%option</code> 怎么用？</p></blockquote><p><em>flex and bison</em> 中解释：</p><blockquote><p>If you set %option yylineno, flex defines yylineno to contain thecurrent line number and automatically updates it each time it reads acharacter.</p></blockquote><blockquote><p>C 语言 <code>atoi()</code> 的作用？</p></blockquote><p>将字符串转换为 int。</p><blockquote><p>如何理解 <code>yytext</code>？</p></blockquote><p>见 <em>flex and bison</em>:</p><blockquote><p>In any flex action, the variable yytext is set to point to the inputtext that the pattern just matched.</p></blockquote><blockquote><p>如何理解 C 语言 <code>strcpy()</code> 函数？</p></blockquote><p>头文件：<code>#include &lt;string.h&gt;</code></p><p>定义函数：<code>char *strcpy(char *dest, const char *src);</code></p><p>函数说明：<code>strcpy()</code> 会将参数 <code>src</code>字符串拷贝至参数 <code>dest</code> 所指的地址。</p><p>返回值：返回参数 <code>dest</code> 的字符串起始地址。</p><blockquote><p>如何理解 <code>yywrap()</code>？</p></blockquote><blockquote><p>When a lex scanner reached the end of yyin, it called yywrap(). Theidea was that if there was another input file, yywrap could adjust yyinand return 0 to resume scanning. If that was really the end of theinput, it returned 1 to the scanner to say that it was done.</p></blockquote><blockquote><p>如何解决<code>parser.y:1.1-14: warning: deprecated directive: ‘%error-verbose’, use ‘%define parse.error verbose’ [-Wdeprecated]</code>？</p></blockquote><p>使用 <code>%define "parse.error" "verbose"</code> 代替原来的<code>%define parse.error verbose</code>。</p><p>具体参考：<ahref="https://stackoverflow.com/questions/50221650/bison-syntax-error-mac">StackOverflow</a></p><h1 id="bugs-记录">Bugs 记录</h1><h2 id="问题一">问题一</h2><p>问题描述：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">error: invalid initializer</code></pre></div></figure><p><img src="https://i.imgur.com/J5OSvMr.png" /></p><p><img src="https://i.imgur.com/sSXoVXw.png" /></p><p>解决办法，</p><p>将</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">va_list pArgs <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>改成</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">va_list pArgs<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这个属于库函数的用法，需要查阅相关文档。</p><h2 id="问题二">问题二</h2><p>这个问题属于重复定义问题。</p><p><img src="https://i.imgur.com/UD5l0WZ.png" /></p><p><img src="https://i.imgur.com/ZWxj3pK.png" /></p><p>解决方法：</p><p>在相应头文件中将所有重复定义的变量声明成外部变量。</p><p>如：</p><p>将</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> LEV<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>改成</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">extern</span> <span class="token keyword">int</span> LEV<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>再如：</p><p>将</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">symboltable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">symbol</span> symbols<span class="token punctuation">[</span>MAXLENGTH<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> symbolTable<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>改成</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">symboltable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">symbol</span> symbols<span class="token punctuation">[</span>MAXLENGTH<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">struct</span> <span class="token class-name">symboltable</span> symbolTable<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>将这两个问题解决后，发现可以正常编译，且编译出来的可执行文件可以正常运行：</p><p><img src="https://i.imgur.com/f3ugW1m.png" /></p>]]></content>
    
    
    <categories>
      
      <category>编译原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编译原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数字图像处理考试复习</title>
    <link href="/2021/11/08/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A0/"/>
    <url>/2021/11/08/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="一图像处理的基本概念与术语">一、图像处理的基本概念与术语</h1><blockquote><p>1. 数字图像？数字图像处理？</p></blockquote><p>图像是一个二维亮度函数 <span class="math inline">\(f(x,y)\)</span>。其中，<span class="math inline">\((x, y)\)</span>定义了空间坐标，<span class="math inline">\(f(x, y)\)</span>定义了该点的亮度或灰度。</p><p>数字图像处理是指图像的元素的空间坐标和亮度的数字化。数字图像是由有限的元素组成的，每一个元素都有一个特定的位置和幅值，这些元素称为图像元素或像素。</p><p>数字图像处理是指借用数字计算机处理数字图像。</p><blockquote><p>2. 亮度函数？入射分量？反射分量？</p></blockquote><p>亮度函数：</p><ul><li>二维离散亮度函数 <span class="math inline">\(f(x, y)\)</span></li><li><span class="math inline">\(x, y\)</span>说明图像像素的空间坐标</li><li>函数值 <span class="math inline">\(f\)</span> 代表了点 <spanclass="math inline">\((x, y)\)</span> 处像素的灰度值</li></ul><p>入射分量和反射分量：</p><ul><li>函数 <span class="math inline">\(f(x, y)\)</span> 的两个分量表征：<ul><li>(1). 入射到被观察场景的光源照射量</li><li>(2). 被场景中物体反射的照射量<br />它们称为入射分量和反射分量，并用 <span class="math inline">\(i(x,y)\)</span> 和 <span class="math inline">\(r(x, y)\)</span>表示。这两个函数乘积形成 <span class="math inline">\(f(x,y)\)</span>，即 <span class="math inline">\(f(x, y) = i(x, y)r(x,y)\)</span>，式中 <span class="math inline">\(0 \leqslant i(x, y)\leqslant \infty\)</span>，<span class="math inline">\(0 \leqslant r(x,y) \leqslant 1\)</span>，反射分量限制在 0（全吸收）和1（全反射）之间。</li></ul></li></ul><p>按：</p><p>入射和反射的英文分别为：incident(incidence), reflect。</p><blockquote><p>3. 图像分辨率？采样分辨率？灰度分辨率？图像深度？</p></blockquote><p>图像分辨率：</p><p>图像分辨率指图像中存储的信息量，是每英寸图像内有多少个像素点，分辨率的单位为PPI（Pixels Per Inch），通常叫做像素每英寸。</p><p>采样分辨率：</p><p>单位长度上所包含的采样数。</p><p>灰度分辨率：</p><p>在灰度级中可分辨的最小变化，不像空间分辨率必须以每单位距离作为量化基础，灰度分辨率指的是用于量化灰度的比特数。</p><p>按：何为最小变化。</p><p>图像深度：</p><p>是指存储每个像素所用的位数。它确定了彩色图像的每个像素可能有的颜色数，或者确定了灰度图像的每个像素可能有的灰度级数。</p><blockquote><p>4. 色彩的基本属性？RGB HSI(HSV, HSB, HSL)？</p></blockquote><p>色彩的基本属性：</p><ul><li>色相（H）：即颜色名称，如红色、黄色等，取值范围为 <spanclass="math inline">\([0, 360)\)</span></li><li>饱和度（S）：色彩的纯度，越高色彩越纯，低则逐渐变灰，取值范围为<span class="math inline">\([0, 100\%]\)</span></li><li>明度（V），亮度（L）：像素灰度值的强度，亮度越高则图像越发白，否则图像越黑，取值范围<span class="math inline">\([0, 100\%]\)</span></li></ul><p>RGB：</p><p>基于笛卡尔坐标系，三原色位于三个角度上（其实就是三个维度）。在 RGB空间中，表示像素的比特数称为像素深度。考虑一幅 RGB图像，其中每幅红绿蓝图像都是 8 比特图像，所以每个 RGB 像素有 24比特。</p><p>HSI：</p><p>即色调（hue）、饱和度（saturation）、密度（intensity，对应图像亮度）。</p><p>I 分量与图像的色彩信息无关。</p><p>H 和 S 分量与人感受颜色的方式紧密相连（合成亮度）。</p><p>HSI表示色调、饱和度、亮度混合的模型，该模型符合人描述和解释颜色的方式。其中，</p><ul><li>色调是光波混合中与主波长有关的属性，表示观察者主要感知的颜色，比如某一物体的颜色为红色、蓝色；</li><li>饱和度指的是相对纯净度，或者说一种颜色混合白光的数量，纯谱色全饱和的，如纯红色、纯蓝色是饱和的，而深红色（红加白）和淡紫色（紫加白）是欠饱和的，饱和度与所加白光成反比；</li><li>亮度指的是发光的强度。</li></ul><blockquote><p>5.动态范围？灰度级？</p></blockquote><p>动态范围：</p><p>统计一下每一点的像素灰度值，灰度级的最小和最大这一范围，便是该图像的动态范围。动态范围越大（灰度直方图越宽），那它的对比度就会越高，当然看着越清楚。</p><p>灰度级：</p><p>一幅灰度图像它的像素的强度值的取值范围表示为 <spanclass="math inline">\([0, L - 1]\)</span>,其中。如 8位色的灰度级，由于是 2 进制，灰度有 256个等级，从黑（0）到白（255）。</p><blockquote><p>6. 直方图？累积直方图？连续图像幅度的密度函数？幅度分布函数？</p></blockquote><p>直方图：</p><p>一个灰度级在范围 <span class="math inline">\([0, L - 1]\)</span>的数字图像的直方图是一个离散函数</p><p><span class="math display">\[p(r_k)= \frac{n_k}{n}\]</span></p><p>其中，<span class="math inline">\(n\)</span> 是图像的像素总数，<spanclass="math inline">\(n_k\)</span> 是图像中灰度级为 <spanclass="math inline">\(r_k\)</span> 的像素个数，<spanclass="math inline">\(r_k\)</span> 是第 <spanclass="math inline">\(k\)</span> 个灰度级，<span class="math inline">\(k= 0,1,2, \cdots , L-1\)</span>。</p><p>累积直方图：</p><p>累积直方图反映了图像中灰度级小于或等于某值的像素的个数。灰度累积直方图是一个一维离散函数，可表示为</p><p><span class="math display">\[H(k)= \sum_{i=0}^{k}ni, \;k=0,1,2..,L−1\]</span></p><p>式中，<span class="math inline">\(k\)</span> 为某个灰度级；<spanclass="math inline">\(L\)</span> 为灰度级的数量，最大取 256；<spanclass="math inline">\(ni\)</span> 为具有第 <spanclass="math inline">\(i\)</span> 级灰度值的像素的数目。</p><p>连续图像幅度的密度函数，幅度分布函数：</p><blockquote><p>7. 点运算？代数运算？几何运算？</p></blockquote><p>点运算：</p><p>即灰度级变换，定义为</p><ul><li>像素灰度值变换函数 <span class="math inline">\(g(x, y) = T(f(x,y))\)</span></li><li>灰度值变换函数 <span class="math inline">\(R = T(r)\)</span></li><li>点运算有哪些：<ul><li>线性变换</li><li>对数变换：灰度压缩</li><li>幂次变换：根据情况使图像变亮或变暗</li><li>LUT（Look Up Table）变换</li></ul></li></ul><p>代数运算：</p><ul><li>加、减、乘、除</li><li>异或、或、与</li></ul><p>几何运算：</p><p>对于原图像 <span class="math inline">\(f(x,y)\)</span>，坐标变换函数</p><p><span class="math display">\[x^{&#39;} = T_1(x, y); \; y^{&#39;} = T_2(x, y)\]</span></p><p>唯一确定了几何变换：</p><p><span class="math display">\[g(x^{&#39;}, y^{&#39;}) = f(T_1(x, y), T_2(x, y))\]</span></p><p><span class="math inline">\(g(x, y)\)</span> 是目标图像。</p><p>常用的几何变换如下，</p><ul><li>平移变换</li><li>镜像变换</li><li>旋转变换</li><li>放缩变换</li><li>拉伸变换</li></ul><blockquote><p>8. 双线性插值？最邻近插值？线性插值？</p></blockquote><p>双线性插值：</p><p>通过 4 个邻近点去估计给定位置的灰度值，赋值公式为</p><p>$$</p><p>f(x, y) = ax + by + cxy + d $$</p><p>最邻近插值：</p><p>令输出像素的灰度值等于离它所映射到的位置最近的输入像素的灰度值。</p><p>线性插值：</p><p>通过在同一直线的 2 个点去估计给定点的灰度值。</p><blockquote><p>9. 线性系统？移不变系统？线性移不变系统？</p></blockquote><p>线性系统：</p><p>先看两个原理，</p><ul><li>叠加原理：如果输入信号是两个序列之和，则输出信号也为两个对应的输出信号之和。即，若<span class="math inline">\(y_1 = T[x_1]\)</span>，<spanclass="math inline">\(y_2 = T[x_2]\)</span>，则有 <spanclass="math inline">\(y_1 + y_2 = T[x_1] + T[x_2]\)</span> <spanclass="math inline">\(=\)</span> <span class="math inline">\(T[x_1 +x_2]\)</span>；</li><li>齐次原理：</li></ul><p>所谓线性系统，即对所有的输入信号 <span class="math inline">\(x_1,x_2\)</span> 以及所有复常数 <span class="math inline">\(a,b\)</span>，皆有</p><p><span class="math display">\[ay_1 + by_2 = T[ax_1 + bx_2]\]</span></p><p>线性系统对于输入信号的加权和的响应等于单个输入信号响应的加权和。</p><p>移不变系统：</p><p>所谓移不变系统，是指如果输入序列进行移位，则输出序列进行相应的移位。</p><p>线性移不变系统：</p><p>线性系统、移不变系统是系统的两个独立的特性。我们将具有移不变系统的线性系统称为线性移不变系统。</p><blockquote><p>10. 卷积？</p></blockquote><blockquote><p>11. 图像幅值信息量？信息熵？</p></blockquote><p>图像幅值信息量：</p><p>表征一幅图像含有的信息量有多少。</p><p>信息熵：</p><p>表示图像在被接收之前，信号传输过程中损失的信息量。</p><blockquote><p>12. 积分变换？</p></blockquote><blockquote><p>13. 傅立叶变换对？傅立叶振幅谱？傅立叶相位谱？傅立叶能量谱？</p></blockquote><blockquote><p>14. 图像增强技术？图像复原技术？</p></blockquote><p>图像增强技术：</p><p>图像增强是指按照特定的需要突然感兴趣的信息，同时削弱或去除不感兴趣的信息.处理的结果并不能增加图像的信息，而只能增强对某些信息辨识能力，并且这种处理有可能损失一些其他信息。</p><p>除去图象中的噪声，使边缘清晰，突出图象中的某些性质等。</p><p>图像复原技术：</p><p>图像复原则认为图像在某种情况下退化或恶化了，使得图像品质出现下降，现在需要根据相应的退化模型和知识重建或恢复原始的图像。因此，图像复原的目标是原始的反应真实物体或场景的图像，这是客观存在的，不以主观意志为转移。图像复原通过概率估计或先验知识千方百计地去还原图像的本来面貌。</p><blockquote><p>15. 直方图均衡化？直方图规定化？</p></blockquote><blockquote><p>16. 图像平滑？图像锐化？</p></blockquote><p>图像平滑：</p><p>图像平滑是一种区域增强的算法，平滑算法有邻域平均法、中指滤波、边界保持类滤波等。在图像产生、传输和复制过程中，常常会因为多方面原因而被噪声干扰或出现数据丢失，降低了图像的质量（某一像素，如果它与周围像素点相比有明显的不同，则该点被噪声所感染）。这就需要对图像进行一定的增强处理以减小这些缺陷带来的影响。</p><p>图像锐化：</p><p>图像锐化(imagesharpening)是补偿图像的轮廓，增强图像的边缘及灰度跳变的部分，使图像变得清晰。</p><blockquote><p>17. 空域增强（滤波）？ 频域增强（滤波）？同态增强（滤波）？</p></blockquote><p>空域增强（滤波）：</p><ul><li>空域：指由像素组成的空间</li><li>直接对图像空间中的像素灰度进行处理</li></ul><p>频域增强（滤波）：</p><p>对图像经傅里叶变换后的频谱成分进行操作，然后经傅里叶逆变换获得所需结果。</p><p>同态增强（滤波）：</p><ul><li>同态滤波，作用在频率域中，其作用是对图像灰度范围进行调整，通过消除图像上照明不均匀的问题，增强图像的细节，同时不损失亮区的图像细节。</li><li>能够压缩图像亮度范围、增强图像对比度。</li></ul><blockquote><p>18. 伪彩色？</p></blockquote><p>同灰度图像一样,也是单波段的图像，但是这个单波段图像是有颜色的，不再是灰度图那样的，而是它的每一个灰度值都对应颜色空间中的某一种颜色。</p><h1id="二典型图像处理的基本过程及相关硬件设备">二、典型图像处理的基本过程及相关硬件设备</h1><h1 id="三数字图像处理的主要内容">三、数字图像处理的主要内容</h1><h1id="四数字图像处理所涉及的主要数学工具">四、数字图像处理所涉及的主要数学工具</h1><blockquote><p>1. 直方图 幅度密度函数 概率分布</p></blockquote><blockquote><p>2. 线性移不变系统 卷积</p></blockquote><p>卷积：</p><p><span class="math display">\[\int_{- \infty}^{+\infty} h(t - \iota) f(\iota) {\rm d}\iota\]</span></p><blockquote><p>3. 积分变换（傅立叶变换等）</p></blockquote><h1 id="五图像增强的基本方法">五、图像增强的基本方法</h1><blockquote><p>1. 直方图增强（均衡，规定）</p></blockquote><blockquote><p>2. 平滑：均值滤波 中值滤波 低通滤波 多图像平均法 自适应中值滤波自适应局部降噪滤波器 修正 alpha 均值滤波器</p></blockquote><blockquote><p>3. 锐化：微分锐化（Roberts，Priwitt，Sobel，高斯等） 高通锐化</p></blockquote><h2 id="privitt">Privitt</h2><p><img src="https://i.imgur.com/v66R9PQ.png" /></p><p><img src="" /></p><blockquote><p>4. 同态滤波</p></blockquote><h1 id="六图像恢复">六、图像恢复</h1><blockquote><p>1. 图像退化的基本数学模型及复原中的主要问题。</p></blockquote><blockquote><p>2. 运动模糊图像复原方法。</p></blockquote><h1 id="七形态学图像处理">七、形态学图像处理</h1><blockquote><p>膨胀、腐蚀、闭操作、开操作、填充、边缘提取、击中或击不中</p></blockquote><h2 id="膨胀">膨胀</h2><p><span class="math display">\[A \oplus B = {\{ z | (\mathop{\hat{B}}\limits)_z \cap A \neq \varnothing\}}\]</span></p><p>或</p><p><span class="math display">\[A \oplus B = { \{z | ( \mathop {\hat{B}} \limits  )_ z \cap A ⊆ A \}}\]</span></p><p>其中，<span class="math inline">\(A\)</span> 和 <spanclass="math inline">\(B\)</span> 是 <spanclass="math inline">\(Z^2\)</span> 中的集合。</p><h2 id="腐蚀">腐蚀</h2><p><span class="math inline">\(A\)</span> 被 <spanclass="math inline">\(B\)</span> 腐蚀：</p><p><span class="math display">\[A \ominus B = { \{z | ( B )_z \subseteq A \}}\]</span></p><p>或</p><p><span class="math display">\[A \ominus B = { \{z | ( B )_z \cap A^c = \varnothing \}}\]</span></p><h2 id="开操作">开操作</h2><p>也叫开运算。</p><p><span class="math display">\[A \circ B = (A \ominus B) \oplus B\]</span></p><p>也就是先腐蚀，然后膨胀。</p><h2 id="闭操作">闭操作</h2><p>也叫闭运算</p><p><span class="math display">\[A \bullet B = (A \oplus B) \ominus  B\]</span></p><p>即先膨胀，后腐蚀。</p><h2 id="填充">填充</h2><p><span class="math display">\[X_k = (X_{k - 1} \oplus B) \cap A^c \qquad k = 1,2,3,\cdots\]</span></p><p>填充过程实际上就是从边界上某一点 <spanclass="math inline">\(P\)</span>开始做以下迭代运算，用结构元素对其进行膨胀、求补和求交集的过程。</p><h2 id="边缘提取">边缘提取</h2><p>提取物体的轮廓边缘的形态学变换：</p><p><span class="math display">\[Y = X - (X \ominus B)\]</span></p><h2 id="击中和击不中">击中和击不中</h2><p><span class="math display">\[A \otimes B=(A \ominus X) \cap [A^c \ominus (W−X)]=(A \ominus B_1) \cap[A^c \ominus B_2]=(A \cap B_1)−[A^c \oplus {\mathop {\hat{B}}\limits}_z]\]</span></p><h1 id="八图像分割">八、图像分割</h1><blockquote><p>1. 点检测与线检测     Hough 变换与直线检测</p></blockquote><p>不考。</p><blockquote><p>2. 边缘检测：梯度算子 拉普拉斯算子 高斯拉普拉斯算子</p></blockquote><h2 id="梯度算子">梯度算子</h2><p><img src="https://i.imgur.com/s4ApjT3.png" /></p><h2 id="拉普拉斯算子">拉普拉斯算子</h2><p><img src="https://i.imgur.com/ky6SwlF.png" /></p><p><img src="https://i.imgur.com/5ejHDnm.png" /></p><h2 id="sobel-算子">Sobel 算子</h2><p><img src="https://i.imgur.com/Qeag8ui.png" /></p><p>[]</p><blockquote><p>3. 门限值分割：全局门限 局部门限 自适应门限一种自动确定门限值的方法</p></blockquote><blockquote><p>4. 区域生长 区域分裂与合并</p></blockquote><blockquote><p>5. 分水岭算法</p></blockquote><h1 id="九图像表示">九、图像表示</h1><blockquote><p>1. 表示方法：链码 多边形近似 边界分段 标记图</p></blockquote><h2 id="链码">链码</h2><p>用于表示由顺次连接的具有指定长度和方向的直线段组成的边界。</p><blockquote><p>2. 边界描述方法：周成 直径 形状数 傅里叶描述子 统计矩</p></blockquote><blockquote><p>3. 区域描述方法：面积 统计纹理（均值、标准差、熵、平滑度、一致性）灰度共生矩阵</p></blockquote><hr /><p>几张图：</p><p><img src="https://i.imgur.com/u14Evrz.png" /></p><p><img src="https://i.imgur.com/EqaRowV.png" /></p><p><img src="https://i.imgur.com/XIFrIQw.png" /></p><p><img src="https://i.imgur.com/aSMT8wC.png" /></p><p><img src="https://i.imgur.com/PCwDM3P.png" /></p><p><img src="https://i.imgur.com/tTq9HRD.png" /></p><p><img src="https://i.imgur.com/Pp98im5.png" /></p><p><img src="https://i.imgur.com/ATvJkzk.png" /></p><p><img src="https://i.imgur.com/yIdcXdI.png" alt="直方图均衡化" /></p><p><img src="https://i.imgur.com/WLSdJB5.png" /></p><p><img src="https://i.imgur.com/IoV2kW6.png" alt="卷积" /></p><p><img src="https://i.imgur.com/qWCusA8.png" /></p><p><img src="https://i.imgur.com/AhhMJdA.png" alt="各种算子" /></p><p><img src="https://i.imgur.com/362U0jf.png" /></p><p><img src="https://i.imgur.com/P3mZ9gz.png" /></p>]]></content>
    
    
    <categories>
      
      <category>数字图像处理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字图像处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu Linux 升级 node 和 npm</title>
    <link href="/2021/11/07/Ubuntu-Linux-%E5%8D%87%E7%BA%A7-node-%E5%92%8C-npm/"/>
    <url>/2021/11/07/Ubuntu-Linux-%E5%8D%87%E7%BA%A7-node-%E5%92%8C-npm/</url>
    
    <content type="html"><![CDATA[<p>在 Ubuntu 21.10 中，使用 <code>sudo apt install node</code> 安装的node 和 npm 的版本有点低，因为之后需要安装 Hexo，如果 node版本过低的话，可能会报一些奇怪的错误，所以，这里就记录一下升级 node 和npm 的过程。</p><p>按：其实只需要升级 node，因为 npm 是和 node 绑在一起的。</p><p>执行以下命令，用 npm 安装 node 工具包 <code>n</code>，使用该工具将node 版本升级到最新版本：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> n <span class="token parameter variable">-g</span>$ <span class="token function">sudo</span> n stable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><hr /><p>参考：</p><p>1、<ahref="http://www.guohuawei.com/archives/upgrade-node-for-ubuntu.html"class="uri">http://www.guohuawei.com/archives/upgrade-node-for-ubuntu.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vim 使用笔记(快捷键)</title>
    <link href="/2021/11/05/Vim-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/11/05/Vim-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="vim-设置相关问题">Vim 设置相关问题</h1><blockquote><p>Vim 中和 IDEA 中的 Shift + Enter 快捷键相当的操作是什么？</p></blockquote><p>Esc 回到 NORMAL 模式，然后按小写的o，这样就会在当前行下面插入一行，并且光标会来到下一行的开头，模式会自动切换到INSERT 模式。</p><p>如果是按大写的O，那么，就会在当前行的上一行插入新的一行，然后光标来到上一行的开头，模式自动切换到INSERT 模式。</p><blockquote><p>如何设置 Vim 大括号自动补全并且换行对齐？</p></blockquote><p>首先，要有以下的配置：</p><figure><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token keyword">set</span> <span class="token builtin">smartindent</span><span class="token keyword">set</span> <span class="token builtin">tabstop</span><span class="token operator">=</span><span class="token number">4</span><span class="token keyword">set</span> <span class="token builtin">shiftwidth</span><span class="token operator">=</span><span class="token number">4</span><span class="token keyword">set</span> <span class="token builtin">expandtab</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>按：这个配置是用来设置智能缩进的。</p><p>然后，添加映射：</p><figure><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">imap <span class="token punctuation">&#123;</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>ESC<span class="token operator">></span>i<span class="token operator">&lt;</span>CR<span class="token operator">></span><span class="token operator">&lt;</span>ESC<span class="token operator">></span>V<span class="token operator">&lt;</span>O<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>按：这个自动补全似乎不是一个好主意。之后还是被我取消掉了。</p><p>这个主要是为了写 C 语言时候用。</p><blockquote><p>如何设置 Vim 显示行号？</p></blockquote><p>添加如下配置：</p><figure><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token keyword">set</span> <span class="token keyword">number</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><blockquote><p>Vim 有关 C 语言缩进相关的问题？</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token keyword">set</span> <span class="token keyword">number</span><span class="token keyword">set</span> <span class="token builtin">tabstop</span><span class="token operator">=</span><span class="token number">4</span><span class="token keyword">set</span> <span class="token builtin">softtabstop</span><span class="token operator">=</span><span class="token number">4</span><span class="token keyword">set</span> <span class="token builtin">shiftwidth</span><span class="token operator">=</span><span class="token number">4</span><span class="token keyword">set</span> <span class="token builtin">autoindent</span><span class="token keyword">set</span> <span class="token builtin">cindent</span><span class="token keyword">set</span> <span class="token builtin">smartindent</span><span class="token keyword">set</span> <span class="token builtin">clipboard</span>^<span class="token operator">=</span>unnamed<span class="token punctuation">,</span>unnamedplus<span class="token keyword">source</span> $VIMRUNTIME<span class="token operator">/</span>vimrc_example<span class="token operator">.</span><span class="token keyword">vim</span><span class="token keyword">set</span> <span class="token builtin">nobackup</span><span class="token keyword">set</span> noundofile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>对于设置的解释：</p><ul><li>tabstop=X # 一个 TAB 字符占 X 个空格，C/C++、python 都建议设置为4，下同</li><li>softtabstop=X # 前面有 X 个空格时，再按下一次 tab，这 X个空格就会和上一个 X 个空格组合成一个制表符，也就是方便退格</li><li>shiftwidth=X # 每行缩进 X 个空格</li><li>autoindent # 自动缩进</li><li>cindent # C 语言风格的缩进</li><li>smartindent #智能缩进，每行都和前一行的缩进量相同，还能识别花括号，遇到<code>&#123;</code> 则取消缩进。</li><li>expandtab # expandtab 是把输入的tab转换成空格</li></ul><blockquote><p>设置字符编码相关？</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token keyword">set</span> <span class="token builtin">fileencoding</span><span class="token operator">=</span>utf<span class="token operator">-</span><span class="token number">8</span><span class="token keyword">set</span> <span class="token builtin">encoding</span><span class="token operator">=</span>utf<span class="token operator">-</span><span class="token number">8</span><span class="token keyword">set</span> <span class="token builtin">termencoding</span><span class="token operator">=</span>utf<span class="token operator">-</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>Windows 的 Vim 使其不要创建多余的文件？消除 <code>~</code> 和<code>.un~</code> 后缀文件生成的操作？</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token keyword">set</span> <span class="token builtin">nobackup</span><span class="token keyword">set</span> noundofile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h1 id="vim-快捷键相关问题">Vim 快捷键相关问题</h1><blockquote><p>基本操作？</p></blockquote><ul><li><code>ESC</code>：从当前模式转换到 NORMAL 模式；</li><li><code>i</code>：从 NORMAL 模式转到 INSERT 模式；</li><li><code>:</code>：命令行模式。Vim希望你输入类似于保存该文档命令的地方。</li></ul><h2 id="方向键">方向键</h2><blockquote><p>光标向左移动一个字符？</p></blockquote><p><code>h</code></p><blockquote><p>光标向下移动一行？</p></blockquote><p><code>j</code> 或 <code>Ctrl + J</code></p><blockquote><p>光标向上移动一行？</p></blockquote><p><code>k</code> 或 <code>Ctrl + P</code></p><blockquote><p>光标向右移动一个字符？</p></blockquote><p><code>l</code></p><p>按：是英文字母 <code>l</code>。</p><blockquote><p>移动光标至本行开头？</p></blockquote><p><code>0</code></p><p>按：是数字 <code>0</code>。</p><blockquote><p>移动光标到本行末尾？</p></blockquote><p><code>$</code></p><blockquote><p>移动光标至本行第一个非空字符处？</p></blockquote><p><code>^</code></p><blockquote><p>向右移动一个词？</p></blockquote><p><code>w</code></p><p>按：上一个字母和数字组成的词之后。</p><blockquote><p>向右移动一个词？</p></blockquote><p><code>W</code></p><p>按：以空格分隔的词。</p><blockquote><p>向右移动 5 个词？</p></blockquote><p><code>5w</code></p><blockquote><p>向左移动一个词？</p></blockquote><p><code>b</code></p><p>按：下一个字母和数字组成的词之后。</p><blockquote><p>向左移动一个词？</p></blockquote><p><code>B</code></p><p>按：以空格分隔的词。</p><blockquote><p>向左移动 5 个词？</p></blockquote><p><code>5b</code></p><blockquote><p>移动至文件末尾？</p></blockquote><p><code>G</code></p><blockquote><p>移动至文件开头？</p></blockquote><p><code>gg</code></p><blockquote><p>设置缓冲区使当前行居中？</p></blockquote><p>zz。</p><h2 id="删除文本">删除文本</h2><blockquote><p>删除光标处字符？</p></blockquote><p><code>x</code></p><blockquote><p>删除一个词？</p></blockquote><p><code>dw</code>：从光标当前的位置开始删除，直到删除到单词的最后。</p><p><code>daw</code>：删除光标所在的一个单词。delete a word。</p><p><code>caw</code>：删除光标所在的一个单词，并且模式转成 INSERT模式。</p><ul><li>如果该单词是在一段文字的中间部分，即，前面也有单词，后面也有单词，此时，此命令在删除单词的同时，会将此单词后面的空格连带着删除，但是不删除前面的空格。</li><li>如果该单词是最后一个单词，并且后面紧跟着半角句号，那么，此命令会连带着删除原单词前面的空格。</li><li>如果如果该单词是最后一个单词，并且后面没有标点符号，那么，此命令不会删除原单词前面的空格。</li></ul><p><code>bdw</code>：这是一个复合命令。b可以让光标退回到单词开头的位置，而 dw 上面描述过的命令。</p><blockquote><p>删除光标前面的单词。</p></blockquote><p>在 NORMAL 模式下，键入 <code>Ctrl + W</code>。</p><p>这个和在 bash 以及 PowerShell 中删除一个单词的方法是一样的。</p><blockquote><p>删除至行首？</p></blockquote><p><code>d0</code></p><blockquote><p>删除至行末？</p></blockquote><p><code>d$</code></p><blockquote><p>删除至句末？</p></blockquote><p><code>d)</code></p><p>按：啥叫句末？</p><blockquote><p>删至文件开头？</p></blockquote><p><code>dgg</code></p><blockquote><p>删除至文件末尾？</p></blockquote><p><code>dG</code></p><blockquote><p>删除当前行？</p></blockquote><p><code>dd</code></p><blockquote><p>删除 3 行？</p></blockquote><p><code>3dd</code></p><h2 id="剪切复制">剪切、复制</h2><blockquote><p>剪切某一行？</p></blockquote><p>dd。</p><blockquote><p>如何全选复制？</p></blockquote><p>按 ESC 键后，先按 <code>gg</code>，然后按 <code>yG</code>。</p><p>按：<code>gg</code> 是让光标回到文件开头，<code>yG</code>是从当前行复制到文件结尾。</p><blockquote><p>复制一个单词？</p></blockquote><p><code>yaw</code>：复制光标所在处的单词。</p><p><code>yw</code>：和 <code>dw</code>类似，只是，这个是复制。从光标所在处复制，直到复制到单词的最后。</p><p>更多见：<ahref="https://fanlumaster.github.io/2021/11/26/vim-%E7%9A%84%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4/">vim的复制粘贴</a>。</p><h2 id="翻页">翻页</h2><blockquote><p>翻到下一页？</p></blockquote><p>在 vim 中翻页，同样可以使用 PageUp 和PageDown，不过，这会使手指移出主键盘区。</p><p>所以，可以使用 <code>Ctrl + B</code> 和 <code>Ctrl + F</code>来进行翻页，它们的功能等同于 PageUp 和 PageDown。</p><p><code>Ctrl + B</code> 和 <code>Ctrl + F</code>前也可以加数字，来表示向上或向下翻多少页。</p><blockquote><p>向下翻一行？向上翻一行？</p></blockquote><ul><li>向下：<code>Ctrl + E</code></li><li>向上：<code>Ctrl + Y</code></li></ul><h2 id="搜索">搜索</h2><p>In Vim, you can find and replace text using the :substitute (:s)command.</p><blockquote><p>搜索一个单词？</p></blockquote><p>按 <code>/</code> 然后输入要搜索的单词</p><p>更多内容，见：</p><h1 id="some-tricks">Some Tricks</h1><figure><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token operator">%</span>s<span class="token operator">/</span><span class="token operator">.</span><span class="token operator">/</span>&amp;<span class="token operator">/</span>g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>按：<code>&amp;</code>表示匹配到的内容。这个命令执行完之后，文本不会发生任何变化，但是会有一个Side Effect，即我们会得到当前这个文本的字符数量。</p><h1 id="其他">其他</h1><blockquote><p>如何判断 Vim 是否剪切板？</p></blockquote><p>在 Shell 输入</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">vim</span> <span class="token parameter variable">--version</span> <span class="token operator">|</span> <span class="token function">grep</span> clipboard<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>如果输出包含 <code>+clipboard</code> 就表示支持，如果是<code>-clipboard</code> 就表示不支持。</p><p>如果不支持，Ubuntu 可以先卸载原来的 Vim，然后安装 vim-gtk。</p><blockquote><p>Window 下的 Git Bash 如何配置 Vim？</p></blockquote><p>在 <code>C:\Program Files\Git\etc</code> 目录下找到 vimrc文件，然后使用 VSCode 打开进行配置（需要管理员权限）。</p><hr /><p>参考：</p><p>1、<ahref="https://blog.csdn.net/weixin_42037232/article/details/100069365">缩进相关</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译原理作业四</title>
    <link href="/2021/10/31/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E4%BD%9C%E4%B8%9A%E5%9B%9B/"/>
    <url>/2021/10/31/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E4%BD%9C%E4%B8%9A%E5%9B%9B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>1、已知文法</p></blockquote><p><span class="math display">\[A \rightarrow aAd | aAb | \varepsilon\]</span></p><p>判断该文法是否是 <span class="math inline">\(SLR(1)\)</span>文法，若是，请构造相应分析表，并对输入串 <spanclass="math inline">\(ab\#\)</span> 给出分析过程。</p><p>解：</p><p>文法 <span class="math inline">\(A \rightarrow aAd | aAb |\varepsilon\)</span> 的增广文法为 <spanclass="math inline">\(G^{&#39;}\)</span>，增加产生式 <spanclass="math inline">\(S^{&#39;} \rightarrowA\)</span>，若产生式排序为：</p><p><span class="math display">\[\begin{split}0 \quad &amp;S^{&#39;} \rightarrow A \\1 \quad &amp;A \rightarrow aAd \\2 \quad &amp;A \rightarrow aAb \\3 \quad &amp;A \rightarrow \varepsilon\end{split}\]</span></p><p>由产生式知：</p><p><span class="math display">\[\begin{split}&amp;FIRST(S^{&#39;}) = \{\varepsilon, a\} \\&amp;FIRST(A) = \{\varepsilon, a\} \\&amp;FOLLOW(S^{&#39;}) = \{\#\} \\&amp;FOLLOW(A) = \{d, b, \#\} \\\end{split}\]</span></p><p><span class="math inline">\(G^{&#39;}\)</span> 的 <spanclass="math inline">\(LR(0)\)</span> 项目集族及识别活前缀的 <spanclass="math inline">\(\text{DFA}\)</span> 如下图所示：</p><p><img src="https://i.imgur.com/sTllnN1.png" /></p><p>由图可知，此状态机存在移进-归约冲突，故不是 <spanclass="math inline">\(LR(0)\)</span> 文法。</p><p>在 <span class="math inline">\(I_0\)</span>、<spanclass="math inline">\(I_2\)</span> 中，</p><p><span class="math display">\[FOLLOW(A) \cap \{a\} = \{d, b, \#\} \cap \{a\} = \varnothing\]</span></p><p>所以在 <span class="math inline">\(I_0\)</span>、<spanclass="math inline">\(I_2\)</span> 中的移进-归约冲突可以由 <spanclass="math inline">\(FOLLOW\)</span> 集解决，所以 <spanclass="math inline">\(G\)</span> 是 <spanclass="math inline">\(SLR(1)\)</span> 文法。</p><p>构造 <span class="math inline">\(SLR(1)\)</span> 分析表如下：</p><p><img src="https://i.imgur.com/4uV2L5I.png" /></p><p>对输入串 <span class="math inline">\(ab\#\)</span> 的分析过程如下</p><p><img src="https://i.imgur.com/srINzNh.png" /></p><p>分析成功，说明输入串 <span class="math inline">\(ab\)</span>是文法的句子。</p><blockquote><p>3、考虑文法</p></blockquote><p><span class="math display">\[\begin{split}S \rightarrow AS | b \\A \rightarrow SA | a\end{split}\]</span></p><p>(1) 列出这个文法的所有 <spanclass="math inline">\(\text{LR}(0)\)</span> 项目。<br />(2) 按 (1) 列出的项目构造识别这个文法活前缀的 <spanclass="math inline">\(\text{NFA}\)</span>，把这个 <spanclass="math inline">\(\text{NFA}\)</span> 确定化为 <spanclass="math inline">\(\text{DFA}\)</span>，说明这个 <spanclass="math inline">\(\text{DFA}\)</span> 的所有状态全体构成这个文法的<span class="math inline">\(\text{LR}(0)\)</span> 规范族。<br />(3) 这个文法是 <span class="math inline">\(\text{SLR}(1)\)</span>的吗？若是，构造出它的 <span class="math inline">\(\text{SLR}\)</span>分析表。<br />(4) 这个文法是 <span class="math inline">\(\text{LALR}(1)\)</span> 或<span class="math inline">\(\text{LR}(1)\)</span> 的吗？</p><p>解：</p><p>(1) 令增广文法 <span class="math inline">\(G^{&#39;}\)</span> 为</p><p><span class="math display">\[\begin{split}0 \quad &amp;S^{&#39;} \rightarrow S \\1 \quad &amp;S \rightarrow AS \\2 \quad &amp;S \rightarrow b \\3 \quad &amp;A \rightarrow SA \\4 \quad &amp;A \rightarrow a\end{split}\]</span></p><p>文法所有的 <span class="math inline">\(\text{LR}(0)\)</span>项目如下：</p><p><img src="https://i.imgur.com/c5mHs4b.png" /></p><p>(2) (1) 中构造的增广文法，其 <spanclass="math inline">\(\text{LR}(0)\)</span>项目集规范族及其文法识别活前缀的 <spanclass="math inline">\(\text{DFA}\)</span> 如下：</p><p><img src="https://i.imgur.com/bsPyDgM.png" /></p><p>(3) 不是。</p>]]></content>
    
    
    <categories>
      
      <category>编译原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编译原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译原理之自底向上分析学习笔记</title>
    <link href="/2021/10/30/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E4%B9%8B%E8%87%AA%E5%BA%95%E5%90%91%E4%B8%8A%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/10/30/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E4%B9%8B%E8%87%AA%E5%BA%95%E5%90%91%E4%B8%8A%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>系哈工大陈鄞慕课笔记。</p><blockquote><p>“句柄”的另一个定义？</p></blockquote><p>在“移入-归约”分析中，每次归约的符号串称为“句柄”。</p><p>又：句柄是句型的最左直接短语。</p><p>按：这个和句柄的最初的定义是一致且吻合的。</p><blockquote><p>一个移入-归约分析的例子。</p></blockquote><p><img src="https://i.imgur.com/HFplruP.png" /></p><blockquote><p>在移入-归约分析（可以参见上图）中，对<code>栈内符号串 + 剩余输入 = “规范句型”</code> 的理解？</p></blockquote><p>可以结合下面的定义来理解：</p><ul><li><p>在形式语言中，最右推导常被称为<strong>规范推导</strong>。</p></li><li><p>由规范推导所得的句型称为<strong>右句型</strong>或<strong>规范句型</strong>。</p></li></ul><p>按：本来这个移入-归约分析采用的就是最左归约方式（反向构造最右推导），所以，从例子的最后一行往上看，那么，显然它就是最右推导嘛，那么，结果就很显然了。</p><blockquote><p>移入-归约分析器可采取的 4 中动作？</p></blockquote><ul><li>移入：将下一个输入符号移到栈的顶端</li><li>归约：被归约的符号串的右端必然处于栈顶。语法分析器在栈中确定这个串的左端，并决定用哪个非终结符来替换这个串</li><li>接收：宣布语法分析过程成功完成</li><li>报错：发现一个语法错误，并调用错误恢复子例程</li></ul><p>按：这个错误恢复子例程的规则应是由写程序的人来定。</p><blockquote><p>移入-归约分析中存在的问题？</p></blockquote><p>在归约的过程中，应该被归约的字符串的左端可能不会被正确识别到，即错误地识别了句柄。</p><blockquote><p><span class="math inline">\(LR\)</span> 分析的含义？</p></blockquote><ol type="1"><li><p><span class="math inline">\(LR\)</span>文法是最大的、可以构造出相应移入-归约语法分析器的文法类</p><ul><li>L：对输入进行从左到右的扫描</li><li>R：反向构造出一个最右推导序列</li></ul><p>按：这和前面那张移入-归约分析图的过程很像啊。</p></li><li><p><span class="math inline">\(LR(k)\)</span> 分析</p><ul><li>需要向前查看 k 个输入符号的 LR 分析<br />按：这里的向前在输入符号串中表现为向右。</li></ul></li></ol><blockquote><p>如何用“状态”表示句柄识别的进展程度？</p></blockquote><p><img src="https://i.imgur.com/52H3LGJ.png" /></p><p><span class="math display">\[\begin{split}S &amp;\rightarrow \cdot bBB \quad &amp;移进状态\\S &amp;\rightarrow b \cdot BB \quad &amp;待约状态\\S &amp;\rightarrow bB \cdot B \quad &amp;待约状态 \\S &amp;\rightarrow bBB \cdot \quad &amp;归约状态 \\\end{split}\]</span></p><blockquote><p><span class="math inline">\(LR\)</span> 分析表的结构？</p></blockquote><p><img src="https://i.imgur.com/3uKaGLp.png" /></p><p>注意这里的 <span class="math inline">\(sn\)</span> 和 <spanclass="math inline">\(rn\)</span> 的含义：</p><ul><li><span class="math inline">\(sn\)</span>：将符号 <spanclass="math inline">\(a\)</span>、状态 <spanclass="math inline">\(n\)</span> 压入栈</li><li><span class="math inline">\(rn\)</span>：用第 <spanclass="math inline">\(n\)</span> 个产生式进行归约</li></ul><blockquote><p>一个 <span class="math inline">\(LR\)</span> 分析的例子？</p></blockquote><p>文法：</p><p><span class="math display">\[\begin{split}① \; &amp;S \rightarrow BB \\② \; &amp;B \rightarrow aB \\③ \; &amp;B \rightarrow b\end{split}\]</span></p><p><img src="https://i.imgur.com/bDn8OPS.png" alt="状态表" /></p><p>初始情况：</p><p>输入：<span class="math inline">\(b \; a \; b\)</span></p><p><span class="math display">\[\begin{split}&amp;栈 \qquad &amp;剩余输入 \\&amp;0 \qquad &amp;　\\&amp;\$ \qquad &amp;bab\$\end{split}\]</span></p><p>然后分析过程如下：</p><p>初始状态是 0，遇到输入的符号 b，其操作是 <spanclass="math inline">\(s4\)</span>，即将 <spanclass="math inline">\(b\)</span>、状态 <spanclass="math inline">\(4\)</span> 压入栈，</p><p><span class="math display">\[\begin{split}&amp;栈 \qquad &amp;剩余输入 \\&amp;04 \qquad &amp;　\\&amp;\$b \qquad &amp;ab\$\end{split}\]</span></p><p>然后是状态 4 遇到输入 a，查表，得 <spanclass="math inline">\(r3\)</span>，即用文法中的第 3 个式子进行归约，状态4 和符号 <span class="math inline">\(b\)</span> 出栈，<spanclass="math inline">\(B\)</span> 入栈，然后此时状态栈的 0 遇到了刚入栈的<span class="math inline">\(B\)</span>，就会 "GOTO" 到状态2，这个可以通过查表得到，</p><p><span class="math display">\[\begin{split}&amp;栈 \qquad &amp;剩余输入 \\&amp;02 \qquad &amp;　\\&amp;\$B \qquad &amp;ab\$\end{split}\]</span></p><p>然后，状态 2 遇到 a，采取 <span class="math inline">\(s3\)</span>操作，</p><p><span class="math display">\[\begin{split}&amp;栈 \qquad &amp;剩余输入 \\&amp;023 \qquad &amp;　\\&amp;\$Ba \qquad &amp;b\$\end{split}\]</span></p><p>然后，3 遇到 b，<span class="math inline">\(s4\)</span>，</p><p><span class="math display">\[\begin{split}&amp;栈 \qquad &amp;剩余输入 \\&amp;0234 \qquad &amp;　\\&amp;\$Bab \qquad &amp;\$\end{split}\]</span></p><p>然后，4 遇到 <span class="math inline">\(\$\)</span>，<spanclass="math inline">\(r3\)</span>，将状态 4 和栈顶符号 <spanclass="math inline">\(b\)</span> 一起出栈，然后将刚刚的 <spanclass="math inline">\(b\)</span> 归约成 <spanclass="math inline">\(B\)</span> 并将其入栈，然后现在的状态栈栈顶的 3遇到刚刚入栈的 B，就会 "GOTO" 到状态 6，</p><p><span class="math display">\[\begin{split}&amp;栈 \qquad &amp;剩余输入 \\&amp;0236 \qquad &amp;　\\&amp;\$BaB \qquad &amp;\$\end{split}\]</span></p><p>然后，6 遇到 <span class="math inline">\(\$\)</span>，<spanclass="math inline">\(r2\)</span>，将状态 <spanclass="math inline">\(3\)</span>、<span class="math inline">\(6\)</span>和符号 <span class="math inline">\(a\)</span>、<spanclass="math inline">\(B\)</span> 一起出栈，然后将归约成的 <spanclass="math inline">\(B\)</span> 入栈，然后现在状态栈栈顶的 2遇到刚刚入栈的 <span class="math inline">\(B\)</span>，会 "GOTO" 到状态5，</p><p><span class="math display">\[\begin{split}&amp;栈 \qquad &amp;剩余输入 \\&amp;025 \qquad &amp;　\\&amp;\$BB \qquad &amp;\$\end{split}\]</span></p><p>然后，5 遇到 <span class="math inline">\(\$\)</span>，<spanclass="math inline">\(r1\)</span>，</p><p><span class="math display">\[\begin{split}&amp;栈 \qquad &amp;剩余输入 \\&amp;01 \qquad &amp;　\\&amp;\$S \qquad &amp;\$\end{split}\]</span></p><p>然后，1 遇到 <span class="math inline">\(\$\)</span>，到达状态"acc"，分析成功，分析到此结束。</p><blockquote><p>何为 <span class="math inline">\(LR(0)\)</span> 项目？</p></blockquote><p>右部某位置标有圆点的产生式称为相应文法的一个 <spanclass="math inline">\(LR(0)\)</span> 项目（简称为项目）。</p><p><span class="math display">\[A \rightarrow \alpha_{1} \cdot \alpha_{2}\]</span></p><blockquote><p>何为增广文法？</p></blockquote><p>如果 <span class="math inline">\(G\)</span> 是一个以 <spanclass="math inline">\(S\)</span> 为开始符号的文法，则 <spanclass="math inline">\(G\)</span> 的增广文法 <spanclass="math inline">\(G^{&#39;}\)</span> 就是在 <spanclass="math inline">\(G\)</span> 中加上新开始符号 <spanclass="math inline">\(S^{&#39;}\)</span> 和产生式 <spanclass="math inline">\(S^{&#39;} \rightarrow S\)</span>而得到的文法。</p><p>引入这个新的开始产生式的目的是使得文法开始符号仅出现在一个产生式的左边，从而使得分析器只有一个接受状态。</p><blockquote><p>何为后继项目（Successive Item）？</p></blockquote><ul><li>同属于一个产生式的项目，但圆点的位置只相差一个符号，则称后者是前者的后继项目；</li><li><span class="math inline">\(A \rightarrow \alpha \cdot X\beta\)</span> 的后继项目是 <span class="math inline">\(A \rightarrow\alpha X \cdot \beta\)</span>。</li></ul><blockquote><p>如何理解某些项目是等价的？</p></blockquote><p><img src="https://i.imgur.com/fofA0QW.png" /></p><p>以上面的文法举例。</p><p>项目 <code>(0)</code> 和 项目 <code>(2)</code>是等价的，理由是：对于项目 <code>(0)</code>，我们在等待 <spanclass="math inline">\(S\)</span> 的时候，根据产生式②，就相当于我们在等待<span class="math inline">\(v\)</span>，所以 <code>(0)</code> 和<code>(2)</code> 是等价的。</p><p>同理，其它的等价的项目归类如下：</p><p><span class="math display">\[\begin{split}&amp;(3) \; (7) \; (11) \\&amp;(5) \; (13)\end{split}\]</span></p><p>按：当圆点后面是非终结符时，就存在等价项目。</p><blockquote><p>何为项目集闭包？</p></blockquote><p>可以把等价的项目组成一个项目集(<spanclass="math inline">\(I\)</span>)，称为项目集闭包（Closure of ItemSets），每个项目集闭包对应着自动机的一个状态。</p><blockquote><p>如何计算给定项目集 <span class="math inline">\(I\)</span>的闭包？</p></blockquote><p><span class="math display">\[\text{CLOSURE}(I) = I \cup \{B \rightarrow \cdot \gamma | A \rightarrow\alpha \cdot B \beta \in \text{CLOSURE}(I), \; B \rightarrow \gamma \inP\}\]</span></p><p>根据这个公式计算即可。</p><p>按：可以从第一个项目依次往下计算，在计算的过程中，如果有已经被加入相应项目集闭包的项目，就跳过。</p><blockquote><p>如何理解和计算 <span class="math inline">\(\text{GOTO()}\)</span>函数？</p></blockquote><p>此函数返回项目集 <span class="math inline">\(I\)</span>对应于文法符号 <span class="math inline">\(X\)</span>的后继项目集闭包</p><p><span class="math display">\[\text{GOTO}(I, X) = \text{CLOSURE}(\{A \rightarrow \alpha X \cdot \beta| A \rightarrow \alpha \cdot X \beta \in I\})\]</span></p><p>按：一个 <span class="math inline">\(I\)</span>就相当于一个状态，然后，对于 <spanclass="math inline">\(\text{GOTO}\)</span>，简单理解，就是状态 <spanclass="math inline">\(I\)</span> 接受了一个符号 <spanclass="math inline">\(X\)</span> 之后就“GOTO”到了另外一个状态。</p><blockquote><p>如何构造 <span class="math inline">\(LR(0)\)</span>自动机的状态机？</p></blockquote><p>规范 <span class="math inline">\(LR(0)\)</span> 项集族（Canonical<span class="math inline">\(LR(0) Collection\)</span>）</p><p><span class="math display">\[C = \{I_0\} \cup \{I | \exists J \in C, X \in V_N \cup V_T, I = GOTO(J,X)\}\]</span></p><p>按：简单来讲，就是从初始项目集一步一步往下构造。</p><blockquote><p><span class="math inline">\(LR(0)\)</span> 分析表的构造算法？</p></blockquote><p><img src="https://i.imgur.com/6AVfn7Y.png" /></p><blockquote><p><span class="math inline">\(LR(0)\)</span> 自动机的形式化定义？</p></blockquote><p><img src="https://i.imgur.com/RTQl9dd.png" /></p><ul><li><span class="math inline">\(I_0\)</span> 代表初始状态集合；</li><li><span class="math inline">\(F\)</span> 代表终止状态集合。</li></ul><blockquote><p>何为移进/归约冲突？</p></blockquote><p>简单来讲，就是某个状态遇到某一个输入符号时，不知道该进行移进动作还是归约动作。</p><p><img src="https://i.imgur.com/PTeoz8m.png" /></p><p>按：这里的状态 2 在遇到 <code>*</code> 时，不知道是该将 <spanclass="math inline">\(E \rightarrow T \cdot\)</span> 归约成 <spanclass="math inline">\(E\)</span>，还是针对 <span class="math inline">\(T\rightarrow T \cdot * F\)</span> 将 <code>*</code> 给移进。状态 9也是同样的问题。但是，就状态 2 而言，如果采取归约动作的话，即，将 <spanclass="math inline">\(T \cdot\)</span> 归约成 <spanclass="math inline">\(E\)</span>，那么，由于 <spanclass="math inline">\(E\)</span> 的 <spanclass="math inline">\(FOLLOW\)</span> 集中没有 <spanclass="math inline">\(*\)</span>，显然，这是不合理的。</p><p><img src="https://i.imgur.com/IbwRzYV.png" /></p><blockquote><p>何为归约/归约冲突？</p></blockquote><p>理解的方法同上面的移进/归约冲突。</p><blockquote><p>如何判定一个文法是否是 <span class="math inline">\(LR(0)\)</span>文法？</p></blockquote><p>如果 <span class="math inline">\(LR(0)\)</span>分析表中没有语法分析动作冲突，那么给定的文法就称为 <spanclass="math inline">\(LR(0)\)</span> 文法。</p><blockquote><p>何为 <span class="math inline">\(CFG\)</span>？</p></blockquote><p>所谓 <spanclass="math inline">\(CFG\)</span>，就是指上下文无关文法（Context-FreeGrammar, CFG），也即 2 型文法（Type-2 Grammar）。</p><blockquote><p>何为 <span class="math inline">\(SLR\)</span> 分析法？</p></blockquote><p>这里的 <span class="math inline">\(S\)</span> 代表 Simple的意思，<span class="math inline">\(SLR\)</span> 就表示简单的 <spanclass="math inline">\(LR\)</span> 分析法，要注意这里的 <spanclass="math inline">\(SLR\)</span> 是省略的写法，完整的写法是 <spanclass="math inline">\(SLR(1)\)</span>。</p><blockquote><p><span class="math inline">\(SLR\)</span> 分析的基本思想？</p></blockquote><p><img src="https://i.imgur.com/DvhquUd.png" /></p><blockquote><p>何为 <span class="math inline">\(\text{SLR}\)</span> 文法？</p></blockquote><p>如果给定文法的 SLR 分析表中不存在有冲突的动作，那么该文法称为 SLR文法。</p><blockquote><p><span class="math inline">\(\text{SLR}\)</span> 分析的冲突举例？</p></blockquote><p><img src="https://i.imgur.com/nR0MSyS.png" /></p><p>所谓 <span class="math inline">\(\text{SLR}\)</span>分析的冲突，如状态 2，如果选择归约动作，即，将 <spanclass="math inline">\(L \cdot\)</span> 归约成 <spanclass="math inline">\(R\)</span>，由于 <spanclass="math inline">\(R\)</span> 的 <spanclass="math inline">\(FOLLOW\)</span> 中有 <code>=</code>这个符号，所以这个动作是可以；但是显然在这里采取移进动作也是可行的，所以就产生了冲突。</p><blockquote><p><span class="math inline">\(SLR\)</span> 分析存在的问题？</p></blockquote><p><span class="math inline">\(SLR\)</span> 只是简单地考察下一个输入符号<span class="math inline">\(b\)</span> 是否属于归约项目 <spanclass="math inline">\(A \rightarrow \alpha\)</span> 相关联的 <spanclass="math inline">\(FOLLOW(A)\)</span>。</p><p>按：<span class="math inline">\(FOLLOW\)</span>集可以帮助我们排除一些不合理的归约，但是不能确保正确的归约。</p><p><img src="https://i.imgur.com/bJPhHk4.png" /></p><p>按；</p><ul><li>注意，图中的树状图并不是语法树，而是该文法的一个句型对应的分析树，这个要结合文法来看。</li><li>对于图中红色的式子，拿最右边的 <span class="math inline">\(R\rightarrow L \cdot, \$\)</span>来举例，它表示的含义是只有当下一个输入符号是 <spanclass="math inline">\(\$\)</span> 时才能够将 <spanclass="math inline">\(L \cdot, \$\)</span> 归约成 <spanclass="math inline">\(R\)</span>。</li></ul><blockquote><p>何为规范 <span class="math inline">\(LR(1)\)</span> 项目？</p></blockquote><p><img src="https://i.imgur.com/1rgfjao.png" /></p><blockquote><p>如何理解等价 <span class="math inline">\(LR(1)\)</span> 项目？</p></blockquote><p><img src="https://i.imgur.com/Rq8ABfL.png" /></p><p>按：这个概念的理解可以类比等价的 <spanclass="math inline">\(LR(0)\)</span> 项目。</p><blockquote><p>一个 <span class="math inline">\(LR(1)\)</span> 自动机的例子？</p></blockquote><p><img src="https://i.imgur.com/DwQbGYR.png" /></p>]]></content>
    
    
    <categories>
      
      <category>编译原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编译原理</tag>
      
      <tag>网课笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 配置 OpenCV 环境</title>
    <link href="/2021/10/30/Python-%E9%85%8D%E7%BD%AE-OpenCV-%E7%8E%AF%E5%A2%83/"/>
    <url>/2021/10/30/Python-%E9%85%8D%E7%BD%AE-OpenCV-%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<p>在安装好了 Python 环境之后，直接使用 <code>pip</code>命令安装即可：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> opencv-python<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/iQVX15Y.png" /></p><p>我这里是使用 PyCharm 这个 IDE，并且使用了虚拟的 Python 环境，所以就在PyCharm 提供的 Terminal 中进行安装。</p>]]></content>
    
    
    <categories>
      
      <category>OpenCV</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>OpenCV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《OpenCV 4 计算机视觉：Python 语言实现（原书第 3 版）》阅读札记</title>
    <link href="/2021/10/30/%E3%80%8AOpenCV-4-%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%EF%BC%9APython-%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%EF%BC%88%E5%8E%9F%E4%B9%A6%E7%AC%AC-3-%E7%89%88%EF%BC%89%E3%80%8B%E9%98%85%E8%AF%BB%E6%9C%AD%E8%AE%B0/"/>
    <url>/2021/10/30/%E3%80%8AOpenCV-4-%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%EF%BC%9APython-%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%EF%BC%88%E5%8E%9F%E4%B9%A6%E7%AC%AC-3-%E7%89%88%EF%BC%89%E3%80%8B%E9%98%85%E8%AF%BB%E6%9C%AD%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="第-1-章-安装-opencv">第 1 章 安装 OpenCV</h1><blockquote><p>为何 OpenCV 的 Python 模块命名为 cv2？</p></blockquote><p>在 cv2 中的 2 与 OpenCV 的版本号无关，我们使用的是 OpenCV4。历史上，有一个名为 cv 的 Python 模块封装了 OpenCV 的一个已经过时的 C版本。在 OpenCV 4 中已经不存在任何 cv 模块。但是 OpenCV文档有时会错误地将模块命名为 cv（而不是 cv2）。请记住，在 OpenCV 4中，正确的 Python 模块名称始终是 cv2。</p><h1 id="第-2-章-处理文件摄像头和-gui">第 2 章 处理文件、摄像头和GUI</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">img <span class="token operator">=</span> numpy<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>numpy<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>按：</p><p><code>(3, 3)</code> 中前一个 3 表示 3 行，后一个 3 表示 3列（如果把它想象成矩阵的话）；<code>uint8</code> 表示无符号整数，范围是<code>0~255</code>。<br />这里，使用 8 位整数来表示像素，所以像素的值的范围是<code>0~255</code>，其中 0 表示 黑色，255表示白色，中间的值表示灰色。</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_GRAY2BGR<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>按：使用 <code>cv2.cvtColor</code>函数将上面的图像转换成蓝-绿-红（Blue-Green-Red，BGR）格式。</p><p>图像的变化过程如下：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">array([[0, 0, 0],       [0, 0, 0],       [0, 0, 0]], dtype=uint8)</code></pre></div></figure><p>==&gt;</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">array([[[0, 0, 0],        [0, 0, 0],        [0, 0, 0]],       [[0, 0, 0],        [0, 0, 0],        [0, 0, 0]],       [[0, 0, 0],        [0, 0, 0],        [0, 0, 0]]], dtype=uint8)</code></pre></div></figure><p>按：转换后的图像每个像素都用一个三元数组表示，每个整数分别表示三个颜色通道（B、G和 R）中的一个。</p><blockquote><p>shape 属性返回行、列和通道数（如果有多个通道的话）。</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">img <span class="token operator">=</span> numpy<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>numpy<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>output:</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">(5, 3)</code></pre></div></figure><p>按：输出 <code>(5, 3)</code>，表示我们有一幅 5 行 3列的灰度图像，如果将该图像转换成 BGR 格式，shape 将是<code>(5, 3, 3)</code>，表示每个像素有 3 个通道。</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2image <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'MyPic.png'</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">'MyPic.jpg'</span><span class="token punctuation">,</span> image<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>按：从 <code>png</code> 格式加载并保存为 <code>jpg</code> 格式。</p><blockquote><p>默认情况下，<code>imread</code> 返回 BGR格式的图像，即使该文件使用的是灰度格式。 BGR表示与红-绿-蓝（Red-Green-Blue，RGB）相同的颜色模型，只是字节顺序相反。</p></blockquote><blockquote><p><code>imread</code> 支持的模式选项有哪些？</p></blockquote><ul><li>cv2.IMREAD_COLOR：该模式是默认选项，提供 3 通道的 BGR图像，每个通道一个 8 位值（0～255）。</li><li>cv2.IMREAD_GRAYSCALE：该模式提供 8 位灰度图像。</li><li>cv2.IMREAD_ANYCOLOR：该模式提供每个通道 8 位的 BGR 图像或者 8位灰度图像，具体取决于文件中的元数据。</li><li>cv2.IMREAD_UNCHANGED：该模式读取所有的图像数据，包括作为第 4 通道的α 或透明度通道（如果有的话）。</li><li>cv2.IMREAD_ANYDEPTH：该模式加载原始位深度的灰度图像。例如，如果文件以这种格式表示一幅图像，那么它提供每个通道16 位的一幅灰度图像。</li><li>cv2.IMREAD_ANYDEPTH｜cv2.IMREAD_COLOR：该组合模式加载原始位深度的BGR 彩色图像。</li><li>cv2.IMREAD_REDUCED_GRAYSCALE_2：该模式加载的灰度图像的分辨率是原始分辨率的1/2。例如，如果文件包括一幅 640×480 的图像，那么它加载的是一幅 320×240的图像。</li><li>cv2.IMREAD_REDUCED_COLOR_2：该模式加载每个通道 8 位的 BGR彩色图像，分辨率是原始图像的 1/2。</li><li>cv2.IMREAD_REDUCED_GRAYSCALE_4：该模式加载灰度图像，分辨率是原始图像的1/4。</li><li>cv2.IMREAD_REDUCED_COLOR_4：该模式加载每个通道 8位的彩色图像，分辨率是原始图像的 1/4。</li><li>cv2.IMREAD_REDUCED_GRAYSCALE_8：该模式加载灰度图像，分辨率是原始图像的1/8。</li><li>cv2.IMREAD_REDUCED_COLOR_8：该模式加载每个通道 8位的彩色图像，分辨率为原始图像的 1/8。</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2grayImage <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'MyPic.png'</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>IMREAD_GRAYSCALE<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">'MyPicGray.png'</span><span class="token punctuation">,</span> grayImage<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>按：将一个 PNG文件加载为灰度图像（在此过程中会丢失所有的颜色信息），再将其保存为一个灰度PNG 图像。</p><blockquote><p><code>imread</code> 和 <code>imwrite</code>操作文件时，对文件的路径有什么要求？</p></blockquote><ul><li>如果希望直接使用文件名来读取文件，那么，图片文件必须和当前的 Python脚本位于同一目录。这时用的是相对路径；</li><li>使用绝对路径。</li></ul><blockquote><p><code>imwrite</code> 函数对图像有什么要求？</p></blockquote><p>imwrite() 函数要求图像为 BGR格式或者灰度格式，每个通道具有输出格式可以支持的特定位数。例如，BMP文件格式要求每个通道 8 位，而 PNG 允许每个通道 8 位或 16 位。</p><blockquote><p>我们可以通过使用类似于 <code>image[0, 0]</code> 或者<code>image[0, 0, 0]</code> 的表达式来访问 numpy.array类型的数据中的值。第一个索引是像素的 y 坐标或者行，第二个索引是像素的 x坐标或列，第三个索引（如果有的话）表示一个颜色通道。</p></blockquote><blockquote><p>一个例子？</p></blockquote><p>在左上角为白色像素的 8 位灰度图像中，<code>image[0,0]</code> 是255。在左上角为蓝色像素的 24 位（每个通道 8 位）BGR图像中，<code>image[0,0]</code> 是 <code>[255,0,0]</code>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">byteArray <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>按：假设图像的每个通道有 8 位，我们可以将其强制转换为标准的 Pythonbytearray 对象（一维的）。</p>]]></content>
    
    
    <categories>
      
      <category>数字图像处理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>数字图像处理</tag>
      
      <tag>OpenCV</tag>
      
      <tag>读书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Plugin org.springframework.boot:spring-boot-maven-plugin: not found 问题解决</title>
    <link href="/2021/10/27/Plugin-org-springframework-boot-spring-boot-maven-plugin-not-found-%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <url>/2021/10/27/Plugin-org-springframework-boot-spring-boot-maven-plugin-not-found-%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="问题描述">问题描述</h1><p>IDEA 报了一个<code>Plugin org.springframework.boot:spring-boot-maven-plugin: not found</code>问题，</p><p><img src="https://i.imgur.com/Y7apJYP.png" /></p><h1 id="解决方法">解决方法</h1><p>在报红的地方加上版本描述：</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这个具体的版本号可以看这个 <code>pom.xml</code> 文件的<code>spring-boot</code> 版本信息。</p><p><img src="https://i.imgur.com/lnGYmhL.png" /></p><p><img src="https://i.imgur.com/aHIoeJ8.png" /></p><p>然后刷新一下 maven 即可。</p><h1 id="问题原因">问题原因</h1><p>出现这个问题的原因，我猜测是当前项目所用 spring boot 的版本和 maven仓库中的插件版本不匹配，所有没有办法使用默认的版本号，比如，我这个项目用的spring boot 版本是 <code>2.5.5</code>，而之前用的版本是<code>2.3.3</code>，所以本地 maven 仓库中只有 <code>2.3.3</code>版本的插件，这就导致了 <code>2.3.3</code> 和 <code>2.5.5</code>版本的项目都不会默认匹配本地仓库中的插件，而必须明确给出版本号的说明。</p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring boot</tag>
      
      <tag>Bugs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数字图像处理期中测试作业</title>
    <link href="/2021/10/26/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E6%9C%9F%E4%B8%AD%E6%B5%8B%E8%AF%95%E4%BD%9C%E4%B8%9A/"/>
    <url>/2021/10/26/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E6%9C%9F%E4%B8%AD%E6%B5%8B%E8%AF%95%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="一简答题共5题50分">一、简答题（共5题,50分）</h1><p>1、简答什么是图像颜色 HSI 模型。</p><p>解：HSI是这样一个彩色模型，该模型用色调、饱和度和亮度来描述一个彩色物体。色调是描述一种纯色（纯黄色、纯橙色或纯红色）的颜色属性；饱和度是一种纯色被白光稀释的程度的度量。亮度则用灰度级来描述。</p><p>2、简答什么是图像的动态范围？</p><p>解：有时灰度级的取值范围称为图像的动态范围。把占有灰度级全部有效段的图像叫做高动态范围图像。当相当可观数目的像素呈现这样的特征时，图像就有较高的对比度。相反，低动态范围的图像看上去似乎是冲淡了的灰暗格调。</p><p>3、简答马赫带效应并解释原因。</p><p>解：马赫带效应就是，对于连续的均匀的灰度带（见教材），每一条带上的亮度是均匀的，但是在不同带的交界处，我们会看到，亮的那一侧会出现更亮的一条线，暗的那一侧会出现更暗的一条线。简单来讲，这就是马赫带效应。</p><p>原因：视觉系统对亮度的感知不是简单的强度函数。</p><p>4、请给出一种通过卷积对图像进行平滑的方法，并解释该平滑方法与消除噪声的关系。</p><p>解：平滑模板（template）。</p><p>与消除噪声的关系：从信号处理理论来解释，这种做法实现的是一种简单的低通滤波器。平滑模板通过将某点周围8个点的平均值代替该点原值，从而去除突然变化的点，滤掉噪声，其代价是图像具有一定程度的模糊。</p><p>5、什么是傅里叶变换的相位谱与振幅谱？</p><p>解：傅里叶变换 <span class="math inline">\(F(\omega)\)</span>是一个复数：<span class="math inline">\(F(\omega) = R(\omega) + jI(\omega)\)</span>，其相位谱与振幅谱分别如下：</p><p><span class="math display">\[\begin{split}&amp;相位谱 \qquad \phi(\omega) = arctan \frac{I(\omega)}{R(\omega)} \\&amp;振幅谱 \qquad |F(\omega)| = \sqrt{R^2(\omega) + I^2(\omega)}\end{split}\]</span></p><h1 id="二论述题共3题30分">二、论述题（共3题,30分）</h1><p>1、请解释什么是自适应中值滤波器？该滤波器与中值滤波相比较，有何优势？</p><p>解：</p><p>(1) 解释：</p><p>下面是自适应中值滤波器的详细描述：</p><p>预先定义好以下符号：</p><ul><li><spanclass="math inline">\(S_{xy}\)</span>：滤波器的作用区域，滤波器窗口所覆盖的区域，该区域中心点为图像中第y 行第 x 列个像素点；</li><li><span class="math inline">\(Z_{min}\)</span>：<spanclass="math inline">\(S_{xy}\)</span> 中最小的灰度值；</li><li><span class="math inline">\(Z_{max}\)</span>：<spanclass="math inline">\(S_{xy}\)</span> 中最大的灰度值；</li><li><span class="math inline">\(Z_{med}\)</span>：<spanclass="math inline">\(S_{xy}\)</span> 中所有灰度值的中值；</li><li><span class="math inline">\(Z_{xy}\)</span>：表示图像中第 y 行第 x列个像素点的灰度值；</li><li><span class="math inline">\(S_{max}\)</span>：<spanclass="math inline">\(S_{xy}\)</span> 所允许的最大窗口尺寸；</li></ul><p>自适应中值滤波器分为以下两个过程，A和B：</p><p><strong>A:</strong></p><ol type="1"><li>A1 = <span class="math inline">\(Z_{med} - Z_{min}\)</span></li><li>A2 = <span class="math inline">\(Z_{med} - Z_{max}\)</span></li><li>如果 <span class="math inline">\(A1&gt;0\)</span> 且 <spanclass="math inline">\(A2&lt;0\)</span>，则跳转到 <strong>B</strong></li><li>否则，增大窗口的尺寸</li><li>如果增大后的尺寸 <span class="math inline">\(\leqS_{max}\)</span>，则重复 <strong>A</strong></li><li>否则，直接输出 <span class="math inline">\(Z_{med}\)</span></li></ol><p><strong>B:</strong></p><ol type="1"><li>B1 = <span class="math inline">\(Z_{xy} - Z_{min}\)</span></li><li>B2 = <span class="math inline">\(Z_{xy} - Z_{max}\)</span></li><li>如果 <span class="math inline">\(B1&gt;0\)</span> 且 <spanclass="math inline">\(B2&lt;0\)</span>，则输出 <spanclass="math inline">\(Z_{xy}\)</span></li><li>否则输出 <span class="math inline">\(Z_{med}\)</span></li></ol><p>直观解释：</p><p>在自适应中值滤波算法中，<strong>A</strong> 步骤里面会先判断是否满足<span class="math inline">\(Z_{min} &lt; Z_{med} &lt;Z_{max}\)</span>。这一步骤实质是判断当前区域的中值点是否是噪声点，通常来说是满足<span class="math inline">\(Z_{min} &lt; Z_{med} &lt; Z_{max}\)</span>这个条件的，此时中值点不是噪声点，跳转到<strong>B</strong>；考虑一些特殊情况，如果 <spanclass="math inline">\(Z_{med} = Z_{min}\)</span> 或者 <spanclass="math inline">\(Z_{med} =Z_{max}\)</span>，则认为是噪声点，应该扩大窗口尺寸，在一个更大的范围内寻找一个合适的非噪声点，随后再跳转到<strong>B</strong>，否则输出的中值点是噪声点；<br />接下来考虑跳转到B之后的情况：判断中心点的像素值是否是噪声点，判断条件为<span class="math inline">\(Z_{min} &lt; Z_{xy} &lt;Z_{max}\)</span>，原理同上，因为如果 <span class="math inline">\(Z_{xy}= Z_{min}\)</span> 或者 <span class="math inline">\(Z_{xy} =Z_{max}\)</span>，则认为是噪声点。如果不是噪声点，我们可以保留当前像素点的灰度值；如果是噪声点，则使用中值替代原始灰度值，滤去噪声。</p><p>(2) 优势：</p><p>在噪声密度不是很大的情况下（根据经验，噪声的出现的概率小于0.2），使用中值滤波的效果不错。但是当噪声出现的概率比较高时，原来的中值滤波算法就不是很有效了。只有增大滤波器窗口尺寸，尽管会使图像变得模糊。<br />使用自适应中值滤波器的目的就是，根据预设好的条件，动态地改变中值滤波器的窗口尺寸，以同时兼顾去噪声作用和保护细节的效果。</p><p>2、请给出一种通过傅里叶变换对运动模糊图像进行恢复方法。</p><p>解：空间滤波方法。</p><p>3、请给出一种通过形态学方法提取二值图像轮廓的方法。</p><p>解：我们可以用边界提取算法来提取二值图像轮廓。</p><p>集合 A 的边界表示为 <span class="math inline">\(\beta(A)\)</span>，它可以通过先由结构元素 B 对 A的腐蚀，然后用腐蚀减去得到，即：</p><p><span class="math display">\[\beta(A) = A - (A (-) B)\]</span></p><h1 id="三计算题共1题20分">三、计算题（共1题,20分）</h1><p>1、某分辨率为 40×25 的 3bit 图像，灰度级从 0 到 7 各出现了200，100，100，50，250，100，100，100次，请采用直方图均规定化的方法进行灰度映射变换，使变换后的 0 到 7 的 8个灰度级近似服从 0，0.0，0.1，0.2，0.3，0.2，0.1，0.1 的分布。</p><p>解：</p><p><img src="https://i.imgur.com/poU7tyY.png" /></p><p><img src="https://i.imgur.com/wxGbBo6.png" /></p><p><img src="https://i.imgur.com/1ASVCV7.png" /></p>]]></content>
    
    
    <categories>
      
      <category>数字图像处理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字图像处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《编译原理第三版》（张素琴）第六章学习札记</title>
    <link href="/2021/10/25/%E3%80%8A%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%AC%E4%B8%89%E7%89%88%E3%80%8B%EF%BC%88%E5%BC%A0%E7%B4%A0%E7%90%B4%EF%BC%89%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0/"/>
    <url>/2021/10/25/%E3%80%8A%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%AC%E4%B8%89%E7%89%88%E3%80%8B%EF%BC%88%E5%BC%A0%E7%B4%A0%E7%90%B4%EF%BC%89%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>LR 分析表中像 s2 和 r3 这样的符号串的第一个字符 s 和 r分别代表什么含义？</p></blockquote><ul><li>s 表示 shift，即“移进”。</li><li>r 表示 reduce，即“归约”。</li></ul>]]></content>
    
    
    <categories>
      
      <category>编译原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编译原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译原理作业三</title>
    <link href="/2021/10/24/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E4%BD%9C%E4%B8%9A%E4%B8%89/"/>
    <url>/2021/10/24/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E4%BD%9C%E4%B8%9A%E4%B8%89/</url>
    
    <content type="html"><![CDATA[<p>系第四章课后作业（部分）。</p><p>1、对文法 <span class="math inline">\(G[S]\)</span></p><p><span class="math display">\[\begin{split}S &amp;\rightarrow a | \wedge | (T) \\T &amp;\rightarrow T, S | S\end{split}\]</span></p><p>(1) 给出 <span class="math inline">\((a, (a, a))\)</span> 和 <spanclass="math inline">\((((a, a), \wedge, (a)), a)\)</span>的最左推导。<br />(2) 对文法 <span class="math inline">\(G\)</span>进行改写，然后对每个非终结符写出不带回溯的递归子程序。<br />(3) 经改写后的文法是否是 <span class="math inline">\(LL(1)\)</span>的？给出它的预测分析表。<br />(4) 给出输入串 <span class="math inline">\((a, a)＃\)</span>的分析过程，并说明该串是否为 <span class="math inline">\(G\)</span>的句子。</p><p>解：</p><p>(1) 对 <span class="math inline">\((a, (a, a))\)</span>的最左推导为：</p><p><span class="math display">\[\begin{split}S &amp;\Rightarrow (T) \\&amp;\Rightarrow (T, S) \\&amp;\Rightarrow (S, S) \\&amp;\Rightarrow (a, S) \\&amp;\Rightarrow (a, (T)) \\&amp;\Rightarrow (a, (T, S)) \\&amp;\Rightarrow (a, (S, S)) \\&amp;\Rightarrow (a, (a, S)) \\&amp;\Rightarrow (a, (a, a))&amp;\end{split}\]</span></p><p>对 <span class="math inline">\((((a, a), \wedge, (a)), a)\)</span>的最左推导如下：</p><p><span class="math display">\[\begin{split}S &amp;\Rightarrow (T) \\&amp;\Rightarrow (T, S) \\&amp;\Rightarrow (S, S) \\&amp;\Rightarrow ((T), S) \\&amp;\Rightarrow ((T, S), S) \\&amp;\Rightarrow ((T, S, S), S) \\&amp;\Rightarrow (((S, S), S, S), S) \\&amp;\Rightarrow (((a, S), S, S), S) \\&amp;\Rightarrow (((a, a), S, S), S) \\&amp;\Rightarrow (((a, a), \wedge, S), S) \\&amp;\Rightarrow (((a, a), \wedge, (T)), S) \\&amp;\Rightarrow (((a, a), \wedge, (S)), S) \\&amp;\Rightarrow (((a, a), \wedge, (a)), S) \\&amp;\Rightarrow (((a, a), \wedge, (a)), a) \\\end{split}\]</span></p><p>(2) 改写文法为：</p><p><span class="math display">\[\begin{split}(0) &amp;S \rightarrow a \\(1) &amp;S \rightarrow \wedge \\(2) &amp;S \rightarrow (T) \\(3) &amp;T \rightarrow SN \\(4) &amp;N \rightarrow ,S N \\(5) &amp;N \rightarrow \varepsilon\end{split}\]</span></p><p>对每个非终结符，其不带回溯的递归子程序如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">PROCEDURE S(TOKEN);BEGIN    IF TOKEN !&#x3D; &#39;a&#39; AND TOKEN !&#x3D; &#39;∧&#39; THEN        BEGIN            IF TOKEN &#x3D; &#39;(&#39; THEN                BEGIN                    GETNEXT(TOKEN);                    T(TOKEN);                    GETNEXT(TOKEN);                    IF TOKEN !&#x3D; &#39;)&#39; THEN ERROR                END            ELSE ERROR        ENDENDPROCEDURE T(TOKEN);BEGIN    S(TOKEN);    N(TOKEN);ENDPROCEDURE N(TOKEN);BEGIN    IF TOKEN &#x3D; &#39;,&#39; THEN        BEGIN            GETNEXT(TOKEN);            S(TOKEN);            N(TOKEN);        ENDEND<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>(3) 经改写后的文法是 <span class="math inline">\(LL(1)\)</span>文法，</p><p>对改写后的文法，求其 <span class="math inline">\(FIRST\)</span>集、<span class="math inline">\(FOLLOW\)</span> 集、<spanclass="math inline">\(SELECT\)</span> 集如下：</p><table><thead><tr class="header"><th>符号</th><th><span class="math inline">\(FIRST\)</span></th><th><span class="math inline">\(FOLLOW\)</span></th></tr></thead><tbody><tr class="odd"><td><span class="math inline">\(S\)</span></td><td><span class="math inline">\(\{A, \wedge, (\}\)</span></td><td><span class="math inline">\(\#, , , )\)</span></td></tr><tr class="even"><td><span class="math inline">\(T\)</span></td><td><span class="math inline">\(\{a, \wedge, (\}\)</span></td><td><span class="math inline">\(\{ ) \}\)</span></td></tr><tr class="odd"><td><span class="math inline">\(N\)</span></td><td><span class="math inline">\(\{, , \varepsilon\}\)</span></td><td><span class="math inline">\(\{ ) \}\)</span></td></tr></tbody></table><p><span class="math display">\[\begin{split}&amp;SELECT(0) = \{ a \} \\&amp;SELECT(1) = \{ \wedge \} \\&amp;SELECT(2) = \{ ( \} \\&amp;SELECT(3) = \{ a, \wedge, ( \} \\&amp;SELECT(4) = \{ , \} \\&amp;SELECT(5) = \{ ) \} \\\end{split}\]</span></p><p>它的预测分析表如下：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211024173212.png" /></p><p>(4) 对输入串 <span class="math inline">\((a, a)＃\)</span>的分析过程如下：</p><table><thead><tr class="header"><th>栈</th><th>当前输入符</th><th>剩余输入符</th><th>所用产生式</th></tr></thead><tbody><tr class="odd"><td>#S</td><td>(</td><td>a,a)#</td><td>S <span class="math inline">\(\rightarrow\)</span> (T)</td></tr><tr class="even"><td>#)T(</td><td>(</td><td>a,a)#</td><td></td></tr><tr class="odd"><td>#)T</td><td>a</td><td>,a)#</td><td>T <span class="math inline">\(\rightarrow\)</span> SN, S <spanclass="math inline">\(\rightarrow\)</span> a</td></tr><tr class="even"><td>#)NS</td><td>a</td><td>,a)#</td><td></td></tr><tr class="odd"><td>#)Na</td><td>a</td><td>,a)#</td><td></td></tr><tr class="even"><td>#)N</td><td>,</td><td>a)#</td><td>N <span class="math inline">\(\rightarrow\)</span>,SN</td></tr><tr class="odd"><td>#)NS,</td><td>,</td><td>a)#</td><td></td></tr><tr class="even"><td>#)NS</td><td>a</td><td>)#</td><td>S <span class="math inline">\(\rightarrow\)</span> a</td></tr><tr class="odd"><td>#)Na</td><td>a</td><td>)#</td><td></td></tr><tr class="even"><td>#)N</td><td>)</td><td>#</td><td>N <span class="math inline">\(\rightarrow \varepsilon\)</span></td></tr><tr class="odd"><td>#)</td><td>)</td><td>#</td><td></td></tr><tr class="even"><td>#</td><td>#</td><td></td><td></td></tr></tbody></table><p>可见输入串 <span class="math inline">\((a, a)＃\)</span>是文法的句子。</p><p>4、证明下述文法不是 <span class="math inline">\(LL(1)\)</span>的。</p><p><span class="math display">\[\begin{split}S &amp;\rightarrow C\$ \\C &amp;\rightarrow bA | aB \\A &amp;\rightarrow a | aC | bAA \\B &amp;\rightarrow b | bC | aBB\end{split}\]</span></p><p>能否构造一等价的文法，使其是 <spanclass="math inline">\(LL(1)\)</span> 的？并给出判断过程。</p><p>解：</p><p>题中文法的 SELECT 集如下：</p><p><span class="math display">\[\begin{split}&amp;SELECT(S \rightarrow C\$) = \{b, a\} \\&amp;SELECT(A \rightarrow a) = \{a\} \\&amp;SELECT(A \rightarrow aC) = \{a\} \\&amp;SELECT(A \rightarrow bAA) = \{b\} \\&amp;SELECT(C \rightarrow bA) = \{b\} \\&amp;SELECT(C \rightarrow aB) = \{a\} \\&amp;SELECT(B \rightarrow b) = \{b\} \\&amp;SELECT(B \rightarrow bc) = \{b\} \\&amp;SELECT(B \rightarrow aBB) = \{a\} \\\end{split}\]</span></p><p>由于</p><p><span class="math display">\[SELECT(A \rightarrow a) \cap SELECT(A \rightarrow ac) \cap SELECT(A\rightarrow bAA) \neq \varnothing\]</span></p><p>所以该文法不是 <span class="math inline">\(LL(1)\)</span> 文法。</p><p>构造等价文法如下：</p><p><span class="math display">\[\begin{split}S &amp;\rightarrow C\$ \\C &amp;\rightarrow bA | aB \\A &amp;\rightarrow aN | bAA \\B &amp;\rightarrow bN | aBB \\N &amp;\rightarrow C | \varepsilon\end{split}\]</span></p><p>计算 <span class="math inline">\(SELECT\)</span> 集如下：</p><p><span class="math display">\[\begin{split}&amp;SELECT(S \rightarrow C\$) = \{b, a\} \\&amp;SELECT(C \rightarrow bA) = \{b\} \\&amp;SELECT(C \rightarrow aB) = \{a\} \\&amp;SELECT(A \rightarrow aN) = \{a\} \\&amp;SELECT(A \rightarrow bAA) = \{b\} \\&amp;SELECT(B \rightarrow bN) = \{b\} \\&amp;SELECT(B \rightarrow aBB) = \{a\} \\&amp;SELECT(N \rightarrow C) = \{b, a\} \\&amp;SELECT(N \rightarrow \varepsilon) = \{a, b\} \\\end{split}\]</span></p><p>由于</p><p><span class="math display">\[SELECT(N \rightarrow C) \cap SELECT(N \rightarrow \varepsilon) \neq\varnothing\]</span></p><p>所以改写后的文法不是 <span class="math inline">\(LL(1)\)</span>文法。</p><p>7、对于一个文法若消除了左递归，提取了左公共因子后是否一定为 <spanclass="math inline">\(LL(1)\)</span>文法？试对下面的文法进行改写，并对改写后的文法进行判断。</p><p><span class="math display">\[\begin{split}(4) S &amp;\rightarrow AS | b \\A &amp;\rightarrow SA | a\end{split}\]</span></p><p>解：对文法进行改写如下：</p><p><span class="math display">\[\begin{split}S &amp;\rightarrow AS | b \\A &amp;\rightarrow baA^{&#39;} | aA^{&#39;} \\A^{&#39;} &amp;\rightarrow SAA^{&#39;} | \varepsilon\end{split}\]</span></p><p>首先，消除左递归，</p><p><span class="math display">\[\begin{split}&amp;(0) \; S \rightarrow AS \\&amp;(1) \;S \rightarrow b \\&amp;(2) \;A \rightarrow baA^{&#39;}\\&amp;(3) \;A \rightarrow aA^{&#39;} \\&amp;(4) \;A^{&#39;} \rightarrow SAA^{&#39;} \\&amp;(5) \;A^{&#39;} \rightarrow \varepsilon\end{split}\]</span></p><p>然后，提取隐式公共因子，</p><p>然后计算各个符号的 <span class="math inline">\(FIRST\)</span>集、<span class="math inline">\(FOLLOW\)</span> 集 以及文法的 <spanclass="math inline">\(SELECT\)</span> 集：</p><table><thead><tr class="header"><th>符号</th><th><span class="math inline">\(FIRST\)</span></th><th><span class="math inline">\(FOLLOW\)</span></th></tr></thead><tbody><tr class="odd"><td><span class="math inline">\(S\)</span></td><td><span class="math inline">\(\{a, b\}\)</span></td><td><span class="math inline">\(\{a, b\}\)</span></td></tr><tr class="even"><td><span class="math inline">\(A\)</span></td><td><span class="math inline">\(\{a, b\}\)</span></td><td><span class="math inline">\(\{a, b\}\)</span></td></tr><tr class="odd"><td><span class="math inline">\(A^{&#39;}\)</span></td><td><span class="math inline">\(\{a, b, \varepsilon\}\)</span></td><td><span class="math inline">\(\{a, b\}\)</span></td></tr></tbody></table><p><span class="math display">\[\begin{split}&amp;SELECT(0) = \{ a, b \} \\&amp;SELECT(1) = \{ b \} \\&amp;SELECT(2) = \{ b \} \\&amp;SELECT(3) = \{ a \} \\&amp;SELECT(4) = \{ a, b \} \\&amp;SELECT(5) = \{ a, b \} \\\end{split}\]</span></p><p>由于</p><p><span class="math display">\[SELECT(0) \cap SELECT(1) \neq \varnothing\]</span></p><p>所以改写后的文法不是 <span class="math inline">\(LL(1)\)</span>文法。</p>]]></content>
    
    
    <categories>
      
      <category>编译原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编译原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库系统概论作业二</title>
    <link href="/2021/10/21/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA%E4%BD%9C%E4%B8%9A%E4%BA%8C/"/>
    <url>/2021/10/21/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA%E4%BD%9C%E4%B8%9A%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<blockquote><p>1、试述数据模型的概念、作用及数据模型的三个重要方面。</p></blockquote><p>解：</p><ul><li>概念：数据模型（datamodel）是一种模型，它是对现实世界数据特征的一种抽象。</li><li>作用：数据模型是用来描述数据、组织数据和对数据进行操作的。</li><li>三个重要方面：<ul><li>一是能比较真实地模拟现实世界</li><li>二是容易为人所理解</li><li>三是便于在计算机上实现</li></ul></li></ul><blockquote><p>2、试述层次数据库、网状数据库和关系数据库的优缺点。</p></blockquote><p>解：</p><ul><li>层次数据库：<ul><li>优点：<ul><li>数据结构比较简单清晰。</li><li>查询效率高。</li><li>提供了良好的完整性支持。</li></ul></li><li>缺点：<ul><li>现实世界中很多联系是非层次性的，这些联系不适合用层次模型表示</li><li>如果一个结点具有多个双亲结点等，用层次模型表示这类联系就很笨拙，只能通过引入冗余数据（易产生不一致性）或创建非自然的数据结构（引入虚拟结点）来解决。对插入和删除操作的限制比较多，因此应用程序的编写比较复杂。</li><li>查询子女结点必须通过双亲结点。</li><li>由于结构严密，层次命令趋于程序化。</li></ul></li></ul></li><li>网状数据库：<ul><li>优点：<ul><li>能够更为直观地描述现实世界。</li><li>具有良好的性能，存取效率较高。</li></ul></li><li>缺点：<ul><li>结构比较复杂。</li><li>DDL、DML 复杂，并且要嵌入某一种高级语言中。</li><li>用户必须了解系统结构的细节，加重了应用程序的负担。</li></ul></li></ul></li><li>关系数据库：<ul><li>优点：<ul><li>建立在严格的数学概念的基础上。</li><li>概念单一。</li><li>具有更高的数据独立性、更好的安全保密性。</li></ul></li><li>缺点：<ul><li>查询效率不高。</li></ul></li></ul></li></ul><blockquote><p>3、试述数据库模式的概念，说明子模式、概念模式和内模式之间的联系与区别，以及它们与数据独立性之间的联系。</p></blockquote><p>解：</p><p>数据库模式（schema）是数据库中全体数据的逻辑结构和特征的描述，它仅仅涉及型（type）的描述，不涉及具体的值（value）。</p><ul><li>子模式（外模式）<ul><li>是各个具体用户看到的数据视图，是用户与 DB 的接口。</li><li>可以有多个外模式</li><li>每个用户只关心与它有关的模式，屏蔽大量无关的信息，有利于数据保护</li><li>面向应用程序或最终用户</li></ul></li><li>概念模式<ul><li>是所有用户的公共数据视图</li><li>只有一个模式</li><li>数据库模式以某一种数据模型为基础，统一综合考虑所有用户的需求，并将这些需求有机结合成一个逻辑整体</li><li>有 DBA 定义</li></ul></li><li>内模式<ul><li>数据在数据库内部的表示方式</li><li>只有一个内模式</li><li>以前由 DBA 定义，现在基本由 DBMS 定义</li></ul></li></ul><p>这三个模式是数据的三个抽象级别，它把数据的具体组织留给数据库管理系统，保证了数据库系统中的数据能够具有较高的逻辑独立性和物理独立性。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>数据库系统概论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《全唐诗》札记</title>
    <link href="/2021/10/18/%E3%80%8A%E5%85%A8%E5%94%90%E8%AF%97%E3%80%8B%E6%9C%AD%E8%AE%B0/"/>
    <url>/2021/10/18/%E3%80%8A%E5%85%A8%E5%94%90%E8%AF%97%E3%80%8B%E6%9C%AD%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>找这本书来读的缘由是在《李清照词集》中遇到了“公孙大娘舞剑”的注释，我想了一下，公孙大娘算是老朋友了，这下总该要把杜甫的那首诗拿过来读一读吧，遂搜罗来《全唐诗》。令我惊讶的是，这是很大的一部大部头。不急，带着慢慢看吧。</p><blockquote><p>观公孙大娘弟子舞剑器行</p></blockquote><center>《观公孙大娘弟子舞剑器行》</center><br><center>昔有佳人公孙氏，一舞剑气动四方。</center><center>观者如山色沮丧，天地为之久低昂。</center><center>㸌如羿射九日落，矫如群帝骖龙翔。</center><center>来如雷霆收震怒，罢如江海凝清光。</center><center>绛唇珠袖两寂寞，况有弟子传芬芳。</center><center>临颍美人在白帝，妙舞此曲神扬扬。</center><center>与余问答既有以，感时抚事增惋伤。</center><center>先帝侍女八千人，公孙剑器初第一。</center><center>五十年间似反掌，风尘倾动昏王室。</center><center>梨园子弟散如烟，女乐馀姿映寒日。</center><center>金粟堆南木已拱，瞿唐石城草萧瑟。</center><center>玳筵急管曲复终，乐极哀来月东出。</center><center>老夫不知其所往，足茧荒山转愁疾。</center>]]></content>
    
    
    <categories>
      
      <category>读书</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书</tag>
      
      <tag>文学</tag>
      
      <tag>古文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《李清照词集（词系列）》札记</title>
    <link href="/2021/10/18/%E3%80%8A%E6%9D%8E%E6%B8%85%E7%85%A7%E8%AF%8D%E9%9B%86%EF%BC%88%E8%AF%8D%E7%B3%BB%E5%88%97%EF%BC%89%E3%80%8B%E6%9C%AD%E8%AE%B0/"/>
    <url>/2021/10/18/%E3%80%8A%E6%9D%8E%E6%B8%85%E7%85%A7%E8%AF%8D%E9%9B%86%EF%BC%88%E8%AF%8D%E7%B3%BB%E5%88%97%EF%BC%89%E3%80%8B%E6%9C%AD%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211018000724.png" /></p><p>上海古籍出版社。读这本书的缘由是某一天迎着秋风，回忆起李清照的《声声慢》，只记得“寻寻觅觅，冷冷清清，凄凄惨惨戚戚”这句，实在是惭愧。遂到zlibrary搜罗来这本集子，读一读，补一补记忆，加上现在也一直在读古文，说不定读来别有一番滋味。上一次遇到，是在高中的语文课本上，阔别多年，有点想念，当年摇头晃脑背来背去，结果还是给背忘了，没有办法呀，当年的早读课，除了唱歌解解困，还真没有啥剩下来的了。太困了。</p><p>近几天秋风正起，读一读李清照的词，亦不失为一种美事儿。</p><p>◆ 声声慢</p><center>《声声慢》</center><br><center>寻寻觅觅，冷冷清清，</center><center>凄凄惨惨戚戚。</center><center>乍暖还寒时候，</center><center>最难将息。</center><center>三杯两盏淡酒，</center><center>怎敌他、晚来风急？</center><center>雁过也，</center><center>正伤心，却是旧时相识。</center><br><center>满地黄花堆积，</center><center>憔悴损，如今有谁堪摘？</center><center>守著窗儿，</center><center>独自怎生得黑？</center><center>梧桐更兼细雨，</center><center>到黄昏、点点滴滴。</center><center>这次第，</center><center>怎一个愁字了得！</center><p>按：</p><ul><li>“乍暖还寒”，这个“还”字，我查阅了国语辞典和汉语大辞典，我觉得国语辞典要严谨一些。根据我个人的理解，我觉得在秋天，“还”应该读“huán”，在春天应该读“hái”。在春天，“乍”应作“突然，急促”来解释，而在秋天，则应作“刚刚”来解释。这里，“乍暖还寒”，意思大概就是刚刚还是很暖的天气，转瞬之间就变作寒天了。汉语大辞典中，“乍暖还寒”也作“乍暖乍寒”，这个的意思就很明显了。<br /></li><li>“守著窗儿”似又作“守定窗儿”，我是觉得“守定”这个词儿有点意思，在《繁花》里面似乎多有用“定”这个字儿在某一个动词单字后面，比如“看定”。<br /></li><li>“独自怎生得黑”，这是我最疑惑的一句，看来，果然如友人所说，诗词不能过分讲究合理性，那么，我就将“怎生”解释为“如何”，“得黑”，按字面意思就是得到天黑，解释为“挨到天黑”似乎比较合适，加上苏北有方言，“dēi到”有等到的意思，恐怕，“得”解释为“等到”的意思亦无不可。<br /></li><li>“次第”，一个接一个，况状之辞。<br /></li><li>“了得”，济南章丘方言，意为了结。（徐培均《李清照集笺注》）</li></ul>]]></content>
    
    
    <categories>
      
      <category>读书</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书</tag>
      
      <tag>文学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 数字图像处理实验一</title>
    <link href="/2021/10/17/Python-%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%AE%9E%E9%AA%8C%E4%B8%80/"/>
    <url>/2021/10/17/Python-%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%AE%9E%E9%AA%8C%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="一安装环境">一、安装环境</h1><p>这个比较简单，直接一个 <code>pip</code> 命令安装即可：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> opencv-python<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>然后，实验手册上建议的是使用 Python虚拟环境，这个也比较简单，但是，我的笔记本上的 Python物理环境暂时不需要作其他用途，所以，就直接用这个 Python 来做实验了。</p><p>关于写 Python 的 IDE，这里推荐使用 PyCharm。</p><h1 id="二实验内容">二、实验内容</h1><h2 id="图像的读取和保存">2.1 图像的读取和保存</h2><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># @File  : test01.py</span><span class="token comment"># @Author: FanyFull</span><span class="token comment"># @Date  : 2021/10/15</span><span class="token comment"># 读取图片</span><span class="token comment"># 可以选择简单退出</span><span class="token comment"># 或者选择保存到另一张图片之后再退出</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'./pictures/test.png'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 试着修改 0 为 1</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'image'</span><span class="token punctuation">,</span> img<span class="token punctuation">)</span>k <span class="token operator">=</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">if</span> k <span class="token operator">==</span> <span class="token number">27</span><span class="token punctuation">:</span>    cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># wait for ESC key to exit</span><span class="token keyword">elif</span> k <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># wait for 's' key to save and exit</span>    cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">'./pictures/test2.jpg'</span><span class="token punctuation">,</span> img<span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="读取视频文件显示视频保存视频文件">2.2读取视频文件，显示视频，保存视频文件</h2><h3 id="读取并显示视频">2.2.1 读取并显示视频</h3><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># @File  : test02.py</span><span class="token comment"># @Author: FanyFull</span><span class="token comment"># @Date  : 2021/10/15</span><span class="token comment"># 读取视频内容</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2cap <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token string">'./pictures/vtest.avi'</span><span class="token punctuation">)</span><span class="token keyword">while</span><span class="token punctuation">(</span>cap<span class="token punctuation">.</span>isOpened<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 当上面的 VideoCapture 类初始化完毕之后，isOpened() 就会返回 true</span>    ret<span class="token punctuation">,</span> frame <span class="token operator">=</span> cap<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># read() --> Grabs, decodes and returns the next video frame.</span>    <span class="token keyword">if</span> ret<span class="token punctuation">:</span> <span class="token comment"># 如果还有下一帧</span>        gray <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>frame<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'frame'</span><span class="token punctuation">,</span> gray<span class="token punctuation">)</span>    <span class="token keyword">if</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span> <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 按 q 退出</span>        <span class="token keyword">break</span>cap<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="从摄像头获取图像并保存为视频文件">2.2.2从摄像头获取图像并保存为视频文件</h3><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># @File  : test03.py</span><span class="token comment"># @Author: FanyFull</span><span class="token comment"># @Date  : 2021/10/15</span><span class="token comment"># 注意，这里似乎有点问题，这个摄像头捕获的文件是怎么确认的？</span><span class="token comment"># 从摄像头中捕获视频，沿水平方向旋转每一帧并保存它</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2cap <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 摄像头编号</span><span class="token comment"># Define the codec and create VideoWriter object</span>fourcc <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoWriter_fourcc<span class="token punctuation">(</span><span class="token operator">*</span><span class="token string">'XVID'</span><span class="token punctuation">)</span> <span class="token comment"># 注意编码器，这里是指定 FourCC 编码</span>out <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoWriter<span class="token punctuation">(</span><span class="token string">'./pictures/output.avi'</span><span class="token punctuation">,</span> fourcc<span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">640</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 第三个参数是帧数</span><span class="token keyword">while</span><span class="token punctuation">(</span>cap<span class="token punctuation">.</span>isOpened<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ret<span class="token punctuation">,</span> frame <span class="token operator">=</span> cap<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> ret <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        frame <span class="token operator">=</span> cv2<span class="token punctuation">.</span>flip<span class="token punctuation">(</span>frame<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 翻转图像，垂直翻转</span>        <span class="token comment"># write the flipped frame</span>        out<span class="token punctuation">.</span>write<span class="token punctuation">(</span>frame<span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'frame'</span><span class="token punctuation">,</span> frame<span class="token punctuation">)</span>    <span class="token keyword">if</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span> <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token comment"># Release everything if job is finished</span>cap<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>out<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="opencv-画图">2.3 opencv 画图</h2><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># @File  : test04.py</span><span class="token comment"># @Author: FanyFull</span><span class="token comment"># @Date  : 2021/10/15</span><span class="token comment"># OpenCV 绘制图形</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2<span class="token comment"># Create a black image</span>img <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span> <span class="token comment"># np.uint8 是数据类型</span><span class="token comment"># Draw a diagonal blue line with thickness of 5 px</span><span class="token comment"># 绘制直线</span>cv2<span class="token punctuation">.</span>line<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">511</span><span class="token punctuation">,</span> <span class="token number">511</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token comment"># 绘制矩形</span>cv2<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">384</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">510</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># 绘制圆</span>cv2<span class="token punctuation">.</span>circle<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">447</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 绘制椭圆</span>cv2<span class="token punctuation">.</span>ellipse<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 绘制多边形</span>pts <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>pts <span class="token operator">=</span> pts<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>polylines<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token punctuation">[</span>pts<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 绘制文字</span>linetype <span class="token operator">=</span> cv2<span class="token punctuation">.</span>LINE_AAfont <span class="token operator">=</span> cv2<span class="token punctuation">.</span>FONT_HERSHEY_SIMPLEXcv2<span class="token punctuation">.</span>putText<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">'OpenCV'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span> font<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'image'</span><span class="token punctuation">,</span> img<span class="token punctuation">)</span> <span class="token comment"># 显示直线</span>cv2<span class="token punctuation">.</span>waitKey <span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment"># 显示 1000 ms 即 1s 后消失</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>运行结果：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211017201636.png" /></p><h2 id="opencv-处理鼠标事件">2.4 opencv 处理鼠标事件</h2><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># @File  : test05.py</span><span class="token comment"># @Author: FanyFull</span><span class="token comment"># @Date  : 2021/10/15</span><span class="token comment"># 处理鼠标事件</span><span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment"># 当鼠标按下时变为 True</span>drawing <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment"># 如果 mode 为 True 绘制矩形，按下 'm' 变成绘制曲线</span>mode <span class="token operator">=</span> <span class="token boolean">True</span>ix<span class="token punctuation">,</span> iy <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token comment"># 创建回调函数</span><span class="token keyword">def</span> <span class="token function">draw_circle</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> ix<span class="token punctuation">,</span> iy<span class="token punctuation">,</span> drawing<span class="token punctuation">,</span> mode    <span class="token comment"># 当按下左键时返回起始位置坐标</span>    <span class="token keyword">if</span> event <span class="token operator">==</span> cv2<span class="token punctuation">.</span>EVENT_LBUTTONDOWN<span class="token punctuation">:</span>        drawing <span class="token operator">=</span> <span class="token boolean">True</span>        ix<span class="token punctuation">,</span> iy <span class="token operator">=</span> x<span class="token punctuation">,</span> y    <span class="token comment"># 当鼠标左键按下并移动时绘制图形，event 可以查看移动，flag 查看是否按下</span>    <span class="token keyword">elif</span> event <span class="token operator">==</span> cv2<span class="token punctuation">.</span>EVENT_MOUSEMOVE <span class="token keyword">and</span> flags <span class="token operator">==</span> cv2<span class="token punctuation">.</span>EVENT_FLAG_LBUTTON<span class="token punctuation">:</span>        <span class="token keyword">if</span> drawing <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                cv2<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token punctuation">(</span>ix<span class="token punctuation">,</span> iy<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                r <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">-</span> ix<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y <span class="token operator">-</span> iy<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                cv2<span class="token punctuation">.</span>circle<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment"># 当鼠标松开时停止绘画</span>    <span class="token keyword">elif</span> event <span class="token operator">==</span> cv2<span class="token punctuation">.</span>EVENT_LBUTTONUP<span class="token punctuation">:</span>        <span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            cv2<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token punctuation">(</span>ix<span class="token punctuation">,</span> iy<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            cv2<span class="token punctuation">.</span>circle<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>img <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>namedWindow<span class="token punctuation">(</span><span class="token string">'image'</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>setMouseCallback<span class="token punctuation">(</span><span class="token string">'image'</span><span class="token punctuation">,</span> draw_circle<span class="token punctuation">)</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'image'</span><span class="token punctuation">,</span> img<span class="token punctuation">)</span>    k <span class="token operator">=</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span>    <span class="token keyword">if</span> k <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'m'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        mode <span class="token operator">=</span> <span class="token keyword">not</span> mode    <span class="token keyword">elif</span> k <span class="token operator">==</span> <span class="token number">27</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211017202439.png" /></p>]]></content>
    
    
    <categories>
      
      <category>数字图像处理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>数字图像处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客问题簿子</title>
    <link href="/2021/10/17/%E5%8D%9A%E5%AE%A2%E9%97%AE%E9%A2%98%E7%B0%BF%E5%AD%90/"/>
    <url>/2021/10/17/%E5%8D%9A%E5%AE%A2%E9%97%AE%E9%A2%98%E7%B0%BF%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<blockquote><p>井号 ＃ 渲染的问题</p></blockquote><p>在 LaTex 语句块中，不能够使用 <code>\text&#123;&#125;</code>命令然后直接在花括号中加上＃。<br />可以使用的方法是使用反斜杠然后加键盘上自带的＃。<br />现在，我发现更好的写法是全角的＃。</p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 配置 fluid 主题</title>
    <link href="/2021/10/16/Hexo-%E9%85%8D%E7%BD%AE-fluid-%E4%B8%BB%E9%A2%98/"/>
    <url>/2021/10/16/Hexo-%E9%85%8D%E7%BD%AE-fluid-%E4%B8%BB%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>关于这个主题的使用，<ahref="https://fluid-dev.github.io/hexo-fluid-docs">官方文档</a>写得非常详细，十分推荐使用。</p><p>关于安装这个主题，我个人推荐直接使用文档中的方式一：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211016175914.png" /></p><p>然后，基本上所有的操作按照官方文档来就可以了。</p><p>这里给出我个人的配置，供参考：</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#---------------------------</span><span class="token comment"># Hexo Theme Fluid</span><span class="token comment"># Author: Fluid-dev</span><span class="token comment"># Github: https://github.com/fluid-dev/hexo-theme-fluid</span><span class="token comment">#</span><span class="token comment"># 配置指南: https://hexo.fluid-dev.com/docs/guide/</span><span class="token comment"># 你可以从指南中获得更详细的说明</span><span class="token comment">#</span><span class="token comment"># Guide: https://hexo.fluid-dev.com/docs/en/guide/</span><span class="token comment"># You can get more detailed help from the guide</span><span class="token comment">#---------------------------</span><span class="token comment">#---------------------------</span><span class="token comment"># 全局</span><span class="token comment"># Global</span><span class="token comment">#---------------------------</span><span class="token comment"># 用于浏览器标签的图标</span><span class="token comment"># Icon for browser tab</span><span class="token key atrule">favicon</span><span class="token punctuation">:</span> /img/myfavicon.png<span class="token comment"># 用于苹果设备的图标</span><span class="token comment"># Icon for Apple touch</span><span class="token key atrule">apple_touch_icon</span><span class="token punctuation">:</span> /img/favicon.ico<span class="token comment"># 浏览器标签页中的标题分隔符，效果： 文章名 - 站点名</span><span class="token comment"># Title separator in browser tab, eg: article - site</span><span class="token key atrule">tab_title_separator</span><span class="token punctuation">:</span> <span class="token string">" - "</span><span class="token comment"># 强制所有链接升级为 HTTPS（适用于图片等资源出现 HTTP 混入报错）</span><span class="token comment"># Force all links to be HTTPS (applicable to HTTP mixed error)</span><span class="token key atrule">force_https</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token comment"># 代码块的增强配置</span><span class="token comment"># Enhancements to code blocks</span><span class="token key atrule">code</span><span class="token punctuation">:</span>  <span class="token comment"># 是否开启复制代码的按钮</span>  <span class="token comment"># Enable copy code button</span>  <span class="token key atrule">copy_btn</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 代码高亮</span>  <span class="token comment"># Code highlight</span>  <span class="token key atrule">highlight</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># 代码块是否显示行号</span>    <span class="token comment"># If true, the code block display line numbers</span>    <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># 实现高亮的库，对应下面的设置</span>    <span class="token comment"># Highlight library</span>    <span class="token comment"># Options: highlightjs | prismjs</span>    <span class="token key atrule">lib</span><span class="token punctuation">:</span> <span class="token string">"highlightjs"</span>    <span class="token key atrule">highlightjs</span><span class="token punctuation">:</span>      <span class="token comment"># 在链接中挑选 style 填入</span>      <span class="token comment"># Select a style in the link</span>      <span class="token comment"># See: https://highlightjs.org/static/demo/</span>      <span class="token key atrule">style</span><span class="token punctuation">:</span> <span class="token string">"Atom One Dark"</span>      <span class="token comment"># 是否根据 style 改变代码背景色（如果 style 是深色背景别忘了开启此项）</span>      <span class="token comment"># If true, the code background will change color based on the style (If style has a dark background, don't forget to true)</span>      <span class="token key atrule">bg_color</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">prismjs</span><span class="token punctuation">:</span>      <span class="token comment"># 在下方链接页面右侧的圆形按钮挑选 style 填入，也可以直接填入 css 链接</span>      <span class="token comment"># Select the style button on the right side of the link page, you can also set the CSS link</span>      <span class="token comment"># See: https://prismjs.com/</span>      <span class="token key atrule">style</span><span class="token punctuation">:</span> <span class="token string">"default"</span>      <span class="token comment"># 设为 true 高亮将本地静态生成（并只支持部分 prismjs 插件），设为 false 高亮将在浏览器通过 js 生成</span>      <span class="token comment"># If true, it will be generated locally (but some prismjs plugins are not supported). If false, it will be generated via JS in the browser</span>      <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment"># 一些好玩的功能</span><span class="token comment"># Some fun features</span><span class="token key atrule">fun_features</span><span class="token punctuation">:</span>  <span class="token comment"># 为 subtitle 添加打字机效果</span>  <span class="token comment"># Typing animation for subtitle</span>  <span class="token key atrule">typing</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># 打印速度，数字越大越慢</span>    <span class="token comment"># Typing speed, the larger the number, the slower</span>    <span class="token key atrule">typeSpeed</span><span class="token punctuation">:</span> <span class="token number">70</span>    <span class="token comment"># 游标字符</span>    <span class="token comment"># Cursor character</span>    <span class="token key atrule">cursorChar</span><span class="token punctuation">:</span> <span class="token string">"_"</span>    <span class="token comment"># 是否循环播放效果</span>    <span class="token comment"># If true, loop animation</span>    <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 为文章内容中的标题添加锚图标</span>  <span class="token comment"># Add an anchor icon to the title on the post page</span>  <span class="token key atrule">anchorjs</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">element</span><span class="token punctuation">:</span> h1<span class="token punctuation">,</span>h2<span class="token punctuation">,</span>h3<span class="token punctuation">,</span>h4<span class="token punctuation">,</span>h5<span class="token punctuation">,</span>h6    <span class="token key atrule">placement</span><span class="token punctuation">:</span> right    <span class="token comment"># Options: hover | always | touch</span>    <span class="token key atrule">visible</span><span class="token punctuation">:</span> hover    <span class="token comment"># Option：§ | # | ❡</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> <span class="token string">""</span>  <span class="token comment"># 加载进度条</span>  <span class="token comment"># Progress bar when loading</span>  <span class="token key atrule">progressbar</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">height_px</span><span class="token punctuation">:</span> <span class="token number">3</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token string">"#29d"</span>    <span class="token comment"># See: https://github.com/rstacruz/nprogress</span>    <span class="token key atrule">options</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> <span class="token key atrule">showSpinner</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">,</span> <span class="token key atrule">trickleSpeed</span><span class="token punctuation">:</span> <span class="token number">100</span> <span class="token punctuation">&#125;</span><span class="token comment"># 主题暗色模式，开启后菜单中会出现切换按钮，用户浏览器会存储切换选项，并且会遵循 prefers-color-scheme 自动切换</span><span class="token comment"># Theme dark mode. If enable, a switch button will appear on the menu, each of the visitor's browser will store his switch option</span><span class="token key atrule">dark_mode</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 默认的选项（当用户手动切换后则不再按照默认模式），选择 `auto` 会优先遵循 prefers-color-scheme，其次按用户本地时间 18 点到次日 6 点之间进入暗色模式</span>  <span class="token comment"># Default option (when the visitor switches manually, the default mode is no longer followed), choosing `auto` will give priority to prefers-color-scheme, and then enter the dark mode from 18:00 to 6:00 in the visitor’s local time</span>  <span class="token comment"># Options: auto | light | dark</span>  <span class="token key atrule">default</span><span class="token punctuation">:</span> dark<span class="token comment"># 主题颜色配置，其他不生效的地方请使用自定义 css 解决，配色可以在下方链接中获得启发</span><span class="token comment"># Theme color, please use custom CSS to solve other colors, color schema can be inspired by the links below</span><span class="token comment"># See: https://www.webdesignrankings.com/resources/lolcolors/</span><span class="token key atrule">color</span><span class="token punctuation">:</span>  <span class="token comment"># body 背景色</span>  <span class="token comment"># Color of body background</span>  <span class="token key atrule">body_bg_color</span><span class="token punctuation">:</span> <span class="token string">"#eee"</span>  <span class="token comment"># 暗色模式下的 body 背景色，下同</span>  <span class="token comment"># Color in dark mode, the same below</span>  <span class="token key atrule">body_bg_color_dark</span><span class="token punctuation">:</span> <span class="token string">"#181c27"</span>  <span class="token comment"># 顶部菜单背景色</span>  <span class="token comment"># Color of navigation bar background</span>  <span class="token key atrule">navbar_bg_color</span><span class="token punctuation">:</span> <span class="token string">"#2f4154"</span>  <span class="token key atrule">navbar_bg_color_dark</span><span class="token punctuation">:</span> <span class="token string">"#1f3144"</span>  <span class="token comment"># 顶部菜单字体色</span>  <span class="token comment"># Color of navigation bar text</span>  <span class="token key atrule">navbar_text_color</span><span class="token punctuation">:</span> <span class="token string">"#fff"</span>  <span class="token key atrule">navbar_text_color_dark</span><span class="token punctuation">:</span> <span class="token string">"#d0d0d0"</span>  <span class="token comment"># 全局字体色</span>  <span class="token comment"># Color of global text</span>  <span class="token key atrule">text_color</span><span class="token punctuation">:</span> <span class="token string">"#3c4858"</span>  <span class="token key atrule">text_color_dark</span><span class="token punctuation">:</span> <span class="token string">"#c4c6c9"</span>  <span class="token comment"># 全局次级字体色（摘要、简介等位置）</span>  <span class="token comment"># Color of global secondary text (excerpt, introduction, etc.)</span>  <span class="token key atrule">sec_text_color</span><span class="token punctuation">:</span> <span class="token string">"#718096"</span>  <span class="token key atrule">sec_text_color_dark</span><span class="token punctuation">:</span> <span class="token string">"#a7a9ad"</span>  <span class="token comment"># 文章正文字体色</span>  <span class="token comment"># Color of post text</span>  <span class="token key atrule">post_text_color</span><span class="token punctuation">:</span> <span class="token string">"#2c3e50"</span>  <span class="token key atrule">post_text_color_dark</span><span class="token punctuation">:</span> <span class="token string">"#c4c6c9"</span>  <span class="token comment"># 文章正文字体色（h1 h2 h3...）</span>  <span class="token comment"># Color of Article heading (h1 h2 h3...)</span>  <span class="token key atrule">post_heading_color</span><span class="token punctuation">:</span> <span class="token string">"#1a202c"</span>  <span class="token key atrule">post_heading_color_dark</span><span class="token punctuation">:</span> <span class="token string">"#c4c6c9"</span>  <span class="token comment"># 文章超链接字体色</span>  <span class="token comment"># Color of post link</span>  <span class="token key atrule">post_link_color</span><span class="token punctuation">:</span> <span class="token string">"#0366d6"</span>  <span class="token key atrule">post_link_color_dark</span><span class="token punctuation">:</span> <span class="token string">"#1589e9"</span>  <span class="token comment"># 超链接悬浮时字体色</span>  <span class="token comment"># Color of link when hovering</span>  <span class="token key atrule">link_hover_color</span><span class="token punctuation">:</span> <span class="token string">"#30a9de"</span>  <span class="token key atrule">link_hover_color_dark</span><span class="token punctuation">:</span> <span class="token string">"#30a9de"</span>  <span class="token comment"># 超链接悬浮背景色</span>  <span class="token comment"># Color of link background when hovering</span>  <span class="token key atrule">link_hover_bg_color</span><span class="token punctuation">:</span> <span class="token string">"#f8f9fa"</span>  <span class="token key atrule">link_hover_bg_color_dark</span><span class="token punctuation">:</span> <span class="token string">"#364151"</span>  <span class="token comment"># 主面板背景色</span>  <span class="token comment"># Color of main board</span>  <span class="token key atrule">board_color</span><span class="token punctuation">:</span> <span class="token string">"#fff"</span>  <span class="token key atrule">board_color_dark</span><span class="token punctuation">:</span> <span class="token string">"#252d38"</span><span class="token comment"># 主题字体配置</span><span class="token comment"># Font</span><span class="token key atrule">font</span><span class="token punctuation">:</span>  <span class="token key atrule">font_size</span><span class="token punctuation">:</span> 16px  <span class="token key atrule">font_family</span><span class="token punctuation">:</span>  <span class="token key atrule">code_font_size</span><span class="token punctuation">:</span> 85%<span class="token comment"># 指定自定义 .js 文件路径，支持列表；路径是相对 source 目录，如 /js/custom.js 对应存放目录 source/js/custom.js</span><span class="token comment"># Specify the path of your custom js file, support list. The path is relative to the source directory, such as `/js/custom.js` corresponding to the directory `source/js/custom.js`</span><span class="token key atrule">custom_js</span><span class="token punctuation">:</span><span class="token comment"># 指定自定义 .css 文件路径，用法和 custom_js 相同</span><span class="token comment"># The usage is the same as custom_js</span><span class="token key atrule">custom_css</span><span class="token punctuation">:</span> /css/custom.css<span class="token comment"># 自定义 &lt;head> 节点中的 HTML 内容</span><span class="token comment"># Customize &lt;head> HTML content</span><span class="token key atrule">custom_head</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token comment"># 自定义底部 HTML 内容（位于 footer 上方），注意不要和 `post: custom` 配置冲突</span><span class="token comment"># Customize the HTML content at the bottom (located above the footer), be careful not to conflict with `post: custom`</span><span class="token key atrule">custom_html</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token comment"># 网页访问统计</span><span class="token comment"># Analysis of website visitors</span><span class="token key atrule">web_analytics</span><span class="token punctuation">:</span>  <span class="token comment"># 网页访问统计</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 百度统计的 Key，值需要获取下方链接中 `hm.js?` 后边的字符串</span>  <span class="token comment"># Baidu analytics, get the string behind `hm.js?`</span>  <span class="token comment"># See: https://tongji.baidu.com/sc-web/10000033910/home/site/getjs?siteId=13751376</span>  <span class="token key atrule">baidu</span><span class="token punctuation">:</span>  <span class="token comment"># Google 统计的 Tracking ID</span>  <span class="token comment"># Google analytics, set Tracking ID</span>  <span class="token comment"># See: https://developers.google.com/analytics/devguides/collection/analyticsjs</span>  <span class="token key atrule">google</span><span class="token punctuation">:</span>  <span class="token comment"># Google gtag.js 的媒体资源 ID</span>  <span class="token comment"># Google gtag.js GA_MEASUREMENT_ID</span>  <span class="token comment"># See: https://developers.google.com/analytics/devguides/collection/gtagjs/</span>  <span class="token key atrule">gtag</span><span class="token punctuation">:</span>  <span class="token comment"># 腾讯统计的 H5 App ID，开启高级功能才有cid</span>  <span class="token comment"># Tencent analytics, set APP ID</span>  <span class="token comment"># See: https://mta.qq.com/h5/manage/ctr_app_manage</span>  <span class="token key atrule">tencent</span><span class="token punctuation">:</span>    <span class="token key atrule">sid</span><span class="token punctuation">:</span>    <span class="token key atrule">cid</span><span class="token punctuation">:</span>  <span class="token comment"># 51.la 站点统计 ID</span>  <span class="token comment"># 51.la analytics</span>  <span class="token comment"># See: https://www.51.la/user/site/index</span>  <span class="token key atrule">woyaola</span><span class="token punctuation">:</span>  <span class="token comment"># 51.la 站点统计 ID，参见</span>  <span class="token comment"># 友盟/cnzz 站点统计 web_id</span>  <span class="token comment"># cnzz analytics</span>  <span class="token comment"># See: https://web.umeng.com/main.php?c=site&amp;a=show</span>  <span class="token key atrule">cnzz</span><span class="token punctuation">:</span>  <span class="token comment"># LeanCloud 计数统计，可用于 PV UV 展示，如果 `web_analytics: enable` 没有开启，PV UV 展示只会查询不会增加</span>  <span class="token comment"># LeanCloud count statistics, which can be used for PV UV display. If `web_analytics: enable` is false, PV UV display will only query and not increase</span>  <span class="token key atrule">leancloud</span><span class="token punctuation">:</span>    <span class="token key atrule">app_id</span><span class="token punctuation">:</span>    <span class="token key atrule">app_key</span><span class="token punctuation">:</span>    <span class="token comment"># REST API 服务器地址，国际版不填</span>    <span class="token comment"># Only the Chinese mainland users need to set</span>    <span class="token key atrule">server_url</span><span class="token punctuation">:</span><span class="token comment"># 对页面中的图片和评论插件进行懒加载处理，可见范围外的元素不会提前加载</span><span class="token comment"># Lazy loading of images and comment plugin on the page</span><span class="token key atrule">lazyload</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 加载时的占位图片</span>  <span class="token comment"># The placeholder image when loading</span>  <span class="token key atrule">loading_img</span><span class="token punctuation">:</span> /img/loading.gif  <span class="token comment"># 开启后懒加载仅在文章页生效，如果自定义页面需要使用，可以在 Front-matter 里指定 `lazyload: true`</span>  <span class="token comment"># If true, only enable lazyload on the post page. For custom pages, you can set 'lazyload: true' in front-matter</span>  <span class="token key atrule">onlypost</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 触发加载的偏移倍数，基数是视窗高度，可根据部署环境的请求速度调节</span>  <span class="token comment"># The factor of viewport height that triggers loading</span>  <span class="token key atrule">offset_factor</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token comment"># 图标库，包含了大量社交类图标，主题依赖的不包含在内，因此可自行修改，详见 https://hexo.fluid-dev.com/docs/icon/</span><span class="token comment"># Icon library, which includes many social icons, does not include those theme dependent, so your can modify link by yourself. See: https://hexo.fluid-dev.com/docs/en/icon/</span><span class="token key atrule">iconfont</span><span class="token punctuation">:</span> //at.alicdn.com/t/font_1736178_kmeydafke9r.css<span class="token comment">#---------------------------</span><span class="token comment"># 页头</span><span class="token comment"># Header</span><span class="token comment">#---------------------------</span><span class="token comment"># 导航栏的相关配置</span><span class="token comment"># Navigation bar</span><span class="token key atrule">navbar</span><span class="token punctuation">:</span>  <span class="token comment"># 导航栏左侧的标题，为空则按 hexo config 中 `title` 显示</span>  <span class="token comment"># The title on the left side of the navigation bar. If empty, it is based on `title` in hexo config</span>  <span class="token key atrule">blog_title</span><span class="token punctuation">:</span> <span class="token string">"Fany Full's Blog"</span>  <span class="token comment"># 导航栏毛玻璃特效，实验性功能，可能会造成页面滚动掉帧和抖动，部分浏览器不支持会自动不生效</span>  <span class="token comment"># Navigation bar frosted glass special animation. It is an experimental feature</span>  <span class="token key atrule">ground_glass</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># 模糊像素，只能为数字，数字越大模糊度越高</span>    <span class="token comment"># Number of blurred pixel. the larger the number, the higher the blur</span>    <span class="token key atrule">px</span><span class="token punctuation">:</span> <span class="token number">3</span>    <span class="token comment"># 不透明度，数字越大透明度越低，注意透明过度可能看不清菜单字体</span>    <span class="token comment"># Ratio of opacity, 1.0 is completely opaque</span>    <span class="token comment"># available: 0 - 1.0</span>    <span class="token key atrule">alpha</span><span class="token punctuation">:</span> <span class="token number">0.7</span>  <span class="token comment"># 导航栏菜单，可自行增减，key 用来关联 languages/*.yml，如不存在关联则显示 key 本身的值；icon 是 css class，可以省略；增加 name 可以强制显示指定名称</span>  <span class="token comment"># Navigation bar menu. `key` is used to associate languages/*.yml. If there is no association, the value of `key` itself will be displayed; if `icon` is a css class, it can be omitted; adding `name` can force the display of the specified name</span>  <span class="token key atrule">menu</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token string">"home"</span><span class="token punctuation">,</span> <span class="token key atrule">link</span><span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token key atrule">icon</span><span class="token punctuation">:</span> <span class="token string">"iconfont icon-home-fill"</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token string">"archive"</span><span class="token punctuation">,</span> <span class="token key atrule">link</span><span class="token punctuation">:</span> <span class="token string">"/archives/"</span><span class="token punctuation">,</span> <span class="token key atrule">icon</span><span class="token punctuation">:</span> <span class="token string">"iconfont icon-archive-fill"</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token string">"category"</span><span class="token punctuation">,</span> <span class="token key atrule">link</span><span class="token punctuation">:</span> <span class="token string">"/categories/"</span><span class="token punctuation">,</span> <span class="token key atrule">icon</span><span class="token punctuation">:</span> <span class="token string">"iconfont icon-category-fill"</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token string">"tag"</span><span class="token punctuation">,</span> <span class="token key atrule">link</span><span class="token punctuation">:</span> <span class="token string">"/tags/"</span><span class="token punctuation">,</span> <span class="token key atrule">icon</span><span class="token punctuation">:</span> <span class="token string">"iconfont icon-tags-fill"</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">,</span> <span class="token key atrule">link</span><span class="token punctuation">:</span> <span class="token string">"/about/"</span><span class="token punctuation">,</span> <span class="token key atrule">icon</span><span class="token punctuation">:</span> <span class="token string">"iconfont icon-user-fill"</span> <span class="token punctuation">&#125;</span>    <span class="token comment">#- &#123; key: "links", link: "/links/", icon: "iconfont icon-link-fill" &#125;</span><span class="token comment"># 搜索功能，基于 hexo-generator-search 插件，若已安装其他搜索插件请关闭此功能，以避免生成多余的索引文件</span><span class="token comment"># Search feature, based on hexo-generator-search. If you have installed other search plugins, please disable this feature to avoid generating redundant index files</span><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 搜索索引文件的路径，可以是相对路径或外站的绝对路径</span>  <span class="token comment"># Path for search index file, it can be a relative path or an absolute path</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> /local<span class="token punctuation">-</span>search.xml  <span class="token comment"># 文件生成在本地的位置，必须是相对路径</span>  <span class="token comment"># The location where the index file is generated locally, it must be a relative location</span>  <span class="token key atrule">generate_path</span><span class="token punctuation">:</span> /local<span class="token punctuation">-</span>search.xml  <span class="token comment"># 搜索的范围</span>  <span class="token comment"># Search field</span>  <span class="token comment"># Options: post | page | all</span>  <span class="token key atrule">field</span><span class="token punctuation">:</span> post  <span class="token comment"># 搜索是否扫描正文</span>  <span class="token comment"># If true, search will scan the post content</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment"># 首屏图片的相关配置</span><span class="token comment"># Config of the big image on the first screen</span><span class="token key atrule">banner</span><span class="token punctuation">:</span>  <span class="token comment"># 视差滚动，图片与板块会随着屏幕滚动产生视差效果</span>  <span class="token comment"># Scrolling parallax</span>  <span class="token key atrule">parallax</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 图片最小的宽高比，以免图片两边被过度裁剪，适用于移动端竖屏时，如需关闭设为 0</span>  <span class="token comment"># Minimum ratio of width to height, applicable to the vertical screen of mobile device, if you need to close it, set it to 0</span>  <span class="token key atrule">width_height_ratio</span><span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token comment"># 向下滚动的箭头</span><span class="token comment"># Scroll down arrow</span><span class="token key atrule">scroll_down_arrow</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 头图高度不小于指定比例，才显示箭头</span>  <span class="token comment"># Only the height of the banner image is greater than the ratio, the arrow is displayed</span>  <span class="token comment"># Available: 0 - 100</span>  <span class="token key atrule">banner_height_limit</span><span class="token punctuation">:</span> <span class="token number">80</span>  <span class="token comment"># 翻页后自动滚动</span>  <span class="token comment"># Auto scroll after page turning</span>  <span class="token key atrule">scroll_after_turning_page</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment"># 向顶部滚动的箭头</span><span class="token comment"># Scroll top arrow</span><span class="token key atrule">scroll_top_arrow</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment">#---------------------------</span><span class="token comment"># 页脚</span><span class="token comment"># Footer</span><span class="token comment">#---------------------------</span><span class="token key atrule">footer</span><span class="token punctuation">:</span>  <span class="token comment"># 页脚第一行文字的 HTML，建议保留 Fluid 的链接，用于向更多人推广本主题</span>  <span class="token comment"># HTML of the first line of the footer, it is recommended to keep the Fluid link to promote this theme to more people</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span> '    &lt;a href="https<span class="token punctuation">:</span>//hexo.io" target="_blank" rel="nofollow noopener"<span class="token punctuation">></span>&lt;span<span class="token punctuation">></span>Hexo&lt;/span<span class="token punctuation">></span>&lt;/a<span class="token punctuation">></span>    &lt;i class="iconfont icon<span class="token punctuation">-</span>love"<span class="token punctuation">></span>&lt;/i<span class="token punctuation">></span>    &lt;a href="https<span class="token punctuation">:</span>//github.com/fluid<span class="token punctuation">-</span>dev/hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>fluid" target="_blank" rel="nofollow noopener"<span class="token punctuation">></span>&lt;span<span class="token punctuation">></span>Fluid&lt;/span<span class="token punctuation">></span>&lt;/a<span class="token punctuation">></span>  '  <span class="token comment"># 展示网站的 PV、UV 统计数</span>  <span class="token comment"># Display website PV and UV statistics</span>  <span class="token key atrule">statistics</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment"># 统计数据来源，使用 leancloud 需要设置 `web_analytics: leancloud` 中的参数；使用 busuanzi 不需要额外设置，但是有时不稳定，另外本地运行时 busuanzi 显示统计数据很大属于正常现象，部署后会正常</span>    <span class="token comment"># Data source. If use leancloud, you need to set the parameter in `web_analytics: leancloud`</span>    <span class="token comment"># Options: busuanzi | leancloud</span>    <span class="token key atrule">source</span><span class="token punctuation">:</span> <span class="token string">"busuanzi"</span>    <span class="token comment"># 页面显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同</span>    <span class="token comment"># Displayed text, &#123;&#125; is a placeholder for numbers (must be included), the same below</span>    <span class="token key atrule">pv_format</span><span class="token punctuation">:</span> <span class="token string">"总访问量 &#123;&#125; 次"</span>    <span class="token key atrule">uv_format</span><span class="token punctuation">:</span> <span class="token string">"总访客数 &#123;&#125; 人"</span>  <span class="token comment"># 国内大陆服务器的备案信息</span>  <span class="token comment"># For Chinese mainland website policy, other areas keep disable</span>  <span class="token key atrule">beian</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment"># ICP证号</span>    <span class="token key atrule">icp_text</span><span class="token punctuation">:</span> 京ICP证123456号    <span class="token comment"># 公安备案号，不填则只显示ICP</span>    <span class="token key atrule">police_text</span><span class="token punctuation">:</span> 京公网安备12345678号    <span class="token comment"># 公安备案的编号，用于URL跳转查询</span>    <span class="token key atrule">police_code</span><span class="token punctuation">:</span> <span class="token number">12345678</span>    <span class="token comment"># 公安备案的图片. 为空时不显示备案图片</span>    <span class="token key atrule">police_icon</span><span class="token punctuation">:</span> /img/police_beian.png<span class="token comment">#---------------------------</span><span class="token comment"># 首页</span><span class="token comment"># Home Page</span><span class="token comment">#---------------------------</span><span class="token key atrule">index</span><span class="token punctuation">:</span>  <span class="token comment"># 首页 Banner 头图，可以是相对路径或绝对路径，以下相同</span>  <span class="token comment"># Path of Banner image, can be a relative path or an absolute path, the same on other pages</span>  <span class="token key atrule">banner_img</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/78316639_p02.jpg  <span class="token comment"># 头图高度，屏幕百分比</span>  <span class="token comment"># Height ratio of banner image</span>  <span class="token comment"># Available: 0 - 100</span>  <span class="token key atrule">banner_img_height</span><span class="token punctuation">:</span> <span class="token number">100</span>  <span class="token comment"># 头图黑色蒙版的不透明度，available: 0 - 1.0， 1 是完全不透明</span>  <span class="token comment"># Opacity of the banner mask, 1.0 is completely opaque</span>  <span class="token comment"># Available: 0 - 1.0</span>  <span class="token key atrule">banner_mask_alpha</span><span class="token punctuation">:</span> <span class="token number">0.3</span>  <span class="token comment"># 首页副标题的独立设置</span>  <span class="token comment"># Independent config of home page subtitle</span>  <span class="token key atrule">slogan</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># 为空则按 hexo config.subtitle 显示</span>    <span class="token comment"># If empty, text based on `subtitle` in hexo config</span>    <span class="token key atrule">text</span><span class="token punctuation">:</span> <span class="token string">"我欲穿花寻路，直入白云深处，浩气展虹霓。"</span>    <span class="token comment"># 通过 API 接口作为首页副标题的内容，必须返回的是 JSON 格式，如果请求失败则按 text 字段显示，该功能必须先开启 typing 打字机功能</span>    <span class="token comment"># Subtitle of the homepage through the API, must be returned a JSON. If the request fails, it will be displayed in `text` value. This feature must first enable the typing animation</span>    <span class="token key atrule">api</span><span class="token punctuation">:</span>      <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token comment"># 请求地址</span>      <span class="token comment"># Request url</span>      <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">""</span>      <span class="token comment"># 请求方法</span>      <span class="token comment"># Request method</span>      <span class="token comment"># Available: GET | POST | PUT</span>      <span class="token key atrule">method</span><span class="token punctuation">:</span> <span class="token string">"GET"</span>      <span class="token comment"># 请求头</span>      <span class="token comment"># Request headers</span>      <span class="token key atrule">headers</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>      <span class="token comment"># 从请求结果获取字符串的取值字段，最终必须是一个字符串，例如返回结果为 &#123;"data": &#123;"author": "fluid", "content": "An elegant theme"&#125;&#125;, 则取值字段为 ['data', 'content']；如果返回是列表则自动选择第一项</span>      <span class="token comment"># The value field of the string obtained from the response. For example, the response content is &#123;"data": &#123;"author": "fluid", "content": "An elegant theme"&#125;&#125;, the expected `keys: ['data','content']`; if the return is a list, the first item is automatically selected</span>      <span class="token key atrule">keys</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 自动截取文章摘要</span>  <span class="token comment"># Auto extract post</span>  <span class="token key atrule">auto_excerpt</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 打开文章的标签方式</span>  <span class="token comment"># The browser tag to open the post</span>  <span class="token comment"># Available: _blank | _self</span>  <span class="token key atrule">post_url_target</span><span class="token punctuation">:</span> _self  <span class="token comment"># 是否显示文章信息（时间、分类、标签）</span>  <span class="token comment"># Meta information of post</span>  <span class="token key atrule">post_meta</span><span class="token punctuation">:</span>    <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">category</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">tag</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 文章通过 sticky 排序后，在首页文章标题前显示图标</span>  <span class="token comment"># If the posts are sorted by `sticky`, an icon is displayed in front of the post title</span>  <span class="token key atrule">post_sticky</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> <span class="token string">"iconfont icon-top"</span><span class="token comment">#---------------------------</span><span class="token comment"># 文章页</span><span class="token comment"># Post Page</span><span class="token comment">#---------------------------</span><span class="token key atrule">post</span><span class="token punctuation">:</span>  <span class="token key atrule">banner_img</span><span class="token punctuation">:</span> /img/karigurashi022.jpg  <span class="token key atrule">banner_img_height</span><span class="token punctuation">:</span> <span class="token number">70</span>  <span class="token key atrule">banner_mask_alpha</span><span class="token punctuation">:</span> <span class="token number">0.3</span>  <span class="token comment"># 文章在首页的默认封面图，当没有指定 index_img 时会使用该图片，若两者都为空则不显示任何图片</span>  <span class="token comment"># Path of the default post cover when `index_img` is not set. If both are empty, no image will be displayed</span>  <span class="token key atrule">default_index_img</span><span class="token punctuation">:</span> /img/karigurashi022.jpg  <span class="token comment"># 文章标题下方的元信息</span>  <span class="token comment"># Meta information below title</span>  <span class="token key atrule">meta</span><span class="token punctuation">:</span>    <span class="token comment"># 作者，优先根据 front-matter 里 author 字段，其次是 hexo 配置中 author 值</span>    <span class="token comment"># Author, based on `author` field in front-matter, if not set, based on `author` value in hexo config</span>    <span class="token key atrule">author</span><span class="token punctuation">:</span>      <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment"># 文章日期，优先根据 front-matter 里 date 字段，其次是 md 文件日期</span>    <span class="token comment"># Post date, based on `date` field in front-matter, if not set, based on create date of .md file</span>    <span class="token key atrule">date</span><span class="token punctuation">:</span>      <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token comment"># 格式参照 ISO-8601 日期格式化</span>      <span class="token comment"># ISO-8601 date format</span>      <span class="token comment"># See: http://momentjs.cn/docs/#/parsing/string-format/</span>      <span class="token key atrule">format</span><span class="token punctuation">:</span> <span class="token string">"LL a"</span>    <span class="token comment"># 字数统计</span>    <span class="token comment"># Word count</span>    <span class="token key atrule">wordcount</span><span class="token punctuation">:</span>      <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token comment"># 显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同</span>      <span class="token comment"># Displayed text, &#123;&#125; is a placeholder for numbers (must be included), the same below</span>      <span class="token key atrule">format</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#125; 字"</span>    <span class="token comment"># 估计阅读全文需要的时长</span>    <span class="token comment"># Estimate the time required to read the full text</span>    <span class="token key atrule">min2read</span><span class="token punctuation">:</span>      <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">format</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#125; 分钟"</span>      <span class="token comment"># 每分钟阅读多少字，如果是技术文章，建议降低</span>      <span class="token comment"># Words read per minute</span>      <span class="token key atrule">words</span><span class="token punctuation">:</span> <span class="token number">100</span>    <span class="token comment"># 浏览量计数</span>    <span class="token comment"># Number of visits</span>    <span class="token key atrule">views</span><span class="token punctuation">:</span>      <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token comment"># 统计数据来源</span>      <span class="token comment"># Data Source</span>      <span class="token comment"># Options: busuanzi | leancloud</span>      <span class="token key atrule">source</span><span class="token punctuation">:</span> <span class="token string">"busuanzi"</span>      <span class="token key atrule">format</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#125; 次"</span>  <span class="token comment"># 在文章开头显示文章更新时间，该时间默认是 md 文件更新时间，可通过 front-matter 中 `updated` 手动指定（和 date 一样格式）</span>  <span class="token comment"># Update date is displayed at the beginning of the post. The default date is the update date of the md file, which can be manually specified by `updated` in front-matter (same format as date)</span>  <span class="token key atrule">updated</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment"># 描述文字</span>    <span class="token comment"># Descriptive text before date</span>    <span class="token key atrule">content</span><span class="token punctuation">:</span> 本文最后更新于：    <span class="token comment"># 是否使用相对时间表示，比如："3 天前"</span>    <span class="token comment"># If true, it will be a relative time, such as: "3 days ago"</span>    <span class="token key atrule">relative</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 文章右侧目录</span>  <span class="token comment"># Table of contents (TOC)</span>  <span class="token key atrule">toc</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># 目录会选择这些节点作为标题</span>    <span class="token comment"># TOC will select these nodes as headings</span>    <span class="token key atrule">headingSelector</span><span class="token punctuation">:</span> <span class="token string">"h1,h2,h3,h4,h5,h6"</span>    <span class="token comment"># 层级的折叠深度，0 是全部折叠，大于 0 后如果存在下级标题则默认展开</span>    <span class="token comment"># Collapse depth. If 0, all headings collapsed. If greater than 0, it will be expanded by default if there are sub headings</span>    <span class="token key atrule">collapseDepth</span><span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token comment"># 版权声明，会显示在每篇文章的结尾</span>  <span class="token comment"># Copyright, will be displayed at the end of each post</span>  <span class="token key atrule">copyright</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">content</span><span class="token punctuation">:</span> <span class="token string">'&lt;b>版权声明：&lt;/b> 本博客所有文章除特别声明外，均采用 &lt;a href="https://creativecommons.org/licenses/by-sa/4.0/deed.zh" rel="nofollow noopener">CC BY-SA 4.0 协议&lt;/a> ，转载请注明出处！'</span>  <span class="token comment"># 文章底部上一篇下一篇功能</span>  <span class="token comment"># Link to previous/next post</span>  <span class="token key atrule">prev_next</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 文章底部自定义区域（位于 footer 上方），支持 HTML，可插入赞赏码、公众号这类内容内容</span>  <span class="token comment"># Custom content at the bottom of the post page (located above the footer)</span>  <span class="token key atrule">custom</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">content</span><span class="token punctuation">:</span> <span class="token string">'&lt;img src="https://octodex.github.com/images/jetpacktocat.png" class="rounded mx-auto d-block mt-5" style="width:150px; height:150px;">'</span>  <span class="token comment"># 文章图片可点击放大</span>  <span class="token comment"># Zoom feature of images</span>  <span class="token key atrule">image_zoom</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># 放大后图片链接替换规则，可用于将压缩图片链接替换为原图片链接，如 ['-slim', ''] 是将链接中 `-slim` 移除；如果想使用正则请使用 `re:` 前缀，如 ['re:\\d&#123;3,4&#125;\\/\\d&#123;3,4&#125;\\/', '']</span>    <span class="token comment"># The image url replacement when zooming, the feature can be used to replace the compressed image to the original image, eg: ['-slim', ''] removes `-slim` from the image url when zooming; if you want to use regular, use prefix `re:`, eg: ['re:\\d&#123;3,4&#125;\\/\\d&#123;3,4&#125;\\/','']</span>    <span class="token key atrule">img_url_replace</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">]</span>  <span class="token comment"># 脚注语法，会在文章底部生成脚注，如果 Markdown 渲染器本身支持，则建议关闭，否则可能会冲突</span>  <span class="token comment"># Support footnote syntax, footnotes will be generated at the bottom of the post page. If the Markdown renderer itself supports it, please disable it, otherwise it may conflict</span>  <span class="token key atrule">footnote</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># 脚注的节标题，也可以在 front-matter 中通过 `footnote: &lt;h2>Reference&lt;/h2>` 这种形式修改单独页面的 header</span>    <span class="token comment"># The section title of the footnote, you can also modify the header of a single page in the form of `footnote: &lt;h2>Reference&lt;/h2>` in front-matter</span>    <span class="token key atrule">header</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token comment"># 数学公式，开启之前需要更换 Markdown 渲染器，否则复杂公式会有兼容问题，具体请见：https://hexo.fluid-dev.com/docs/guide/##latex-数学公式</span>  <span class="token comment"># Mathematical formula. If enable, you need to change the Markdown renderer, see: https://hexo.fluid-dev.com/docs/en/guide/#math</span>  <span class="token key atrule">math</span><span class="token punctuation">:</span>    <span class="token comment"># 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `math: true`</span>    <span class="token comment"># If you want to use math on the custom page, you need to set `math: true` in Front-matter</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># 开启后，只有在文章 Front-matter 里指定 `math: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度</span>    <span class="token comment"># If true, only set `math: true` in Front-matter will enable math, to load faster when the page does not contain math</span>    <span class="token key atrule">specific</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment"># Options: mathjax | katex</span>    <span class="token key atrule">engine</span><span class="token punctuation">:</span> mathjax  <span class="token comment"># 流程图，基于 mermaid-js，具体请见：https://hexo.fluid-dev.com/docs/guide/#mermaid-流程图</span>  <span class="token comment"># Flow chart, based on mermaid-js, see: https://hexo.fluid-dev.com/docs/en/guide/#mermaid</span>  <span class="token key atrule">mermaid</span><span class="token punctuation">:</span>    <span class="token comment"># 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `mermaid: true`</span>    <span class="token comment"># If you want to use mermaid on the custom page, you need to set `mermaid: true` in Front-matter</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment"># 开启后，只有在文章 Front-matter 里指定 `mermaid: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度</span>    <span class="token comment"># If true, only set `mermaid: true` in Front-matter will enable mermaid, to load faster when the page does not contain mermaid</span>    <span class="token key atrule">specific</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment"># See: http://mermaid-js.github.io/mermaid/</span>    <span class="token key atrule">options</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'default'</span> <span class="token punctuation">&#125;</span>  <span class="token comment"># 评论插件</span>  <span class="token comment"># Comment plugin</span>  <span class="token key atrule">comments</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment"># 指定的插件，需要同时设置对应插件的必要参数</span>    <span class="token comment"># The specified plugin needs to set the necessary parameters at the same time</span>    <span class="token comment"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> gitalk<span class="token comment">#---------------------------</span><span class="token comment"># 评论插件</span><span class="token comment"># Comment plugins</span><span class="token comment">#</span><span class="token comment"># 开启评论需要先设置上方 `post: comments: enable: true`，然后根据 `type` 设置下方对应的评论插件参数</span><span class="token comment"># Enable comments need to be set `post: comments: enable: true`, then set the corresponding comment plugin parameters below according to `type`</span><span class="token comment">#---------------------------</span><span class="token comment"># Utterances</span><span class="token comment"># 基于 GitHub Issues</span><span class="token comment"># Based on GitHub Issues</span><span class="token comment"># See: https://utteranc.es</span><span class="token key atrule">utterances</span><span class="token punctuation">:</span>  <span class="token key atrule">repo</span><span class="token punctuation">:</span>  <span class="token key atrule">issue_term</span><span class="token punctuation">:</span> pathname  <span class="token key atrule">label</span><span class="token punctuation">:</span> utterances  <span class="token key atrule">theme</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>light  <span class="token key atrule">theme_dark</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>dark  <span class="token key atrule">crossorigin</span><span class="token punctuation">:</span> anonymous<span class="token comment"># Disqus</span><span class="token comment"># 基于第三方的服务，国内用户直接使用容易被墙，建议配合 Disqusjs</span><span class="token comment"># Based on third-party service</span><span class="token comment"># See: https://disqus.com</span><span class="token key atrule">disqus</span><span class="token punctuation">:</span>  <span class="token key atrule">shortname</span><span class="token punctuation">:</span>  <span class="token comment"># 以下为 Disqusjs 支持, 国内用户如果想使用 Disqus 建议配合使用</span>  <span class="token comment"># The following are Disqusjs configurations, please ignore if DisqusJS is not required</span>  <span class="token comment"># See: https://github.com/SukkaW/DisqusJS</span>  <span class="token key atrule">disqusjs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">apikey</span><span class="token punctuation">:</span><span class="token comment"># Gitalk</span><span class="token comment"># 基于 GitHub Issues</span><span class="token comment"># Based on GitHub Issues</span><span class="token comment"># See: https://github.com/gitalk/gitalk#options</span><span class="token key atrule">gitalk</span><span class="token punctuation">:</span>  <span class="token key atrule">clientID</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">clientSecret</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">repo</span><span class="token punctuation">:</span> <span class="token string">'CommentsBed'</span>  <span class="token key atrule">owner</span><span class="token punctuation">:</span> <span class="token string">'fanyfull'</span>  <span class="token key atrule">admin</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'fanyfull'</span><span class="token punctuation">]</span>  <span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN  <span class="token key atrule">labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Gitalk'</span><span class="token punctuation">]</span>  <span class="token key atrule">perPage</span><span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token key atrule">pagerDirection</span><span class="token punctuation">:</span> last  <span class="token key atrule">distractionFreeMode</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">createIssueManually</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 默认 proxy 已失效，解决方法请见下方链接</span>  <span class="token comment"># The default proxy is invalid, please see the links for the solution</span>  <span class="token comment"># https://github.com/gitalk/gitalk/issues/429</span>  <span class="token comment"># https://github.com/Zibri/cloudflare-cors-anywhere</span>  <span class="token comment"># proxy: &lt;your own proxy>/https://github.com/login/oauth/access_token</span>  <span class="token key atrule">proxy</span><span class="token punctuation">:</span> <span class="token string">'https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token'</span><span class="token comment"># Valine</span><span class="token comment"># 基于 LeanCloud</span><span class="token comment"># Based on LeanCloud</span><span class="token comment"># See: https://valine.js.org/configuration.html</span><span class="token key atrule">valine</span><span class="token punctuation">:</span>  <span class="token key atrule">appid</span><span class="token punctuation">:</span>  <span class="token key atrule">appkey</span><span class="token punctuation">:</span>  <span class="token key atrule">placeholder</span><span class="token punctuation">:</span> 说点什么  <span class="token key atrule">path</span><span class="token punctuation">:</span> window.location.pathname  <span class="token key atrule">avatar</span><span class="token punctuation">:</span> retro  <span class="token key atrule">meta</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'nick'</span><span class="token punctuation">,</span> <span class="token string">'mail'</span><span class="token punctuation">,</span> <span class="token string">'link'</span><span class="token punctuation">]</span>  <span class="token key atrule">pageSize</span><span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token key atrule">lang</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN  <span class="token key atrule">highlight</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">recordIP</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">serverURLs</span><span class="token punctuation">:</span><span class="token comment"># Waline</span><span class="token comment"># 从 Valine 衍生而来，额外增加了服务端和多种功能</span><span class="token comment"># Derived from Valine, with self-hosted service and new features</span><span class="token comment"># See: https://waline.js.org/</span><span class="token key atrule">waline</span><span class="token punctuation">:</span>  <span class="token key atrule">serverURL</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">placeholder</span><span class="token punctuation">:</span> 说点什么  <span class="token key atrule">path</span><span class="token punctuation">:</span> window.location.pathname  <span class="token key atrule">avatar</span><span class="token punctuation">:</span> retro  <span class="token key atrule">meta</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'nick'</span><span class="token punctuation">,</span> <span class="token string">'mail'</span><span class="token punctuation">,</span> <span class="token string">'link'</span><span class="token punctuation">]</span>  <span class="token key atrule">pageSize</span><span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token key atrule">lang</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN  <span class="token key atrule">highlight</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">avatarCDN</span><span class="token punctuation">:</span>  <span class="token key atrule">avatarForce</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">requiredFields</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token key atrule">emojiCDN</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">emojiMaps</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token key atrule">anonymous</span><span class="token punctuation">:</span><span class="token comment"># 畅言 Changyan</span><span class="token comment"># 基于第三方的服务</span><span class="token comment"># Based on third-party service, insufficient support for regions outside China</span><span class="token comment"># http://changyan.kuaizhan.com</span><span class="token key atrule">changyan</span><span class="token punctuation">:</span>  <span class="token key atrule">appid</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">appkey</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token comment"># 来必力 Livere</span><span class="token comment"># 基于第三方的服务</span><span class="token comment"># Based on third-party service</span><span class="token comment"># See: https://www.livere.com</span><span class="token key atrule">livere</span><span class="token punctuation">:</span>  <span class="token key atrule">uid</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token comment"># Remark42</span><span class="token comment"># 需要自托管服务端</span><span class="token comment"># Based on self-hosted service</span><span class="token comment"># See: https://remark42.com</span><span class="token key atrule">remark42</span><span class="token punctuation">:</span>  <span class="token key atrule">host</span><span class="token punctuation">:</span>  <span class="token key atrule">site_id</span><span class="token punctuation">:</span>  <span class="token key atrule">max_shown_comments</span><span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token key atrule">locale</span><span class="token punctuation">:</span> zh<span class="token comment"># Twikoo</span><span class="token comment"># 基于腾讯云开发</span><span class="token comment"># Based on Tencent CloudBase</span><span class="token comment"># See: https://twikoo.js.org</span><span class="token key atrule">twikoo</span><span class="token punctuation">:</span>  <span class="token key atrule">envId</span><span class="token punctuation">:</span>  <span class="token key atrule">region</span><span class="token punctuation">:</span> ap<span class="token punctuation">-</span>shanghai  <span class="token key atrule">path</span><span class="token punctuation">:</span> window.location.pathname<span class="token comment">#---------------------------</span><span class="token comment"># 归档页</span><span class="token comment"># Archive Page</span><span class="token comment">#---------------------------</span><span class="token key atrule">archive</span><span class="token punctuation">:</span>  <span class="token key atrule">banner_img</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/78316639_p02.jpg  <span class="token key atrule">banner_img_height</span><span class="token punctuation">:</span> <span class="token number">60</span>  <span class="token key atrule">banner_mask_alpha</span><span class="token punctuation">:</span> <span class="token number">0.3</span>  <span class="token key atrule">subtitle</span><span class="token punctuation">:</span><span class="token comment">#---------------------------</span><span class="token comment"># 分类页</span><span class="token comment"># Category Page</span><span class="token comment">#---------------------------</span><span class="token key atrule">category</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">banner_img</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/78316639_p02.jpg  <span class="token key atrule">banner_img_height</span><span class="token punctuation">:</span> <span class="token number">60</span>  <span class="token key atrule">banner_mask_alpha</span><span class="token punctuation">:</span> <span class="token number">0.3</span>  <span class="token key atrule">subtitle</span><span class="token punctuation">:</span>  <span class="token comment"># 分类的排序字段，前面带减号是倒序，不带减号是正序</span>  <span class="token comment"># Sort field for categories, with a minus sign is reverse order</span>  <span class="token comment"># Options: length | name</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token string">"-length"</span>  <span class="token comment"># 层级的折叠深度，0 是全部折叠，大于 0 后如果存在子分类则默认展开</span>  <span class="token comment"># Collapse depth. If 0, all posts collapsed. If greater than 0, it will be expanded by default if there are subcategories</span>  <span class="token key atrule">collapse_depth</span><span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token comment"># 文章的排序字段，前面带减号是倒序，不带减号是正序</span>  <span class="token comment"># Sort field for posts, with a minus sign is reverse order</span>  <span class="token comment"># Options: date | title | or other field of front-matter</span>  <span class="token key atrule">post_order_by</span><span class="token punctuation">:</span> <span class="token string">"-date"</span>  <span class="token comment"># 单个分类中折叠展示文章数的最大值，超过限制会显示 More，0 则不限制</span>  <span class="token comment"># The maximum number of posts in a single category. If the limit is exceeded, it will be displayed More. If 0 no limit</span>  <span class="token key atrule">post_limit</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token comment">#---------------------------</span><span class="token comment"># 标签页</span><span class="token comment"># Tag Page</span><span class="token comment">#---------------------------</span><span class="token key atrule">tag</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">banner_img</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/78316639_p02.jpg  <span class="token key atrule">banner_img_height</span><span class="token punctuation">:</span> <span class="token number">80</span>  <span class="token key atrule">banner_mask_alpha</span><span class="token punctuation">:</span> <span class="token number">0.3</span>  <span class="token key atrule">subtitle</span><span class="token punctuation">:</span>  <span class="token key atrule">tagcloud</span><span class="token punctuation">:</span>    <span class="token key atrule">min_font</span><span class="token punctuation">:</span> <span class="token number">15</span>    <span class="token key atrule">max_font</span><span class="token punctuation">:</span> <span class="token number">30</span>    <span class="token key atrule">unit</span><span class="token punctuation">:</span> px    <span class="token key atrule">start_color</span><span class="token punctuation">:</span> <span class="token string">"#BBBBEE"</span>    <span class="token key atrule">end_color</span><span class="token punctuation">:</span> <span class="token string">"#337ab7"</span><span class="token comment">#---------------------------</span><span class="token comment"># 关于页</span><span class="token comment"># About Page</span><span class="token comment">#---------------------------</span><span class="token key atrule">about</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">banner_img</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/78316639_p02.jpg  <span class="token key atrule">banner_img_height</span><span class="token punctuation">:</span> <span class="token number">60</span>  <span class="token key atrule">banner_mask_alpha</span><span class="token punctuation">:</span> <span class="token number">0.3</span>  <span class="token key atrule">subtitle</span><span class="token punctuation">:</span>  <span class="token key atrule">avatar</span><span class="token punctuation">:</span> /img/avatar.png  <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"Fan's Blog"</span>  <span class="token key atrule">intro</span><span class="token punctuation">:</span> <span class="token string">"我欲穿花寻路，直入白云深处，浩气展虹霓。"</span>  <span class="token comment"># 更多图标可从 https://hexo.fluid-dev.com/docs/icon/ 查找，`class` 代表图标的 css class，添加 `qrcode` 后，图标不再是链接而是悬浮二维码</span>  <span class="token comment"># More icons can be found from https://hexo.fluid-dev.com/docs/en/icon/  `class` is the css class of the icon. If adding `qrcode`, The icon is no longer a link, but a hovering QR code</span>  <span class="token key atrule">icons</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span> <span class="token key atrule">class</span><span class="token punctuation">:</span> <span class="token string">"iconfont icon-github-fill"</span><span class="token punctuation">,</span> <span class="token key atrule">link</span><span class="token punctuation">:</span> <span class="token string">"https://github.com"</span><span class="token punctuation">,</span> <span class="token key atrule">tip</span><span class="token punctuation">:</span> <span class="token string">"GitHub"</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span> <span class="token key atrule">class</span><span class="token punctuation">:</span> <span class="token string">"iconfont icon-douban-fill"</span><span class="token punctuation">,</span> <span class="token key atrule">link</span><span class="token punctuation">:</span> <span class="token string">"https://douban.com"</span><span class="token punctuation">,</span> <span class="token key atrule">tip</span><span class="token punctuation">:</span> <span class="token string">"豆瓣"</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span> <span class="token key atrule">class</span><span class="token punctuation">:</span> <span class="token string">"iconfont icon-wechat-fill"</span><span class="token punctuation">,</span> <span class="token key atrule">qrcode</span><span class="token punctuation">:</span> <span class="token string">"/img/favicon.ico"</span> <span class="token punctuation">&#125;</span><span class="token comment">#---------------------------</span><span class="token comment"># 自定义页</span><span class="token comment"># Custom Page</span><span class="token comment">#</span><span class="token comment"># 通过 hexo new page 命令创建的页面</span><span class="token comment"># Custom Page through `hexo new page`</span><span class="token comment">#---------------------------</span><span class="token key atrule">page</span><span class="token punctuation">:</span>  <span class="token key atrule">banner_img</span><span class="token punctuation">:</span> /img/default.png  <span class="token key atrule">banner_img_height</span><span class="token punctuation">:</span> <span class="token number">60</span>  <span class="token key atrule">banner_mask_alpha</span><span class="token punctuation">:</span> <span class="token number">0.3</span><span class="token comment">#---------------------------</span><span class="token comment"># 404页</span><span class="token comment"># 404 Page</span><span class="token comment">#---------------------------</span><span class="token key atrule">page404</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">banner_img</span><span class="token punctuation">:</span> /img/default.png  <span class="token key atrule">banner_img_height</span><span class="token punctuation">:</span> <span class="token number">85</span>  <span class="token key atrule">banner_mask_alpha</span><span class="token punctuation">:</span> <span class="token number">0.3</span>  <span class="token key atrule">subtitle</span><span class="token punctuation">:</span> <span class="token string">"Page not found"</span><span class="token comment">#---------------------------</span><span class="token comment"># 友链页</span><span class="token comment"># Links Page</span><span class="token comment">#---------------------------</span><span class="token key atrule">links</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">banner_img</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/78316639_p02.jpg  <span class="token key atrule">banner_img_height</span><span class="token punctuation">:</span> <span class="token number">60</span>  <span class="token key atrule">banner_mask_alpha</span><span class="token punctuation">:</span> <span class="token number">0.3</span>  <span class="token key atrule">subtitle</span><span class="token punctuation">:</span>  <span class="token comment"># 友链的成员项</span>  <span class="token comment"># Member item of page</span>  <span class="token key atrule">items</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span>      <span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token string">"Fluid Blog"</span><span class="token punctuation">,</span>      <span class="token key atrule">intro</span><span class="token punctuation">:</span> <span class="token string">"主题博客"</span><span class="token punctuation">,</span>      <span class="token key atrule">link</span><span class="token punctuation">:</span> <span class="token string">"https://hexo.fluid-dev.com/"</span><span class="token punctuation">,</span>      <span class="token key atrule">avatar</span><span class="token punctuation">:</span> <span class="token string">"/img/favicon.ico"</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span>      <span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token string">"Fluid Docs"</span><span class="token punctuation">,</span>      <span class="token key atrule">intro</span><span class="token punctuation">:</span> <span class="token string">"主题使用指南"</span><span class="token punctuation">,</span>      <span class="token key atrule">link</span><span class="token punctuation">:</span> <span class="token string">"https://hexo.fluid-dev.com/docs/"</span><span class="token punctuation">,</span>      <span class="token key atrule">avatar</span><span class="token punctuation">:</span> <span class="token string">"/img/favicon.ico"</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span>      <span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token string">"Fluid Repo"</span><span class="token punctuation">,</span>      <span class="token key atrule">intro</span><span class="token punctuation">:</span> <span class="token string">"主题 GitHub 仓库"</span><span class="token punctuation">,</span>      <span class="token key atrule">link</span><span class="token punctuation">:</span> <span class="token string">"https://github.com/fluid-dev/hexo-theme-fluid"</span><span class="token punctuation">,</span>      <span class="token key atrule">avatar</span><span class="token punctuation">:</span> <span class="token string">"/img/favicon.ico"</span>    <span class="token punctuation">&#125;</span>  <span class="token comment"># 当成员头像加载失败时，替换为指定图片</span>  <span class="token comment"># When the member avatar fails to load, replace the specified image</span>  <span class="token key atrule">onerror_avatar</span><span class="token punctuation">:</span> /img/avatar.png  <span class="token comment"># 友链下方自定义区域，支持 HTML，可插入例如申请友链的文字</span>  <span class="token comment"># Custom content at the bottom of the links</span>  <span class="token key atrule">custom</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">content</span><span class="token punctuation">:</span> <span class="token string">'&lt;hr>&lt;p>在下方留言申请加入我的友链，按如下格式提供信息：&lt;/p>&lt;ul>&lt;li>博客名：Fluid&lt;/li>&lt;li>简介：Fluid 主题官方博客&lt;/li>&lt;li>链接：https://hexo.fluid-dev.com&lt;/li>&lt;li>图片：https://hexo.fluid-dev.com/img/favicon.ico&lt;/li>&lt;/ul>'</span>  <span class="token comment"># 评论插件</span>  <span class="token comment"># Comment plugin</span>  <span class="token key atrule">comments</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment"># 指定的插件，需要同时设置对应插件的必要参数</span>    <span class="token comment"># The specified plugin needs to set the necessary parameters at the same time</span>    <span class="token comment"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> disqus<span class="token comment">#---------------------------</span><span class="token comment"># 以下是配置 JS CSS 等静态资源的 URL 前缀，可以自定义成 CDN 地址，</span><span class="token comment"># 默认的 jsDelivr CDN 可能在部分地区无法访问，如果需要修改，最好使用与默认配置相同的版本，以避免潜在的问题，</span><span class="token comment"># ** 如果你不知道如何设置，请不要做任何改动 **</span><span class="token comment">#</span><span class="token comment"># Here is the url prefix to configure the static assets. Set CDN addresses you want to customize.</span><span class="token comment"># Be aware that you would better use the same version as default ones to avoid potential problems.</span><span class="token comment"># DO NOT EDIT THE FOLLOWING SETTINGS UNLESS YOU KNOW WHAT YOU ARE DOING</span><span class="token comment">#---------------------------</span><span class="token key atrule">static_prefix</span><span class="token punctuation">:</span>  <span class="token comment"># 内部静态</span>  <span class="token comment"># Internal static</span>  <span class="token key atrule">internal_js</span><span class="token punctuation">:</span> /js  <span class="token key atrule">internal_css</span><span class="token punctuation">:</span> /css  <span class="token key atrule">internal_img</span><span class="token punctuation">:</span> /img  <span class="token key atrule">anchor</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/anchor<span class="token punctuation">-</span>js@4.3.0/  <span class="token key atrule">github_markdown</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/github<span class="token punctuation">-</span>markdown<span class="token punctuation">-</span>css@4.0.0/  <span class="token key atrule">jquery</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/jquery@3.6.0/dist/  <span class="token key atrule">bootstrap</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/  <span class="token key atrule">highlightjs</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/highlight.js@10.6.0/  <span class="token key atrule">prismjs</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/prismjs@1.23.0/  <span class="token key atrule">tocbot</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/tocbot@4.12.2/dist/  <span class="token key atrule">typed</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/typed.js@2.0.11/lib/  <span class="token key atrule">fancybox</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/@fancyapps/fancybox@3.5.7/dist/  <span class="token key atrule">nprogress</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/nprogress@0.2.0/  <span class="token key atrule">mathjax</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/  <span class="token key atrule">katex</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/katex@0.13.0/dist/  <span class="token key atrule">busuanzi</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//busuanzi.ibruce.info/busuanzi/2.3/  <span class="token key atrule">clipboard</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/clipboard@2.0.8/dist/  <span class="token key atrule">mermaid</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/mermaid@8.9.2/dist/  <span class="token key atrule">valine</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/valine@1.4.14/dist/  <span class="token key atrule">waline</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/@waline/client@0.14.8/dist/  <span class="token key atrule">gitalk</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/gitalk@1.7.2/dist/  <span class="token key atrule">disqusjs</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/disqusjs@1.3.0/dist/  <span class="token key atrule">twikoo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/twikoo@1.3.0/dist/  <span class="token key atrule">hint</span><span class="token punctuation">:</span> /lib/hint/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GiHub + Hexo 真·从零开始搭建个人博客</title>
    <link href="/2021/10/16/Github-Hexo-%E7%9C%9F-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA-GitHub-%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/10/16/Github-Hexo-%E7%9C%9F-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA-GitHub-%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>首先要感谢<ahref="https://mumaxu.github.io/2018/12/09/GitHub-Hexo-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/">这篇博客</a>，我这篇博客多有借鉴（copy），当时我搭建成功这个GitHub Pages 的博客也离不开这篇博客的帮助。</p><p>然后，简单介绍一下利用 GitHub + Hexo 搭建的原理。</p><p>GitHub 是有名的代码托管网站，而它提供了一项服务 GitHub Pages，这个GitHub Pages 可以将我们托管在 GitHub 上的一个仓库中的 html、css 和 js代码渲染成静态页面。当然，这个仓库是特殊的，所以每一个 GitHub账户只能够育一个这样的仓库。将相应的博客内容上传到 GitHub上之后，我们就可以通过 <code>https://www.username.github.io</code>来访问自己的博客，这里的 <code>username</code>要换成自己的用户名。比如，我的用户名是<code>fanyfull</code>，那么就可以通过<code>https://www.fanyfull.github.io</code> 来访问我的博客。</p><p>Hexo 是使用 nodejs 开发的一个快速、简洁、高效的静态博客生成器。Hexo使用 Markdown语法解析文章，然后渲染成相应的网页，然后我们将渲染好的网页代码上传到GitHub 上就可以了。简单来讲，利用 Hexo，我们只需要使用 Markdown语法写文章，剩下的事情全部交给 Hexo去做，我们就可以看到想要的博客效果了。</p><h1 id="准备工作">准备工作</h1><p>注意，下面的所有的操作最好在科学上网的环境下完成。并且，如果电脑中某一个条件已经满足，那么，直接跳过该步骤即可。</p><h2 id="注册一个-github-账号">注册一个 GitHub 账号</h2><p>前往 <a href="https://github.com/">GitHub官网</a>，进行新用户注册。</p><p>注册完之后要记住注册的用户名和邮箱，后面会用到。</p><h2 id="安装-nodejs">安装 nodejs</h2><p>进入 <a href="https://nodejs.org/en/">Node 官网</a>下载相应版本，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211016163651.png" /></p><p>然后安装的时候建议直接全部点击下一步（如果 C盘不吃紧的话），然后勾选所有组件，并勾选 <code>Add to Path</code>将其添加到系统环境变量。</p><p>安装 Node.js 会包含环境变量以及 npm的安装，安装后，可以在命令行输入如下命令检测 Node.js 是否安装成功：</p><p>第一个命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">node -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这个命令，在 nodejs 安装成功的情况下会显示 nodejs 的版本号。</p><p>第二个命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">npm -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这个命令，在 nodejs 安装成功的情况下会显示 npm 的版本号。</p><h2 id="安装-git-for-windows">安装 Git for Windows</h2><h3 id="安装">安装</h3><p>到 <a href="https://git-scm.com/">Git 官网</a>下载最新版本，所有安装步骤建议直接下一步。</p><p>然后打开安装好的 Git Bash，这里可以直接鼠标右键唤出菜单：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211016164817.png" /></p><p>然后点击 Git Bash Here，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211016164912.png" /></p><h3 id="设置用户名和邮箱">设置用户名和邮箱</h3><p>因为 Git是分布式版本控制系统，所以需要设置用户名和邮箱作为一个标识，在命令行输入如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"user_name"</span> <span class="token comment"># user_name 填入 GitHub 用户名</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"user_email"</span> <span class="token comment"># user_email 填入 GitHub 注册的邮箱</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这里还有一个额外步骤，建议执行，就是给 Git设置代理，详情参考我的另一篇博客：<ahref="https://fanlumaster.github.io/2021/03/23/Git-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86-VPN/">Git命令行使用代理</a></p><h2 id="安装-vscode">安装 VSCode</h2><p>VSCode是一个非常好用的文本编辑器，之后编辑博客的相关配置文件以及后面的写博客都需要用到这个编辑器。</p><p>安装过程很简单，直接进入 <ahref="https://code.visualstudio.com/">VSCode官网</a>，然后安装的时候建议所有步骤都直接点下一步。</p><h1 id="搭建-gihub-博客">搭建 GiHub 博客</h1><h2 id="新建仓库">新建仓库</h2><p>登录 GitHub 账号，新建一个名为<code>username.github.io</code>（这里的 username要替换成自己的实际的用户名） 的仓库，如下图</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211016165332.png" /></p><h2 id="配置-ssh-key">配置 SSH key</h2><p>打开 Git Bash，输入命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"user.email"</span> <span class="token comment"># user.email 为GitHub 上注册的邮箱</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>然后直接三个回车即可，默认不需要设置密码。查看是否已经有 ssh密钥。打开用户主目录<code>C:\Users\username\.ssh</code>，.ssh文件夹一定存放在C:，至于后面的路径lenovo这个不一定每台电脑都相同。找到.ssh文件夹，打开如下：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211016172151.png" /></p><p>然后找到生成的 <code>.ssh</code> 的文件夹中的 <code>id_rsa.pub</code>密钥，将内容全部复制。其中 <code>id_rsa</code>是私钥不能泄露，<code>id_rsa.pub</code> 是公钥可以放心告诉他人。</p><p>打开 <a href="https://github.com/settings/ssh/new">GitHub SSH and GPGkeys</a> 页面，新建一个 ssh key：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211016172518.png" /></p><p><code>Title</code> 为标题，任意填即可，将刚刚复制的<code>id_rsa.pub</code> 内容粘贴进去，最后点击<code>Add SSH key</code>。在 <code>Git Bash</code> 中检测<code>GitHub</code> 公钥设置是否成功，输入如下命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>验证是否连接成功，连接成功的话，显示如下：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211016172942.png" /></p><h1 id="使用-hexo-博客框架">使用 Hexo 博客框架</h1><p>Hexo 官方文档：<a href="https://hexo.io/docs/"class="uri">https://hexo.io/docs/</a></p><h2 id="hexo-简介">Hexo 简介</h2><h3 id="hexo-是什么">Hexo 是什么</h3><p><code>Hexo</code> 是一个简单、快速、强大的基于<code>Github Pages</code> 的博客框架，支持 <code>Markdown</code>格式，有众多优秀插件和主题。</p><h3 id="hexo-原理">Hexo 原理</h3><p>由于 <code>Github Pages</code>存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以<code>Hexo</code> 所做的就是将这些 <code>md</code>文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到<code>GitHub</code> 。</p><h3 id="安装与初始化">安装与初始化</h3><p>在 <code>Git Bash</code> 中输入以下命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli <span class="token comment"># 此命令完成对 hexo 的安装</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>安装完成后，在电脑的某个地方新建一个文件夹（名字可以随便取）专门用于存放博客代码，比如我的是<code>D:\Blogs</code>，由于这个文件夹将来存放博客的所有内容和素材，以及所有的博客操作都会在其中完成，所以最好不要随便放。</p><p>进入新建的博客目录，输入如下命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo init <span class="token comment"># 该命令完成 hexo 在本地博客目录的初始化</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211016174011.png" /></p><h3 id="生成静态文件">生成静态文件</h3><p>在 <code>Git Bash</code> 中输入以下命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo g <span class="token comment"># 生成静态文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>执行以上命令后，Hexo 就会在 <code>public</code> 文件夹中生成相关的<code>html</code> 文件，这些文件将来都是要提交到 <code>GitHub</code>上的 <code>username.github.io</code> 的仓库中去的。</p><h3 id="本地预览">本地预览</h3><p>在 <code>Git Bash</code> 输入以下命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo s <span class="token comment"># 开启本地预览</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><code>hexo s</code> 是开启本地预览服务，打开浏览器访问<code>http://localhost:4000</code> 即可看到内容，<code>Ctrl+C</code>停止本地预览。本地预览可以实时查看博客的编辑情况，待博客写完后一起部署到<code>GitHub</code> 上。</p><p>第一次初始化的时候 <code>hexo</code> 已经帮我们写了一篇名为 HelloWorld 的文章，默认的主题比较丑。</p><h3 id="上传到-github">上传到 GitHub</h3><h4 id="配置站点配置文件">配置站点配置文件</h4><p><code>hexo</code> 有 2 种 <code>_config.yml</code>文件，一个是根目录下的全局的 <code>_config.yml</code>，一个是各个主体<code>theme</code> 下的<code>_config.yml</code>。将前者称为站点配置文件，后者称为主题配置文件。</p><p>打开根目录下站点配置文件 <code>_config.yml</code>，配置有关<code>deploy</code> 的部分：</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Deployment</span><span class="token comment">## Docs: https://hexo.io/docs/one-command-deployment</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>fanlumaster/fanyfull.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="安装插件">安装插件</h4><p>在 <code>Git Bash</code> 中输入以下命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span> <span class="token comment"># 安装部署插件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>如果不进行上述操作，直接使用 <code>hexo d</code> 部署到<code>GitHub</code>，将会报错。</p><h4 id="部署到-github">部署到 GitHub</h4><p>在 <code>Git Bash</code> 中输入以下命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>部署成功后，打开对应的网址<code>https://www.username.github.io</code>，如果出现了和本地预览一样的效果，那么，表明部署成功。</p><h1 id="一些问题及优化">一些问题及优化</h1><h2 id="lf-will-be-replaced-by-crlf">LF will be replaced by CRLF</h2><p>如果这里出现了下面这样的情况：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">warning: LF will be replaced by CRLF in</code></pre></div></figure><p><img src="https://i.imgur.com/LDMt68d.png" /></p><p>直接执行：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> core.safecrlf <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>参考：<ahref="https://stackoverflow.com/questions/5834014/lf-will-be-replaced-by-crlf-in-git-what-is-that-and-is-it-important">stackoverflow</a></p><p>到这里，基本的博客就搭建完成了。下一篇博客介绍更换主题以及主题的相关配置。</p><h2 id="将-fluid-主题的滚动条设置为无圆角">将 fluid主题的滚动条设置为无圆角</h2><p>在 <code>source/css/custom.css</code> 中添加如下样式代码：</p><figure><div class="code-wrapper"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 将进度条的圆角去掉 */</span><span class="token selector">::-webkit-scrollbar-thumb</span> <span class="token punctuation">&#123;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="github-仓库的-readme.md-被渲染了了-readme.html">Github 仓库的README.md 被渲染了了 README.html</h2><p>这个我们知道是不应该被渲染的。这里的话，hexo也提供了一个选项，那就是在根目录下的 <code>_config.yaml</code>中加上这样一个配置，</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">skip_render</span><span class="token punctuation">:</span> README.md<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这样 hexo 在渲染时就会跳过这个 README 的 md 文件，然后我们在<code>hexo d</code> 之后就可以直接在仓库的首页看到这个 README 了。</p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《浮生六记》札记</title>
    <link href="/2021/10/16/%E3%80%8A%E6%B5%AE%E7%94%9F%E5%85%AD%E8%AE%B0%E3%80%8B%E6%9C%AD%E8%AE%B0/"/>
    <url>/2021/10/16/%E3%80%8A%E6%B5%AE%E7%94%9F%E5%85%AD%E8%AE%B0%E3%80%8B%E6%9C%AD%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>◆ 卷一　闺房记乐</p><blockquote><p>东坡云：“事如春梦了无痕。”</p></blockquote><p>按：不能说完全是了无痕的。万一梦遗了呢？万一醒来还记得很清楚呢？只是，不管是哪样，都是徒增惆怅罢了。</p><blockquote><p>刺绣之暇，渐通吟咏，有“秋侵人影瘦，霜染菊花肥”之句。</p></blockquote><p>按：此中诗趣，有趣。</p><blockquote><p>其形削肩长项，瘦不露骨，眉弯目秀，顾盼神飞，唯两齿微露，似非佳相。一种缠绵之态，令人之意也消。</p></blockquote><p>按：又见“顾盼神飞”，好多人都喜欢用这个词语形容女子，好。顾盼之间见光采。《红与黑》中是这样用的：明眸善睐，顾盼神飞。这两个词语在一起真是再合适不过了。</p><p>疑：“令人之意也消”这句话该作何解释？这里翻译的是“让人萌生爱恋之意”，我觉得不够好，有的地方是翻译成“让人销魂失魄”，也不好。我个人琢磨了一下，“令”字在汉语大辞典中有“善；美好”的意思，“消”字我更愿意作“销”字来解释，因此这句话连同上一句话就可以合在一起意译为：这一种缠绵娇美的仪态，这如此美妙的人儿的神意都是如此地使人销魂失魄。</p><blockquote><p>余戏题其签曰“锦囊佳句”，不知夭寿之机，此已伏矣。</p></blockquote><p>按：一语成谶，令人扼腕。</p><blockquote><p>芸暗牵余袖，随至其室，见藏有暖粥并小菜焉。</p></blockquote><blockquote><p>合卺</p></blockquote><blockquote><p>暗计吃斋之初，正余出痘之期，因笑谓曰：“今我光鲜无恙，姊可从此开戒否？”芸笑之以目，点之以首。</p></blockquote><blockquote><p>芸回眸微笑，便觉一缕情丝摇人魂魄。拥之入帐，不知东方之既白。</p></blockquote><blockquote><p>自此耳鬓相磨，亲同形影，爱恋之情，有不可以言语形容者。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>读书</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书</tag>
      
      <tag>文学</tag>
      
      <tag>文言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库系统概论作业一</title>
    <link href="/2021/10/14/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA%E4%BD%9C%E4%B8%9A%E4%B8%80/"/>
    <url>/2021/10/14/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA%E4%BD%9C%E4%B8%9A%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<p>这几个概念要求用自己的话来描述，有够烦人哦。</p><blockquote><p>1、试述数据、数据库、数据库管理系统和数据库系统的概念。</p></blockquote><p>解：</p><ul><li><p>数据，描述事物的符号记录称为数据。所谓描述事物的符号，举例来说，数字、文字、图像、视频等可以用计算机来表示的都是符号。</p></li><li><p>数据库，英文名database，就是存储数据的仓库。数据库是长期储存在计算机内、有组织的大量数据的集合。</p></li><li><p>数据库管理系统，英文名 database managementsystem，就是进行科学地组织和存储、获取和维护数据的系统。</p></li><li><p>数据库系统，英文名 databasesystem，就是由数据库、数据库管理系统、应用程序和数据库管理员组成的存储、管理处理和维护数据的系统。</p></li></ul><blockquote><p>3、试述文件系统和数据库管理系统的区别和联系。</p></blockquote><p>解：</p><p>(1)文件系统与数据库系统的区别是：文件系统面向某一应用程序，共享性差，冗余度大，数据独立性差，记录内有结构，整体无结构，由应用程序自己控制。数据库系统面向现实世界，共享性高，冗余度小，具有较高的物理独立性和一定的逻辑独立性，整体结构化，用数据模型描述，由数据库系统提供数据安全性，完整性，并发控制和恢复力。</p><ol start="2" type="1"><li>文件系统与数据库系统的联系是：文件系统于数据库系统都是计算机系统中管理数据库的软件。解析文件系统是操作系统的重要组成部分。而DBMS是独立于操作系统的软件。到时DBMS狮子啊操作系统的基础上实现的。数据库系统的组织和存储是通过操作系统中的文件系统来实现的。</li></ol><blockquote><p>5、试述数据库系统的特点。</p></blockquote><p>解：</p><p>(1) 数据结构化；<br />(2) 数据的共享性高、冗余度低且易扩充；<br />(3) 数据独立性高；<br />(4) 数据由数据库管理系统统一管理和控制；</p><blockquote><p>6、数据库管理系统的主要功能主要有哪些？</p></blockquote><p>解：</p><p>(1) 数据定义功能；<br />(2) 数据组织、存储和管理；<br />(3) 数据操纵功能；<br />(4) 数据库的事务管理和运行管理；<br />(5) 数据库的建立和维护功能。<br />(6)其他功能，包括数据库管理系统与网络中其他软件系统的通信功能，一个数据库管理系统与另一个数据库管理系统或文件系统的数据转换功能，异构数据库之间的互访和互操作功能等。</p><blockquote><p>练习题：给出一个病人就诊情况的 E-R 模型图，并分析 E-R模型是否满足概念模型的两个基本特征。</p></blockquote><p>解：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211015103959.png" /></p><p>E-R 模型满足概念模型的两个基本特征。</p><p>说明几点：</p><p>病人与病床的关系：一名病人在一次住院期间对应一张病床，而一张病床可以有多名病人曾经住过。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>数据库系统概论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《编译原理第三版》（张素琴）第四章学习札记</title>
    <link href="/2021/10/13/%E3%80%8A%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%AC%E4%B8%89%E7%89%88%E3%80%8B%EF%BC%88%E5%BC%A0%E7%B4%A0%E7%90%B4%EF%BC%89%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0/"/>
    <url>/2021/10/13/%E3%80%8A%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%AC%E4%B8%89%E7%89%88%E3%80%8B%EF%BC%88%E5%BC%A0%E7%B4%A0%E7%90%B4%EF%BC%89%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>何为确定的自顶向下分析方法？</p></blockquote><p>确定的自顶向下分析方法，是从文法的开始符号出发，考虑如何根据当前的输入符号（单词符号）唯一地确定选用哪个产生式替换相应非终结符以往下推导，或如何构造一棵相应的语法树。</p><blockquote><p>如何理解 <span class="math inline">\(\text{FIRST()}\)</span>？</p></blockquote><p>设 <span class="math inline">\(G = (V_T, V_N, P, S)\)</span>是上下文无关文法。</p><p><span class="math display">\[\text{FIRST}(\alpha) = \{a|\alpha \stackrel{*}{\Rightarrow} \alpha\beta, \quad a \in V_T, \alpha, \beta \in V^*\}\]</span></p><p>若 <span class="math inline">\(\alpha \stackrel{*}{\Rightarrow}\epsilon\)</span>，则规定 <span class="math inline">\(\epsilon \in\text{FIRST}(\alpha)\)</span>。称 <spanclass="math inline">\(\text{FIRST}(\alpha)\)</span> 为 <spanclass="math inline">\(\alpha\)</span>的<strong>开始符号集</strong>或<strong>首符号集</strong>。</p><blockquote><p>如何理解 <span class="math inline">\(\text{FOLLOW()}\)</span>？</p></blockquote><p>设 <span class="math inline">\(G = (V_T, V_N, P, S)\)</span>是上下文无关文法，<span class="math inline">\(A \in V_N\)</span>，<spanclass="math inline">\(S\)</span> 是开始符号。</p><p><span class="math display">\[\text{FOLLOW}(A) = \{a|S \stackrel{*}{\Rightarrow} \mu A \beta \; 且 \;a \in V_T, a \in \text{FIRST}(\beta), \mu \in V_T^*, \beta \in V^{+}\}\]</span></p><p>若 <span class="math inline">\(S \stackrel{*}{\Rightarrow} \mu A\beta\)</span>，且 <span class="math inline">\(\beta\stackrel{*}{\Rightarrow} \epsilon\)</span>，则 <spanclass="math inline">\(＃ \in \text{FOLLOW}(A)\)</span>。</p><p><span class="math display">\[\text{FOLLOW}(A) = \{a|S \stackrel{*}{\Rightarrow} \cdots Aa \cdots, \;a \in V_T\}\]</span></p><p>若有 <span class="math inline">\(S \stackrel{*}{\Rightarrow} \cdotsA\)</span>，则规定 <span class="math inline">\(＃ \in\text{FOLLOW}(A)\)</span>。</p><p>这里用 <span class="math inline">\(＃\)</span>作为输入串的结束符，也称为输入串符号。</p><p>因此当文法中含有形如</p><p><span class="math display">\[\begin{split}A \rightarrow \alpha \\A \rightarrow \beta\end{split}\]</span></p><p>的产生式时，其中 <span class="math inline">\(A \in V_N, \alpha、\beta\in V^*\)</span>，若 <span class="math inline">\(\alpha\)</span> 和<span class="math inline">\(\beta\)</span> 不能同时推导出空，假定 <spanclass="math inline">\(\alpha \stackrel{*}{\nRightarrow}\epsilon\)</span> <span class="math inline">\(, \beta\stackrel{*}{\Rightarrow} \epsilon\)</span>，则当 <spanclass="math inline">\(\text{FIRST}(\alpha)\)</span> <spanclass="math inline">\(\cap\)</span> <spanclass="math inline">\((\text{FIRST}(\beta)\)</span> <spanclass="math inline">\(\cup\)</span> <spanclass="math inline">\(\text{FOLLOW}(A)) = \varnothing\)</span>时，对于非终结符 <span class="math inline">\(A\)</span>的替换仍可唯一地确定候选。</p><blockquote><p>如何理解 <span class="math inline">\(\text{SELECT()}\)</span>？</p></blockquote><p>给定上下文无关文法的产生式 <span class="math inline">\(A \rightarrow\alpha\)</span> $, $ <span class="math inline">\(A \in V_N, \alpha \inV^*\)</span>，</p><ul><li>若 <span class="math inline">\(\alpha \stackrel{*}{\nRightarrow}\varepsilon\)</span>，则 <span class="math inline">\(\text{SELECT}(A\rightarrow \alpha)\)</span> <span class="math inline">\(=\)</span><span class="math inline">\(\text{FIRST}(\alpha)\)</span>。</li><li>若 <span class="math inline">\(\alpha \stackrel{*}{\Rightarrow}\varepsilon\)</span>，则 <span class="math inline">\(\text{SELECT}(A\rightarrow \alpha)\)</span> <span class="math inline">\(=\)</span><span class="math inline">\((\text{FIRST}(\alpha) -\{\varepsilon\})\)</span> <span class="math inline">\(\cup\)</span><span class="math inline">\(\text{FOLLOW}(A)\)</span>。</li></ul><blockquote><p>何为 <span class="math inline">\(\text{LL}(1)\)</span> 文法？</p></blockquote><p>一个上下文无关文法是 <spanclass="math inline">\(\text{LL}(1)\)</span> 的充分必要条件是,</p><p>对每个非终结符 <span class="math inline">\(A\)</span>的两个不同产生式，<span class="math inline">\(A \rightarrow\alpha\)</span> <span class="math inline">\(,\)</span> <spanclass="math inline">\(A \rightarrow \beta\)</span>，满足</p><p><span class="math display">\[\text{SELECT}(A \rightarrow \alpha) \cap \text{SELECT}(A \rightarrow\beta) = \varnothing\]</span></p><p>其中 <span class="math inline">\(\alpha、\beta\)</span> 不同时能<span class="math inline">\(\stackrel{*}{\Rightarrow}\epsilon\)</span>。</p><p><span class="math inline">\(\text{LL}(1)\)</span> 的含义是：第 1 个<span class="math inline">\(\text{L}\)</span>表明自顶向下分析是从左向右扫描输入串，第 2 个 <spanclass="math inline">\(\text{L}\)</span> 表明分析过程中将用最左推导，1表明只需要向右看一个符号便可决定如何推导，即选择哪个产生式（规则）进行推导。</p><blockquote><p>如何判别某文法是否是 <spanclass="math inline">\(\text{LL}(1)\)</span> 文法？</p></blockquote><p>首先计算 <span class="math inline">\(\text{FIRST}\)</span>、<spanclass="math inline">\(\text{FOLLOW}\)</span>、<spanclass="math inline">\(\text{SELECT}\)</span>集合，然后根据定义判别文法是否是 <spanclass="math inline">\(\text{LL}(1)\)</span> 文法。</p><blockquote><p>如何计算一个文法符号 <span class="math inline">\(X \in V\)</span> 的<span class="math inline">\(\text{FIRST}\)</span> 集 <spanclass="math inline">\(\text{FIRST}(X)\)</span>？</p></blockquote><p>① 若 <span class="math inline">\(X \in V_T\)</span>，则 <spanclass="math inline">\(\text{FIRST}(X) = \{X\}\)</span>。<br />② 若 <span class="math inline">\(X \in V_N\)</span>，且有产生式 <spanclass="math inline">\(X \rightarrow a \cdots\)</span> <spanclass="math inline">\(,\)</span> <span class="math inline">\(a \inV_T\)</span>，则 <span class="math inline">\(a \in\text{FIRST}(X)\)</span>。<br />③ 若 <span class="math inline">\(X \in V_N\)</span>，<spanclass="math inline">\(X \rightarrow \varepsilon\)</span>，则 <spanclass="math inline">\(\varepsilon \in \text{FIRST}(X)\)</span>。<br />④ 若 <span class="math inline">\(X, Y_1, Y_2,\)</span> <spanclass="math inline">\(\cdots\)</span> <span class="math inline">\(, Y_n\in V_N\)</span>，而有产生式 <span class="math inline">\(X \rightarrowY_1Y_2 \cdots Y_n\)</span>。当 <span class="math inline">\(Y_1, Y_2,\cdots, Y_{i - 1}\)</span> <spanclass="math inline">\(\stackrel{*}{\Rightarrow} \varepsilon\)</span>时（其中 <span class="math inline">\(1 \leqslant i \leqslantn\)</span>），则 <span class="math inline">\(\text{FIRST}(Y_1) -\{\varepsilon\},\)</span> <span class="math inline">\(\text{FIRST}(Y_2)- \{\varepsilon\},\)</span> <span class="math inline">\(\cdots\)</span><span class="math inline">\(, \text{FIRST}(Y_{i - 1}) -\{\varepsilon\},\)</span> <spanclass="math inline">\(\text{FIRST}(Y_i)\)</span> 都包含在 <spanclass="math inline">\(\text{FIRST}(X)\)</span> 中，即</p><p><span class="math display">\[\text{FIRST}(X) = (\text{FIRST}(Y_1) \cup \text{FIRST}(Y_2) \cdots \cup\text{FIRST}(Y_i)) - \{\varepsilon\}\]</span></p><p>⑤ 当 ④ 中所有 <span class="math inline">\(Y_i\stackrel{*}{\Rightarrow} \varepsilon\)</span> <spanclass="math inline">\(,\)</span> <span class="math inline">\((i = 1, 2,\cdots, n)\)</span>，则</p><p><span class="math display">\[\text{FIRST}(X) = (\text{FIRST}(Y_1) \cup \text{FIRST}(Y_2) \cdots \cup\text{FIRST}(Y_n)) \cup \{\varepsilon\}\]</span></p><p>反复使用上述 ②~⑤ 步，直到每个符号的 <spanclass="math inline">\(\text{FIRST}\)</span> 集合不再增大为止。</p><blockquote><p>如何计算一个符号串的 <spanclass="math inline">\(\text{FIRST}\)</span> 集合？</p></blockquote><p>若符号串 <span class="math inline">\(\alpha \in V^*\)</span> <spanclass="math inline">\(,\)</span> <span class="math inline">\(\alpha =X_1 X_2 \cdots X_n\)</span>，当 <span class="math inline">\(X_1\)</span>不能 <span class="math inline">\(\stackrel{*}{\Rightarrow}\varepsilon\)</span>，则置 <spanclass="math inline">\(\text{FIRST}(\alpha) =\text{FIRST}(X_1)\)</span>。</p><p>若对任何 <span class="math inline">\(j(1 \leqslant j \leqslant i -1,\)</span> <span class="math inline">\(2 \leqslant i \leqslantn)\)</span> <span class="math inline">\(,\)</span> <spanclass="math inline">\(\varepsilon \in \text{FIRST}(X_j)\)</span> <spanclass="math inline">\(,\)</span> <span class="math inline">\(\varepsilon\notin \text{FIRST}(X_i)\)</span>，则</p><p><span class="math display">\[\text{FIRST}(\alpha) = \bigcup_{j = 1}^{i - 1}(\text{FIRST}(X_j) -\{\varepsilon\}) \cup \text{FIRST}(X_i)\]</span></p><p>当对任何 <span class="math inline">\(j(1 \leqslant j \leqslantn)\)</span>，<span class="math inline">\(\text{FIRST}(X_j)\)</span>都含有 <span class="math inline">\(\varepsilon\)</span> 时，则</p><p><span class="math display">\[\text{FIRST}(\alpha) = \bigcup_{j = 1}^{n}(\text{FIRST}(X_j) -\{\varepsilon\}) \cup \{\varepsilon\}\]</span></p><p>按：这里最后一个公式书上的写法似乎有点问题。</p><blockquote><p>如何计算 <span class="math inline">\(\text{FOLLOW}\)</span> 集？</p></blockquote><p>对文法中的每一个 <span class="math inline">\(A \inV_N\)</span>，根据定义计算 <spanclass="math inline">\(\text{FOLLOW}(A)\)</span>。</p><p>① 设 <span class="math inline">\(S\)</span> 为文法的开始符号，把<span class="math inline">\(\{＃\}\)</span> 加入 <spanclass="math inline">\(\text{FOLLOW}(S)\)</span>中（这里＃为句子括号）。</p><p>按：＃似为句子结束符号。</p><p>② 若 <span class="math inline">\(A \rightarrow \alpha B\beta\)</span> 是一个产生式，则把 <spanclass="math inline">\(\text{FIRST}(\beta)\)</span> 的非空元素加入 <spanclass="math inline">\(\text{FOLLOW}(B)\)</span> 中。<br />如果 <span class="math inline">\(\beta \stackrel{*}{\Rightarrow}\varepsilon\)</span>，则把 <spanclass="math inline">\(\text{FOLLOW}(A)\)</span> 也加入 <spanclass="math inline">\(\text{FOLLOW}(B)\)</span> 中，因为当有形如</p><p><span class="math display">\[\begin{split}D &amp;\rightarrow \alpha_{1} A \beta_{1} \\A &amp;\rightarrow \alpha B \beta\end{split}\]</span></p><p>的产生式时，<span class="math inline">\(A, B, D \inV_N\)</span>，<span class="math inline">\(\alpha, \alpha_{1}, \beta,\beta_{1} \in V^*\)</span>，在推导过程中可能出现如下的句型序列：</p><p><span class="math display">\[S \stackrel{*}{\Rightarrow} \cdots \alpha_{1} A \beta_{1} \cdots\Rightarrow \alpha_{1} \alpha B \beta \beta{1} \cdots \Rightarrow \cdots\alpha_{1} \alpha B \beta_{1} \cdots\]</span></p><p>因此，有 <span class="math inline">\(\text{FOLLOW}(A)\)</span> <spanclass="math inline">\(\subseteq\)</span> <spanclass="math inline">\(\text{FOLLOW}(B)\)</span>。</p><p>③ 反复使用 ② 直到每个非终结符的 <spanclass="math inline">\(\text{FOLLOW}\)</span> 集不再增大为止。</p><blockquote><p>如何计算某一文法中的每一个产生式的 <spanclass="math inline">\(\text{SELECT}\)</span> 集？</p></blockquote><p>直接根据定义来判断：</p><p>给定上下文无关文法的产生式 <span class="math inline">\(A \rightarrow\alpha\)</span> $, $ <span class="math inline">\(A \in V_N, \alpha \inV^*\)</span>，</p><ul><li>若 <span class="math inline">\(\alpha \stackrel{*}{\nRightarrow}\varepsilon\)</span>，则 <span class="math inline">\(\text{SELECT}(A\rightarrow \alpha)\)</span> <span class="math inline">\(=\)</span><span class="math inline">\(\text{FIRST}(\alpha)\)</span>。</li><li>若 <span class="math inline">\(\alpha \stackrel{*}{\Rightarrow}\varepsilon\)</span>，则 <span class="math inline">\(\text{SELECT}(A\rightarrow \alpha)\)</span> <span class="math inline">\(=\)</span><span class="math inline">\((\text{FIRST}(\alpha) -\{\varepsilon\})\)</span> <span class="math inline">\(\cup\)</span><span class="math inline">\(\text{FOLLOW}(A)\)</span>。</li></ul><blockquote><p>如何消除文法的直接左递归？</p></blockquote><p>将</p><p><span class="math display">\[A \rightarrow A \alpha | \beta \; (\alpha \neq \varepsilon, \beta \;不以A 开头)\]</span></p><p>转换成</p><p><span class="math display">\[\begin{split}A \rightarrow \beta A^{&#39;} \\A^{&#39;} \rightarrow \alpha A^{&#39;} | \varepsilon\end{split}\]</span></p><p><img src="https://i.imgur.com/LobTnUb.png" /></p><p><img src="https://i.imgur.com/BTAs20o.png" /></p><blockquote><p>如何消除文法的间接子递归？</p></blockquote><p><img src="https://i.imgur.com/ONRU6mw.png" /></p><blockquote><p>消除左递归的算法？</p></blockquote><p><img src="https://i.imgur.com/RCSsK8L.png" /></p><hr /><p>附：哈工大慕课陈鄞老师对于 <spanclass="math inline">\(\text{FIRST}\)</span>、<spanclass="math inline">\(\text{FOLLOW}\)</span> 和 <spanclass="math inline">\(\text{SELECT}\)</span> 的理解。</p><blockquote><p>对 <span class="math inline">\(\text{FIRST}\)</span> 的理解？</p></blockquote><p><img src="https://i.imgur.com/s8YqiDv.png" /></p><p><img src="https://i.imgur.com/VmrkYxH.png" /></p><p><img src="https://i.imgur.com/hgG2AXE.png" /></p><blockquote><p>对 <span class="math inline">\(\text{FOLLOW}\)</span> 的理解？</p></blockquote><p><img src="https://i.imgur.com/BWChrVU.png" /></p><p>按；这里有一点，“如果 A 是某个句型的最右符号，则将结束符<code>$</code> 添加到 FOLLOW(A) 中”，拿下面的 <spanclass="math inline">\(FOLLOW(E)\)</span> 来看，<spanclass="math inline">\(E \rightarrow E\)</span> 右面的 <spanclass="math inline">\(E\)</span> 是其本身，同时也是 <spanclass="math inline">\(E\)</span> 这个句型的最右符号，所以要把<code>$</code> 加入到该符号的 FOLLOW 集中。</p><p>另按：<span class="math inline">\(FOLLOW\)</span> 集中没有 <spanclass="math inline">\(\varepsilon\)</span>。</p><p><img src="https://i.imgur.com/T9YnsK5.png" /></p><blockquote><p>一个 <span class="math inline">\(\text{SELECT}\)</span> 的例子。</p></blockquote><p><img src="https://i.imgur.com/OQut1Ok.png" /></p><blockquote><p>一张预测分析表。</p></blockquote><p><img src="https://i.imgur.com/rqhlpyx.png" /></p><p>按：这张图中上面的那张表中差了一个表达式：<spanclass="math inline">\(T^{&#39;} \rightarrow \varepsilon\)</span>。</p>]]></content>
    
    
    <categories>
      
      <category>编译原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编译原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《深入解析 CSS》札记</title>
    <link href="/2021/10/13/%E3%80%8A%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90-CSS%E3%80%8B%E6%9C%AD%E8%AE%B0/"/>
    <url>/2021/10/13/%E3%80%8A%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90-CSS%E3%80%8B%E6%9C%AD%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>读书</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《红与黑》札记</title>
    <link href="/2021/10/12/%E3%80%8A%E7%BA%A2%E4%B8%8E%E9%BB%91%E3%80%8B%E6%9C%AD%E8%AE%B0/"/>
    <url>/2021/10/12/%E3%80%8A%E7%BA%A2%E4%B8%8E%E9%BB%91%E3%80%8B%E6%9C%AD%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>◆ 19 多思则多忧</p><blockquote><p>或许天主会矜怜我拳拳之忱，而饶了我儿子！只要你指得出还有更凶的惩罚，我马上扑上去。</p></blockquote><blockquote><p>她的生活，摆动于天堂与地狱之间：看不到于连，就像掉进了地狱；匍匐于他脚边，无异于进了天堂！</p></blockquote><p>◆ 20 匿名信</p><blockquote><p>我什么恶人都不怕；于我，世上只有一种不幸：那就是看到唯一使我对人生有所依恋的人——变心。</p></blockquote><p>◆ 21 与主人的谈话</p><blockquote><p>“我永远不会下作到吹嘘自己的勇气，”于连冷冷说道，“那才是低能呢。事实是事实，让人家去说吧。不过，”</p></blockquote><p>◆ 22 一八三〇年的作风</p><blockquote><p>于连曾立意逢人只以假话搪塞，但面对葛罗先生，他对自己这一戒律产生了怀疑。</p></blockquote><blockquote><p>“我明白了，”斯丹尼说，“就是乌鸦发傻，让衔在嘴里的干酪掉在地上，给狐狸叼走了，狐狸专会拍马屁。”</p></blockquote><blockquote><p>有这么一种传说，瓦勒诺对当地的杂货商说：“把你们之中最蠢的两个人交给我”；对吃法律饭的说：“把你们之中最无能的两个人指给我”；对行医的说：“把你们之中最会招摇撞骗的两个人举出来”；他把各行各业的渣滓结集拢来，对他们说：“这天下是我们的了！”</p></blockquote><blockquote><p>两人款款行，轻轻谈，</p></blockquote><p>◆ 23 长官的苦恼</p><blockquote><p>美人慧黠心常变，痴汉意诚情自专。</p></blockquote><p>◆ 25 神学院</p><blockquote><p>扫了一眼，推测他只有一种情感：所说的事，凡与天国无涉的，都表示极度的蔑视。</p></blockquote><blockquote><p>世相浮华虚妄，切不可太动心。</p></blockquote><p>◆ 26 世界之大或富人所缺</p><blockquote><p>琐琐小事。</p></blockquote><p>◆ 27 涉世之初</p><blockquote><p>神学院的学生，和其他行业的年轻人一样，热衷于这类事出非常、异想天开的小算盘儿，而且大大夸大了略施小计的效用。</p></blockquote><p>◆ 29 初次提升</p><blockquote><p>不幸的是，这样一来，使原来十分高贵的侧影，竟与狐狸的尊容有着不可救药的相似。</p></blockquote><blockquote><p>为学如此，至矣极矣。</p></blockquote><p>◆ 下卷</p><blockquote><p>搽脂抹粉</p></blockquote><p>◆ 1 乡村情趣</p><blockquote><p>哓哓</p></blockquote><blockquote><p>在你性格里，至少依我看，有某种不可捉摸的东西，你不发迹，就会发霉，没有折中的余地。</p></blockquote><blockquote><p>因为北方，文明多而不义少。</p></blockquote><blockquote><p>在贝藏松，你还情出格外，提议愿对我有所馈赠。幸亏我那时还有五百二十法郎，如果一文不名，那就得靠你接济了。</p></blockquote><p>◆ 2 初见世面</p><blockquote><p>真是可笑而又动人的回忆：我年方十八，初次进入沙龙，觉得那么孤单无靠！哪个女人瞟我一眼，就会觉得手足无措。越想取悦于人，便越是笨手笨脚。对一切的一切，都形成最错误的看法。要么无缘无故地倾心相与，要么把那个端详我的人认作死敌。不过那时，生性羞怯虽带给我不少苦痛，但是，一个美好的日子，终究是美好的！——康德</p></blockquote><blockquote><p>不甚了了</p></blockquote><blockquote><p>淫逸不雅</p></blockquote><blockquote><p>从顶楼下来，侯爵唤来一名老仆：“阿三，这位索雷尔先生以后归你侍候。”</p></blockquote><blockquote><p>“Cela只有一个l,”侯爵对他说，“以后凡是抄件，拼写没把握的字，最好查查字典。”</p></blockquote><blockquote><p>巴黎人说话声音都低低的，也不把一点点小事情夸大得野豁豁。</p></blockquote><blockquote><p>不过，仔细打量之下，于连私心承认，这么美的眼睛倒还从没看到过。这双眼睛，透露出一颗非常冷漠的灵魂。后来，发现这眼神里有一种厌倦的表情。在察言观色的同时，时时不忘要显得威严逼人。</p></blockquote><blockquote><p>顾盼见光彩。</p></blockquote><blockquote><p>别看这年轻教士外表笨拙，内里或许腹笥甚宽。</p></blockquote><p>◆ 3 第一步</p><blockquote><p>于连听出“咱们”两字的含义，更觉其人可亲了。</p></blockquote><blockquote><p>不才我摔了个大马趴。</p></blockquote><blockquote><p>一个内地人，在这种场合，还能保持本色！以前没见过，以后也不会见到；而且，是向太太们讲他的倒霉事儿！</p></blockquote><blockquote><p>你马上得进骑马学校。这样，过几个礼拜，能与阁下一起走马，不亦快哉！</p></blockquote><blockquote><p>于连如果是株脆弱的芦苇，就任其枯萎吧。要是个有作为的人，那自会脱颖而出。</p></blockquote><p>◆ 4 拉穆尔府</p><blockquote><p>他在这儿做什么？他会喜欢这儿吗？他想讨这儿的人喜欢吗？</p></blockquote><blockquote><p>“这个人倒不是生来下跪的，不像那老神甫，”她心里想，“天哪！那老头儿长得多丑呀！”</p></blockquote><blockquote><p>这天晚上，不管是否有意做作，她把这批老厌物刻薄得可以。</p></blockquote><p>按：刻薄：取笑，奚落。（《国语辞典》）原来果然是有这样动词的用法的。这个版本的翻译，很多小地方，可见译者的慧心。</p><blockquote><p>听这小团体里人的说笑，他常为之绝倒。他觉得，类似的妙语，自己一句也想不出。就像一种外国语，听是听得懂，说却说不出。</p></blockquote><blockquote><p>他没戴假发，难道想凭他的绝顶聪明，登上省长的宝座？脱帽露顶王公前，准是想表明他脑瓜儿里的想法高明透顶！</p></blockquote><blockquote><p>我真不懂他为什么跑到这儿来受家父的呲，有时还很叫人下不了台。那天，家父从饭桌的这一头向那一头的他喊话：‘亲爱的戴柯立，卖友求荣的事，你客串过几回啦？’</p></blockquote><blockquote><p>付之丙丁</p></blockquote><blockquote><p>看她明眸善睐，顾盼神飞，大有瑞那夫人的风采。</p></blockquote><blockquote><p>噱</p></blockquote><blockquote><p>如此这般，我算看到了自己处境的另一极端。想我一年没二十金币进款，却和每小时有二十金币进账的人平起平坐，而此人还受尽众人奚落……这类见闻，倒是医治贪欲的良药。</p></blockquote><p>◆ 5 敏感的心灵与虔诚的贵妇</p><blockquote><p>侯爵曾赏他一匹马。于连担心骑马出去给人撞见，对外便说，他是遵医嘱，才做骑马运动的。</p></blockquote><blockquote><p>谨饬</p></blockquote><p>◆ 6 说话的腔调</p><blockquote><p>他恨不得立刻就决斗。但碰到了个难题：偌大一个巴黎城，哪里去找证人？他没有一个朋友，相识倒有几个，通常交往了五六个礼拜，就各自西东了。</p></blockquote><blockquote><p>比如说，骑士说话，有点格格不吐，那是因为他有幸见到的一位权贵说话也有这种贵恙之故。</p></blockquote><p>◆ 7 风湿痛</p><blockquote><p>彼拉神甫不像侯爵那样温文尔雅，只“唏溜”吹了一声口哨作为回答，接着乱以他语。</p></blockquote><p>◆ 8 抬高身价的荣耀是什么</p><blockquote><p>诺尔拜的语调堪称客气，甚至关切，并无可訾之处，于连只好借感恩戴德的答话，来发发自己的坏脾气。</p></blockquote><blockquote><p>逸兴遄飞</p></blockquote><blockquote><p>沐猴而冠</p></blockquote><blockquote><p>“我看只有死刑才能抬高一个人的身价，”玛娣儿特自忖，“天下只有这桩事，是有钱买不来的！”</p></blockquote><p>◆ 9 舞会上</p><blockquote><p>玛娣儿特犟头倔脑地答道</p></blockquote><p>按：“犟头倔脑”用在这里实在可爱，玛娣尔特可爱，译者也好玩。</p><blockquote><p>凡老家伙和好说丧气话的人，历来是连看都不看一眼的。</p></blockquote><blockquote><p>顾盼之间更显得高傲了。</p></blockquote><blockquote><p>谀死的诔词</p></blockquote><blockquote><p>说话有创见的人，不免口角俏俐，只要有一两句冒失话，主人就觉得受了轻慢。</p></blockquote><blockquote><p>真有霄壤之别</p></blockquote><blockquote><p>正当他强打精神，刚看第一封信，就听到近旁绸衫窸窣，他陡然转过脸去，见拉穆尔小姐站在离书桌二步远处，嫣然一笑。她再次闯入，于连不免有气。</p></blockquote><blockquote><p>怎么！词卑言甘，乞求起一个下属来？窘状有增无已，便用轻快的口吻说：“您平时冷冷的，是什么把您变得那么灵醒，像米开朗基罗雕塑的先知那样？”</p></blockquote><blockquote><p>“丹东盗用，做得对吗？”他冲口而出，神色越来越凶，“皮埃蒙特的革命党、西班牙的过激派，他们图谋不轨，把老百姓也牵连进去，应该不应该？把军职、勋章，送给毫无军功的人，应该不应该？佩戴勋章的人，难道就不怕国王卷土重来？都灵的金库给洗劫一空，该当不该当？总之一句话，小姐，”他逼近一步，样子很可怕，“一个想扫除愚昧和罪恶的人，必须像暴风雨一样摧枯拉朽，不分青红皂白地施虐作恶吗？”</p></blockquote><p>◆ 10 玛葛丽特皇后</p><blockquote><p>总之，把院士拍得一五一十。</p></blockquote><blockquote><p>嬖近</p></blockquote><blockquote><p>“这就是他们比我优越的地方。他们先人的业绩，使后代能超越卑俗的感情，不用为日常衣食操心！”</p></blockquote><blockquote><p>“真是生而不幸！纵论天下大事，我配吗？组成我生活的，不过是一连串的伪诈，就因为缺少借以糊口的一千法郎。”</p></blockquote><blockquote><p>向阔千金叹穷身世，他为之脸红，便肆力用雄豪的口气，表明自己无求于人。</p></blockquote><blockquote><p>“她会爱我吗？”</p></blockquote><p>◆ 11 少女的王国</p><blockquote><p>唉！有趣点的人，还能找到个把吗？</p></blockquote><blockquote><p>他缺的是什么？名望和财产。名望，他日后自会造就；财产，也不难挣得。“反观匡泽诺，他什么都不缺，终其一生也不过是个公爵，半拉保王党半拉自由党，中不溜儿的，永远不走极端，因此无论到哪里都是次要角色。“哪一桩大事，开头的时候，不认为是走极端？只有事成之后，芸芸众生才觉得似乎是可行的。是的，爱情，以及一切爱的奇迹，将占据我整个心灵；爱情像团烈火，给人活力，我已感到爱的火焰。只有这个恩典，上天还没给我。天地钟灵毓秀之德，不会无端把所有胜长萃于我一身的。我就该享有幸福。</p></blockquote><blockquote><p>半拉保王党半拉自由党，中不溜儿的，永远不走极端，因此无论到哪里都是次要角色。</p></blockquote><p>◆ 12 难道是个丹东</p><blockquote><p>你们看到的不是狼，只是狼的影子。</p></blockquote><blockquote><p>不错，他一贫彻骨，用功读书是为当教士；而他们呢？已是骑兵上尉，无需再读书了——这条路当然要容易得多。</p></blockquote><blockquote><p>鹰扬</p></blockquote><blockquote><p>你有病没病，我的阿哥？</p></blockquote><blockquote><p>在他这个年纪，身为下贱，而心雄万丈，当然会觉得命苦，需要有个女友。这个女友或许就是我，但未见他有什么爱的表示。他的性格以大胆著称，如若有情，自会向我诉说的。”</p></blockquote><blockquote><p>大家使她相信，由于家世、财产等优越条件，她理应比旁人更幸福。</p></blockquote><blockquote><p>十六到二十，是人生的黄金时代；没有伟大的激情，才一直百无聊赖，虚度美好的年华。</p></blockquote><blockquote><p>正当玛娣儿特心绪纷扰、惶惶不可终日的阶段，于连不解为什么她的目光久久凝视自己，停睇不转。</p></blockquote><blockquote><p>他一出现，顿时百喙俱寂，这冷场恁样也打不破。</p></blockquote><p>◆ 13 焉知不是阴谋</p><blockquote><p>目之所见，无非就是外貌。</p></blockquote><blockquote><p>每次拿走一册，就把两旁的书松松开，</p></blockquote><p>疑：书松是一个名词，还是“松松开”是一个动词？</p><blockquote><p>于连对拉穆尔小姐的倩影常绮思菲菲：其体态之绰约，服饰之高雅，纤手之白，玉臂之美，举止之disinvoltura（娴雅），直觉得爱之不胜。</p></blockquote><blockquote><p>（此辈巧于伪诈，才足欺世）</p></blockquote><blockquote><p>她的身材婀娜多姿，脚的样子也娇美无比，跑起来身轻如燕，把于连看呆了。</p></blockquote><blockquote><p>原来她说“不许”两字的命令口气，大大冒犯了他！</p></blockquote><blockquote><p>您将远行，这就非说不可……不获面觌，情何以堪！</p></blockquote><blockquote><p>而我呢，老天像个后娘，把我扔到社会的最底层，赐予我一颗高贵的心，却偏偏没给我千把法郎的财，就是说，没给我面包，确确实实是没给我面包。</p></blockquote><blockquote><p>他记起拉穆尔侯爵夫人，尤其是她那些身为命妇的女友，向他投来的充满蔑视的目光。</p></blockquote><blockquote><p>这些言辞只能看作是种诡计，我才不信胡话，哪怕其甜如蜜，除非是对我所企盼的那恩情，真有实惠给我，才能使我确信。</p></blockquote><p>◆ 14 少女的心思</p><blockquote><p>一天才清晨七点，她就跑进母亲卧房，请求许可她暂时退居微矶邺韬光晦迹。</p></blockquote><blockquote><p>事有可为而不可着笔者！</p></blockquote><blockquote><p>要是我情不由己，对这金发娃娃发生兴味，那就傻得可以了。</p></blockquote><blockquote><p>他们拿我寻开心，我就跟他们打哈哈。万一她对我真有几分情，那我对她就百倍地好。</p></blockquote><blockquote><p>他喜滋滋地写了两页，捉弄捉弄捉弄他的人。</p></blockquote><p>◆ 15 莫非是个圈套</p><blockquote><p>很明显，他们要我自蹈祸机，至少是想愚弄我。</p></blockquote><blockquote><p>这样，在她眼里，我成了十足的胆小鬼。我没有高贵的出身可恃，就得靠伟大的品格，这种品格不是凭好心的猜度，而要能兑现，用响亮的行动……</p></blockquote><blockquote><p>事态严重起来了，我的孩子，</p></blockquote><blockquote><p>事关荣誉。从来没有一个穷鬼，像我这样被命运抛到底层，又复得这样大好的机会。我会有别的艳遇，但层次不会这么高……</p></blockquote><blockquote><p>既然他已决定赴汤蹈火，暂时耽于这种怯弱的情绪，又有什么可不好意思的。</p></blockquote><blockquote><p>我命中就注定要用这种攀登工具，”于连苦笑了一下，“这里是梯子，维璃叶也是梯子。但此一时，彼一时，多么不同啊！”</p></blockquote><p>◆ 16 半夜一点钟</p><blockquote><p>夜色清朗如许，令人无可奈何。</p></blockquote><blockquote><p>他把大梯子搬来，等了五分钟——此刻还容许幡然变计。</p></blockquote><blockquote><p>她别有凄苦：骄矜与娇羞，在贵族小姐身上本是极自然的情绪，此刻袭上心头，搅乱她心曲。</p></blockquote><blockquote><p>咂摸</p></blockquote><blockquote><p>依违不决</p></blockquote><p>◆ 17 古剑</p><blockquote><p>生做蛮来</p></blockquote><blockquote><p>这一发现，在心底掀起极大的波澜：好恶爱憎全乱了套了。</p></blockquote><blockquote><p>“碰到阿狗阿猫，就委身于他，我都恨死自己了。”她气恼得哭了出来。</p></blockquote><blockquote><p>“碰到阿狗阿猫！”于连冲口而出，同时扑向一把中世纪的古剑，那是当作古董挂在藏书室的。</p></blockquote><blockquote><p>他的痛苦，在跟拉穆尔小姐说话时已达于极点，及至看她流出羞愧的眼泪，顿时陡增百倍。一剑毙命，把她杀了，当是天下最痛快的事了。</p></blockquote><p>◆ 18 伤心时刻</p><blockquote><p>重门深锁</p></blockquote><blockquote><p>即使胸膛里灌满了熔化的铅水，也不会像现在这么难受。</p></blockquote><blockquote><p>他刚才这句话，太坦诚，也太愚蠢。顷刻之间，风云突变：玛娣儿特确信自己仍为他所不弃，反倒鄙其为人，彻底看他不起了。</p></blockquote><p>◆ 19 滑稽剧场</p><blockquote><p>镜子照出污泥，你们却责怪镜子！</p></blockquote><blockquote><p>她会发火，骂我，管她呢！我给她一吻，最后的一吻，然后回房自杀……好歹临死之前，我的嘴唇亲了她的粉颊香腮！</p></blockquote><blockquote><p>蜜爱幽欢，神魂颠倒。此中情形，不写为妙。</p></blockquote><p>按：等着，自有人会写个几万字，你看妙不妙。</p><p>◆ 20 日本花瓶</p><blockquote><p>拉穆尔小姐可说是再敦兄妹之情，重践礼秩之防。</p></blockquote><blockquote><p>看来她只爱了我八九天，而我，会爱她一辈子。</p></blockquote><p>◆ 21 秘密记录</p><blockquote><p>“要知道，”拉穆尔先生接着说，“一个人做了什么蠢事，永远会推说是出于好心。”</p></blockquote><p>◆ 22 争论</p><blockquote><p>不成其为</p></blockquote><p>疑：至今仍是不理解应该如何使用。不会用。</p><blockquote><p>我不作如是想。</p></blockquote><blockquote><p>等扰扰之声平息下来，侯爵又重复了一遍。</p></blockquote><blockquote><p>到那时，就只见‘候选人’去讨好狗屎不如的‘大多数’了。</p></blockquote><blockquote><p>别谈这些令人不快的事了，归结到一点，就是：假如一个人有条烂腿要锯掉，他却对外科医生说：‘我这条病腿是好端端的。'——这就很不中听。我借这个说法，用意在于：我们的外科医生，就是那位高贵的大公。</p></blockquote><p>◆ 23 教士 林产 自由</p><blockquote><p>胪陈大端</p></blockquote><p>按：这个胪陈的“胪”，因为偏旁是月，多少与肉有关，而作动词解释成陈列，那么，其含义的渊源是从哪里来呢？想了一下，似乎应该与古代的祭祀有关，古代祭祀应该就是把各种动物的肉体一排一排地陈列在祭祀席上，因而可能就有了“陈列”这一个含义。</p><blockquote><p>于连在雷兹公爵府的舞会上，跟他曾有过一面之雅。</p></blockquote><blockquote><p>恋栈</p></blockquote><blockquote><p>——而这一点，诸位，我奈某一定办到。</p></blockquote><blockquote><p>“我敢打赌，”背心先生说，“将军月下追首相去了。必定是向首相道歉，说自己不该莅会；不过，他会声称，我们是给他牵着鼻子走的。”</p></blockquote><blockquote><p>于连是因缘际会，才得叨陪末座。</p></blockquote><blockquote><p>这份照会，结尾欠明达。</p></blockquote><p>◆ 24 斯特拉斯堡</p><blockquote><p>三天前，他会痛快淋漓，手刃卡斯塔奈德神甫；但此刻，在斯特拉斯堡，哪怕是小孩子跟他吵，他都会觉得竖子有理。回想生平所遇到的对手仇敌，都觉得是他于连自己理亏！</p></blockquote><blockquote><p>第一，每天去拜望她；第二，另起一题，追求她社交圈里的一位女子，但表面上不要显得很热衷，懂吗？不瞒你说，这角色很难演。当然，这是粉墨登场，但是，别让人看出你在演戏；不然，就白费了。</p></blockquote><blockquote><p>何至于此。你只是眷恋太深，比我想象的还厉害。戴慕桃夫人的心思，全用在自己身上，像所有得天独厚的女人一样，上天给了她们太多的尊荣，或太多的钱财。她眼睛里看到的只是她自己，而不是你，所以，她对你并不了解。即使对你有过两三次感情冲动，那是因为想入非非，把你当作梦想中的英雄，而不是真实的你……“唉，见鬼，这些都是常识了，亲爱的索雷尔，你难道还是小学生？……“得！进这家铺子里去吧！瞧这条黑领带呱呱叫，简直像百灵顿街约翰·安徒生名匠的出品。请赏脸收下，把你缠在脖子上这根难看的黑绳子扔得远远去。”</p></blockquote><blockquote><p>柯拉索夫眉飞色舞，从来还没有一个法国人，听他这么讲老半天的。亲王不禁窃喜：法国人是俄国人的师父，我今日里开课，居然开导起师父来！</p></blockquote><p>◆ 25 洁妇的操守</p><blockquote><p>只是有点儿假惺惺，说话有点野豁豁。有些日子，她用的字，我个个都懂，就是不知道全句说的是什么意思。</p></blockquote><blockquote><p>“但愿天助人愿！”</p></blockquote><blockquote><p>必须摆脱这种情绪，不然会叫我出乖露丑的。</p></blockquote><blockquote><p>“我得专门记一本攻城日记。不然，攻到什么程度，自己也会忘的。</p></blockquote><blockquote><p>柯拉索夫亲王要是此刻身在巴黎，一定会大感得意：这晚会的情况，与他所预期的，毫厘不爽。</p></blockquote><blockquote><p>这类好事，在他想念里，都模模糊糊，甚至是远哉遥遥的。</p></blockquote><p>按：远哉遥遥，“遥遥”这个叠词似乎是译者自己造的，但是效果不错。</p><p>◆ 26 精神之恋</p><blockquote><p>后来，靠了这个想法，才平静下来：“我瞧不起的东西，在元帅夫人眼里，居然还是盖世英才哩！”</p></blockquote><blockquote><p>吕宋皮</p></blockquote><blockquote><p>此信应亲自送去：骑高头马，打黑领带，穿蓝礼服。交门房时，面带愁容，目露阴郁。若遇内室女仆，做悄悄拭泪状。宜与侍女套近乎。</p></blockquote><p>◆ 27 教会里的美差</p><blockquote><p>此刻，与失恋无关的事，跟他八竿子也打不着。</p></blockquote><blockquote><p>这文体就像风力琴。谈虚无，谈死亡，谈无穷，都是要言妙道，但究其实，只是一种怕人耻笑的恐惧心理而已。</p></blockquote><blockquote><p>高自标榜</p></blockquote><p>◆ 28 《曼侬·莱斯戈》</p><blockquote><p>这种波谲云诡的手段，她为之愕然。</p></blockquote><p>◆ 29 闲愁万种</p><blockquote><p>这位畏惧流言的女性，破天荒第一次心扉为开，而她关切的事，跟她高自标置的身份、地位，不无抵触。</p></blockquote><blockquote><p>这类鬼蜮行径</p></blockquote><blockquote><p>说到这里，她骇然发觉自己失态，骄纵的性格一受抑勒，眼泪顿时涌了上来，气得连气都要透不过来。</p></blockquote><blockquote><p>这玉软花柔的娇躯，我不该贴在自己心口，否则她又会鄙薄我、欺凌我。这种性格真可怕！</p></blockquote><blockquote><p>您这一文不值的东西，竟敢戏弄元帅夫人！</p></blockquote><p>◆ 30 滑稽剧场的包厢</p><blockquote><p>一阵阴郁的沉默，便是于连的全部答复。</p></blockquote><blockquote><p>如果我贪图此刻的卿卿我我，”于连暗想，“转瞬之间，她的目光就会现出冷冷的轻蔑。”</p></blockquote><blockquote><p>玛娣儿特急忙转过脸来，聆听他的声音，对她几乎已是一种不存想望的幸福。</p></blockquote><blockquote><p>他感到爱丝情缕一直渗进他内心的边边角角。</p></blockquote><p>◆ 31 教她有所畏惧</p><blockquote><p>钟头</p></blockquote><blockquote><p>教她有所畏惧！</p></blockquote><blockquote><p>他心里飘飘然，在斗室里来回蹀躞。</p></blockquote><blockquote><p>现在要镇住的，是一个妖姬，而且，非镇住不可。</p></blockquote><blockquote><p>人家对您飞短流长，在我只是多了一桩倒霉事儿。</p></blockquote><blockquote><p>他软弱已极。</p></blockquote><blockquote><p>吁</p></blockquote><p>◆ 32 老虎</p><blockquote><p>一位英国旅行家讲过他与老虎相处之道：老虎是他喂大的，也常抚摸抚摸，但总不忘在桌上放一把子弹上膛的手枪。</p></blockquote><blockquote><p>生活对她一向慢如龟爬，现在却其快若飞了。</p></blockquote><p>◆ 34 工于心计的老人</p><blockquote><p>气恼之下，便给家严去一函。</p></blockquote><blockquote><p>侯爵想把一块采邑的地名给于连做姓氏；再说，为什么不能让他承袭我的爵位呢？</p></blockquote><p>◆ 36 可悲的细节</p><blockquote><p>别指望我会有软弱的表现。我仇已报恨已消。我身当死罪，谨此恭候。请为我的灵魂祈祷吧！</p></blockquote><p>◆ 37 在塔楼里</p><blockquote><p>委顿</p></blockquote><blockquote><p>现在是正当英年，引刀一快，不是正可以免去悲怆的老境？</p></blockquote><blockquote><p>不管怎么譬解，于连总觉得自己像胆小鬼，触绪伤怀。</p></blockquote><blockquote><p>死亡显得嵬然巍然，好像非易于为事。</p></blockquote><blockquote><p>傅凯用语的毛病，粗俗的手势，都不见了，于连扑进他怀里。</p></blockquote><p>◆ 38 权势人物</p><blockquote><p>那位院士会说，侯爵用胸口窝暖了一条冻僵的蛇。</p></blockquote><p>◆ 42</p><blockquote><p>“尼罗河的源头大家都不知道，”于连心里想，“因为，其始也，从一条普普通通的小溪里，看不出这是河中之王；</p></blockquote><blockquote><p>他跟着每一滴眼泪，沿着这迷人的粉颊蜿蜒而下……</p></blockquote><p>◆ 43</p><blockquote><p>鹄立街头</p></blockquote><p>按：这里我倒是觉得有一点点刻意买弄文字的嫌疑了。</p><blockquote><p>“啊！可恶的内地人！在巴黎，就不会受这种闷气。那里的人，搞招摇撞骗，要高明得多。”</p></blockquote><p>◆ 44</p><blockquote><p>但，不才我，有的是高尚的心灵！</p></blockquote><blockquote><p>但对早晨九点生，傍晚五点死的蜉蝣，在日长夜短的夏季，怎么能懂得黑夜这词儿呢？（译按：庄子言，朝菌不知晦朔，蟪蛄不知春秋。）</p></blockquote><p>◆ 45</p><blockquote><p>你幡然改宗赢得的眼泪，足可抵消十版伏尔泰反宗教著作所产生的腐蚀作用。</p></blockquote><blockquote><p>傅凯悲痛已极，几欲发狂。</p></blockquote><p>按：又是“已极”。这个“已极”在我手头的几本汉语词典里面查不到，但是日语词典里面似有解释为“非常，很”的意思，这个和语境以及我的猜想是一致的。不过，有趣的一点是，汉语词典里可以查到“极已”这个词语，是“窮盡，終止”的意思，其意思也是相近的，倒是合理。</p>]]></content>
    
    
    <categories>
      
      <category>读书</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书</tag>
      
      <tag>文学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译原理作业二</title>
    <link href="/2021/10/07/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E4%BD%9C%E4%B8%9A%E4%BA%8C/"/>
    <url>/2021/10/07/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E4%BD%9C%E4%B8%9A%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<p>系第三章课后作业（仅限布置作业的部分）。</p><p>1、构造下列正规式相应的 <spanclass="math inline">\(\text{DFA}\)</span>。</p><p>(1) <span class="math inline">\(1(0|1)^*101\)</span></p><p>解：先构造 <span class="math inline">\(\text{NFA}\)</span></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211007110712.png" /></p><p>然后，用子集法将 <span class="math inline">\(\text{NFA}\)</span>确定化</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211007111222.png" /></p><p>除 X, A 外，重新命名其他状态，令 AB 为 B、AC 为 C、ABY 为 D，因为 D含有 Y（NFA 的终态），所以 D 为终态。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211007112535.png" /></p><p>DFA 的状态图：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211010171555.png" /></p><p>3、将下图的 NFA 确定化。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211010172519.png"alt="NFA" /></p><p>解：用子集法将 NFA 确定化：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211010173809.png" /></p><p>重新命名状态子集，令 VQ 为 A、QU 为 B、VZ 为 C、V 为 D、QUZ 为 E、Z为 F。</p><p>DFA 的状态图：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211010174435.png" /></p><p>7、为正规文法 <span class="math inline">\(G[S]\)</span></p><p><span class="math display">\[\begin{split}S &amp;\rightarrow aA|bQ \\A &amp;\rightarrow aA|bB|b \\B &amp;\rightarrow bD|aQ \\Q &amp;\rightarrow aQ|bD|b \\D &amp;\rightarrow bB|aA \\E &amp;\rightarrow aB|bF \\F &amp;\rightarrow bD|aE|b\end{split}\]</span></p><p>构造相应的最小的 <spanclass="math inline">\(\text{DFA}\)</span>。</p><p>解：先构造其 NFA：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211010192630.png" /></p><p>用子集法将 NFA 确定化：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211010193039.png" /></p><p>将 S、A、Q、BZ、DZ、D、B 重新命名，分别用 0、1、2、3、4、5、6表示。因为 3、4 中含有 z，所以它们为终态。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211010205302.png" /></p><p>DFA 的状态图如下：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211010210306.png" /></p><p>令 <span class="math inline">\(P_0 = (\{0, 1, 2, 5, 6\}, \{3,4\})\)</span> 用 b 进行分割；<br /><span class="math inline">\(P_1 = (\{0, 5, 6\}, \{1, 2\}, \{3,4\})\)</span> 再用 b 进行分割；<br /><span class="math inline">\(P_2 = (\{0\}, \{5, 6\}, \{1, 2\}, \{3,4\})\)</span> 再用 a、b 进行分割，仍不变。</p><p>再令 <span class="math inline">\(\{0\}\)</span> 为 A，<spanclass="math inline">\(\{1, 2\}\)</span> 为 B，<spanclass="math inline">\(\{3, 4\}\)</span> 为 C，<spanclass="math inline">\(\{5, 6\}\)</span> 为 D。</p><p>最小化为：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211010211301.png" /></p><p>11、有一种用以证明两个正规表达式等价的方法，那就是构造它们的最小DFA，表明这两个 DFA是一样的（除了状态名不同外）。使用此方法。证明下面的正规表达式是等价的。</p><p><span class="math display">\[\begin{split}(1)&amp; \; (a|b)^* \\(2)&amp; \; (a^* | b^*)^* \\\end{split}\]</span></p><p>解：</p><p>(1) 的 NFA 图如下</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211011130938.png" /></p><p>根据 NFA 构造最小的 DFA 如下：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211011130441.png" /></p><p>(2) 的 NFA 图如下</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211011130914.png" /></p><p>根据 NFA 构造最小的 DFA 如下：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211011130441.png" /></p><p>所以，由此可以证明 (1) 和 (2) 式正规式是等价的。</p>]]></content>
    
    
    <categories>
      
      <category>编译原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编译原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>日语五十音</title>
    <link href="/2021/10/06/%E6%97%A5%E8%AF%AD%E4%BA%94%E5%8D%81%E9%9F%B3/"/>
    <url>/2021/10/06/%E6%97%A5%E8%AF%AD%E4%BA%94%E5%8D%81%E9%9F%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="一清音">一、清音</h1><h2 id="平假名">1.1 平假名</h2><p>あ(a)　い(i)　う(u)　え(e)　お(o)</p><p>か(ka)　き(ki)　く(ku)　け(ke)　こ(ko)</p><p>さ(sa)　し(si)　す(su)　せ(se)　そ(so)</p><p>た(ta)　ち(ti)　つ(tu)　て(te)　と(to)</p><p>な(na)　に(ni)　ぬ(nu)　ね(ne)　の(no)</p><p>な(na)　に(ni)　ぬ(nu)　ね(ne)　の(no)</p><p>ま(ma)　み(mi)　む(mu)　め(me)　も(mo)</p><p>や(ya)　ゆ(yu)　よ(yo)</p><p>ら(ra)　り(ri)　る(ru)　れ(re)　ろ(ro)</p><p>わ(wa)　を(wo)</p><p>ん(n)</p><h2 id="片假名">1.2 片假名</h2><p>ア　イ　ウ　エ　オ</p><p>カ　キ　ク　ケ　コ</p><p>サ　シ　ス　セ　ソ</p><p>タ　チ　ツ　テ　ト</p><p>ナ　ニ　ヌ　ネ　ノ</p><p>ハ　ヒ　フ　ヘ　ホ</p><p>マ　ミ　ム　メ　モ</p><p>ヤ　ユ　ヨ</p><p>ラ　リ　ル　レ　ロ</p><p>ワ　ヲ</p><p>ン</p><h1 id="二浊音半浊音">二、浊音/半浊音</h1><h2 id="平假名-1">2.1 平假名</h2><p>が(ga)　ぎ(gi)　ぐ(gu)　げ(ge)　ご(go)</p><p>ざ(za)　じ(ji)　ず(zu)　ぜ(ze)　ぞ(zo)</p><p>だ(da)　ぢ(ji)　づ(zu)　で(de)　ど(do)</p><p>ば(ba)　び(bi)　ぶ(bu)　べ(be)　ぼ(bo)</p><p>ぱ(pa)　ぴ(pi)　ぷ(pu)　ぺ(pe)　ぽ(po)</p><p>注意，じ　ず　ぢ　づ 在使用微软输入法输入的时候，我们按照下面的来じ(zi)　ず(zu)　ぢ(di)　づ(du)</p><h2 id="片假名-1">2.2 片假名</h2><h1 id="三拗音">三、拗音</h1><h2 id="平假名-2">3.1 平假名</h2><p>きゃ(kya)　きゅ(kyu)　きょ(kyo)</p><p>しゃ(sha)　しゅ(shu)　しょ(sho)</p><p>ちゃ(cha)　ちゅ(chu)　ちょ(cho)</p><p>にゃ(nya)　にゅ(nyu)　にょ(nyo)</p><p>ひゃ(hya)　ひゅ(hyu)　ひょ(hyo)</p><p>みゃ(mya)　みゅ(myu)　みょ(myo)</p><p>りゃ(rya)　りゅ(ryu)　りょ(ryo)</p><p>ぎゃ(gya)　ぎう(gyu)　ぎょ(ryo)</p><p>じゃ(ja)　じゅ(ju)　じょ(jo)</p><p>びゃ(bya)　びゅ(byu)　びょ(byo)</p><p>ぴゃ(pya)　ぴう(pyu)　ぴょ(pyo)</p><h2 id="片假名-2">3.2 片假名</h2><h1 id="四图片对照">四、图片对照</h1><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211006102956.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211006103007.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211006103017.png" /></p>]]></content>
    
    
    <categories>
      
      <category>日语</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日语</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《数字图像处理 第三版》札记</title>
    <link href="/2021/10/06/%E3%80%8A%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-%E7%AC%AC%E4%B8%89%E7%89%88%E3%80%8B%E6%9C%AD%E8%AE%B0/"/>
    <url>/2021/10/06/%E3%80%8A%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-%E7%AC%AC%E4%B8%89%E7%89%88%E3%80%8B%E6%9C%AD%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="第一章">第一章</h1><blockquote><p>何为强度或灰度？</p></blockquote><p>一幅图像可定义为一个二维函数 <span class="math inline">\(f(x,y)\)</span>，其中 <span class="math inline">\(x\)</span> 和 <spanclass="math inline">\(y\)</span>是空间（平面）坐标，而在任何一对空间坐标 <span class="math inline">\((x,y)\)</span> 处的幅值（amplitude，振幅）<spanclass="math inline">\(f\)</span>称为图像在该点处的<strong>强度</strong>或<strong>灰度</strong>。</p><p>关于灰度的更通俗的解释如下：</p><blockquote><p>The grey level or grey value indicates the brightness of a pixel. Theminimum grey level is 0. The maximum grey level depends on thedigitisation depth of the image. For an 8-bit-deep image it is 255. In abinary image a pixel can only take on either the value 0 or the value255. In contrast, in a greyscale or colour image a pixel can take on anyvalue between 0 and 255.</p></blockquote><p>引用自：<ahref="https://www.stemmer-imaging.com/en-ie/knowledge-base/grey-level-grey-value/"class="uri">https://www.stemmer-imaging.com/en-ie/knowledge-base/grey-level-grey-value/</a></p><blockquote><p>何为数字图像？</p></blockquote><p>接上一条，当 <span class="math inline">\(x, y\)</span> 和灰度值 <spanclass="math inline">\(f\)</span>是有限的离散数值时，我们称该图像为<strong>数字图像</strong>。</p><h1 id="第二章">第二章</h1><blockquote><p>如何理解人眼的结构？</p></blockquote><p>眼睛的形状近似为一个球体，其平均直径约为 20mm。有三层薄膜包围着眼睛：<strong>角膜</strong>与<strong>巩膜</strong>外壳、<strong>脉络膜</strong>和<strong>视网膜</strong>。</p><ul><li>角膜是一种硬而透明的组织，覆盖着眼睛的前表面。与角膜相连的巩膜是一层包围着眼球其余部分的不透明的膜。</li><li>脉络膜位于巩膜的正下方。脉络膜包含有血管网，它是眼睛的重要滋养源。即使是对脉络膜表面并不严重的损害，也有可能严重地损害眼睛，引起限制血液流动的炎症。脉络膜外壳着色很重，因此有助于减少进入眼内的外来光和眼球内反向散射光的数量。</li><li>脉络膜的最前面分为睫状肌和虹膜。虹膜的收缩和扩张控制着进入眼睛的光量。虹膜中间的开口（瞳孔）的直径是可变的，范围大约在2-8 mm。虹膜的前面包含有眼睛的可见色素，而后面则包含有黑色色素。<br />按：这里要从三维视角来看。<br /></li><li>晶状体由同心的纤维细胞层组成，并由附在睫状肌上的纤维悬挂着。晶状体包含60%~70% 的水、6%的脂肪和比眼睛中任何其他组织都多的蛋白质。晶状体由稍黄的色素着色，其颜色随着人的年龄的增大而加深。晶状体吸收大约8%的可见光谱，对短波长的光有较高的吸收率。在晶状体结构中，蛋白质吸收红外光和紫外光，吸收过量时会伤害眼睛。</li><li>眼睛最里面的膜是视网膜，它布满了整个后部和内壁。当眼睛适当地聚焦时，来自眼睛外部物体的光在视网膜上成像。由视网膜表面分布的不连续的光，感受器提供了图案视觉。有两类光感受器：<strong>锥状体</strong>和<strong>杆状体</strong>。</li><li>每只眼睛中的锥状体数量在 600~700万之间。他们主要位于视网膜的中间部分，称之为中央凹，且对颜色高度敏感。用这些锥状体，人可以充分地分辨图像细节，因为每个锥状体都连接到自身地神经末梢。肌肉控制眼球转动，直到感兴趣的物体落到中央凹上。锥状体视觉称为白昼视觉或亮视觉。</li><li>杆状体的数量更多：约有 7500~15 000万个杆状体分布在视网膜表面。由于分布面积较大而且几个杆状体连接到一个神经末梢，因此减少了这些感受器感知细节的数量。杆状体用来给出视野内的一般的总体图像。它们没有彩色感觉，而对低照明度敏感。例如，在白天呈现鲜明色彩的物体，在月光下都没有颜色，因为此时只有杆状体收到刺激。这种现象称为暗视觉或微光视觉。</li></ul><p>下图显示了右眼中通过眼睛视神经出现区的剖面的杆状体和锥状体密度。Theabsence of receptors in this area results in the so-called <em>blindspot</em>.</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211006233652.png" /></p><p>疑问：这里是怎么剖开的？？？</p><ul><li>Ciliary body: 睫状体</li><li>Sclera: 巩膜</li><li>Choroid: 脉络膜</li><li>Nerve &amp; sheath: 神经和鞘</li><li>Ciliary muscle: 睫状肌</li><li>Iris: 虹膜</li><li>Cornea: 角膜</li><li>Anterior chamber: 前房</li><li>Lens: 晶状体</li><li>Ciliary fibers: 睫状小带</li><li>Visual axis: 视轴</li><li>Vitreous humor: 玻璃体</li><li>Fovea: 中央凹</li><li>Blind spot: 盲点</li><li>Retina: 视网膜</li></ul><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211006110830.jpg"alt="人眼剖面简图" /></p><blockquote><p>何为马赫带效应？</p></blockquote><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211007152354.png" /></p><p>视觉系统对亮度的感知不是简单的强度函数。然后，这个马赫带效应就是，每一条带上的亮度是均匀的，但是在不同带的交界处，我们会看到，亮的那一侧会出现更亮的一条线，暗的那一侧会出现更暗的一条线。简单来讲，这就是马赫带效应。</p><blockquote><p>何为同时对比现象？</p></blockquote><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211007152901.png" /></p><p>和马赫带效应类似，我们人眼观察到好像第一个图中间的小方块最亮，第三个中间的小方块最暗。实际上，它们的灰度（亮度）是一样的。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211007153502.png" /></p><blockquote><p>何为灰度级？</p></blockquote><p>灰度级的典型取值是 2的整数次幂。通常假设离散灰度级是等间隔的并且是区间 <spanclass="math inline">\([0, L - 1]\)</span> 内的整数。（L 即 2的整数次幂）</p><blockquote><p>何为 k 比特图像？</p></blockquote><p>当一幅图像有 <span class="math inline">\(2^k\)</span>灰度级时，通常称该图像是 k 比特图像。</p><blockquote><p>何为动态范围？</p></blockquote><p>有时灰度级的取值范围称为图像的动态范围。把占有灰度级全部有效段的图像叫做高动态范围图像。当相当可观数目的像素呈现这样的特征时，图像就有较高的对比度。相反，低动态范围的图像看上去似乎是冲淡了的灰暗格调。</p><blockquote><p>何为图像采样分辨率？</p></blockquote><p>单位长度上所包含的采样数。</p><blockquote><p>何为空间分辨率？</p></blockquote><p>直观上讲，空间分辨率是图像中可辨别的最小细节的度量。在数量上，空间分辨率可以有很多方法来说明，其中每单位距离线对数和每单位距离点数（像素数）是最通用的度量。</p><p>举例来说，每英寸点数（dpi）就是描述空间分辨率的一个例子。</p><blockquote><p>何为灰度分辨率？</p></blockquote><p>灰度分辨率是指在灰度级中可分辨的最小变化。</p><p>灰度分辨率指的是用于量化灰度的比特数。</p><p>例如，通常说一幅被量化为 256 级的图像有 8 比特的灰度分辨率。</p><blockquote><p>关于直方图变换的推导？</p></blockquote><p>书上的证明很精确，而且易于理解。</p><blockquote><p>直方图均衡的离散形式为？</p></blockquote><p><span class="math display">\[s_k = T(r_k) = (L - 1) \sum_{j = 0}^{k} p_r(r_j) = \frac{L -1}{MN}\sum_{j = 0}^{k} n_j, \quad k = 0, 1, 2,..., L -1\]</span></p><p>详情见教材。这一块，似乎不用非常熟练地理解，大概只要思路跟着教材或者老师走一遍就行。真的需要具体用的时候再回来看。不过，这玩意儿还挺绕的。</p><p>如果考试需要考的话，那么，就得把西电的网课上的那一道例题给看一下了。</p>]]></content>
    
    
    <categories>
      
      <category>数字图像处理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字图像处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 0-50 整理（Java）</title>
    <link href="/2021/10/05/LeetCode-0-50-%E6%95%B4%E7%90%86%EF%BC%88Java%EF%BC%89/"/>
    <url>/2021/10/05/LeetCode-0-50-%E6%95%B4%E7%90%86%EF%BC%88Java%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="range0-10">range(0, 10)</h1><h1 id="range10-20">range(10, 20)</h1><h2 id="三数之和">15 三数之和</h2><ul><li>中等</li></ul><p><a href="https://leetcode-cn.com/problems/3sum/"class="uri">https://leetcode-cn.com/problems/3sum/</a></p><p>给你一个包含 <code>n</code>个整数的数组 <code>nums</code>，判断 <code>nums</code> 中是否存在三个元素<span class="math inline">\(a，b，c\)</span> ，使得 <spanclass="math inline">\(a + b + c = 0\)</span> ？请你找出所有和为<code>0</code> 且不重复的三元组。</p><p>注意：答案中不可以包含重复的三元组。</p><p>示例 1：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">输入：nums = [-1,0,1,2,-1,-4]输出：[[-1,-1,2],[-1,0,1]]</code></pre></div></figure><p>示例 2：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">输入：nums = []输出：[]</code></pre></div></figure><p>示例 3：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">输入：nums = [0]输出：[]</code></pre></div></figure><p>提示：</p><ul><li><span class="math inline">\(0 &lt;= nums.length &lt;=3000\)</span></li><li><span class="math inline">\(-10^5 &lt;= nums[i] &lt;=10^5\)</span></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">threeSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> len <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 去重</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token comment">// 双指针</span>            <span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">&lt;</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">&lt;</span> <span class="token class-name">R</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token class-name">L</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                        <span class="token class-name">L</span><span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">&lt;</span> <span class="token class-name">R</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token class-name">R</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                        <span class="token class-name">R</span><span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token class-name">L</span><span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token class-name">R</span><span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">L</span><span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">R</span><span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="最接近的三数之和">16 最接近的三数之和</h2><p><a href="https://leetcode-cn.com/problems/3sum-closest/"class="uri">https://leetcode-cn.com/problems/3sum-closest/</a></p><ul><li>中等</li></ul><p>给定一个包括 <code>n</code> 个整数的数组 <code>nums</code> 和一个目标值 <code>target</code>。找出 <code>nums</code> 中的三个整数，使得它们的和与 <code>target</code> 最接近。返回这三个数的和。假定每组输入只存在唯一答案。</p><p>示例：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">输入：nums = [-1,2,1,-4], target = 1输出：2解释：与 target 最接近的和是 2 (-1 + 2 + 1 = 2) 。</code></pre></div></figure><p>提示：</p><ul><li><span class="math inline">\(3 &lt;= nums.length &lt;=10^3\)</span></li><li><span class="math inline">\(-10^3 &lt;= nums[i] &lt;=10^3\)</span></li><li><span class="math inline">\(-10^4 &lt;= target &lt;=10^4\)</span></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">threeSumClosest</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> start <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> end <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>target <span class="token operator">-</span> sum<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>target <span class="token operator">-</span> ans<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    ans <span class="token operator">=</span> sum<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    end<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    start <span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="电话号码的字母组合">17 电话号码的字母组合</h2><p><ahref="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/"class="uri">https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/</a></p><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按任意顺序 返回。</p><p>给出数字到字母的映射如下（与电话按键相同）。注意 1不对应任何字母。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211005201903.png" /></p><p>示例 1：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">输入：digits = &quot;23&quot;输出：[&quot;ad&quot;,&quot;ae&quot;,&quot;af&quot;,&quot;bd&quot;,&quot;be&quot;,&quot;bf&quot;,&quot;cd&quot;,&quot;ce&quot;,&quot;cf&quot;]</code></pre></div></figure><p>示例 2：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">输入：digits = &quot;&quot;输出：[]</code></pre></div></figure><p>示例 3：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">输入：digits = &quot;2&quot;输出：[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</code></pre></div></figure><p>提示：</p><ul><li><code>0 &lt;= digits.length &lt;= 4</code></li><li><code>digits[i]</code> 是范围 <code>['2', '9']</code>的一个数字。</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">letterCombinations</span><span class="token punctuation">(</span><span class="token class-name">String</span> digits<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 定义数字键盘对应的字典字母表</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> abc <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token char">'a'</span><span class="token punctuation">,</span><span class="token char">'b'</span><span class="token punctuation">,</span><span class="token char">'c'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token char">'d'</span><span class="token punctuation">,</span><span class="token char">'e'</span><span class="token punctuation">,</span><span class="token char">'f'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token char">'g'</span><span class="token punctuation">,</span><span class="token char">'h'</span><span class="token punctuation">,</span><span class="token char">'i'</span><span class="token punctuation">&#125;</span>                <span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token char">'j'</span><span class="token punctuation">,</span><span class="token char">'k'</span><span class="token punctuation">,</span><span class="token char">'l'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token char">'m'</span><span class="token punctuation">,</span><span class="token char">'n'</span><span class="token punctuation">,</span><span class="token char">'o'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token char">'p'</span><span class="token punctuation">,</span><span class="token char">'q'</span><span class="token punctuation">,</span><span class="token char">'r'</span><span class="token punctuation">,</span><span class="token char">'s'</span><span class="token punctuation">&#125;</span>                <span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token char">'t'</span><span class="token punctuation">,</span><span class="token char">'u'</span><span class="token punctuation">,</span><span class="token char">'v'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token char">'w'</span><span class="token punctuation">,</span><span class="token char">'x'</span><span class="token punctuation">,</span><span class="token char">'y'</span><span class="token punctuation">,</span><span class="token char">'z'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// 定义队列 ，辅助拼接字母</span>        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>digits<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> ans<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 初始化队列中最开始还没拼接字母的空字符串</span>        ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 从源数字字符串第一个字符开始遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> digits<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 获取当前数值字符对应到字母表中的角标</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">getNumericValue</span><span class="token punctuation">(</span>digits<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 将字符转换成数字，而非ASCII码</span>            <span class="token comment">// 当队列中所有字符串的长度等于当前遍历到的数字字符个数，则本轮拼接完成</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// peak函数：检索但不删除此列表的头</span>                <span class="token comment">// 依次取出队列中所有的字符串</span>                <span class="token class-name">String</span> s <span class="token operator">=</span> ans<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 检索并删除此列表的头（第一个元素）</span>                <span class="token comment">// 每个字符串循环拼接当前数字字符对应的所有字母后再加入队列</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> abc<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="四数之和">18 四数之和</h2><ul><li>中等</li></ul><p>给你一个由 n 个整数组成的数组 nums ，和一个目标值 target。请你找出并返回满足下述全部条件且不重复的四元组 [nums[a], nums[b],nums[c], nums[d]] ：</p><ul><li>0 &lt;= a, b, c, d &lt; n</li><li>a、b、c 和 d 互不相同</li><li>nums[a] + nums[b] + nums[c] + nums[d] == target</li></ul><p>你可以按 任意顺序 返回答案 。</p><p>示例 1：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">输入：nums = [1,0,-1,0,-2,2], target = 0输出：[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]</code></pre></div></figure><p>示例 2：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">输入：nums = [2,2,2,2,2], target = 8输出：[[2,2,2,2]]</code></pre></div></figure><p>提示：</p><ul><li>1 &lt;= nums.length &lt;= 200</li><li><span class="math inline">\(-10^9\)</span> &lt;= nums[i] &lt;= <spanclass="math inline">\(10^9\)</span></li><li><span class="math inline">\(-10^9\)</span> &lt;= target &lt;= <spanclass="math inline">\(10^9\)</span></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">fourSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> nums<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> minValue <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxValue <span class="token operator">=</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>minValue <span class="token operator">></span> target <span class="token operator">||</span> maxValue <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">int</span> left <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                minValue <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                maxValue <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>minValue <span class="token operator">></span> target <span class="token operator">||</span> maxValue <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            left<span class="token operator">++</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            right<span class="token operator">--</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                        left<span class="token operator">++</span><span class="token punctuation">;</span>                        right<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        right<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        left<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="删除链表的倒数第-n-个结点">19 删除链表的倒数第 N 个结点</h2><ul><li>中等</li></ul><p>给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。</p><p>进阶：你能尝试使用一趟扫描实现吗？</p><p>示例 1：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211008203304.png" /></p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">输入：head = [1,2,3,4,5], n = 2输出：[1,2,3,5]</code></pre></div></figure><p>示例 2：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">输入：head = [1], n = 1输出：[]</code></pre></div></figure><p>示例 3：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">输入：head = [1,2], n = 1输出：[1]</code></pre></div></figure><p>提示：</p><ul><li>链表中结点的数目为 <code>sz</code></li><li><code>1 &lt;= sz &lt;= 30</code></li><li><code>0 &lt;= Node.val &lt;= 100</code></li><li><code>1 &lt;= n &lt;= sz</code></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Definition for singly-linked list. * public class ListNode &#123; *     int val; *     ListNode next; *     ListNode(int x) &#123; val = x; &#125; * &#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">ListNode</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 删第一个节点的情况</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        slow<span class="token punctuation">.</span>next <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="有效的括号">20 有效的括号</h2><ul><li>简单</li></ul><p>给定一个只包括 <code>'('，')'，'&#123;'，'&#125;'，'['，']'</code> 的字符串<code>s</code> ，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol type="1"><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ol><p>示例 1：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">输入：s = &quot;()&quot;输出：true</code></pre></div></figure><p>示例 2：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">输入：s = &quot;()[]&#123;&#125;&quot;输出：true</code></pre></div></figure><p>示例 3：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">输入：s = &quot;(]&quot;输出：false</code></pre></div></figure><p>示例 4：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">输入：s = &quot;([)]&quot;输出：false</code></pre></div></figure><p>示例 5：</p><p>输入：s = "{[]}" 输出：true</p><p>提示：</p><ul><li>1 &lt;= s.length &lt;= <spanclass="math inline">\(10^4\)</span></li><li><code>s</code> 仅由括号 <code>'()[]&#123;&#125;'</code> 组成</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  创建一个堆栈</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'('</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token char">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'['</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token char">']'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'&#123;'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token char">'&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> c <span class="token operator">!=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LaTex 小技巧收录</title>
    <link href="/2021/10/02/LaTex-%E5%B0%8F%E6%8A%80%E5%B7%A7%E6%94%B6%E5%BD%95/"/>
    <url>/2021/10/02/LaTex-%E5%B0%8F%E6%8A%80%E5%B7%A7%E6%94%B6%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="短连字符">短连字符</h1><p>在 LaTex 环境中，普通的短的连字符会被转换成比较长的减号 <spanclass="math inline">\(-\)</span>，而如果我们想要使用短的连字符，我们可以使用<code>\text&#123;&#125;</code> 命令。</p><p>示例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">$$\varepsilon\text&#123;-闭包&#125;$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>效果：</p><p><span class="math display">\[\varepsilon\text{-闭包}\]</span></p>]]></content>
    
    
    <categories>
      
      <category>LaTex</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LaTex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《小姐：勞動的權利》札記</title>
    <link href="/2021/10/02/%E3%80%8A%E5%B0%8F%E5%A7%90%EF%BC%9A%E5%8B%9E%E5%8B%95%E7%9A%84%E6%AC%8A%E5%88%A9%E3%80%8B%E6%9C%AD%E8%A8%98/"/>
    <url>/2021/10/02/%E3%80%8A%E5%B0%8F%E5%A7%90%EF%BC%9A%E5%8B%9E%E5%8B%95%E7%9A%84%E6%AC%8A%E5%88%A9%E3%80%8B%E6%9C%AD%E8%A8%98/</url>
    
    <content type="html"><![CDATA[<blockquote><p>“窮耍”</p></blockquote><blockquote><p>在東北，家裏夫妻雙下崗，家庭負擔重的小姐要多得多。</p></blockquote><blockquote><p>根據某場所是“髮廊”抓裏面的女孩子，不管我們是在搓麻將還是聊天，承認自己是小姐的帶走，不承認的打兩巴掌然後帶走。</p></blockquote><blockquote><p>因此，她們只能選擇“用脚投票”——逃離工廠，哪怕是進入被人所不齒的性產業。</p></blockquote><blockquote><p>與其說這是血汗工廠制度把她們逼上梁山，不如說這是因爲少數具有本能的反抗意識的打工妹，無法獲得進行反抗的思想、手段與前途，不得不以個人的道德付出來贖買自由與較好的生活。</p></blockquote><p>按：終於讀到了這裏。友人在路上給我看這段，當時沒有看仔細，現在重又遇到這句話，文字的描述可謂一針見血。</p><blockquote><p>也就是説，絕大多數的人在做小姐之前有過其他的工作經歷，至少在勞動市場中尋找過其他的工作機會。這可以説明：她們并非“天生就是這塊料”，也不是“好逸惡勞”，更不是“自甘墮落”，而是曾經在勞動力市場，朝著人們認爲是正常的工作，屢屢掙扎過。</p></blockquote><blockquote><p>于是，“山不轉水轉”，其中的一些女性就參加到性產業中來。</p></blockquote><blockquote><p>但對于女性來講，經常熬夜的代價是很大的。用小姐自己的話講，就是“很熬人”。</p></blockquote><blockquote><p>職業平移。</p></blockquote><p>按：將女人從原來的工作平移到做小姐的工作。</p><blockquote><p>我們尤其需要注意的是：在從事了性產業這個據説是最下賤的職業之後，非常多的小姐反而認爲自己的生活改善了，再也不願意回到工廠去。其中還有一些小姐，恰恰是在進入性產業之後，才意識到原來的血汗工廠制度是多麽的可惡。</p></blockquote><blockquote><p>在中國的禁娼“理論”中，有一種甚囂塵上的説法，就是小姐“好逸惡勞”論。這種説法典型地反映出富人的居高臨下的思维範式。怎么樣才算不好逸惡勞呢？就是在那種全球化的工廠裏，永生永世地、無怨無悔地、遠要“谢主隆恩“地當牛做馬！發出這種怪論的人們，你們自己爲什麽不去享受這種“生存權”呢？</p></blockquote><blockquote><p>“做小姐”就是一種勞動</p></blockquote><blockquote><p>在《資本論》第 1卷中，馬克思把妓女視爲一種特殊的商品。他寫道：“在以虔誠著稱的十二世紀，商品行列裏常常出現一些極妙的物。當時一位法國詩人所列舉的蘭第市場上的商品中，除了衣料、鞋子、皮革、農具、毛皮等物以外，還有‘淫蕩的女人’。”</p></blockquote><blockquote><p>尤其是，如果我寧可吃糠咽菜（性工作實際上非常艱苦），而且從此再也不跟您要饅頭吃，可是您卻還要禁止我、抓我，那您就是太不講理了。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浮点数与 IEEE754 标准浮点数</title>
    <link href="/2021/09/28/%E6%B5%AE%E7%82%B9%E6%95%B0%E4%B8%8E-IEEE754-%E6%A0%87%E5%87%86%E6%B5%AE%E7%82%B9%E6%95%B0/"/>
    <url>/2021/09/28/%E6%B5%AE%E7%82%B9%E6%95%B0%E4%B8%8E-IEEE754-%E6%A0%87%E5%87%86%E6%B5%AE%E7%82%B9%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>浮点表示是对形如 <span class="math inline">\(V = x \times2^y\)</span> 的有理数进行编码。</p><h1 id="二进制小数">1. 二进制小数</h1><p>考虑一个形如</p><p><span class="math display">\[b_mb_{m - 1} \cdots b_1b_0.b_{-1}b_{-2} \cdots b_{-n - 1}b_{-n}\]</span></p><p>的表示法，其中每个二进制数字，或者称为位，<spanclass="math inline">\(b_i\)</span> 的取值是 0 或 1，如下图所示。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210928110052.png" /></p><p>这种表示方法表示的数 <span class="math inline">\(b\)</span>定义如下：</p><p><span class="math display">\[b = \sum_{i = -n}^{m} 2^i \times b_i\]</span></p><p>计算举例：</p><p><span class="math display">\[101.11_2 = 1 \times 2^2 + 0 \times 2^1 + 1 \times 2^0 + 1 \times 2^{-1}+ 1 \times 2^{-2} = 5 \frac{3}{4}\]</span></p><p>注意，形如 <span class="math inline">\(0.11 \cdots 1_2\)</span>的数表示的是刚好小于 1 的数。例如，<spanclass="math inline">\(0.111111_2\)</span> 表示 <spanclass="math inline">\(\frac{63}{64}\)</span>，我们用简单的表达法 <spanclass="math inline">\(1.0 - \varepsilon\)</span> 来表示这样的数值。</p><p>按：<span class="math inline">\(\varepsilon\)</span>这个是我们的老朋友了，在物理实验或者计算方法这些课程中，学习误差的表达时经常会见到。</p><p>假定我们仅考虑有限长度的编码，那么十进制表示法不能准确地表达像 <spanclass="math inline">\(\frac{1}{3}\)</span> 和 <spanclass="math inline">\(\frac{5}{7}\)</span>这样的数。类似，小数的二进制表示法只能表示哪些能够被写成 <spanclass="math inline">\(x \times 2^y\)</span>的数。其他的值只能够被近似地表示。例如，数字 <spanclass="math inline">\(\frac{1}{5}\)</span> 可以用十进制小数 <spanclass="math inline">\(0.20\)</span>精确表示。不过，我们并不能把它准确地表示为一个二进制小数，我们只能近似地表示它，增加二进制表示的长度可以提高表示的精度。</p><h1 id="ieee-浮点数表示">2. IEEE 浮点数表示</h1><p>IEEE 浮点数即采用 IEEE754 标准来表示的浮点数。</p><p>IEEE 浮点标准用 <span class="math inline">\(V = (-1)^s \times M\times 2^E\)</span> 的形式来表示一个数：</p><ul><li>符号（sign）<span class="math inline">\(s\)</span>决定这个数是负数（<span class="math inline">\(s =1\)</span>）还是正数（<span class="math inline">\(s =0\)</span>），而对于数值 0的符号位解释作为特殊情况处理（后面有讲，即非规格数相关）。</li><li>尾数（significand）<span class="math inline">\(M\)</span>是一个二进制小数，它的范围是 <span class="math inline">\(1 \sim 2 -\epsilon\)</span>，或者是 <span class="math inline">\(0 \sim 1 -\varepsilon\)</span>。</li><li>阶码（exponent）<span class="math inline">\(E\)</span>的作用是对浮点数加权，这个权重是 2 的 <spanclass="math inline">\(E\)</span> 次幂（可能是负数）。<br />按：这里的“权重是 2 的 <span class="math inline">\(E\)</span>次幂”并不是指 <span class="math inline">\(E\)</span> 是 2 的幂，而是指<span class="math inline">\(2^E\)</span> 是 2 的幂。</li></ul><p>将浮点数的位表示划分成三个字段，分别对这些值进行编码：</p><ul><li>一个单独的符号位 <span class="math inline">\(s\)</span> 直接编码符号<span class="math inline">\(s\)</span>。</li><li><span class="math inline">\(k\)</span> 位的阶码字段 <spanclass="math inline">\(exp = e_{k - 1} \cdots e_1e_0\)</span> 编码阶码<span class="math inline">\(E\)</span>。</li><li><span class="math inline">\(n\)</span> 位小数字段 <spanclass="math inline">\(frac = f_{n -1} \cdots f_1f_0\)</span> 编码尾数<spanclass="math inline">\(M\)</span>，但是编码出来的值也依赖阶码字段的值是否等于0（这个涉及到规格数和非规格数，具体见下面的讲解）。</li></ul><p>在单精度浮点格式（C 语言中的 float）中，<spanclass="math inline">\(s\)</span>、<spanclass="math inline">\(exp\)</span> 和 <spanclass="math inline">\(frac\)</span> 字段分别为 1 位、<spanclass="math inline">\(k = 8\)</span> 位和 <span class="math inline">\(n= 23\)</span> 位，得到一个 32 位的表示。<br />在双精度浮点格式（C 语言中的 double）中，<spanclass="math inline">\(s\)</span>、<spanclass="math inline">\(exp\)</span> 和 <spanclass="math inline">\(frac\)</span> 字段分别为 1 位、<spanclass="math inline">\(k = 11\)</span> 位和 <span class="math inline">\(n= 52\)</span> 位，得到一个 64 位的表示。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210928113022.png"alt="单精度" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210928113102.png"alt="双精度" /></p><p>给定位的表示，根据 <span class="math inline">\(exp\)</span>的值，被编码的值可以分成三种不同的情况（第三种情况有两个变种）。</p><p>举例，单精度格式的情况：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210928113430.png"alt="阶码的值决定了这个数是规格化的、非规格化的或特殊值" /></p><p><strong>情况 1；规格化的值</strong></p><p>当 <span class="math inline">\(exp\)</span> 的所有位既不全为 0（即<span class="math inline">\(exp\)</span> 数值为 0），也不全为1（单精度数值为 255，双精度数值为2047），都属于这类情况。在这种情况下，阶码字段被解释为以偏置值（biased）形式表示的有符号整数。也就是说，阶码的值是<span class="math inline">\(E = e - Bias\)</span>（<spanclass="math inline">\(e\)</span> 即 <spanclass="math inline">\(exp\)</span>），其中 <spanclass="math inline">\(e\)</span> 是无符号数，其位表示为 <spanclass="math inline">\(e_{k - 1} \cdots e_1e_0\)</span>，而 <spanclass="math inline">\(Bias\)</span> 是一个等于 <spanclass="math inline">\(2^{k - 1} - 1\)</span>（单精度是 127，双精度是1023）的偏置值。由此产生指数的取值范围，对于单精度是 <spanclass="math inline">\(-126 \sim +127\)</span>，而对于双精度是 <spanclass="math inline">\(-1022 \sim +1023\)</span>。</p><p>按：这里说的指数范围，就拿单精度的范围 <spanclass="math inline">\(-126 \sim +127\)</span>，因为单精度阶码一共有 8位，所以 <span class="math inline">\(e\)</span> 的范围是 <spanclass="math inline">\(0 \sim 255\)</span>，然后根据 <spanclass="math inline">\(E = e - Bias\)</span>、<spanclass="math inline">\(Bias = 127\)</span> 来算，得到的指数 <spanclass="math inline">\(E\)</span> 的取值范围是 <spanclass="math inline">\(-127 \sim +128\)</span>，但是，别忘了 <spanclass="math inline">\(e\)</span> 还要去掉 0 和 255两个值，然后再算，就得到了 <span class="math inline">\(-126 \sim+127\)</span>。</p><p>小数字段 <span class="math inline">\(frac\)</span> 被解释为描述小数值<span class="math inline">\(f\)</span>，其中 <spanclass="math inline">\(0 \leqslant f &lt; 1\)</span>，其二进制表示为<span class="math inline">\(0.f_{n - 1} \cdotsf_1f_0\)</span>，也就是二进制小数点在最高有效位的左边。尾数定义为 <spanclass="math inline">\(M = 1 + f\)</span>。有时，这种方式也叫做隐含的以 1开头的（implied leading 1）表示，因为我们可以把 <spanclass="math inline">\(M\)</span> 看成一个二进制表达式为 <spanclass="math inline">\(1.f_{n - 1}f_{n - 2} \cdots f_0\)</span>的数字。因为我们是可以通过调整阶码 <spanclass="math inline">\(E\)</span>，使得尾数 <spanclass="math inline">\(M\)</span> 在范围 <span class="math inline">\(1\leqslant M &lt; 2\)</span>之中（假设没有溢出），所以这种表达方式的好处是可以轻松获得一个额外的精度位。因为第一位总是等于1，那么我们就不需要显式地表示它。</p><p><strong>情况 2：非规格化的值</strong></p><p>当阶码域为全 0 时，所表示的数是非规格化形式。在这种情况下，阶码值是<span class="math inline">\(E = 1 - Bias\)</span>，而尾数的值是 <spanclass="math inline">\(M =f\)</span>，也就是小数字段的值，不包含隐含的开头的 1。</p><p>按：这里要仔细注意。</p><p>非规格化数有两个用途。首先，它们提供了一种表示数值 0的方法，因为使用规格化数，我们必须要使 <span class="math inline">\(M\geqslant 1\)</span>，因此我们就不能表示 0。实际上，<spanclass="math inline">\(+0.0\)</span> 的浮点表示的位模式为全 0：符号位是0，阶码字段全为 0（表明是一个非规格化值），而小数域也全为 0，这就得到了<span class="math inline">\(M = f = 0\)</span>。令人奇怪的是，当符号位为1，而其他域全为 0 时，我们得到值 <spanclass="math inline">\(-0.0\)</span>。根据 IEEE 的浮点格式，值 <spanclass="math inline">\(+0.0\)</span> 和 <spanclass="math inline">\(-0.0\)</span>在某些方面被认为是不同的，而在其他方面是相同的。</p><p>非规格化数的另外一个功能是表示哪些非常接近于 <spanclass="math inline">\(0.0\)</span>的数。它们提供了一种属性，称为逐渐溢出（gradualunderflow），其中，可能的数值分布均匀地接近于 <spanclass="math inline">\(0.0\)</span>。</p><p>按：这里的逐渐溢出表示的大概是从非规格数平滑地溢出，然后就到了规格数（可以参考之后的表格示例）。</p><p><strong>情况 3：特殊值</strong></p><p>最后一类数值是指阶码全为 1 的时候出现的值。</p><ul><li>当小数域全为 0 时，得到的值表示无穷，当 <spanclass="math inline">\(s = 0\)</span> 时是 <spanclass="math inline">\(+\infty\)</span>，或者当 <spanclass="math inline">\(s = 1\)</span> 时是 <spanclass="math inline">\(-\infty\)</span>。当我们把两个非常大的数相乘，或者除以零时，无穷能够表示溢出的结果。</li><li>当小数域为非零时，结果值被称为“<spanclass="math inline">\(NaN\)</span>”，即“不是一个数（Not aNumber）”的缩写。一些运算的结果不能是实数或无穷，就会返回这样的 <spanclass="math inline">\(NaN\)</span> 值，比如当计算 <spanclass="math inline">\(\sqrt{-1}\)</span> 或 <spanclass="math inline">\(\infty - \infty\)</span>时。在某些应用中，表示未初始化的数据时，它们也很有用处。</li></ul><h1 id="数字示例">3. 数字示例</h1><p>下图的表格是 8 位浮点格式的非负值示例。由于阶码位 <spanclass="math inline">\(k = 4\)</span>，小数位 <spanclass="math inline">\(n = 3\)</span>，所以偏置量是 <spanclass="math inline">\(2^{4 - 1} - 1 = 7\)</span>。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210928164817.png" /></p><p>上图被分成了三个区域，来描述三类数字。不同的列给出了阶码字段是如何编码阶码<span class="math inline">\(E\)</span> 的，小数字段是如何编码尾数 <spanclass="math inline">\(M\)</span> 的，以及它们一起是如何形成要表示的值<span class="math inline">\(V = 2^E \times M\)</span> 的。</p><p>从 0 自身开始，最靠近 0 的是非规格数（包括 0）.这种格式的非规格化数的<span class="math inline">\(E = 1 - 7 = -6\)</span>，得到权 <spanclass="math inline">\(2^E = \frac{1}{64}\)</span>。小数 <spanclass="math inline">\(f\)</span> 的范围是 <span class="math inline">\(0,\frac{1}{8}, \cdots, \frac{7}{8}\)</span>，从而得到数 <spanclass="math inline">\(V\)</span> 的范围是 <span class="math inline">\(0\sim \frac{1}{64} \times \frac{7}{8} = \frac{7}{512}\)</span>。</p><p>然后是规格化数。</p><ul><li>首先是最小规格化数，其 <span class="math inline">\(E = 1 - 7 =-6\)</span>，和非规格化数是一样的，并且小数的取值范围也是 <spanclass="math inline">\(0, \frac{1}{8}, \cdots,\frac{7}{8}\)</span>。然而，其尾数却是在范围 <spanclass="math inline">\(1 + 0 = 1\)</span> 和 <spanclass="math inline">\(1 + \frac{7}{8} = \frac{15}{8}\)</span>之间，得出数 <span class="math inline">\(V\)</span> 在范围 <spanclass="math inline">\(\frac{8}{512} = \frac{1}{64}\)</span> 和 <spanclass="math inline">\(\frac{15}{512}\)</span> 之间。<br />按：这里可以观察到最大非规格化数 <spanclass="math inline">\(\frac{7}{512}\)</span> 到最小规格化数 <spanclass="math inline">\(\frac{8}{512}\)</span>之间的平滑转变。这种平滑性归功于我们对非规格化数的 <spanclass="math inline">\(E\)</span> 的定义。通过将 <spanclass="math inline">\(E\)</span> 定义为 <span class="math inline">\(1 -Bias\)</span>，而不是 <spanclass="math inline">\(-Bias\)</span>，我们通过补偿非规格化数的尾数没有隐含的1 这样一种方式，达到了既可以表示数值 0又可以实现平滑转变的目的（平滑转变对浮点数之间的比较大小很有帮助）。</li><li>当增大阶码时，我们成功地得到更大的规格化数。然后，我们可以得到最大的规格化数，这个数具有阶码<span class="math inline">\(E = 7\)</span>，权 <spanclass="math inline">\(2^E = 128\)</span>，小数等于 <spanclass="math inline">\(\frac{7}{8}\)</span> 得到尾数 <spanclass="math inline">\(M = \frac{15}{8}\)</span>，因此，其数值是 <spanclass="math inline">\(V = 240\)</span>。超出这个值就会溢出到 <spanclass="math inline">\(+\infty\)</span>。</li></ul><p>IEEE 的这种表示具有一个有趣的属性，我们可以发现上面 8位浮点格式的非负值示例表格中的数据，如果把它们的位表达式看成是无符号整数，那么它们从上到下是按照升序的方式排列的，而它们所表示的浮点数也是升序排列的。IEEE这样设计的目的其实就是为了让浮点数能够使用整数排序来进行排序。当比较负数时，同样可以使用类似的方法。</p><p>还有一点要注意的地方，就是 IEEE754这个阶码的部分（e），它是用移码来表示的，关于移码，可以参看<ahref="https://fanyfull.github.io/2021/09/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%BB%E7%A0%81/">另一篇博客</a>。</p><h1 id="例题">4. 例题</h1><blockquote><p>例1 将十进制数 20.59375 转换成 32 位 IEEE754格式浮点数的二进制格式来存储。</p></blockquote><p>解：先将十进制数转换成二进制数：</p><p><span class="math display">\[20.59375 = 10100.10011 \; (0.5 + 0.25 + 0.125 + 0.0625 + 0.03125)\]</span></p><p>移动小数点，使其变成 <span class="math inline">\(1.M\)</span>的形式：</p><p><span class="math display">\[10100.10011 = 1.010010011 \times 2^4\]</span></p><p>得到：</p><p><span class="math display">\[S = 0, e = 4, E = 100_2 + 01111111_2 = 10000011_2, M = 010010011\]</span></p><p>最后得到 32 位浮点数的二进制存储格式为：</p><p><span class="math display">\[\begin{split}&amp;0100 \; 0001 \; 1010 \; 0100 \; 1100 \; 0000 \; 0000 \; 0000 \\&amp;= (41A4C000)_16\end{split}\]</span></p><blockquote><p>例2 若某浮点数 x 的二进制存储格式为 <spanclass="math inline">\((41360000)_16\)</span>，求与其对应的 32位浮点表示的十进的值。</p></blockquote><p>解：</p><p>首先判断是规格数。</p><p>然后进行处理，</p><p><span class="math display">\[\begin{split}&amp;(41360000)_16 \\&amp;= (0 \; 100,0001,0 \; 011,0110,0000,0000,0000,0000)_2\end{split}\]</span></p><p>由此可得：</p><p><span class="math display">\[\begin{split}&amp;s = 0 \\&amp;E = e - Bias = 10000010 - 01111111 = &amp;00000011 = (3)_10 \\&amp;M = 1.011011\end{split}\]</span></p><p>则上述浮点数对应的真值为</p><p><span class="math display">\[V = (-1)^s \times M \times 2^E = (-1)^0 \times 2^3 = 1011.011 =(11.375)_10\]</span></p><hr /><p>参考：</p><p>1、《深入理解计算机系统 第三版》</p>]]></content>
    
    
    <categories>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机组成原理</tag>
      
      <tag>CSAPP 笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 14 Longest Common Prefix</title>
    <link href="/2021/09/27/LeetCode-14-Longest-Common-Prefix/"/>
    <url>/2021/09/27/LeetCode-14-Longest-Common-Prefix/</url>
    
    <content type="html"><![CDATA[<p>难度：easy</p><p>代码：</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># @File  : leet_14.py</span><span class="token comment"># @Author: FanyFull</span><span class="token comment"># @Date  : 2021/9/27</span><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strs<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token string">""</span>        length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">len</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> result        <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        loop_len <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> result            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> loop_len<span class="token punctuation">:</span>                loop_len <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> loop_len<span class="token punctuation">)</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                    flag <span class="token operator">=</span> <span class="token number">1</span>                    <span class="token keyword">break</span>            <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            result <span class="token operator">+=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> result<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    solution <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token builtin">input</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"flower"</span><span class="token punctuation">,</span> <span class="token string">"flow"</span><span class="token punctuation">,</span> <span class="token string">"flight"</span><span class="token punctuation">]</span>    <span class="token comment"># input = ["dog","racecar","car"]</span>    output <span class="token operator">=</span> solution<span class="token punctuation">.</span>longestCommonPrefix<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>直接暴力遍历。效率也还可以。</p>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>读一读《报任少卿书》</title>
    <link href="/2021/09/27/%E8%AF%BB%E4%B8%80%E8%AF%BB%E3%80%8A%E6%8A%A5%E4%BB%BB%E5%B0%91%E5%8D%BF%E4%B9%A6%E3%80%8B/"/>
    <url>/2021/09/27/%E8%AF%BB%E4%B8%80%E8%AF%BB%E3%80%8A%E6%8A%A5%E4%BB%BB%E5%B0%91%E5%8D%BF%E4%B9%A6%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="报任少卿书">报任少卿书</h1><ul><li>司马子长</li></ul><p>太史公牛马走司马迁再拜言，少卿足下：曩者辱赐书，教以顺于接物，推贤进士为务。意气懃懃恳恳，若望仆不相师，而用流俗人之言。仆非敢如此也。仆虽罢驽，亦尝侧闻长者之遗风矣。顾自以为身残处秽，动而见尤，欲益反损，是以独郁悒而与谁语。谚曰："谁为为之？孰令听之？"盖钟子期死，伯牙终身不复鼓琴。何则？士为知己者用，女为说己者容。若仆大质已亏缺矣，虽才怀随和，行若由夷，终不可以为荣，适足以见笑而自点耳。书辞宜答，会东从上来，又迫贱事，相见日浅，卒卒无须臾之间，得竭至意。今少卿抱不测之罪，涉旬月，迫季冬；仆又薄从上雍，恐卒然不可为讳。是仆终己不得舒愤懑以晓左右，则长逝者魂魄私恨无穷。请略陈固陋，阙然久不报，幸勿为过。</p><p>仆闻之：修身者，智之符也；爱施者，仁之端也；取与者，义之表也；耻辱者，勇之决也；立名者，行之极也。士有此五者，然后可以讬于世，而列于君子之林矣。故祸莫憯于欲利，悲莫痛于伤心，行莫丑于辱先，诟莫大于宫刑。刑余之人，无所比数，非一世也，所从来远矣。昔卫灵公与雍渠同载，孔子适陈；商鞅因景监见，赵良寒心；同子参乘，袁丝变色。自古而耻之。夫以中才之人，事有关于宦竖，莫不伤气，而况于慷慨之士乎！如今朝廷虽乏人，奈何令刀锯之余，荐天下豪俊哉？</p><p>仆赖先人绪业，得待罪辇毂下，二十余年矣。所以自惟，上之不能纳忠效信，有奇策才力之誉，自结明主；次之又不能拾遗补阙，招贤进能，显岩穴之士；外之又不能备行伍，攻城野战，有斩将搴旗之功；下之不能积日累劳，取尊官厚禄，以为宗族交游光宠。四者无一遂，苟合取容，无所短长之效，可见如此矣。向者，仆常厕下大夫之列，陪外廷末议。不以此时引维纲，尽思虑。今以亏形为扫除之隶，在阘茸之中，乃欲仰首伸眉，论列是非，不亦轻朝廷羞当世之士邪？嗟乎！嗟呼！如仆尚何言哉！尚何言哉！</p><p>且事本末未易明也。仆少负不羁之行，长无乡曲之誉，主上幸以先人之故，使得奏薄伎，出入周卫之中。仆以为戴盆何以望天？故绝宾客之知，亡室家之业，日夜思竭其不肖之才力，务一心营职，以求亲媚于主上。而事乃有大谬不然者夫。</p><p>仆与李陵，俱居门下，素非能相善也。趣舍异路，未尝衔杯酒，接慇懃之余欢。然仆观其为人，自守奇土，事亲孝，与士信，临财廉，取与义。分别有让，恭俭下人，常思奋不顾身，以徇国家之急。其素所蓄积也，仆以为有国士之风。夫人臣出万死不顾一生之计，赴公家之难，斯以奇矣。今举事一不当，而全驱保妻子之臣，随而媒□其短，仆诚私心痛之。且李陵提步卒不满五千，深践戎马之地，足历王庭，垂饵虎口，横挑彊胡，仰亿万之师，与单于连战十有余日，所杀过半当。虏救死扶伤不给，旃裘之君长咸震怖，乃悉征其左右贤王，举引弓之人，一国共攻而围之。转斗千里，矢尽道穷，救兵不至，士卒死伤如积然陵一呼劳，军士无不起，躬自流涕，沬血饮泣，更张空拳，冒白刃，北向争死敌者。陵未没时，使有来报，汉公卿王侯，皆奉觞上寿。后数日，陵败书闻，主上为之食不甘味，听朝不怡。大臣忧惧，不知所出。仆窃不自料其卑贱，见主上惨怆怛悼，诚欲效其款款之愚，以为李陵素与士大夫绝甘分少，能得人死力，虽古之名将，不能过也。身虽陷败，彼观其意，且欲得其当而报于汉。事已无可奈何，其所摧败，功亦足以暴于天下矣。仆怀欲陈之，而未有路，适会召问，即以此指推言陵之功，欲以广主上之意，塞睚眦之辞。未能尽明，明主不晓，以为仆沮贰师，而为李陵游说，遂下于理。拳拳之忠，终不能自列。因为诬上，卒从吏议。家贫，货赂不足以自赎，交游莫救；左右亲近，不为一言。身非木石，独与法吏为伍，深幽囹圄之中，谁可告愬者？此真少卿所亲见，仆行事岂不然乎？李陵既生降，隤其家声；而仆又佴之蚕室，重为天下观笑。悲夫！悲夫！事未易一二为俗人言也。</p><p>仆之先，非有剖符丹书之功，文史星历，近乎卜祝之间，固主上所戏弄，倡优所畜，流俗之所轻也。假令仆伏法受诛，若九牛亡一毛，与蝼蚁何以异？而世又不与能死节者，特以为智穷罪极，不能自免，卒就死耳。何也？素所自树立使然也。人固有一死，或重于太山，或轻于鸿毛，用之所趋异也。太上不辱先，其次不辱身，其次不辱理色，其次不辱辞令，其次诎体受辱，其次易服受辱，其次关木索被箠楚受辱，其次剔毛发婴金铁受辱，最下腐刑，极矣。传曰："刑不上大夫。"此言士节不可不勉励也。猛虎在深山，百兽震恐，及在槛阱之中，摇尾而求食，积威约之渐也。故有画地为牢势不可入，削木为吏议不可对，定计于鲜也。今交手足，受木索，暴肌肤，受榜箠，幽于圜墙之中。当此之时，见狱吏则头枪地，视徒隶则正惕息，何者？积威约之势也。及以至是言不辱者，所谓强颜耳，曷足贵乎！且西伯，伯也，拘于羑里；李斯，相也，具于五刑；淮阴，王也，受械于陈；彭越张敖，南面称孤，系狱抵罪；绛侯诛诸吕，权倾五伯，囚于请室；魏其，大将也，衣赭衣，关三木；季布为朱家钳奴；灌夫受辱于居室。此人皆身至王侯将相，声闻邻国，及罪至罔加，不能引决自裁，在尘埃之中，古今一体，安在其不辱也？由此言之，勇怯，势也；强弱，形也。审矣！何足怪乎？夫人不能早自裁绳墨之外，以稍陵迟至于鞭箠之间，乃欲引节，斯不亦远乎？古人所以重施刑于大夫者，殆为此也。</p><p>夫人情莫不贪生恶死，念父母，顾妻子，至激于义理者不然，乃有所不得已也。今仆不幸，早失父母，无兄弟之亲，独身孤立，少卿视仆于妻子何如哉？且勇者不必死节，怯夫慕义，何处不勉焉！仆虽怯懦欲苟活，亦颇识去就之分矣。何至自沈溺缧绁之辱哉？且夫臧获婢妾，由能引决，况仆之不得已乎？所以隐忍苟活，幽于粪土之中而不辞者，恨私心有所不尽，鄙陋没世，而文彩不表于后世也。</p><p>古者富贵而名摩灭，不可胜记，唯倜傥非常之人称焉。盖文王拘而演周易；仲尼厄而作春秋；屈原放逐，乃赋离骚；左丘失明，厥有国语；孙子膑脚，兵法脩列；不韦迁蜀，世传吕览；韩非囚秦，说难孤愤；诗三百篇，大厎圣贤发愤之所为作也。此人皆意有郁结，不得通其道，故述往事，思来者。乃如左丘无目，孙子断足，终不可用，退而论书策，以舒其愤，思垂空文以自见。</p><p>仆窃不逊，近自讬于无能之辞，网罗天下放失旧闻，略考其行事，综其终始，稽其成败兴坏之纪，上计轩辕，下至于兹，为十表，本纪十二，书八章，世家三十，列传七十，凡百三十篇，亦欲以究天人之际，通古今之变，成一家之言。草创未就，会遭此祸，惜其不成，已就极刑而无愠色。仆诚以着此书藏诸名山，传之其人，通邑大都，则仆偿前辱之责，虽万被戮，岂有悔哉？然此可为智者道，难为俗人言也。</p><p>且负下未易居，下流多谤议，仆以口语遇此祸，重为乡党所笑，以污辱先人，亦何面目复上父母丘墓乎？虽累百世，垢弥甚耳！是以肠一日而九回，居则忽忽若有所亡，出则不知其所往。每念斯耻，汗未尝不发背沾衣也。身直为闺合之臣，宁得自引于深藏岩穴邪？故且从俗浮沈，与时俯仰，以通其狂惑。今少卿乃教以推贤进士，无乃与仆私心剌谬乎！今虽欲自雕琢，曼辞以自饰，无益于俗不信，适足取辱耳。要之死日，然后是非乃定。书不能悉意，略陈固陋，谨再拜。</p>]]></content>
    
    
    <categories>
      
      <category>古文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>古文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《编译原理第三版》（张素琴）第三章学习札记</title>
    <link href="/2021/09/26/%E3%80%8A%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%AC%E4%B8%89%E7%89%88%E3%80%8B%EF%BC%88%E5%BC%A0%E7%B4%A0%E7%90%B4%EF%BC%89%E7%AC%AC%E4%B8%89%E7%AB%A0%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0/"/>
    <url>/2021/09/26/%E3%80%8A%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%AC%E4%B8%89%E7%89%88%E3%80%8B%EF%BC%88%E5%BC%A0%E7%B4%A0%E7%90%B4%EF%BC%89%E7%AC%AC%E4%B8%89%E7%AB%A0%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>何为正规文法？</p></blockquote><p>这个概念在第二章有讲过，这里再次摘录一下。</p><p>正规文法也称为 3 型文法 <span class="math inline">\(G = (V_N, V_T, S,P)\)</span>，其 <span class="math inline">\(P\)</span>中的每一条规则都有下述形式：<span class="math inline">\(A \rightarrowaB\)</span> 或 <span class="math inline">\(A \rightarrowa\)</span>，其中 <span class="math inline">\(A, B \in V_N, \; a \inV_T^*\)</span>。</p><p>正规文法所描述的是 <span class="math inline">\(V_T\)</span>上的正规集。</p><blockquote><p>何为正规集？</p></blockquote><p>按：本书中似乎没有正规集的概念。遂从《编译原理第二版》黑书摘录其定义如下</p><blockquote><p>可以用一个正则表达式定义的语言叫做<strong>正则集合（regularset）</strong>。</p></blockquote><p>黑书中的翻译是“正则集合”，其实和“正规集”是一个意思。</p><p>结合老师所讲，所谓正规集，可以和前面第二章的语言（<spanclass="math inline">\(L(G)\)</span>）这一概念结合来看，它们表达的东西其实是很类似的，因此，正规集所表达的意思就是正规式（正则表达式）所产生的所有字串的集合。</p><blockquote><p>何为正规式？</p></blockquote><p>正规式也称正则表达式，是表示正规集的工具。</p><p>(1). <span class="math inline">\(\varepsilon\)</span> 和 <spanclass="math inline">\(\varnothing\)</span> 都是 <spanclass="math inline">\(\Sigma\)</span>上的正规式，它们所表示的正规集分别为 <span class="math inline">\(\{\varepsilon \}\)</span> 和 <spanclass="math inline">\(\varnothing\)</span>。<br />(2). 任何 <span class="math inline">\(a \in \Sigma\)</span>，<spanclass="math inline">\(a\)</span> 是 <spanclass="math inline">\(\Sigma\)</span> 上的一个正规式，它所表示的正规集为<span class="math inline">\(\{ a \}\)</span>。<br />(3). 假定 <span class="math inline">\(e_1\)</span> 和 <spanclass="math inline">\(e_2\)</span> 都是 <spanclass="math inline">\(\Sigma\)</span>上的正规式，它们所表示的正规集分别为 <spanclass="math inline">\(L(e_1)\)</span> 和 <spanclass="math inline">\(L(e_2)\)</span>，那么，<spanclass="math inline">\((e_1)\)</span>、<spanclass="math inline">\(e_1|e_2\)</span>、<span class="math inline">\(e_1\cdot e_2\)</span> 和 <span class="math inline">\(e_1^*\)</span>也都是正规式，它们所表示的正规集分别为 <spanclass="math inline">\(L(e_1)\)</span>、<spanclass="math inline">\(L(e_1) \cup L(e_2)\)</span>、<spanclass="math inline">\(L(e_1)L(e_2)\)</span> 和 <spanclass="math inline">\((L(e_1))^*\)</span>。<br />(4). 仅由有限次使用上述 3 个步骤而定义的表达式才是 <spanclass="math inline">\(\Sigma\)</span>上的正规式，仅由这些正规式所表示的符号串的集合才是 <spanclass="math inline">\(\Sigma\)</span> 上的正规集。</p><p>其中的 <span class="math inline">\(|\)</span> 读为“或”；<spanclass="math inline">\(\cdot\)</span> 读为“连接”；<spanclass="math inline">\(*\)</span>读为“闭包”。在不致混淆时，括号可省去，但规定算符的优先顺序为先 <spanclass="math inline">\(*\)</span>，再 <spanclass="math inline">\(\cdot\)</span>，最后 <spanclass="math inline">\(|\)</span>。连接符 <spanclass="math inline">\(\cdot\)</span> 一般可省略不写。<spanclass="math inline">\(*\)</span>、<spanclass="math inline">\(\cdot\)</span>、和 <spanclass="math inline">\(|\)</span> 都是左结合的。</p><blockquote><p>正规文法转正规式的 3 条规则？</p></blockquote><ol type="1"><li><p>正规式：<span class="math inline">\(A \rightarrow xy\)</span></p><p>正规文法：</p><p><span class="math display">\[\begin{split}A &amp;\rightarrow xB \\B &amp;\rightarrow y\end{split}\]</span></p></li><li><p>正规式：<span class="math inline">\(A \rightarrowx^*y\)</span></p><p>正规文法：</p><p><span class="math display">\[\begin{split}A &amp;\rightarrow xB \\A &amp;\rightarrow y \\B &amp;\rightarrow xB \\B &amp;\rightarrow y\end{split}\]</span></p></li><li><p>正规式：<span class="math inline">\(A \rightarrowx|y\)</span></p><p>正规文法：</p><p><span class="math display">\[\begin{split}A &amp;\rightarrow x \\A &amp;\rightarrow y\end{split}\]</span></p></li></ol><p>课堂小问：</p><p><span class="math display">\[A \rightarrow xA \\A \rightarrow y\]</span></p><p><span class="math inline">\(x\)</span> 可能是多个 <spanclass="math inline">\(*\)</span> 闭包的组合。</p><p>疑问 P45？</p><p>(1). 例 3.3，表示无符号数的正规式似乎有点问题。</p><p>可以利用 <span class="math inline">\(\varepsilon A = A\)</span>来理解。那么，这个式子就是对的。</p><p>P45 <span class="math inline">\((a|b)^* = (a^* b^*)^*\)</span>如何理解？</p><p>可以将 <span class="math inline">\((a|b)^*\)</span> 展开成类似 <spanclass="math inline">\((a|b)(a|b) \cdots (a|b)\)</span>的形式，然后每一个括号内可以随便是 <spanclass="math inline">\(a\)</span> 或 <spanclass="math inline">\(b\)</span>。</p><blockquote><p>正规式的代数规律？</p></blockquote><p><span class="math display">\[\begin{split}&amp;(1) \; r|s = s|r \\&amp;(2) \; r|(s|t) = (r|s)|t \\&amp;(3) \; (rs)t = r(st) \\&amp;(4) \; r(s|t) = rs|rt, \; (s|t)r = sr|tr \\&amp;(5) \; \varepsilon r = r, \; r\varepsilon = r \\&amp;(6) \; r|r = r\end{split}\]</span></p><blockquote><p>将正规文法转换成正规式的 3 条规则？</p></blockquote><ol type="1"><li><p>规则一：</p><p><span class="math display">\[\begin{split}文法产生式：&amp;A \rightarrow xB \quad B \rightarrow y \\正规式：&amp;A = xy\end{split}\]</span></p></li><li><p>规则二：</p><p><span class="math display">\[\begin{split}文法产生式：&amp;A \rightarrow xA|y \\正规式：&amp;A = x^*y\end{split}\]</span></p></li><li><p>文法产生式：</p><p><span class="math display">\[\begin{split}文法产生式：&amp;A \rightarrow x \quad A \rightarrow y \\正规式：&amp;A = x|y\end{split}\]</span></p></li></ol><blockquote><p>何为确定的有穷自动机（<spanclass="math inline">\(\textrm{DFA}\)</span>）？</p></blockquote><p>一个确定的有穷自动机 <span class="math inline">\(M\)</span>是一个五元组：</p><p><span class="math display">\[M = (K, \Sigma, f, S, Z)\]</span></p><p>其中：</p><p>(1) <span class="math inline">\(K\)</span>是一个有穷集，它的每一个元素称为一个状态。<br />(2) <span class="math inline">\(\Sigma\)</span>是一个有穷字母表，它的每一个元素称为一个输入符号，所以也称 <spanclass="math inline">\(\Sigma\)</span> 为输入符号表。<br />(3) <span class="math inline">\(f\)</span> 是转换函数，是 <spanclass="math inline">\(K \times \Sigma \rightarrow K\)</span>上的映像。例如，<span class="math inline">\(f(k_i, a) = k_j\)</span><span class="math inline">\((k_i \in K, k_j \in K, a \in\Sigma)\)</span> 就意味着，当前状态为 <spanclass="math inline">\(k\)</span>、输入字符为 <spanclass="math inline">\(a\)</span> 时，将转换到下一状态 <spanclass="math inline">\(k_j\)</span>，把 <spanclass="math inline">\(k_j\)</span> 称作 <spanclass="math inline">\(k_i\)</span> 的一个后继状态。<br />(4) <span class="math inline">\(S \inK\)</span>，是唯一的一个初态。<br />(5) <span class="math inline">\(Z \subseteqK\)</span>，是一个终态集，终态也称可接受或结束状态。</p><p>一个 <span class="math inline">\(DFA\)</span>可以表示成一个状态图（或称状态转换图）。假定 <spanclass="math inline">\(DFA \; M\)</span> 含有 <spanclass="math inline">\(m\)</span> 个状态，<spanclass="math inline">\(n\)</span> 个输入符号，那么这个状态图含有 <spanclass="math inline">\(m\)</span> 个节点，每个节点最多有 <spanclass="math inline">\(n\)</span>个弧射出，整个图含有唯一一个初态节点和若干个终态节点，初态节点冠以“<spanclass="math inline">\(\Rightarrow\)</span>”或标以“<spanclass="math inline">\(-\)</span>”，终态节点终态节点用双圈表示或标以“<spanclass="math inline">\(+\)</span>”，若 <span class="math inline">\(f(k_i,a) = k_j\)</span>，则从状态节点 <span class="math inline">\(k_i\)</span>到状态节点 <span class="math inline">\(k_j\)</span> 画标记为 <spanclass="math inline">\(a\)</span> 的弧。</p><p>对于 <span class="math inline">\(\Sigma^*\)</span>中的任何符号串，若存在一条从初态节点到某一终态节点的道路，且这条路上所有弧的标记连接成的符号串等于<span class="math inline">\(t\)</span>，则称 <spanclass="math inline">\(t\)</span> 可为 <span class="math inline">\(DFA \;M\)</span> 所接受，若 <span class="math inline">\(M\)</span>的初态节点同时又是终态节点，则空字可为 <spanclass="math inline">\(M\)</span> <strong>所识别（接受）</strong>。<br />可换一种方式叙述如下：<br />若 $t ^*, $ <span class="math inline">\(f(S, t) = P\)</span>，其中 <spanclass="math inline">\(S\)</span> 为 <spanclass="math inline">\(\textrm{DFA M}\)</span> 的开始状态， <spanclass="math inline">\(P \in Z\)</span>，<spanclass="math inline">\(Z\)</span> 为终态集。则称 <spanclass="math inline">\(t\)</span> 可为 <spanclass="math inline">\(\textrm{DFA M}\)</span>所<strong>接受（识别）</strong>。</p><blockquote><p>何为不确定的有穷自动机（<spanclass="math inline">\(\textrm{NFA}\)</span>）？</p></blockquote><p>一个不确定的有穷自动机 <span class="math inline">\(M\)</span>是一个五元组：</p><p><span class="math display">\[M = (K, \Sigma, f, S, Z)\]</span></p><p>其中：</p><p>(1) <span class="math inline">\(K\)</span>是一个有穷集，它的每个元素称为一个状态。<br />(2) <span class="math inline">\(\Sigma\)</span>是一个有穷字母表，它的每个元素称为一个输入符号。<br />(3) <span class="math inline">\(f\)</span> 是一个从 <spanclass="math inline">\(K \times \Sigma^*\)</span> 到 <spanclass="math inline">\(K\)</span> 的全体子集的映像，即 <spanclass="math inline">\(K \times \Sigma^* \rightarrow 2^K\)</span>，其中<span class="math inline">\(2^K\)</span> 表示 <spanclass="math inline">\(K\)</span> 的幂集。<br />(4) <span class="math inline">\(S \subseteqK\)</span>，是一个非空初态集。<br />(5) <span class="math inline">\(Z \subseteqK\)</span>，是一个终态集。</p><p>一个含有 <span class="math inline">\(m\)</span> 个状态和 <spanclass="math inline">\(n\)</span> 个输入符号的 <spanclass="math inline">\(\textrm{NFA}\)</span>可表示成一张状态转换图，这张图含有 <spanclass="math inline">\(m\)</span>个状态结点，每个结点可射出若干条箭弧与别的节点相连接，每条弧用 <spanclass="math inline">\(\Sigma^*\)</span>中的一个串作标记，整个图至少含有一个初态结点以及若干个终态结点。</p><blockquote><p>何为状态集合 <span class="math inline">\(I\)</span> 的 <spanclass="math inline">\(\varepsilon\text{-闭包}\)</span>？</p></blockquote><p>状态集合 <span class="math inline">\(I\)</span> 的 <spanclass="math inline">\(\varepsilon\text{-闭包}\)</span>，表示为 <spanclass="math inline">\(\varepsilon\text{-closure(I)}\)</span>，定义为一个状态集，是状态集 <spanclass="math inline">\(I\)</span> 中任何状态 <spanclass="math inline">\(S\)</span> 经任意条 <spanclass="math inline">\(\varepsilon\)</span> 弧能到达的状态的集合。</p><blockquote><p>何为状态集合 <span class="math inline">\(I\)</span> 的 <spanclass="math inline">\(a\)</span> 弧转换？</p></blockquote><p>状态集合 <span class="math inline">\(I\)</span> 的 <spanclass="math inline">\(a\)</span> 弧转换，表示为 <spanclass="math inline">\(move(I, a)\)</span>，定义为状态集合 <spanclass="math inline">\(J\)</span>，其中 <spanclass="math inline">\(J\)</span> 是所有哪些可从 <spanclass="math inline">\(I\)</span> 中的某一状态经过一条 <spanclass="math inline">\(a\)</span> 弧而到达的状态的全体。</p><blockquote><p>如何将一个 <span class="math inline">\(\textrm{NFA}\)</span>转换为等价的 <span class="math inline">\(\textrm{DFA}\)</span>？</p></blockquote><p>这里介绍的方法就是<strong>子集法</strong>。</p><p>假设 <span class="math inline">\(\textrm{NFA N} =\)</span> <spanclass="math inline">\(\{K, \Sigma, f, K_0, K_t\}\)</span>按照如下方法构造一个 <span class="math inline">\(\textrm{DFA M}=\)</span> <span class="math inline">\((S, \Sigma, D, S_0, S_t)\)</span>使得 <span class="math inline">\(L(M) = L(N)\)</span>：</p><p>(1) <span class="math inline">\(M\)</span> 的状态集 <spanclass="math inline">\(S\)</span> 由 <spanclass="math inline">\(K\)</span> 的一些子集（构造 <spanclass="math inline">\(K\)</span> 的子集见下图）组成。用 <spanclass="math inline">\([S_1, S_2, ..., S_j]\)</span> 表示 <spanclass="math inline">\(S\)</span> 的元素，其中 <spanclass="math inline">\(S_1, S_2, ..., S_j\)</span> 是 <spanclass="math inline">\(K\)</span> 的状态。并且约定，状态 <spanclass="math inline">\(S_1, S_2, ..., S_j\)</span>是按某种规则排列的，即对于子集 <span class="math inline">\(S = \{ S_2,S_1 \}\)</span> 来说，<span class="math inline">\(S\)</span> 的状态就是<span class="math inline">\([S_1S_2]\)</span>。</p><p>疑问：P51 这里的 S 规则排列与状态究竟是什么？</p><blockquote><p>疑问：如果 <span class="math inline">\(K_0\)</span>中不止一个元素怎么办？</p></blockquote><p>解答：这个观察 <span class="math inline">\(\varepsilon\text{-闭包}\)</span> 的定义即可解决。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211002163758.png"alt="图 1：子集的构造算法" /></p><p>按：</p><p>(2) <span class="math inline">\(M\)</span> 和 <spanclass="math inline">\(N\)</span> 的输入字母表是相同的，即是 <spanclass="math inline">\(\Sigma\)</span>。<br />(3) 转换函数 <span class="math inline">\(D\)</span> 是这样定义的。</p><p><span class="math display">\[D([S_1, S_2, ..., S_j], a) = [R_1, R_2, ..., R_j]\]</span></p><p>其中 $(move([S_1, S_2, $ $... S_j], a)) = $ <spanclass="math inline">\([R_1, R_2, ..., R_j]\)</span>。<br />(4) $S_0 = $ <span class="math inline">\(\varepsilon\text{-closure}(K_0)\)</span> 为 <span class="math inline">\(M\)</span>的开始状态。<br />(5) $S_t = $ <span class="math inline">\(\{ [S_j, S_k,...,S_e]\}\)</span>，其中 <span class="math inline">\([S_j,S_k,...,S_e]\)</span> <span class="math inline">\(\in S\)</span> 且<span class="math inline">\(\{ S_j, S_k,...,S_e \}\)</span> <spanclass="math inline">\(\cap \; K_t \neq \varnothing \}\)</span></p><p>图 1 是构造 <span class="math inline">\(\text{NFA } N\)</span> 的状态<span class="math inline">\(K\)</span>的子集的算法。假定所构造的子集族为 <spanclass="math inline">\(C\)</span>，即 <span class="math inline">\(C =(T_1, T_2,...,T_i)\)</span>，其中 <span class="math inline">\(T_1,T_2,...,T_i\)</span> 为状态 <span class="math inline">\(K\)</span>的子集。</p><p>这个概念必须要用具体的例子辅助理解才能够最终掌握，所以，这里就举一个例子：应用上面的算法对下面的图2 的 <span class="math inline">\(\text{NFA } N\)</span> 构造子集。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211004145119.png"alt="图 2" /></p><p>步骤如下：</p><p>(1) 首先计算 <span class="math inline">\(\varepsilon\text{-closure(0)}\)</span>，令 <span class="math inline">\(T_0 =\varepsilon \text{-closure(0)}\)</span> <spanclass="math inline">\(=\{0, 1, 2, 4, 7\}\)</span>，<spanclass="math inline">\(T_0\)</span> 未被标记，它现在是子集族 <spanclass="math inline">\(C\)</span> 的唯一成员。<br />(2) 标记 <span class="math inline">\(T_0\)</span>；计算 $move(T_0, a) =$ <span class="math inline">\(\{ 3, 8 \}\)</span>。令 $T_1 = $ <spanclass="math inline">\(\varepsilon \text{-closure} (move(T_0,a))\)</span> <span class="math inline">\(= \{1, 2, 3, 4, 6, 7,8\}\)</span>，将 <span class="math inline">\(T_1\)</span> 加入 <spanclass="math inline">\(C\)</span> 中，<spanclass="math inline">\(T_1\)</span> 未被标记。<br />计算 $move(T_0, b) = $ <span class="math inline">\(\{ 5 \}\)</span>。令<span class="math inline">\(T_2 = \varepsilon\)</span> <spanclass="math inline">\(\text{-closure} (move(T_0, b))\)</span> <spanclass="math inline">\(= \{ 1, 2, 4, 5, 6, 7 \}\)</span>，将 <spanclass="math inline">\(T_2\)</span> 加入 <spanclass="math inline">\(C\)</span> 中，它未被标记。<br />(3) 标记 <span class="math inline">\(T_1\)</span>；计算 $move(T_1, a) =$ <span class="math inline">\(\{ 3, 8 \}\)</span>。计算 <spanclass="math inline">\(\varepsilon \text{-closure} (move(T_1,a))\)</span>，结果为 <span class="math inline">\(\{ 1, 2, 3, 4, 6, 7, 8\}\)</span>，即 <span class="math inline">\(T_1\)</span>，<spanclass="math inline">\(T_1\)</span> 已在 <spanclass="math inline">\(C\)</span> 中。<br />计算 $move(T_1, b) = $ <span class="math inline">\(\{ 5, 9 \}\)</span>。计算 <span class="math inline">\(\varepsilon \text{-closure} (move(T_1,b))\)</span>，结果为 <span class="math inline">\(\{ 1, 2, 4, 5, 6, 7, 9\}\)</span>，令其为 <span class="math inline">\(T_3\)</span>，加至 <spanclass="math inline">\(C\)</span> 中，它未被标记。<br />(4) （从这里开始，就不单独计算 <span class="math inline">\(move\)</span>的结果了）标记 <span class="math inline">\(T_2\)</span>，计算 <spanclass="math inline">\(\varepsilon \text{-closure} (move(T_2,a))\)</span>，结果为 <span class="math inline">\(\{1, 2, 3, 4, 6, 7,8\}\)</span>，即 <span class="math inline">\(T_1\)</span>，<spanclass="math inline">\(T_1\)</span> 已在 <spanclass="math inline">\(C\)</span> 中。<br />计算 <span class="math inline">\(\varepsilon \text{-closure} (move(T_2,b))\)</span>，结果为 <span class="math inline">\(\{1, 2, 4, 5, 6,7\}\)</span>，即 <span class="math inline">\(T_2\)</span>，<spanclass="math inline">\(T_2\)</span> 已在 <spanclass="math inline">\(C\)</span> 中。<br />(5) 标记 <span class="math inline">\(T_3\)</span>，计算 <spanclass="math inline">\(\varepsilon \text{-closure} (move(T_3,a))\)</span>，结果为 <span class="math inline">\(\{1, 2, 3, 4, 6, 7,8\}\)</span>，即 <span class="math inline">\(T_1\)</span>。<br />计算 <span class="math inline">\(\varepsilon \text{-closure} (move(T_3,b))\)</span>，结果为 <span class="math inline">\(\{1, 2, 4, 5, 6, 7,10\}\)</span>，令其为 <span class="math inline">\(T_4\)</span>，加入<span class="math inline">\(C\)</span> 中，<spanclass="math inline">\(T_4\)</span> 未被标记。<br />(6) 标记 <span class="math inline">\(T_4\)</span>，计算 <spanclass="math inline">\(\varepsilon \text{-closure} (move(T_4,a))\)</span>，结果为 <span class="math inline">\(\{1, 2, 3, 4, 6, 7,8\}\)</span>，即 T_1$$。<br />计算 <span class="math inline">\(\varepsilon \text{-closure} (move(T_4,b))\)</span>，结果为 <span class="math inline">\(\{1, 2, 4, 5, 6,7\}\)</span>，即 <span class="math inline">\(T_2\)</span>。<br />至此，算法终止，共构造了 5 个子集：</p><p><span class="math display">\[\begin{split}T_0 &amp;= \{0, 1, 2, 4, 7\} \\T_1 &amp;= \{1, 2, 3, 4, 6, 7, 8\} \\T_2 &amp;= \{ 1, 2, 4, 5, 6, 7 \} \\T_3 &amp;= \{ 1, 2, 4, 5, 6, 7, 9 \} \\T_4 &amp;= \{1, 2, 4, 5, 6, 7, 10\}\end{split}\]</span></p><p>那么，图 2 的 <span class="math inline">\(\text{NFA } N\)</span>构造的 <span class="math inline">\(\text{DFA } M\)</span> 如下：</p><p><span class="math display">\[\begin{split}(1)\; &amp;S = \{[T_0], [T_1], [T_2], [T_3], [T_4]\} \\(2)\; &amp;\Sigma = \{a, b\} \\(3)\; &amp;D([T_0], a) = [T_1] \\   \; &amp;D([T_0], b) = [T_2] \\   \; &amp;D([T_1], a) = [T_1] \\   \; &amp;D([T_1], b) = [T_3] \\   \; &amp;D([T_2], a) = [T_1] \\   \; &amp;D([T_2], b) = [T_2] \\   \; &amp;D([T_3], a) = [T_1] \\   \; &amp;D([T_3], b) = [T_4] \\   \; &amp;D([T_4], a) = [T_1] \\   \; &amp;D([T_4], b) = [T_2] \\(4)\; &amp;S_0 = [T_0] \\(5)\; &amp;S_t = [T_4]\end{split}\]</span></p><blockquote><p>何为有穷自动机的无用状态？</p></blockquote><p>所谓有穷自动机的无用状态，是指这样的状态：从该自动机的开始状态出发，任何输入串也不能到达的那个状态，或者从这个状态没有通路到达终态。</p><blockquote><p>在有穷自动机中，两个状态 <span class="math inline">\(s\)</span> 和<span class="math inline">\(t\)</span> 等价的条件？</p></blockquote><ul><li>一致性条件——状态 <span class="math inline">\(s\)</span> 和 <spanclass="math inline">\(t\)</span>必须同时为可接受状态（终态）或不可接受状态（非终态）。</li><li>蔓延性条件——对于所有输入符号，状态 <spanclass="math inline">\(s\)</span> 和状态 <spanclass="math inline">\(t\)</span> 必须转换到等价的状态里。</li></ul><blockquote><p>正规式和有穷自动机的等价性如何说明？</p></blockquote><p>可由以下两点说明：</p><ul><li>对于 <span class="math inline">\(\Sigma\)</span> 上的 <spanclass="math inline">\(\textrm{NFA M}\)</span>，可以构造一个 <spanclass="math inline">\(\Sigma\)</span> 上的正规式，使得 <spanclass="math inline">\(L(r) = L(M)\)</span>。</li><li>对于 <span class="math inline">\(\Sigma\)</span> 上的每个正规式<span class="math inline">\(r\)</span>，可以构造一个 <spanclass="math inline">\(\Sigma\)</span> 上的 <spanclass="math inline">\(\textrm{NFA M}\)</span>，使得 <spanclass="math inline">\(L(M) = L(r)\)</span>。</li></ul><blockquote><p>如何为 <span class="math inline">\(\Sigma\)</span> 上的 <spanclass="math inline">\(\textrm{NFA M}\)</span> 构造相应的正规式 <spanclass="math inline">\(r\)</span>？</p></blockquote><p>第 1 步，在 <span class="math inline">\(M\)</span>的状态转换图上加进两个结点，一个为 <spanclass="math inline">\(x\)</span> 结点，一个为 <spanclass="math inline">\(y\)</span> 结点。从 <spanclass="math inline">\(x\)</span> 结点用 <spanclass="math inline">\(\varepsilon\)</span> 弧连接到 <spanclass="math inline">\(M\)</span> 的所有初态结点，从 <spanclass="math inline">\(M\)</span> 的所有终态结点用 <spanclass="math inline">\(\varepsilon\)</span> 弧连接到 <spanclass="math inline">\(y\)</span> 结点。形成一个与 <spanclass="math inline">\(M\)</span> 等价的 <spanclass="math inline">\(M^{&#39;}\)</span>，<spanclass="math inline">\(M^{&#39;}\)</span> 只有一个初态 <spanclass="math inline">\(x\)</span> 和一个终态 <spanclass="math inline">\(y\)</span>。<br />第 2 步，逐步消去 <span class="math inline">\(M^{&#39;}\)</span>中的所有结点，直至只剩下 <span class="math inline">\(x\)</span> 和 <spanclass="math inline">\(y\)</span>结点。在消去的过程中，逐步用正规式来标记弧。其消去的规则如下：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/draft06.drawio.png" /></p><p>最后 <span class="math inline">\(x\)</span> 和 <spanclass="math inline">\(y\)</span> 结点间的弧上的标记则为所求的正规式<span class="math inline">\(r\)</span>。</p><blockquote><p>如何从 <span class="math inline">\(\Sigma\)</span> 上的一个正规式<span class="math inline">\(r\)</span> 构造一个 <spanclass="math inline">\(\textrm{NFA M}\)</span>，使得 <spanclass="math inline">\(L(M) = L(r)\)</span>？</p></blockquote><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/draft07.drawio.png" /></p><blockquote><p>如何从正规文法 <span class="math inline">\(G\)</span>直接构造一个有穷自动机 <span class="math inline">\(\text{NFA }M\)</span>，使得 <span class="math inline">\(L(M) = L(G)\)</span>？</p></blockquote><p>(1) <span class="math inline">\(M\)</span> 的字母表与 <spanclass="math inline">\(G\)</span> 的终结符集相同。<br />(2) 为 <span class="math inline">\(G\)</span> 中的每个非终结符生成 <spanclass="math inline">\(M\)</span> 的一个状态（不妨取成相同的名字），<spanclass="math inline">\(G\)</span> 的开始符 <spanclass="math inline">\(S\)</span> 是 <spanclass="math inline">\(M\)</span> 的开始状态 <spanclass="math inline">\(S\)</span>。<br />(3) 增加一个新状态 <span class="math inline">\(Z\)</span>，作为 <spanclass="math inline">\(M\)</span> 的终态。<br />(4) 对 <span class="math inline">\(G\)</span> 中的形如 <spanclass="math inline">\(A \rightarrow tB\)</span> 的规则（其中 <spanclass="math inline">\(t\)</span> 为终结符或 <spanclass="math inline">\(\varepsilon\)</span>，<spanclass="math inline">\(A\)</span> 和 <spanclass="math inline">\(B\)</span> 为非终结符的产生式），构造 <spanclass="math inline">\(M\)</span> 的一个转换函数 <spanclass="math inline">\(f(A, t) = B\)</span>。<br />(5) 对 <span class="math inline">\(G\)</span> 中形如 <spanclass="math inline">\(A \rightarrow t\)</span> 的产生式，构造 <spanclass="math inline">\(M\)</span> 的一个转换函数 <spanclass="math inline">\(f(A, t) = Z\)</span>。</p>]]></content>
    
    
    <categories>
      
      <category>编译原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编译原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 13 Roman to Integer</title>
    <link href="/2021/09/25/LeetCode-13-Roman-to-Integer/"/>
    <url>/2021/09/25/LeetCode-13-Roman-to-Integer/</url>
    
    <content type="html"><![CDATA[<p>难度：easy</p><p>代码：</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># @File  : leet_13.py</span><span class="token comment"># @Author: FanyFull</span><span class="token comment"># @Date  : 2021/9/25</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">romanToInt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        roman_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'I'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'V'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'L'</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">&#125;</span>        prenum <span class="token operator">=</span> roman_dict<span class="token punctuation">[</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        num <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            single_num <span class="token operator">=</span> roman_dict<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> prenum <span class="token operator">&lt;</span> single_num<span class="token punctuation">:</span>                num <span class="token operator">=</span> num <span class="token operator">-</span> prenum            <span class="token keyword">else</span><span class="token punctuation">:</span>                num <span class="token operator">=</span> num <span class="token operator">+</span> prenum            prenum <span class="token operator">=</span> single_num        num <span class="token operator">=</span> num <span class="token operator">+</span> prenum        <span class="token keyword">return</span> num<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    solution <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token builtin">input</span> <span class="token operator">=</span> <span class="token string">'MCMXCIV'</span>    output <span class="token operator">=</span> solution<span class="token punctuation">.</span>romanToInt<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这道题的思想也可以说是加减交替吧，之所以说“也”，是因为最近上计算机组成原理也提到过这个说法。</p>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《编译原理第三版》（张素琴）学习札记</title>
    <link href="/2021/09/23/%E3%80%8A%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%AC%E4%B8%89%E7%89%88%E3%80%8B%EF%BC%88%E5%BC%A0%E7%B4%A0%E7%90%B4%EF%BC%89%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0/"/>
    <url>/2021/09/23/%E3%80%8A%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%AC%E4%B8%89%E7%89%88%E3%80%8B%EF%BC%88%E5%BC%A0%E7%B4%A0%E7%90%B4%EF%BC%89%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>记载本书所有章节的阅读札记。</p><h1 id="第二章">第二章</h1><blockquote><p>何为符号 <span class="math inline">\(\Rightarrow\)</span>？</p></blockquote><p>符号 <span class="math inline">\(\Rightarrow\)</span>的含义是，使用一条规则，代替左端的某个符号，产生其右端的符号串。</p><blockquote><p>何为规则？</p></blockquote><p>规则，也称重写规则、产生式或生成式，是形如 <spanclass="math inline">\(\alpha \rightarrow \beta\)</span> 或 <spanclass="math inline">\(\alpha ::= \beta\)</span> 的有序对，其中 <spanclass="math inline">\(\alpha\)</span> 称为规则的左部，<spanclass="math inline">\(\beta\)</span> 称作规则的右部。</p><blockquote><p>设某一文法 <span class="math inline">\(G\)</span>，何为文法 <spanclass="math inline">\(G\)</span> 的字母表？</p></blockquote><p><span class="math display">\[V_N \cup V_T = \varnothing\]</span></p><p>通常用 <span class="math inline">\(V\)</span> 表示 <spanclass="math inline">\(V_N \cup V_T\)</span>，<spanclass="math inline">\(V\)</span> 称为文法 <spanclass="math inline">\(G\)</span> 的字母表或词汇表。</p><p>关于符号 <span class="math inline">\(\rightarrow\)</span> 或 <spanclass="math inline">\(::=\)</span>？</p><p>符号 <span class="math inline">\(\rightarrow\)</span> 或 <spanclass="math inline">\(::=\)</span> 读作“定义为”。</p><p>例如，<span class="math inline">\(A \rightarrow a\)</span> 读作“<spanclass="math inline">\(A\)</span> 定义为 <spanclass="math inline">\(a\)</span>”。也把它说成是一条关于 <spanclass="math inline">\(A\)</span> 的规则（产生式）。</p><blockquote><p>何为四元组？</p></blockquote><p>文法 <span class="math inline">\(G\)</span> 定义为四元组 <spanclass="math inline">\(\displaystyle{(V_N, V_T, P, S)}\)</span>。</p><ul><li><spanclass="math inline">\(V_N\)</span>：非终结符（或语法实体，或变量）集；</li><li><span class="math inline">\(V_T\)</span>：终结符集；</li><li><span class="math inline">\(P\)</span>：规则 <spanclass="math inline">\((\alpha \rightarrow \beta)\)</span> 的集合<ul><li><span class="math inline">\(\alpha \in (V_N \cup V_T)^{*}\)</span>且至少包含一个非终止符</li><li><span class="math inline">\(\beta \in (V_N \cupV_T)^{*}\)</span>；</li></ul></li><li><span class="math inline">\(V_N, V_T, P\)</span> 是非空有穷集；</li><li><span class="math inline">\(S\)</span>称作识别符或者开始符，它是一个非终结符，至少要在一条规则中作为左部出现。</li></ul><p>关于文法 <span class="math inline">\(G\)</span> 的一些规定？</p><ul><li>一般约定，第一条产生式的左部是识别符；</li><li>用尖括号括起来的是非终结符，不用尖括号括起来的是终结符；</li><li>或者用大写字母表示非终结符，小写字母表示终结符；</li><li>另外，还有一种习惯写法，将 <span class="math inline">\(G\)</span>写成 <span class="math inline">\(G[S]\)</span>，其中 <spanclass="math inline">\(S\)</span> 是识别符。</li></ul><blockquote><p>何为 0 型文法？</p></blockquote><p>设 <span class="math inline">\(G = (V_N, V_T, P,S)\)</span>，如果它的每一个产生式 <span class="math inline">\(\alpha\rightarrow \beta\)</span> 是这样一种结构：<spanclass="math inline">\(\alpha \in (V_N \cup V_T)^*\)</span>且至少含有一个非终结符，而 <span class="math inline">\(\beta \in (V_N\cup V_T)^*\)</span>，则 <span class="math inline">\(G\)</span> 是一个<strong>0 型语法文法</strong>。</p><p>0 型文法也称 短语语法。</p><blockquote><p>何为 1 型文法？</p></blockquote><p>设 <span class="math inline">\(G = (V_N, V_T, P, S)\)</span>为一个文法，若 <span class="math inline">\(P\)</span> 中的每一个产生式<span class="math inline">\(\alpha \rightarrow \beta\)</span> 均满足<span class="math inline">\(|\beta| \geqslant |\alpha|\)</span>，仅仅<span class="math inline">\(S \rightarrow \varepsilon\)</span>除外，则文法 <span class="math inline">\(G\)</span> 是 <strong>1型</strong> 或 <strong>上下文有关的（context-sensitive）</strong>。</p><blockquote><p>何为 2 型文法？</p></blockquote><p>设 <span class="math inline">\(G = (V_N, V_T, P, S)\)</span>。若<span class="math inline">\(P\)</span> 中的每一个产生式 <spanclass="math inline">\(\alpha \rightarrow \beta\)</span> 满足：<spanclass="math inline">\(\alpha\)</span> 是一个非终结符，<spanclass="math inline">\(\beta \in (V_N \cup V_T)^*\)</span>，则此文法称为<strong>2 型的</strong> 或<strong>上下文无关的（context-free）</strong></p><blockquote><p>何为 3 型文法？</p></blockquote><p>设 <span class="math inline">\(G = (V_N, V_T, P, S)\)</span>，若<span class="math inline">\(P\)</span> 中的每一个产生式的形式都是 <spanclass="math inline">\(A \rightarrow aB\)</span> 或 <spanclass="math inline">\(A \rightarrow a\)</span>，其中 <spanclass="math inline">\(A\)</span> 和 <spanclass="math inline">\(B\)</span> 都是非终结符，<spanclass="math inline">\(a \in V_T^*\)</span>，则 <spanclass="math inline">\(G\)</span> 是 <strong>3 型文法</strong> 或<strong>正规文法</strong>。</p><p>问题：P25，上下文有关法的等价定义的理解？</p><p>似乎 <span class="math inline">\(A\)</span> 在 <spanclass="math inline">\(V_N\)</span> 中，是单个字符。</p><blockquote><p>何为符号 <spanclass="math inline">\(\mathop{\Rightarrow}\limits^{+}\)</span>？</p></blockquote><p>如果存在直接推导的序列：<span class="math display">\[v = w_0\Rightarrow w_1 \Rightarrow w_2 \Rightarrow \cdots \Rightarrow w_n = w\; (n &gt; 0)\]</span> 则称 <span class="math inline">\(v\)</span>推导出（产生）<span class="math inline">\(w\)</span>（推导长度为 <spanclass="math inline">\(n\)</span>），或称 <spanclass="math inline">\(w\)</span> 归约到 <spanclass="math inline">\(v\)</span>，记作 <span class="math inline">\(v\mathop{\Rightarrow}\limits^{+} w\)</span>。</p><p>若有 <span class="math inline">\(v \mathop{\Rightarrow}\limits^{+}w\)</span>，或 <span class="math inline">\(v = w\)</span>，则记作 <spanclass="math inline">\(v \mathop{\Rightarrow}\limits^{*} w\)</span>。</p><blockquote><p>何为句型，何为句子？</p></blockquote><p>设 <span class="math inline">\(G[S]\)</span> 是一个文法，如果符号串<span class="math inline">\(x\)</span> 是从识别符推导出来的，即有 <spanclass="math inline">\(S \mathop{\Rightarrow}\limits^{*} x\)</span>，则称<span class="math inline">\(x\)</span> 是文法 <spanclass="math inline">\(G[S]\)</span> 的<strong>句型</strong>。</p><p>按：注意上面的 <span class="math inline">\(S\mathop{\Rightarrow}\limits^{*} x\)</span> 是 <spanclass="math inline">\(*\)</span> 闭包，所以 <spanclass="math inline">\(S\)</span> 本身也是句型。</p><p>若 <span class="math inline">\(x\)</span> 仅由终结符号组成，即 <spanclass="math inline">\(S \mathop{\Rightarrow}\limits^{*} x, \; x \inV_T^*\)</span>，则称 <span class="math inline">\(x\)</span> 为 <spanclass="math inline">\(G[S]\)</span> 的<strong>句子</strong>。</p><blockquote><p>何为 <span class="math inline">\(L(G)\)</span>？</p></blockquote><p>文法 <span class="math inline">\(G\)</span>所产生的语言定义为集合</p><p><span class="math display">\[\{ x| S \mathop{\Rightarrow}\limits^* x, 其中 S 为文法识别符号，且 x \inV^*_T\}\]</span></p><p>可用 <span class="math inline">\(L(G)\)</span> 表示该集合。</p><blockquote><p>何为文法的二义性？</p></blockquote><p>如果一个文法存在某个句子对应两棵不同的语法树，则说这个语法是<strong>二义</strong>的。或者说，若一个文法中存在某个句子，它有两个不同的最左（最右）推导，则这个语法是<strong>二义</strong>的。</p><p>举例：文法 <span class="math inline">\(G = (\{ E \}, \{ +, *, i, (, )\}, P, E)\)</span>，其中 <span class="math inline">\(P\)</span> 为：</p><p><span class="math display">\[\begin{align}&amp;E \rightarrow i \\&amp;E \rightarrow E + E \\&amp;E \rightarrow E * E \\&amp;E \rightarrow (E)\end{align}\]</span></p><p>对于这个文法 <span class="math inline">\(G\)</span>，句型 <spanclass="math inline">\(i * i + i\)</span> 有两个不同的最左推导 1 和2，它们的语法树如下：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210925114214.png"alt="推导 1 的语法树" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210925114311.png"alt="推导 2 的语法树" /></p><p><span class="math display">\[\begin{align}&amp;推导 1：E \Rightarrow E + E \Rightarrow E * E + E \Rightarrow i * E+ E \Rightarrow i * i + E \Rightarrow i * i + i \\&amp;推导 2：E \Rightarrow E * E \Rightarrow i * E \Rightarrow i * E + E\Rightarrow i * i + E \Rightarrow i * i + i\end{align}\]</span></p><blockquote><p>何为最左推导、最右推导、规范推导、右句型、规范句型？</p></blockquote><p>如果在推导的任何一步 <span class="math inline">\(\alpha \Rightarrow\beta\)</span>，其中，<span class="math inline">\(\alpha\)</span>、<spanclass="math inline">\(\beta\)</span> 是句型，都是对 <spanclass="math inline">\(\alpha\)</span>中的最左非终结符进行替换，则称这种推导为<strong>最左推导</strong>。</p><p>如果在推导的任何一步 <span class="math inline">\(\alpha \Rightarrow\beta\)</span>，其中，<span class="math inline">\(\alpha\)</span>、<spanclass="math inline">\(\beta\)</span> 是句型，都是对 <spanclass="math inline">\(\alpha\)</span>中的最右非终结符进行替换，则称这种推导为<strong>最右推导</strong>。</p><p>在形式语言中，最右推导常被称为<strong>规范推导</strong>。</p><p>由规范推导所得的句型称为<strong>右句型</strong>或<strong>规范句型</strong>。</p><blockquote><p>何为短语、直接短语、和句柄？</p></blockquote><p>令 <span class="math inline">\(G\)</span> 是一个文法，<spanclass="math inline">\(S\)</span> 是文法的开始符号，<spanclass="math inline">\(\alpha \beta \delta\)</span> 是文法 <spanclass="math inline">\(G\)</span> 的一个句型。如果有 <spanclass="math inline">\(S \mathop{\Rightarrow}\limits^* \alpha A\delta\)</span> 且 <span class="math inline">\(A\mathop{\Rightarrow}\limits^+ \beta\)</span>，则称 <spanclass="math inline">\(\beta\)</span> 是句型 <spanclass="math inline">\(\alpha \beta \delta\)</span> 相对于非终结符 <spanclass="math inline">\(A\)</span> 的<strong>短语</strong>。</p><p>特别地，如果有 <span class="math inline">\(A \Rightarrow\beta\)</span>，则称 <span class="math inline">\(\beta\)</span> 是句型<span class="math inline">\(\alpha \beta \delta\)</span> 相对于规则<span class="math inline">\(A \rightarrow \beta\)</span>的<strong>直接短语</strong>（也称<strong>简单短语</strong>）。</p><p>一个右句型的直接短语称为该句型的<strong>句柄</strong>。句柄的概念只适用于右句型。</p><p><em>最后两个定理要再看看。</em></p><h1 id="第三章">第三章</h1><blockquote><p>何为正规文法？</p></blockquote><p>这个概念在第二章有讲过，这里再次摘录一下。</p><p>正规文法也称为 3 型文法 <span class="math inline">\(G = (V_N, V_T, S,P)\)</span>，其 <span class="math inline">\(P\)</span>中的每一条规则都有下述形式：<span class="math inline">\(A \rightarrowaB\)</span> 或 <span class="math inline">\(A \rightarrowa\)</span>，其中 <span class="math inline">\(A, B \in V_N, \; a \inV_T^*\)</span>。</p><p>正规文法所描述的是 <span class="math inline">\(V_T\)</span>上的正规集。</p><blockquote><p>何为正规集？</p></blockquote><p>按：本书中似乎没有正规集的概念。遂从《编译原理第二版》黑书摘录其定义如下</p><blockquote><p>可以用一个正则表达式定义的语言叫做<strong>正则集合（regularset）</strong>。</p></blockquote><p>黑书中的翻译是“正则集合”，其实和“正规集”是一个意思。</p><p>结合老师所讲，所谓正规集，可以和前面第二章的语言（<spanclass="math inline">\(L(G)\)</span>）这一概念结合来看，它们表达的东西其实是很类似的，因此，正规集所表达的意思就是正规式（正则表达式）所产生的所有字串的集合。</p><blockquote><p>何为正规式？</p></blockquote><p>正规式也称正则表达式，是表示正规集的工具。</p><p>(1). <span class="math inline">\(\varepsilon\)</span> 和 <spanclass="math inline">\(\varnothing\)</span> 都是 <spanclass="math inline">\(\Sigma\)</span>上的正规式，它们所表示的正规集分别为 <span class="math inline">\(\{\varepsilon \}\)</span> 和 <spanclass="math inline">\(\varnothing\)</span>。<br />(2). 任何 <span class="math inline">\(a \in \Sigma\)</span>，<spanclass="math inline">\(a\)</span> 是 <spanclass="math inline">\(\Sigma\)</span> 上的一个正规式，它所表示的正规集为<span class="math inline">\(\{ a \}\)</span>。<br />(3). 假定 <span class="math inline">\(e_1\)</span> 和 <spanclass="math inline">\(e_2\)</span> 都是 <spanclass="math inline">\(\Sigma\)</span>上的正规式，它们所表示的正规集分别为 <spanclass="math inline">\(L(e_1)\)</span> 和 <spanclass="math inline">\(L(e_2)\)</span>，那么，<spanclass="math inline">\((e_1)\)</span>、<spanclass="math inline">\(e_1|e_2\)</span>、<span class="math inline">\(e_1\cdot e_2\)</span> 和 <span class="math inline">\(e_1^*\)</span>也都是正规式，它们所表示的正规集分别为 <spanclass="math inline">\(L(e_1)\)</span>、<spanclass="math inline">\(L(e_1) \cup L(e_2)\)</span>、<spanclass="math inline">\(L(e_1)L(e_2)\)</span> 和 <spanclass="math inline">\((L(e_1))^*\)</span>。<br />(4). 仅由有限次使用上述 3 个步骤而定义的表达式才是 <spanclass="math inline">\(\Sigma\)</span>上的正规式，仅由这些正规式所表示的符号串的集合才是 <spanclass="math inline">\(\Sigma\)</span> 上的正规集。</p><p>其中的 <span class="math inline">\(|\)</span> 读为“或”；<spanclass="math inline">\(\cdot\)</span> 读为“连接”；<spanclass="math inline">\(*\)</span>读为“闭包”。在不致混淆时，括号可省去，但规定算符的优先顺序为先 <spanclass="math inline">\(*\)</span>，再 <spanclass="math inline">\(\cdot\)</span>，最后 <spanclass="math inline">\(|\)</span>。连接符 <spanclass="math inline">\(\cdot\)</span> 一般可省略不写。<spanclass="math inline">\(*\)</span>、<spanclass="math inline">\(\cdot\)</span>、和 <spanclass="math inline">\(|\)</span> 都是左结合的。</p><blockquote><p>正规文法转正规式的 3 条规则？</p></blockquote><ol type="1"><li><p>正规式：<span class="math inline">\(A \rightarrow xy\)</span></p><p>正规文法：</p><p><span class="math display">\[\begin{split}A &amp;\rightarrow xB \\B &amp;\rightarrow y\end{split}\]</span></p></li><li><p>正规式：<span class="math inline">\(A \rightarrowx^*y\)</span></p><p>正规文法：</p><p><span class="math display">\[\begin{split}A &amp;\rightarrow xB \\A &amp;\rightarrow y \\B &amp;\rightarrow xB \\B &amp;\rightarrow y\end{split}\]</span></p></li><li><p>正规式：<span class="math inline">\(A \rightarrowx|y\)</span></p><p>正规文法：</p><p><span class="math display">\[\begin{split}A &amp;\rightarrow x \\A &amp;\rightarrow y\end{split}\]</span></p></li></ol><p>课堂小问：</p><p><span class="math display">\[A \rightarrow xA \\A \rightarrow y\]</span></p><p><span class="math inline">\(x\)</span> 可能是多个 <spanclass="math inline">\(*\)</span> 闭包的组合。</p><p>疑问 P45？</p><p>(1). 例 3.3，表示无符号数的正规式似乎有点问题。</p><p>可以利用 <span class="math inline">\(\varepsilon A = A\)</span>来理解。那么，这个式子就是对的。</p><p>P45 <span class="math inline">\((a|b)^* = (a^* b^*)^*\)</span>如何理解？</p><p>可以将 <span class="math inline">\((a|b)^*\)</span> 展开成类似 <spanclass="math inline">\((a|b)(a|b) \cdots (a|b)\)</span>的形式，然后每一个括号内可以随便是 <spanclass="math inline">\(a\)</span> 或 <spanclass="math inline">\(b\)</span>。</p><blockquote><p>正规式的代数规律？</p></blockquote><p><span class="math display">\[\begin{split}&amp;(1) \; r|s = s|r \\&amp;(2) \; r|(s|t) = (r|s)|t \\&amp;(3) \; (rs)t = r(st) \\&amp;(4) \; r(s|t) = rs|rt, \; (s|t)r = sr|tr \\&amp;(5) \; \varepsilon r = r, \; r\varepsilon = r \\&amp;(6) \; r|r = r\end{split}\]</span></p><blockquote><p>将正规文法转换成正规式的 3 条规则？</p></blockquote><ol type="1"><li><p>规则一：</p><p><span class="math display">\[\begin{split}文法产生式：&amp;A \rightarrow xB \quad B \rightarrow y \\正规式：&amp;A = xy\end{split}\]</span></p></li><li><p>规则二：</p><p><span class="math display">\[\begin{split}文法产生式：&amp;A \rightarrow xA|y \\正规式：&amp;A = x^*y\end{split}\]</span></p></li><li><p>文法产生式：</p><p><span class="math display">\[\begin{split}文法产生式：&amp;A \rightarrow x \quad A \rightarrow y \\正规式：&amp;A = x|y\end{split}\]</span></p></li></ol><blockquote><p>何为确定的有穷自动机（<spanclass="math inline">\(\textrm{DFA}\)</span>）？</p></blockquote><p>一个确定的有穷自动机 <span class="math inline">\(M\)</span>是一个五元组：</p><p><span class="math display">\[M = (K, \Sigma, f, S, Z)\]</span></p><p>其中：</p><p>(1) <span class="math inline">\(K\)</span>是一个有穷集，它的每一个元素称为一个状态。<br />(2) <span class="math inline">\(\Sigma\)</span>是一个有穷字母表，它的每一个元素称为一个输入符号，所以也称 <spanclass="math inline">\(\Sigma\)</span> 为输入符号表。<br />(3) <span class="math inline">\(f\)</span> 是转换函数，是 <spanclass="math inline">\(K \times \Sigma \rightarrow K\)</span>上的映像。例如，<span class="math inline">\(f(k_i, a) = k_j\)</span><span class="math inline">\((k_i \in K, k_j \in K, a \in\Sigma)\)</span> 就意味着，当前状态为 <spanclass="math inline">\(k\)</span>、输入字符为 <spanclass="math inline">\(a\)</span> 时，将转换到下一状态 <spanclass="math inline">\(k_j\)</span>，把 <spanclass="math inline">\(k_j\)</span> 称作 <spanclass="math inline">\(k_i\)</span> 的一个后继状态。<br />(4) <span class="math inline">\(S \inK\)</span>，是唯一的一个初态。<br />(5) <span class="math inline">\(Z \subseteqK\)</span>，是一个终态集，终态也称可接受或结束状态。</p><p>一个 <span class="math inline">\(DFA\)</span>可以表示成一个状态图（或称状态转换图）。假定 <spanclass="math inline">\(DFA \; M\)</span> 含有 <spanclass="math inline">\(m\)</span> 个状态，<spanclass="math inline">\(n\)</span> 个输入符号，那么这个状态图含有 <spanclass="math inline">\(m\)</span> 个节点，每个节点最多有 <spanclass="math inline">\(n\)</span>个弧射出，整个图含有唯一一个初态节点和若干个终态节点，初态节点冠以“<spanclass="math inline">\(\Rightarrow\)</span>”或标以“<spanclass="math inline">\(-\)</span>”，终态节点终态节点用双圈表示或标以“<spanclass="math inline">\(+\)</span>”，若 <span class="math inline">\(f(k_i,a) = k_j\)</span>，则从状态节点 <span class="math inline">\(k_i\)</span>到状态节点 <span class="math inline">\(k_j\)</span> 画标记为 <spanclass="math inline">\(a\)</span> 的弧。</p><p>对于 <span class="math inline">\(\Sigma^*\)</span>中的任何符号串，若存在一条从初态节点到某一终态节点的道路，且这条路上所有弧的标记连接成的符号串等于<span class="math inline">\(t\)</span>，则称 <spanclass="math inline">\(t\)</span> 可为 <span class="math inline">\(DFA \;M\)</span> 所接受，若 <span class="math inline">\(M\)</span>的初态节点同时又是终态节点，则空字可为 <spanclass="math inline">\(M\)</span> <strong>所识别（接受）</strong>。<br />可换一种方式叙述如下：<br />若 $t ^*, $ <span class="math inline">\(f(S, t) = P\)</span>，其中 <spanclass="math inline">\(S\)</span> 为 <spanclass="math inline">\(\textrm{DFA M}\)</span> 的开始状态， <spanclass="math inline">\(P \in Z\)</span>，<spanclass="math inline">\(Z\)</span> 为终态集。则称 <spanclass="math inline">\(t\)</span> 可为 <spanclass="math inline">\(\textrm{DFA M}\)</span>所<strong>接受（识别）</strong>。</p><blockquote><p>何为不确定的有穷自动机（<spanclass="math inline">\(\textrm{NFA}\)</span>）？</p></blockquote><p>一个不确定的有穷自动机 <span class="math inline">\(M\)</span>是一个五元组：</p><p><span class="math display">\[M = (K, \Sigma, f, S, Z)\]</span></p><p>其中：</p><p>(1) <span class="math inline">\(K\)</span>是一个有穷集，它的每个元素称为一个状态。<br />(2) <span class="math inline">\(\Sigma\)</span>是一个有穷字母表，它的每个元素称为一个输入符号。<br />(3) <span class="math inline">\(f\)</span> 是一个从 <spanclass="math inline">\(K \times \Sigma^*\)</span> 到 <spanclass="math inline">\(K\)</span> 的全体子集的映像，即 <spanclass="math inline">\(K \times \Sigma^* \rightarrow 2^K\)</span>，其中<span class="math inline">\(2^K\)</span> 表示 <spanclass="math inline">\(K\)</span> 的幂集。<br />(4) <span class="math inline">\(S \subseteqK\)</span>，是一个非空初态集。<br />(5) <span class="math inline">\(Z \subseteqK\)</span>，是一个终态集。</p><p>一个含有 <span class="math inline">\(m\)</span> 个状态和 <spanclass="math inline">\(n\)</span> 个输入符号的 <spanclass="math inline">\(\textrm{NFA}\)</span>可表示成一张状态转换图，这张图含有 <spanclass="math inline">\(m\)</span>个状态结点，每个结点可射出若干条箭弧与别的节点相连接，每条弧用 <spanclass="math inline">\(\Sigma^*\)</span>中的一个串作标记，整个图至少含有一个初态结点以及若干个终态结点。</p><blockquote><p>何为状态集合 <span class="math inline">\(I\)</span> 的 <spanclass="math inline">\(\varepsilon\text{-闭包}\)</span>？</p></blockquote><p>状态集合 <span class="math inline">\(I\)</span> 的 <spanclass="math inline">\(\varepsilon\text{-闭包}\)</span>，表示为 <spanclass="math inline">\(\varepsilon\text{-closure(I)}\)</span>，定义为一个状态集，是状态集 <spanclass="math inline">\(I\)</span> 中任何状态 <spanclass="math inline">\(S\)</span> 经任意条 <spanclass="math inline">\(\varepsilon\)</span> 弧能到达的状态的集合。</p><blockquote><p>何为状态集合 <span class="math inline">\(I\)</span> 的 <spanclass="math inline">\(a\)</span> 弧转换？</p></blockquote><p>状态集合 <span class="math inline">\(I\)</span> 的 <spanclass="math inline">\(a\)</span> 弧转换，表示为 <spanclass="math inline">\(move(I, a)\)</span>，定义为状态集合 <spanclass="math inline">\(J\)</span>，其中 <spanclass="math inline">\(J\)</span> 是所有哪些可从 <spanclass="math inline">\(I\)</span> 中的某一状态经过一条 <spanclass="math inline">\(a\)</span> 弧而到达的状态的全体。</p><blockquote><p>如何将一个 <span class="math inline">\(\textrm{NFA}\)</span>转换为等价的 <span class="math inline">\(\textrm{DFA}\)</span>？</p></blockquote><p>这里介绍的方法就是<strong>子集法</strong>。</p><p>假设 <span class="math inline">\(\textrm{NFA N} =\)</span> <spanclass="math inline">\(\{K, \Sigma, f, K_0, K_t\}\)</span>按照如下方法构造一个 <span class="math inline">\(\textrm{DFA M}=\)</span> <span class="math inline">\((S, \Sigma, D, S_0, S_t)\)</span>使得 <span class="math inline">\(L(M) = L(N)\)</span>：</p><p>(1) <span class="math inline">\(M\)</span> 的状态集 <spanclass="math inline">\(S\)</span> 由 <spanclass="math inline">\(K\)</span> 的一些子集（构造 <spanclass="math inline">\(K\)</span> 的子集见下图）组成。用 <spanclass="math inline">\([S_1, S_2, ..., S_j]\)</span> 表示 <spanclass="math inline">\(S\)</span> 的元素，其中 <spanclass="math inline">\(S_1, S_2, ..., S_j\)</span> 是 <spanclass="math inline">\(K\)</span> 的状态。并且约定，状态 <spanclass="math inline">\(S_1, S_2, ..., S_j\)</span>是按某种规则排列的，即对于子集 <span class="math inline">\(S = \{ S_2,S_1 \}\)</span> 来说，<span class="math inline">\(S\)</span> 的状态就是<span class="math inline">\([S_1S_2]\)</span>。</p><p>疑问：P51 这里的 S 规则排列与状态究竟是什么？</p><blockquote><p>疑问：如果 <span class="math inline">\(K_0\)</span>中不止一个元素怎么办？</p></blockquote><p>解答：这个观察 <span class="math inline">\(\varepsilon\text{-闭包}\)</span> 的定义即可解决。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211002163758.png"alt="图 1：子集的构造算法" /></p><p>按：</p><p>(2) <span class="math inline">\(M\)</span> 和 <spanclass="math inline">\(N\)</span> 的输入字母表是相同的，即是 <spanclass="math inline">\(\Sigma\)</span>。<br />(3) 转换函数 <span class="math inline">\(D\)</span> 是这样定义的。</p><p><span class="math display">\[D([S_1, S_2, ..., S_j], a) = [R_1, R_2, ..., R_j]\]</span></p><p>其中 $(move([S_1, S_2, $ $... S_j], a)) = $ <spanclass="math inline">\([R_1, R_2, ..., R_j]\)</span>。<br />(4) $S_0 = $ <span class="math inline">\(\varepsilon\text{-closure}(K_0)\)</span> 为 <span class="math inline">\(M\)</span>的开始状态。<br />(5) $S_t = $ <span class="math inline">\(\{ [S_j, S_k,...,S_e]\}\)</span>，其中 <span class="math inline">\([S_j,S_k,...,S_e]\)</span> <span class="math inline">\(\in S\)</span> 且<span class="math inline">\(\{ S_j, S_k,...,S_e \}\)</span> <spanclass="math inline">\(\cap \; K_t \neq \varnothing \}\)</span></p><p>图 1 是构造 <span class="math inline">\(\text{NFA } N\)</span> 的状态<span class="math inline">\(K\)</span>的子集的算法。假定所构造的子集族为 <spanclass="math inline">\(C\)</span>，即 <span class="math inline">\(C =(T_1, T_2,...,T_i)\)</span>，其中 <span class="math inline">\(T_1,T_2,...,T_i\)</span> 为状态 <span class="math inline">\(K\)</span>的子集。</p><p>这个概念必须要用具体的例子辅助理解才能够最终掌握，所以，这里就举一个例子：应用上面的算法对下面的图2 的 <span class="math inline">\(\text{NFA } N\)</span> 构造子集。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211004145119.png"alt="图 2" /></p><p>步骤如下：</p><p>(1) 首先计算 <span class="math inline">\(\varepsilon\text{-closure(0)}\)</span>，令 <span class="math inline">\(T_0 =\varepsilon \text{-closure(0)}\)</span> <spanclass="math inline">\(=\{0, 1, 2, 4, 7\}\)</span>，<spanclass="math inline">\(T_0\)</span> 未被标记，它现在是子集族 <spanclass="math inline">\(C\)</span> 的唯一成员。<br />(2) 标记 <span class="math inline">\(T_0\)</span>；计算 $move(T_0, a) =$ <span class="math inline">\(\{ 3, 8 \}\)</span>。令 $T_1 = $ <spanclass="math inline">\(\varepsilon \text{-closure} (move(T_0,a))\)</span> <span class="math inline">\(= \{1, 2, 3, 4, 6, 7,8\}\)</span>，将 <span class="math inline">\(T_1\)</span> 加入 <spanclass="math inline">\(C\)</span> 中，<spanclass="math inline">\(T_1\)</span> 未被标记。<br />计算 $move(T_0, b) = $ <span class="math inline">\(\{ 5 \}\)</span>。令<span class="math inline">\(T_2 = \varepsilon\)</span> <spanclass="math inline">\(\text{-closure} (move(T_0, b))\)</span> <spanclass="math inline">\(= \{ 1, 2, 4, 5, 6, 7 \}\)</span>，将 <spanclass="math inline">\(T_2\)</span> 加入 <spanclass="math inline">\(C\)</span> 中，它未被标记。<br />(3) 标记 <span class="math inline">\(T_1\)</span>；计算 $move(T_1, a) =$ <span class="math inline">\(\{ 3, 8 \}\)</span>。计算 <spanclass="math inline">\(\varepsilon \text{-closure} (move(T_1,a))\)</span>，结果为 <span class="math inline">\(\{ 1, 2, 3, 4, 6, 7, 8\}\)</span>，即 <span class="math inline">\(T_1\)</span>，<spanclass="math inline">\(T_1\)</span> 已在 <spanclass="math inline">\(C\)</span> 中。<br />计算 $move(T_1, b) = $ <span class="math inline">\(\{ 5, 9 \}\)</span>。计算 <span class="math inline">\(\varepsilon \text{-closure} (move(T_1,b))\)</span>，结果为 <span class="math inline">\(\{ 1, 2, 4, 5, 6, 7, 9\}\)</span>，令其为 <span class="math inline">\(T_3\)</span>，加至 <spanclass="math inline">\(C\)</span> 中，它未被标记。<br />(4) （从这里开始，就不单独计算 <span class="math inline">\(move\)</span>的结果了）标记 <span class="math inline">\(T_2\)</span>，计算 <spanclass="math inline">\(\varepsilon \text{-closure} (move(T_2,a))\)</span>，结果为 <span class="math inline">\(\{1, 2, 3, 4, 6, 7,8\}\)</span>，即 <span class="math inline">\(T_1\)</span>，<spanclass="math inline">\(T_1\)</span> 已在 <spanclass="math inline">\(C\)</span> 中。<br />计算 <span class="math inline">\(\varepsilon \text{-closure} (move(T_2,b))\)</span>，结果为 <span class="math inline">\(\{1, 2, 4, 5, 6,7\}\)</span>，即 <span class="math inline">\(T_2\)</span>，<spanclass="math inline">\(T_2\)</span> 已在 <spanclass="math inline">\(C\)</span> 中。<br />(5) 标记 <span class="math inline">\(T_3\)</span>，计算 <spanclass="math inline">\(\varepsilon \text{-closure} (move(T_3,a))\)</span>，结果为 <span class="math inline">\(\{1, 2, 3, 4, 6, 7,8\}\)</span>，即 <span class="math inline">\(T_1\)</span>。<br />计算 <span class="math inline">\(\varepsilon \text{-closure} (move(T_3,b))\)</span>，结果为 <span class="math inline">\(\{1, 2, 4, 5, 6, 7,10\}\)</span>，令其为 <span class="math inline">\(T_4\)</span>，加入<span class="math inline">\(C\)</span> 中，<spanclass="math inline">\(T_4\)</span> 未被标记。<br />(6) 标记 <span class="math inline">\(T_4\)</span>，计算 <spanclass="math inline">\(\varepsilon \text{-closure} (move(T_4,a))\)</span>，结果为 <span class="math inline">\(\{1, 2, 3, 4, 6, 7,8\}\)</span>，即 T_1$$。<br />计算 <span class="math inline">\(\varepsilon \text{-closure} (move(T_4,b))\)</span>，结果为 <span class="math inline">\(\{1, 2, 4, 5, 6,7\}\)</span>，即 <span class="math inline">\(T_2\)</span>。<br />至此，算法终止，共构造了 5 个子集：</p><p><span class="math display">\[\begin{split}T_0 &amp;= \{0, 1, 2, 4, 7\} \\T_1 &amp;= \{1, 2, 3, 4, 6, 7, 8\} \\T_2 &amp;= \{ 1, 2, 4, 5, 6, 7 \} \\T_3 &amp;= \{ 1, 2, 4, 5, 6, 7, 9 \} \\T_4 &amp;= \{1, 2, 4, 5, 6, 7, 10\}\end{split}\]</span></p><p>那么，图 2 的 <span class="math inline">\(\text{NFA } N\)</span>构造的 <span class="math inline">\(\text{DFA } M\)</span> 如下：</p><p><span class="math display">\[\begin{split}(1)\; &amp;S = \{[T_0], [T_1], [T_2], [T_3], [T_4]\} \\(2)\; &amp;\Sigma = \{a, b\} \\(3)\; &amp;D([T_0], a) = [T_1] \\   \; &amp;D([T_0], b) = [T_2] \\   \; &amp;D([T_1], a) = [T_1] \\   \; &amp;D([T_1], b) = [T_3] \\   \; &amp;D([T_2], a) = [T_1] \\   \; &amp;D([T_2], b) = [T_2] \\   \; &amp;D([T_3], a) = [T_1] \\   \; &amp;D([T_3], b) = [T_4] \\   \; &amp;D([T_4], a) = [T_1] \\   \; &amp;D([T_4], b) = [T_2] \\(4)\; &amp;S_0 = [T_0] \\(5)\; &amp;S_t = [T_4]\end{split}\]</span></p><blockquote><p>何为有穷自动机的无用状态？</p></blockquote><p>所谓有穷自动机的无用状态，是指这样的状态：从该自动机的开始状态出发，任何输入串也不能到达的那个状态，或者从这个状态没有通路到达终态。</p><blockquote><p>在有穷自动机中，两个状态 <span class="math inline">\(s\)</span> 和<span class="math inline">\(t\)</span> 等价的条件？</p></blockquote><ul><li>一致性条件——状态 <span class="math inline">\(s\)</span> 和 <spanclass="math inline">\(t\)</span>必须同时为可接受状态（终态）或不可接受状态（非终态）。</li><li>蔓延性条件——对于所有输入符号，状态 <spanclass="math inline">\(s\)</span> 和状态 <spanclass="math inline">\(t\)</span> 必须转换到等价的状态里。</li></ul><blockquote><p>正规式和有穷自动机的等价性如何说明？</p></blockquote><p>可由以下两点说明：</p><ul><li>对于 <span class="math inline">\(\Sigma\)</span> 上的 <spanclass="math inline">\(\textrm{NFA M}\)</span>，可以构造一个 <spanclass="math inline">\(\Sigma\)</span> 上的正规式，使得 <spanclass="math inline">\(L(r) = L(M)\)</span>。</li><li>对于 <span class="math inline">\(\Sigma\)</span> 上的每个正规式<span class="math inline">\(r\)</span>，可以构造一个 <spanclass="math inline">\(\Sigma\)</span> 上的 <spanclass="math inline">\(\textrm{NFA M}\)</span>，使得 <spanclass="math inline">\(L(M) = L(r)\)</span>。</li></ul><blockquote><p>如何为 <span class="math inline">\(\Sigma\)</span> 上的 <spanclass="math inline">\(\textrm{NFA M}\)</span> 构造相应的正规式 <spanclass="math inline">\(r\)</span>？</p></blockquote><p>第 1 步，在 <span class="math inline">\(M\)</span>的状态转换图上加进两个结点，一个为 <spanclass="math inline">\(x\)</span> 结点，一个为 <spanclass="math inline">\(y\)</span> 结点。从 <spanclass="math inline">\(x\)</span> 结点用 <spanclass="math inline">\(\varepsilon\)</span> 弧连接到 <spanclass="math inline">\(M\)</span> 的所有初态结点，从 <spanclass="math inline">\(M\)</span> 的所有终态结点用 <spanclass="math inline">\(\varepsilon\)</span> 弧连接到 <spanclass="math inline">\(y\)</span> 结点。形成一个与 <spanclass="math inline">\(M\)</span> 等价的 <spanclass="math inline">\(M^{&#39;}\)</span>，<spanclass="math inline">\(M^{&#39;}\)</span> 只有一个初态 <spanclass="math inline">\(x\)</span> 和一个终态 <spanclass="math inline">\(y\)</span>。<br />第 2 步，逐步消去 <span class="math inline">\(M^{&#39;}\)</span>中的所有结点，直至只剩下 <span class="math inline">\(x\)</span> 和 <spanclass="math inline">\(y\)</span>结点。在消去的过程中，逐步用正规式来标记弧。其消去的规则如下：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/draft06.drawio.png" /></p><p>最后 <span class="math inline">\(x\)</span> 和 <spanclass="math inline">\(y\)</span> 结点间的弧上的标记则为所求的正规式<span class="math inline">\(r\)</span>。</p><blockquote><p>如何从 <span class="math inline">\(\Sigma\)</span> 上的一个正规式<span class="math inline">\(r\)</span> 构造一个 <spanclass="math inline">\(\textrm{NFA M}\)</span>，使得 <spanclass="math inline">\(L(M) = L(r)\)</span>？</p></blockquote><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/draft07.drawio.png" /></p><blockquote><p>如何从正规文法 <span class="math inline">\(G\)</span>直接构造一个有穷自动机 <span class="math inline">\(\text{NFA }M\)</span>，使得 <span class="math inline">\(L(M) = L(G)\)</span>？</p></blockquote><p>(1) <span class="math inline">\(M\)</span> 的字母表与 <spanclass="math inline">\(G\)</span> 的终结符集相同。<br />(2) 为 <span class="math inline">\(G\)</span> 中的每个非终结符生成 <spanclass="math inline">\(M\)</span> 的一个状态（不妨取成相同的名字），<spanclass="math inline">\(G\)</span> 的开始符 <spanclass="math inline">\(S\)</span> 是 <spanclass="math inline">\(M\)</span> 的开始状态 <spanclass="math inline">\(S\)</span>。<br />(3) 增加一个新状态 <span class="math inline">\(Z\)</span>，作为 <spanclass="math inline">\(M\)</span> 的终态。<br />(4) 对 <span class="math inline">\(G\)</span> 中的形如 <spanclass="math inline">\(A \rightarrow tB\)</span> 的规则（其中 <spanclass="math inline">\(t\)</span> 为终结符或 <spanclass="math inline">\(\varepsilon\)</span>，<spanclass="math inline">\(A\)</span> 和 <spanclass="math inline">\(B\)</span> 为非终结符的产生式），构造 <spanclass="math inline">\(M\)</span> 的一个转换函数 <spanclass="math inline">\(f(A, t) = B\)</span>。<br />(5) 对 <span class="math inline">\(G\)</span> 中形如 <spanclass="math inline">\(A \rightarrow t\)</span> 的产生式，构造 <spanclass="math inline">\(M\)</span> 的一个转换函数 <spanclass="math inline">\(f(A, t) = Z\)</span>。</p><h1 id="第四章">第四章</h1><blockquote><p>何为确定的自顶向下分析方法？</p></blockquote><p>确定的自顶向下分析方法，是从文法的开始符号出发，考虑如何根据当前的输入符号（单词符号）唯一地确定选用哪个产生式替换相应非终结符以往下推导，或如何构造一棵相应的语法树。</p><blockquote><p>如何理解 <span class="math inline">\(\text{FIRST()}\)</span>？</p></blockquote><p>设 <span class="math inline">\(G = (V_T, V_N, P, S)\)</span>是上下文无关文法。</p><p><span class="math display">\[\text{FIRST}(\alpha) = \{a|\alpha \stackrel{*}{\Rightarrow} \alpha\beta, \quad a \in V_T, \alpha, \beta \in V^*\}\]</span></p><p>若 <span class="math inline">\(\alpha \stackrel{*}{\Rightarrow}\epsilon\)</span>，则规定 <span class="math inline">\(\epsilon \in\text{FIRST}(\alpha)\)</span>。称 <spanclass="math inline">\(\text{FIRST}(\alpha)\)</span> 为 <spanclass="math inline">\(\alpha\)</span>的<strong>开始符号集</strong>或<strong>首符号集</strong>。</p><blockquote><p>如何理解 <span class="math inline">\(\text{FOLLOW()}\)</span>？</p></blockquote><p>设 <span class="math inline">\(G = (V_T, V_N, P, S)\)</span>是上下文无关文法，<span class="math inline">\(A \in V_N\)</span>，<spanclass="math inline">\(S\)</span> 是开始符号。</p><p><span class="math display">\[\text{FOLLOW}(A) = \{a|S \stackrel{*}{\Rightarrow} \mu A \beta \; 且 \;a \in V_T, a \in \text{FIRST}(\beta), \mu \in V_T^*, \beta \in V^{+}\}\]</span></p><p>若 <span class="math inline">\(S \stackrel{*}{\Rightarrow} \mu A\beta\)</span>，且 <span class="math inline">\(\beta\stackrel{*}{\Rightarrow} \epsilon\)</span>，则 <spanclass="math inline">\(＃ \in \text{FOLLOW}(A)\)</span>。</p><p><span class="math display">\[\text{FOLLOW}(A) = \{a|S \stackrel{*}{\Rightarrow} \cdots Aa \cdots, \;a \in V_T\}\]</span></p><p>若有 <span class="math inline">\(S \stackrel{*}{\Rightarrow} \cdotsA\)</span>，则规定 <span class="math inline">\(＃ \in\text{FOLLOW}(A)\)</span>。</p><p>这里用 <span class="math inline">\(＃\)</span>作为输入串的结束符，也称为输入串符号。</p><p>因此当文法中含有形如</p><p><span class="math display">\[\begin{split}A \rightarrow \alpha \\A \rightarrow \beta\end{split}\]</span></p><p>的产生式时，其中 <span class="math inline">\(A \in V_N, \alpha、\beta\in V^*\)</span>，若 <span class="math inline">\(\alpha\)</span> 和<span class="math inline">\(\beta\)</span> 不能同时推导出空，假定 <spanclass="math inline">\(\alpha \stackrel{*}{\nRightarrow}\epsilon\)</span> <span class="math inline">\(, \beta\stackrel{*}{\Rightarrow} \epsilon\)</span>，则当 <spanclass="math inline">\(\text{FIRST}(\alpha)\)</span> <spanclass="math inline">\(\cap\)</span> <spanclass="math inline">\((\text{FIRST}(\beta)\)</span> <spanclass="math inline">\(\cup\)</span> <spanclass="math inline">\(\text{FOLLOW}(A)) = \varnothing\)</span>时，对于非终结符 <span class="math inline">\(A\)</span>的替换仍可唯一地确定候选。</p><blockquote><p>如何理解 <span class="math inline">\(\text{SELECT()}\)</span>？</p></blockquote><p>给定上下文无关文法的产生式 <span class="math inline">\(A \rightarrow\alpha\)</span> $, $ <span class="math inline">\(A \in V_N, \alpha \inV^*\)</span>，</p><ul><li>若 <span class="math inline">\(\alpha \stackrel{*}{\nRightarrow}\varepsilon\)</span>，则 <span class="math inline">\(\text{SELECT}(A\rightarrow \alpha)\)</span> <span class="math inline">\(=\)</span><span class="math inline">\(\text{FIRST}(\alpha)\)</span>。</li><li>若 <span class="math inline">\(\alpha \stackrel{*}{\Rightarrow}\varepsilon\)</span>，则 <span class="math inline">\(\text{SELECT}(A\rightarrow \alpha)\)</span> <span class="math inline">\(=\)</span><span class="math inline">\((\text{FIRST}(\alpha) -\{\varepsilon\})\)</span> <span class="math inline">\(\cup\)</span><span class="math inline">\(\text{FOLLOW}(A)\)</span>。</li></ul><blockquote><p>何为 <span class="math inline">\(\text{LL}(1)\)</span> 文法？</p></blockquote><p>一个上下文无关文法是 <spanclass="math inline">\(\text{LL}(1)\)</span> 的充分必要条件是,</p><p>对每个非终结符 <span class="math inline">\(A\)</span>的两个不同产生式，<span class="math inline">\(A \rightarrow\alpha\)</span> <span class="math inline">\(,\)</span> <spanclass="math inline">\(A \rightarrow \beta\)</span>，满足</p><p><span class="math display">\[\text{SELECT}(A \rightarrow \alpha) \cap \text{SELECT}(A \rightarrow\beta) = \varnothing\]</span></p><p>其中 <span class="math inline">\(\alpha、\beta\)</span> 不同时能<span class="math inline">\(\stackrel{*}{\Rightarrow}\epsilon\)</span>。</p><p><span class="math inline">\(\text{LL}(1)\)</span> 的含义是：第 1 个<span class="math inline">\(\text{L}\)</span>表明自顶向下分析是从左向右扫描输入串，第 2 个 <spanclass="math inline">\(\text{L}\)</span> 表明分析过程中将用最左推导，1表明只需要向右看一个符号便可决定如何推导，即选择哪个产生式（规则）进行推导。</p><blockquote><p>如何判别某文法是否是 <spanclass="math inline">\(\text{LL}(1)\)</span> 文法？</p></blockquote><p>首先计算 <span class="math inline">\(\text{FIRST}\)</span>、<spanclass="math inline">\(\text{FOLLOW}\)</span>、<spanclass="math inline">\(\text{SELECT}\)</span>集合，然后根据定义判别文法是否是 <spanclass="math inline">\(\text{LL}(1)\)</span> 文法。</p><blockquote><p>如何计算一个文法符号 <span class="math inline">\(X \in V\)</span> 的<span class="math inline">\(\text{FIRST}\)</span> 集 <spanclass="math inline">\(\text{FIRST}(X)\)</span>？</p></blockquote><p>① 若 <span class="math inline">\(X \in V_T\)</span>，则 <spanclass="math inline">\(\text{FIRST}(X) = \{X\}\)</span>。<br />② 若 <span class="math inline">\(X \in V_N\)</span>，且有产生式 <spanclass="math inline">\(X \rightarrow a \cdots\)</span> <spanclass="math inline">\(,\)</span> <span class="math inline">\(a \inV_T\)</span>，则 <span class="math inline">\(a \in\text{FIRST}(X)\)</span>。<br />③ 若 <span class="math inline">\(X \in V_N\)</span>，<spanclass="math inline">\(X \rightarrow \varepsilon\)</span>，则 <spanclass="math inline">\(\varepsilon \in \text{FIRST}(X)\)</span>。<br />④ 若 <span class="math inline">\(X, Y_1, Y_2,\)</span> <spanclass="math inline">\(\cdots\)</span> <span class="math inline">\(, Y_n\in V_N\)</span>，而有产生式 <span class="math inline">\(X \rightarrowY_1Y_2 \cdots Y_n\)</span>。当 <span class="math inline">\(Y_1, Y_2,\cdots, Y_{i - 1}\)</span> <spanclass="math inline">\(\stackrel{*}{\Rightarrow} \varepsilon\)</span>时（其中 <span class="math inline">\(1 \leqslant i \leqslantn\)</span>），则 <span class="math inline">\(\text{FIRST}(Y_1) -\{\varepsilon\},\)</span> <span class="math inline">\(\text{FIRST}(Y_2)- \{\varepsilon\},\)</span> <span class="math inline">\(\cdots\)</span><span class="math inline">\(, \text{FIRST}(Y_{i - 1}) -\{\varepsilon\},\)</span> <spanclass="math inline">\(\text{FIRST}(Y_i)\)</span> 都包含在 <spanclass="math inline">\(\text{FIRST}(X)\)</span> 中，即</p><p><span class="math display">\[\text{FIRST}(X) = (\text{FIRST}(Y_1) \cup \text{FIRST}(Y_2) \cdots \cup\text{FIRST}(Y_i)) - \{\varepsilon\}\]</span></p><p>⑤ 当 ④ 中所有 <span class="math inline">\(Y_i\stackrel{*}{\Rightarrow} \varepsilon\)</span> <spanclass="math inline">\(,\)</span> <span class="math inline">\((i = 1, 2,\cdots, n)\)</span>，则</p><p><span class="math display">\[\text{FIRST}(X) = (\text{FIRST}(Y_1) \cup \text{FIRST}(Y_2) \cdots \cup\text{FIRST}(Y_n)) \cup \{\varepsilon\}\]</span></p><p>反复使用上述 ②~⑤ 步，直到每个符号的 <spanclass="math inline">\(\text{FIRST}\)</span> 集合不再增大为止。</p><blockquote><p>如何计算一个符号串的 <spanclass="math inline">\(\text{FIRST}\)</span> 集合？</p></blockquote><p>若符号串 <span class="math inline">\(\alpha \in V^*\)</span> <spanclass="math inline">\(,\)</span> <span class="math inline">\(\alpha =X_1 X_2 \cdots X_n\)</span>，当 <span class="math inline">\(X_1\)</span>不能 <span class="math inline">\(\stackrel{*}{\Rightarrow}\varepsilon\)</span>，则置 <spanclass="math inline">\(\text{FIRST}(\alpha) =\text{FIRST}(X_1)\)</span>。</p><p>若对任何 <span class="math inline">\(j(1 \leqslant j \leqslant i -1,\)</span> <span class="math inline">\(2 \leqslant i \leqslantn)\)</span> <span class="math inline">\(,\)</span> <spanclass="math inline">\(\varepsilon \in \text{FIRST}(X_j)\)</span> <spanclass="math inline">\(,\)</span> <span class="math inline">\(\varepsilon\notin \text{FIRST}(X_i)\)</span>，则</p><p><span class="math display">\[\text{FIRST}(\alpha) = \bigcup_{j = 1}^{i - 1}(\text{FIRST}(X_j) -\{\varepsilon\}) \cup \text{FIRST}(X_i)\]</span></p><p>当对任何 <span class="math inline">\(j(1 \leqslant j \leqslantn)\)</span>，<span class="math inline">\(\text{FIRST}(X_j)\)</span>都含有 <span class="math inline">\(\varepsilon\)</span> 时，则</p><p><span class="math display">\[\text{FIRST}(\alpha) = \bigcup_{j = 1}^{n}(\text{FIRST}(X_j) -\{\varepsilon\}) \cup \{\varepsilon\}\]</span></p><p>按：这里最后一个公式书上的写法似乎有点问题。</p><blockquote><p>如何计算 <span class="math inline">\(\text{FOLLOW}\)</span> 集？</p></blockquote><p>对文法中的每一个 <span class="math inline">\(A \inV_N\)</span>，根据定义计算 <spanclass="math inline">\(\text{FOLLOW}(A)\)</span>。</p><p>① 设 <span class="math inline">\(S\)</span> 为文法的开始符号，把<span class="math inline">\(\{＃\}\)</span> 加入 <spanclass="math inline">\(\text{FOLLOW}(S)\)</span>中（这里＃为句子括号）。</p><p>按：＃似为句子结束符号。</p><p>② 若 <span class="math inline">\(A \rightarrow \alpha B\beta\)</span> 是一个产生式，则把 <spanclass="math inline">\(\text{FIRST}(\beta)\)</span> 的非空元素加入 <spanclass="math inline">\(\text{FOLLOW}(B)\)</span> 中。<br />如果 <span class="math inline">\(\beta \stackrel{*}{\Rightarrow}\varepsilon\)</span>，则把 <spanclass="math inline">\(\text{FOLLOW}(A)\)</span> 也加入 <spanclass="math inline">\(\text{FOLLOW}(B)\)</span> 中，因为当有形如</p><p><span class="math display">\[\begin{split}D &amp;\rightarrow \alpha_{1} A \beta_{1} \\A &amp;\rightarrow \alpha B \beta\end{split}\]</span></p><p>的产生式时，<span class="math inline">\(A, B, D \inV_N\)</span>，<span class="math inline">\(\alpha, \alpha_{1}, \beta,\beta_{1} \in V^*\)</span>，在推导过程中可能出现如下的句型序列：</p><p><span class="math display">\[S \stackrel{*}{\Rightarrow} \cdots \alpha_{1} A \beta_{1} \cdots\Rightarrow \alpha_{1} \alpha B \beta \beta{1} \cdots \Rightarrow \cdots\alpha_{1} \alpha B \beta_{1} \cdots\]</span></p><p>因此，有 <span class="math inline">\(\text{FOLLOW}(A)\)</span> <spanclass="math inline">\(\subseteq\)</span> <spanclass="math inline">\(\text{FOLLOW}(B)\)</span>。</p><p>③ 反复使用 ② 直到每个非终结符的 <spanclass="math inline">\(\text{FOLLOW}\)</span> 集不再增大为止。</p><blockquote><p>如何计算某一文法中的每一个产生式的 <spanclass="math inline">\(\text{SELECT}\)</span> 集？</p></blockquote><p>直接根据定义来判断：</p><p>给定上下文无关文法的产生式 <span class="math inline">\(A \rightarrow\alpha\)</span> $, $ <span class="math inline">\(A \in V_N, \alpha \inV^*\)</span>，</p><ul><li>若 <span class="math inline">\(\alpha \stackrel{*}{\nRightarrow}\varepsilon\)</span>，则 <span class="math inline">\(\text{SELECT}(A\rightarrow \alpha)\)</span> <span class="math inline">\(=\)</span><span class="math inline">\(\text{FIRST}(\alpha)\)</span>。</li><li>若 <span class="math inline">\(\alpha \stackrel{*}{\Rightarrow}\varepsilon\)</span>，则 <span class="math inline">\(\text{SELECT}(A\rightarrow \alpha)\)</span> <span class="math inline">\(=\)</span><span class="math inline">\((\text{FIRST}(\alpha) -\{\varepsilon\})\)</span> <span class="math inline">\(\cup\)</span><span class="math inline">\(\text{FOLLOW}(A)\)</span>。</li></ul><blockquote></blockquote><hr /><p>附：哈工大慕课陈鄞对于 <spanclass="math inline">\(\text{FIRST}\)</span>、<spanclass="math inline">\(\text{FOLLOW}\)</span> 和 <spanclass="math inline">\(\text{SELECT}\)</span> 的理解。</p><blockquote><p>对 <span class="math inline">\(\text{FIRST}\)</span> 的理解？</p></blockquote><p><img src="https://i.imgur.com/s8YqiDv.png" /></p><p><img src="https://i.imgur.com/VmrkYxH.png" /></p><p><img src="https://i.imgur.com/hgG2AXE.png" /></p><blockquote><p>对 <span class="math inline">\(\text{FOLLOW}\)</span> 的理解？</p></blockquote><p><img src="https://i.imgur.com/BWChrVU.png" /></p><p><img src="https://i.imgur.com/T9YnsK5.png" /></p><blockquote><p>一个 <span class="math inline">\(\text{SELECT}\)</span> 的例子。</p></blockquote><p><img src="https://i.imgur.com/OQut1Ok.png" /></p><blockquote><p>一张预测分析表。</p></blockquote><p><img src="https://i.imgur.com/rqhlpyx.png" /></p>]]></content>
    
    
    <categories>
      
      <category>编译原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编译原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决 Hexo 在生成博客过程中的 Accessing non-existent property xxx of module exports inside circular dependency 问题</title>
    <link href="/2021/09/22/%E8%A7%A3%E5%86%B3-Hexo-%E5%9C%A8%E7%94%9F%E6%88%90%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84-Accessing-non-existent-property-xxx-of-module-exports-inside-circular-dependency-%E9%97%AE%E9%A2%98/"/>
    <url>/2021/09/22/%E8%A7%A3%E5%86%B3-Hexo-%E5%9C%A8%E7%94%9F%E6%88%90%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84-Accessing-non-existent-property-xxx-of-module-exports-inside-circular-dependency-%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>建议直接阅读这一篇博客：<ahref="https://www.haoyizebo.com/posts/710984d0/"class="uri">https://www.haoyizebo.com/posts/710984d0/</a></p><p>我在这里仅仅是作一个备份。</p><p>对于我来说，有用的两个步骤是：</p><ol type="1"><li>执行以下两个命令</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> remove hexo-renderer-stylus<span class="token function">yarn</span> <span class="token function">add</span> hexo-renderer-stylus<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><ol start="2" type="1"><li>到 Hexo 博客的根目录下，找到 <code>package.json</code>文件，添加如下部分：</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"resolutions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token property">"stylus"</span><span class="token operator">:</span> <span class="token string">"^0.54.8"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210922230847.png"alt="图片示意" /></p><p>然后重新生成部署博客即可。</p><p>注意，如果电脑中原来没有yarn，那么，可以在命令行通过以下命令安装：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--global</span> <span class="token function">yarn</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译原理作业一</title>
    <link href="/2021/09/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E4%BD%9C%E4%B8%9A%E4%B8%80/"/>
    <url>/2021/09/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E4%BD%9C%E4%B8%9A%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h2 id="第一章课后作业">1、第一章课后作业</h2><p>1、解释下列术语：</p><p>编译程序，源程序，目标程序，编译程序的前端、后端和遍</p><p>解：</p><p>(1)编译程序：从功能上看，一个编译程序就是一个语言翻译程序。语言翻译程序把一种语言（称作源语言）书写的程序翻译成另一种语言（称作目标语言）的等价程序。<br />(2) 源程序：源语言编写的程序。<br />(3) 目标程序：目标语言书写的程序。<br />(4)编译程序的前端：将与仅依赖于源程序而与目标机器（硬件）无关的阶段组合成前端。<br />(5) 后端：将与目标机器（硬件）相关的阶段组合成后端。<br />(6)遍：“遍”也称为“趟”。所谓“一遍”，就是对源程序或等价的中间程序从头到尾扫视一次，并完成编译任务之过程。</p><p>2、编译程序有哪些主要构成成分？各自的主要功能是什么？</p><p>解：</p><p>一个典型的编译程序通常包含 8个组成部分，它们是：词法分析程序、语法分析程序、语义分析程序、中间代码生成程序、代码优化程序、目标代码生成程序、表格管理程序和出错处理程序。</p><p>各自的功能如下：</p><ul><li>词法分析程序：从左至右扫描字符流的源程序、分解构成源程序的字符串，识别出一个个的单词。</li><li>语法分析程序：层次分析。依据源程序的语法规则把源程序的单词序列组成语法短语（表示成语法树）。</li><li>语义分析程序：审查程序有无语义错误，为代码生成阶段收集类型信息。</li><li>中间代码生成程序：按照语义规则，将语法分析程序分析的结果保存到各类语义信息表中。</li><li>代码优化程序：改进中间代码，以便生成更好的目标代码。</li><li>目标代码生成：以源程序的中间表示形式作为输入，并把它映射到目标语言。</li><li>表格管理程序：记录源程序中使用的变量的名字，并收集和每个名字的各种属性有关的信息。</li><li>出错处理程序：报告出错信息、排错和恢复编译工作。</li></ul><p>3、什么是解释程序？它与编译程序的主要不同是什么？</p><p>解释程序是解释、执行高级语言源程序的程序。</p><p>它与编译程序的主要不同是它并部通过翻译的方式生成目标程序。从用户的角度看，解释器直接利用用户提供的输入执行源程序中指定的操作。</p><p>4、对下列错误信息，请指出可能是编译的哪个阶段（词法分析、语法分析、语义分析、代码生成）报告的。</p><p>(1) else 没有匹配的 if。<br />(2) 数组下标越界。<br />(3) 使用的函数没有定义。<br />(4) 在数中出现非数字字符。</p><p>解：</p><p>(1) 语法分析<br />(2) 语义分析<br />(3) 语法分析<br />(4) 词法分析</p><h2 id="课堂作业">2、课堂作业</h2><p>试设计一文法 <span class="math inline">\(G\)</span>，使得 <spanclass="math inline">\(L(G)\)</span> 为能被 <spanclass="math inline">\(3\)</span> 整除的整数集。</p><p>解：</p><p>首先，将 0-9 这十个数字分成三组。</p><ul><li>0，3，6，9：可以被 3 整除</li><li>1，4，7：被 3 整除余 1</li><li>2，5，8：被 3 整除余 2</li></ul><p>文法表达式为：<span class="math inline">\(G = (V_N, V_T, P,S)\)</span>，其中</p><p><span class="math display">\[\begin{split}V_N = \{ S, A, B \} \\V_T = \{ 0, 1, 2, 3, 4, 5, 6, 7, 8 9 \}\end{split}\]</span></p><p>然后，分类讨论。</p><ol type="1"><li><p>对开始符 <span class="math inline">\(S\)</span></p><ul><li>若和 <span class="math inline">\(0, 3, 6, 9\)</span> 组合，有 <spanclass="math inline">\(S \rightarrow (0|3|6|9)S|\varepsilon\)</span></li><li>若和 <span class="math inline">\(1, 4, 7\)</span> 组合，有 <spanclass="math inline">\(S \rightarrow (1, 4, 7)A\)</span></li><li>若和 <span class="math inline">\(2, 5, 8\)</span> 组合，有 <spanclass="math inline">\(S \rightarrow (2|5|8)B\)</span></li></ul></li><li><p>对非终结符 <span class="math inline">\(A\)</span>，其左边是 <spanclass="math inline">\(1, 4, 7\)</span> 三个数字。</p><ul><li>若和 <span class="math inline">\(0, 3, 6, 9\)</span> 组合，有 <spanclass="math inline">\(A \rightarrow (0, 3, 6, 9)A\)</span></li><li>若和 <span class="math inline">\(2, 5, 8\)</span> 组合，有 <spanclass="math inline">\(A \rightarrow (2|5|8)S\)</span></li><li>若和 <span class="math inline">\(1, 4, 7\)</span> 组合，有 <spanclass="math inline">\(A \rightarrow (1|4|7)B\)</span></li></ul></li><li><p>对非终结符 <span class="math inline">\(B\)</span>，其左边是 <spanclass="math inline">\(1, 4, 7\)</span> 三个数字。</p><ul><li>若和 <span class="math inline">\(0, 3, 6, 9\)</span> 组合，有 <spanclass="math inline">\(B \rightarrow (0|3|6|9)B\)</span></li><li>若和 <span class="math inline">\(1, 4, 7\)</span> 组合，有 <spanclass="math inline">\(B \rightarrow (1|4|7)S\)</span></li><li>若和 <span class="math inline">\(2, 5, 8\)</span> 组合，有 <spanclass="math inline">\(B \rightarrow (2|5|8)A\)</span></li></ul></li></ol><p>综上，<span class="math inline">\(P\)</span> 的规则是</p><p><span class="math display">\[\begin{align}&amp;S \rightarrow (0|3|6|9)S|(1|4|7)A|(2|5|8)B|\varepsilon \\&amp;A \rightarrow (0|3|6|9)A|(2|5|8)S|(1|4|7)B \\&amp;B \rightarrow (0|3|6|9)B|(1|4|7)S|(2|5|8)A\end{align}\]</span></p><h2 id="第二章课后作业">3、第二章课后作业</h2><p>1、文法 <span class="math inline">\(G = (\{ A, B, S \}, \{ a, b, c\}, P, S)\)</span>，其中 <span class="math inline">\(P\)</span> 为</p><p><span class="math display">\[\begin{align}&amp; S \rightarrow Ac|aB \\&amp; A \rightarrow ab \\&amp; B \rightarrow bc\end{align}\]</span></p><p>写出 <span class="math inline">\(L(G[S])\)</span> 的全部元素。</p><p>解：</p><p><span class="math display">\[L(G[S]) = \{ abc \}\]</span></p><p>4、证明文法</p><p><span class="math display">\[G = (\{ E, O \}, \{ (, ), +, *, v, d \}, P, E)\]</span></p><p>是二义的，其中 <span class="math inline">\(P\)</span> 为</p><p><span class="math display">\[\begin{align}&amp;E \rightarrow EOE|(E)|v|d \\&amp;O \rightarrow +|*\end{align}\]</span></p><p>证明：</p><p>可为句子 <span class="math inline">\(v * v + v\)</span>构造两个不同的最左推导：</p><p><span class="math display">\[\begin{align}E &amp;\Rightarrow EOE \\&amp;\Rightarrow EOEOE \\&amp;\Rightarrow vOEOE \\&amp;\Rightarrow v*EOE \\&amp;\Rightarrow v*vOE \\&amp;\Rightarrow v*v+E \\&amp;\Rightarrow v*v+v \\E &amp;\Rightarrow EOE \\&amp;\Rightarrow vOE \\&amp;\Rightarrow v*E \\&amp;\Rightarrow v*EOE \\&amp;\Rightarrow v*vOE \\&amp;\Rightarrow v*v+E \\&amp;\Rightarrow v*v+v\end{align}\]</span></p><p>故文法 <span class="math inline">\(G\)</span> 是二义的。</p><p>11、一个上下文无关语法生成句子 <spanclass="math inline">\(abbaa\)</span> 的唯一语法树如下：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210926101048.png" /></p><p>(1)、给出该句子相应的最左推导和最右推导。<br />(2)、该文法的产生式集合 <span class="math inline">\(P\)</span>可能有哪些元素？<br />(3)、找出该句子的所有短语、简单短语、句柄。</p><p>解：</p><p>(1)、句子 <span class="math inline">\(abbaa\)</span>的最左推导如下</p><p><span class="math display">\[\begin{align}S &amp;\Rightarrow ABS \\&amp;\Rightarrow aBS \\&amp;\Rightarrow aSBBS \\&amp;\Rightarrow a\varepsilon BBS \\&amp;\Rightarrow a\varepsilon bBS \\&amp;\Rightarrow a\varepsilon bbS \\&amp;\Rightarrow a\varepsilon bbAa \\&amp;\Rightarrow a\varepsilon bbaa \\\end{align}\]</span></p><p>最右推导如下</p><p><span class="math display">\[\begin{align}S &amp;\Rightarrow ABS \\&amp;\Rightarrow ABAa \\&amp;\Rightarrow ABaa \\&amp;\Rightarrow ASBBaa \\&amp;\Rightarrow ASBbaa \\&amp;\Rightarrow ASbbaa \\&amp;\Rightarrow A\varepsilon bbaa \\&amp;\Rightarrow a\varepsilon bbaa \\\end{align}\]</span></p><p>(2)、</p><p>产生式有：</p><p><span class="math display">\[\begin{split}S &amp;\rightarrow ABS|Aa|\varepsilon \\A &amp;\rightarrow a \\B &amp;\rightarrow SBB|b\end{split}\]</span></p><p>可能的元素有：</p><p><span class="math display">\[\varepsilon \; aa \; ab \; abbaa \; aaabbaa \; \cdots\]</span></p><p>(3)、</p><p>该句子的短语有：<br /><span class="math inline">\(a\)</span> 是相对 <spanclass="math inline">\(A\)</span> 的短语；<br /><span class="math inline">\(\varepsilon\)</span> 是相对 <spanclass="math inline">\(S\)</span> 的短语；<br /><span class="math inline">\(b\)</span> 是相对 <spanclass="math inline">\(B\)</span> 的短语；<br /><span class="math inline">\(\varepsilon bb\)</span> 是相对 <spanclass="math inline">\(B\)</span> 的短语；<br /><span class="math inline">\(aa\)</span> 是相对 <spanclass="math inline">\(S\)</span> 的短语；<br /><span class="math inline">\(a\varepsilon bbaa\)</span> 是相对 <spanclass="math inline">\(S\)</span> 的短语；</p><p>直接短语有：<span class="math inline">\(a \; \varepsilon \;b\)</span>；</p><p>句柄是：<span class="math inline">\(a\)</span>。</p><p>12、构造产生如下语言的上下文无关文法各一个：</p><p><span class="math display">\[\begin{align}&amp;(2) \; \{ a^m b^n | m \geqslant n \geqslant 0 \} \\&amp;(5) \; \{ a^n b^m | n \geqslant 0, m \geqslant 0, 且 3n \geqslant m\geqslant 2n \} \\&amp;(6) \; \{ ww^R | w \in \{ a, b \}^*, 其中, w^R 表示 w的反向串，其含义是将 w 中的字母依次反转，首尾字母交换位置 \} \\\end{align}\]</span></p><p>解：</p><p>(2)、</p><p><span class="math display">\[\begin{split}S \rightarrow aSb|aS|\varepsilon\end{split}\]</span></p><p>(5)、</p><p><span class="math display">\[\begin{split}S \rightarrow aSbb|aSbbb|\varepsilon\end{split}\]</span></p><p>(6)、</p><p><span class="math display">\[S \rightarrow aSa|bSb|\varepsilon\]</span></p><p>18、给出生成下述语言的一个 3 型文法：</p><p>(2)、<span class="math inline">\(\{ a^nb^m|n, m \geqslant 1\}\)</span></p><p>解：</p><p><span class="math display">\[\begin{split}S &amp;\rightarrow aA \\A &amp;\rightarrow aA|B \\B &amp;\rightarrow bB|b\end{split}\]</span></p>]]></content>
    
    
    <categories>
      
      <category>编译原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编译原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 12 Integer to Roman</title>
    <link href="/2021/09/20/LeetCode-12-Integer-to-Roman/"/>
    <url>/2021/09/20/LeetCode-12-Integer-to-Roman/</url>
    
    <content type="html"><![CDATA[<figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># @File  : leet_12.py</span><span class="token comment"># @Author: FanyFull</span><span class="token comment"># @Date  : 2021/9/20</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">intToRoman</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>        number <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">900</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>        s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"M"</span><span class="token punctuation">,</span> <span class="token string">"CM"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"CD"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"XC"</span><span class="token punctuation">,</span> <span class="token string">"L"</span><span class="token punctuation">,</span> <span class="token string">"XL"</span><span class="token punctuation">,</span> <span class="token string">"X"</span><span class="token punctuation">,</span> <span class="token string">"IX"</span><span class="token punctuation">,</span> <span class="token string">"V"</span><span class="token punctuation">,</span> <span class="token string">"IV"</span><span class="token punctuation">,</span> <span class="token string">"I"</span><span class="token punctuation">]</span>        res <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">>=</span> number<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                num <span class="token operator">-=</span> number<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span> num <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token keyword">return</span> res<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    solution <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token builtin">input</span> <span class="token operator">=</span> <span class="token number">1994</span>    output <span class="token operator">=</span> solution<span class="token punctuation">.</span>intToRoman<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>解这道题的巧妙之处就在于 <code>number</code> 和 <code>s</code>这两个列表的使用，然后从数字的高位到低位挨个套用罗马字符即可。</p>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《聊斋志异》札记</title>
    <link href="/2021/09/20/%E3%80%8A%E8%81%8A%E6%96%8B%E5%BF%97%E5%BC%82%E3%80%8B%E6%9C%AD%E8%AE%B0/"/>
    <url>/2021/09/20/%E3%80%8A%E8%81%8A%E6%96%8B%E5%BF%97%E5%BC%82%E3%80%8B%E6%9C%AD%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>我阅读的这一版的聊斋志异是赵伯陶先生评注的人民文学出版社的版本。注释非常详细。</p><h1 id="聊斋自志">聊斋自志</h1><blockquote><p>披萝带荔，三闾氏感而为骚；牛鬼蛇神，长爪郎吟而成癖。自鸣天籁，不择好音，有由然矣。松落落秋萤之火，魑魅争光；逐逐野马之尘，罔两见笑。才非干宝，雅爱搜神；情类黄州，喜人谈鬼。闻则命笔，遂以成编。久之，四方同人，又以邮筒相寄，因而物以好聚，所积益夥。甚者，人非化外，事或奇于断发之乡；睫在眼前，怪有过于飞头之国。遄飞逸兴，狂固难辞；永托旷怀，痴且不讳。展如之人，得毋向我胡卢耶？然五父衢头，或涉滥听；而三生石上，颇悟前因。放纵之言，有未可概以人废者。</p><p>松悬弧时，先大人梦一病瘠瞿昙，偏袒入室，药膏如钱，圆黏乳际。寤而松生，果符墨志。且也少羸多病，长命不犹。门庭之凄寂，则冷淡如僧；笔墨之耕耘，则萧条似钵。每搔头自念，勿亦面壁人果是吾前身耶？盖有漏根因，未结人天之果；而随风荡堕，竟成藩溷之花。茫茫六道，何可谓无其理哉！独是子夜荧荧，灯昏欲蕊；萧斋瑟瑟，案冷疑冰。集腋为裘，妄续《幽冥》之录；浮白载笔，仅成孤愤之书。寄托如此，亦足悲矣。嗟乎！惊霜寒雀，抱树无温；吊月秋虫，偎阑自热。知我者，其在青林黑塞间乎！</p><p>康熙己未春日</p></blockquote><h1 id="一卷一">一、卷一</h1><h2 id="娇娜">娇娜</h2><blockquote><p>笑云：“仆不求进取也。”</p></blockquote><p>按：风流人物，答复刻板较真之人，大抵也是可以用这句回复，想象这句话的同时，鬓发边似乎有微风吹过。</p><blockquote><p>年约十三四，娇波流慧，细柳生姿。 女乃敛羞容，揄长袖。而贪近娇姿，不惟不觉其苦，且恐速竣割事，偎傍不久。</p></blockquote><p>按：这几个正侧描写，以摹写娇娜的美貌，主要是娇媚，年约十三四，那想必是十分娇嫩了，况娇娜属狐类，更添其媚。孔生雪笠此人，我不甚喜欢，一个耽于美貌的读书人，与我多有类似之处（笑）。“不惟···且···”这个句式，可谓贴切之极。</p><blockquote><p>“曾经沧海难为水，除却巫山不是云。”</p></blockquote><p>按：书中的注释给的解释是：形容男子对钟情女子的专一真挚之情。可是元稹的故事在高中被读烂，恐怕这句话多少要失去一些本意了。</p><blockquote><p>画黛弯蛾，莲钩蹴凤。</p></blockquote><p>按：莲钩蹴凤，莲钩即小足，这句话意思是女子的小小的脚上穿着可爱的凤头鞋。这两句话用来白描女子有点效果。</p><blockquote><p>是夕，鼓吹阗咽，尘落漫飞，以望中仙人，忽同衾幄，遂疑广寒宫殿未必在云霄矣。</p></blockquote><p>按：阗（tián）咽（yè），喧闹。这一段好似一段梦话，所以说，洞房花烛夜，尤其是当洞房花烛的对象是美貌的女子时，人生几大喜事之一。</p><blockquote><p>得此良友，时一谈宴，则‘色授魂与’，尤胜于‘颠倒衣裳’矣。</p></blockquote><p>按：色授魂与，精神方面的相通，当然要远胜颠倒衣裳这一昙花一现的短暂享乐。得一佳人，色授魂与，此生亦别无所求也。聊斋先生算是道出了很多读书人的新生，这也算是读书人的意淫的一种吧。得承认。</p><h2 id="叶生">叶生</h2><blockquote><p>此去离贵乡不远。先生奋迹云霄，锦还为快。</p></blockquote><p>按：奋迹云霄，青云直上之意。何时我也能够奋迹云霄，那想必定是快哉兮兮的。<br />锦还为快，语本《史记·项羽本纪》：“富贵不归故乡，如衣绣夜行，谁知之者！”</p><blockquote><p>公子闻之，涕堕垂膺。</p></blockquote><p>按：涕堕垂膺，涕泪流至胸口处，形容伤心悲恸已极。</p><blockquote><p>异史氏曰：“魂从知己，竟忘死耶？闻者疑之，余深信焉。同心倩女，至离枕上之魂；千里良朋，犹识梦中之路。而况茧丝蝇迹，呕学士之心肝；流水高山，通我曹之性命者哉！嗟乎！遇合难期，遭逢不偶。行踪落落，对影长愁；傲骨嶙嶙，搔头自爱。叹面目之酸涩，来鬼物之揶揄。频居康了之中，则须发之条条可丑；一落孙山之外，则文章之处处皆疵。古今痛哭之人，卞和惟尔；颠倒逸群之物，伯乐伊谁？抱刺于怀，三年灭字；侧身以望，四海无家。人生世上，只须合眼放步，以听造物之低昂而已。天下之昂藏沦落如叶生其人者，亦复不少，顾安得令威复来，而生死从之也哉？噫！”</p></blockquote><p>按：倩女，指张倩娘，其中有一段美丽的故事。茧丝，比喻文章的引申发挥。蝇迹，即“蝇头细节”，比喻书法训练。我曹，我们。遇合，谓相遇而彼此投合。落落，与人疏远寡合，形容孤高。粼粼，原意山石突兀，这里形容人风骨不凡。揶揄，嘲笑。康了，谓科举落第的处境。刺，即“名刺”，相当于后世的名片。侧身，倾侧其身，表示戒惧不安。低昂，沉浮，有随波逐流之意。令威，以传说人物丁令威借指淮阳令关东丁乘鹤，双关追随其人仙去，离开这贤愚不分的人世。<br />这一段写得实在是太好，第二遍读时将其完全弄懂，读来更平添萧索之意。</p><p>《娇娜》篇大概是蒲松龄对于女性的情感的真实表露，这其中多少也代表了很多知识分子心中的幻想，亦或是执念。而《叶生》此文，算是另一条时间线的蒲松龄本人？可谓凄凄惨惨戚戚。读书人沦落到这种地步，也算是社会对其的一种糟蹋。</p><h2 id="青凤">青凤</h2><blockquote><p>久仰山斗。</p></blockquote><blockquote><p>吾辈通家，座客无庸见避，还祈招饮。</p></blockquote><p>按：庸，用，需要，用于否定句式。</p><blockquote><p>生素豪，谈议风生，孝儿亦倜傥，倾吐间，雅相爱悦。<br />倜傥：豪爽洒脱而不受世俗礼法拘束。</p></blockquote><p>按：“倜傥”这个注释极好。</p><blockquote><p>生略述涂山女佐禹之功，粉饰多词，妙绪泉涌。</p></blockquote><blockquote><p>少时，媪偕女郎出，审顾之，弱态生娇，秋波流慧，人间无其丽也。<br />弱态生娇：汉班婕妤《捣素赋》：“若乃盼睐生姿，动容多制，弱态含羞，妖风靡丽。”<br />秋波流慧：南唐李煜《菩萨蛮》词：“眼色暗相钩，秋波横欲流。”</p></blockquote><blockquote><p>生谈竟而饮，瞻顾女郎，停睇不转。</p></blockquote><p>按：这就停睇不转啦？</p><blockquote><p>女觉之，辄俯其首。生隐蹑莲钩，女急敛足，亦无愠怒。</p></blockquote><p>按：此般轻佻，实在是不可取呀。</p><blockquote><p>生神志飞扬，不能自主，拍案曰：“得妇如此，南面王不易也！”</p></blockquote><p>按：出息？！</p><blockquote><p>“家君有横难，非君莫拯。将自诣恳，恐不见纳，故以某来。”</p></blockquote><p>按：由于后面的情节可知，叟已经被莫三郎所猎，那么这里就是故意说本来是叟要来的，想要借此稍解生的怨气。</p><h2 id="画皮">画皮</h2><blockquote><p>乃二八姝丽</p></blockquote><blockquote><p>何夙夜踽踽而独？</p></blockquote><p>按：“踽踽而独”，踽踽独行的另一说法。</p><blockquote><p>惑哉！世固有死将临而不悟者！</p></blockquote><blockquote><p>闻门外戢戢有声</p></blockquote><p>按：戢戢（jí集）：象声词，形容细小之声。这个声音在家乡的方言中也有对应。</p><blockquote><p>孽魅！偿我拂子来！</p></blockquote><blockquote><p>道士以木剑枭其首，身变作浓烟，匝地作堆。</p></blockquote><blockquote><p>人尽夫也</p></blockquote><p>按：此句适合用来骂女人，不好的女人。本篇中的女人那自然是极好的，这句本事那个疯儿故意说来刺激妇人的。</p><blockquote><p>然爱人之色而渔之<br />渔：这里谓“渔色”，即猎取美女。</p></blockquote><p>按：所谓“渔色”，终于在这里弄懂。很久以前读过一本网络小说，似乎叫做“渔色人生”，原来之前我一直没有理解它的含义，惭愧。</p><p>篇按：</p><p>这篇《画皮》与电影“画皮”出入似乎还蛮大的。这里还是就只说一说这文中的描写罢。全篇令我印象最深的莫过于妇人为了救那个哈哈迷迷、鬼迷心窍的丈夫，竟然将疯子的“盈把”的痰给强忍住吞了下去，这在我看来，比吃屎还令人难以接受，这种描写真的好吗？以前我甚至觉得唾面自干就已经很了不得了，看来，这一次，我的极限再次被打破。其他的情节，如对“画皮”的描写等等，都算是中规中矩吧。</p><h2 id="贾儿">贾儿</h2><p>篇按：</p><p>这篇文章的节奏感很强，一流似水，很轻易地就把我勾到了最后。这里主要是对贾儿的智谋与胆量感到惊奇，一个虚岁十岁的小孩做事情能这样周密细致，而且此事还比较危险，实在是难得。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《编译原理 第二版》札记</title>
    <link href="/2021/09/19/%E3%80%8A%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E6%9C%AD%E8%AE%B0/"/>
    <url>/2021/09/19/%E3%80%8A%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E6%9C%AD%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>这本编译原理的版本是机械工业出版社翻译的“龙书”第二版。</p><h1 id="第一章">第一章</h1><blockquote><p>一个程序可以运行之前，它首先需要被翻译成一种能够被计算机执行的形式。完成这项翻译工作的软件系统称为编译器（Compiler）。</p></blockquote><blockquote><p>研究编译器的编写将涉及程序设计语言、计算机体系架构、形式语言理论、算法和软件工程。</p></blockquote><blockquote><p>Java 语言处理器结合了编译和解释过程。一个 Java程序首先被编译成一个称为字节码（bytecode）的中间表示形式，然后由一个虚拟机对得到的字节码加以解释执行。</p></blockquote><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210919192248.png"alt="一个编译器的各个步骤" /></p><h2 id="词法分析">1、词法分析</h2><p>专业术语：</p><ul><li>符号表：symbol table</li><li>词法分析：lexical analysis</li><li>词素：lexeme</li><li>词法单元：token。</li></ul><p>词法单元的形式为<code>&lt;token-name, attribute-value&gt;</code>。第一个分量 token-name是一个由语法分析步骤使用的抽象符号，而第二个分量 attribute-value指向符号表中关于这个词法单元的条目。</p><p>针对词法分析进行举例说明：</p><p>假设一个源程序包含如下的赋值语句</p><p>position = initial + rate * 60</p><p>1） position 是一个词素，被映射成词法单元<code>&lt;id, 1&gt;</code>，其中 id 是标识符（identifier）的抽象符号，而1 指向符号表中 position对应的条目。一个标识符对应的符号表条目存放该标识符有关的信息，比如它的名字和类型。</p><p>2）赋值符号 = 是一个词素，被映射成词法单元<code>&lt;=&gt;</code>。</p><p>3）initial 是一个词素，被映射成词法单元<code>&lt;id, 2&gt;</code>。</p><p>4）+ 是一个词素，被映射成词法单元 <code>&lt;+&gt;</code>。</p><p>5）rate 是一个词素，被映射成词法单元 <code>&lt;id, 3&gt;</code>。</p><p>6）* 是一个词素，被映射成词法单元 <code>&lt;*&gt;</code>。</p><p>7）60 是一个词素，被映射成词法单元 <code>&lt;60&gt;</code>。</p><p>最后，上面的赋值语句被表示成如下的词法单元序列：</p><p>&lt;id, 1&gt; &lt;=&gt; &lt;id, 2&gt; &lt;+&gt; &lt;id, 3&gt;&lt;*&gt; &lt;60&gt;</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210919214057.png"alt="符号表" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210920120546.png"alt="一个赋值语句的翻译" /></p><p>上面这个赋值语句的翻译，用举例的方式很好地解释了编译器编译语句的过程，让人可以对编译过程有一个初步的把握。</p><h2 id="语法分析">2、语法分析</h2><p>专业术语：</p><ul><li>语法分析：syntax analysis</li></ul><blockquote><p>语法分析器使用由词法分析器生成的各个词法单元的第一个分量来创建树形的中间表示。</p></blockquote><blockquote><p>一个常用的语法是语法树。</p></blockquote><h2 id="杂记">3、杂记</h2><blockquote><p>符号表数据结构为每个变量名字创建了一个记录条目。记录的字段就是名字的各个属性。这个数据结构应该允许编译器迅速查找到每个名字的记录，并向记录中快速存放和获取记录中的数据。（P6）</p></blockquote><blockquote><p>在一个特定的实现中，多个步骤的活动可以被组合成一趟（pass）。（P6）</p></blockquote><h2 id="section">1.5</h2><p>何为类型检查？</p><p>举例，运算被作用于错误类型的对象上，或者传递给一个过程（procedure）的参数和该过程的范型（signature）不匹配。</p><p>按：这里的范型（signature）应该翻译成签名才会，这样才和函数的“签名”对得上。</p><p>何为边界检查？</p><p>举例，C语言的数组需要进行边界检查，否则如果超出边界，可能会造成缓冲区溢出的问题。</p><p>何为内存管理工具？</p><p>举例，垃圾收集机制就是这样一个工具。内存管理需要解决诸如内存泄漏这样的内存泄露的问题。</p><h2 id="section-1">1.6</h2><p>何为静态和动态的区别？</p><p>主要有两个方面。</p><p>一个是策略。</p><ul><li>一个语言使用的策略支持编译器静态决定某个问题，或者这个问题可以在编译时刻决定==&gt; 静态策略。</li><li>只允许在运行程序的时候做出决定，或者需要在运行时刻做出决定 ==&gt;动态策略。</li></ul><p>另一个是作用域。</p><ul><li>静态作用域：仅通过阅读程序就可以确定一个声明的作用域。或者说，词法作用域。</li><li>动态作用域：上面的情况的例外。</li></ul><p>环境和状态？</p><ul><li>环境：是从一个从名字到存储位置的映射。</li><li>状态：是一个从内存位置到它们的值的映射。</li></ul><blockquote><p>局部的 i 通常被赋予一个运行时刻栈中的位置。</p></blockquote><p>按：函数中的变量一般会被放入栈中，这一点和以前的知识是吻合的。</p><blockquote><p>C 语言的声明必须先于使用。</p></blockquote><p>静态绑定和动态绑定的使用频次？</p><p>一般来说，名字到位置的绑定，位置到值的绑定都是动态的。但是，它们都有例外。</p><p>名字、标识符和变量的区分？</p><p>标识符（identifier）是一个字符串。它用来指向（标记）一个实体。</p><p>所有标识符都是名字，但并不是所有的名字都是标识符，比如，<code>x.y</code>是名字，但不是标识符。</p><p>变量指向存储中的某个特定的位置。同一个标识符被多次声明是常见的事情，每一个这样的声明引入一个新的变量。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>未竟</tag>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机原码一位乘法</title>
    <link href="/2021/09/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%A0%81%E4%B8%80%E4%BD%8D%E4%B9%98%E6%B3%95/"/>
    <url>/2021/09/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%A0%81%E4%B8%80%E4%BD%8D%E4%B9%98%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>n 位原码乘法包括 n 个位积（<em>注1</em>），也就是每次只利用乘数中的一位来计算位积，最终需要将 n个位积全部累加起来得到乘积。这种方法称为<strong>原码一位乘法</strong>。</p><h1 id="运算法则">1、运算法则</h1><ul><li>符号位单独参加运算，数据位取绝对值参加运算。</li><li>运算法则：<ul><li>设：<span class="math inline">\([X]_{原} = X_0.X_1X_2...X_n\)</span>，<span class="math inline">\([Y]_{原} = Y_0.Y_1Y_2...Y_n\)</span></li><li>则：<span class="math inline">\(P_0 = X_0 \oplus Y_0\)</span>，<spanclass="math inline">\(|P| = |X| \cdot |Y|\)</span></li></ul></li><li>每次循环累加的位积为 <span class="math inline">\(|X|\)</span> 或0，没得到一次部分积，就将其右移一位，从而得到一位乘积。</li></ul><h1 id="举例">2、举例</h1><p>设 <span class="math inline">\(X = 0.110\)</span>，<spanclass="math inline">\(Y = -0.101\)</span>，计算 <spanclass="math inline">\([X]_{原} \cdot [Y]_{原}\)</span>（<em>注2</em>）</p><p><span class="math display">\[解：[X]_{原} = 0.110, [Y]_{原} = 1.101\qquad \qquad \qquad \qquad\]</span></p><p><span class="math display">\[\begin{equation}\begin{split}&amp;部分积 \qquad \quad  &amp; 乘数/判断位 \qquad &amp; 说明 \\&amp;00.000  &amp; Y_0.101 &amp; Y_3 = 1, 部分积 + |X| \\{+} \; &amp;00.110  &amp;  &amp;  \\···&amp; ········&amp; &amp; \\&amp;00.110  &amp;  &amp;  \\\rightarrow \; &amp;00.011  &amp; 0Y_0.10 &amp; 每次运算结果右移一位 \\{+} \; &amp;00.000  &amp;  &amp; Y_3 = 0, 部分积 + 0 \\···&amp; ········ &amp; &amp; \\&amp;00.011  &amp;  &amp;  \\\rightarrow \; &amp;00.001  &amp; 10Y_0.1 &amp; 继续右移 \\{+} \; &amp;00.110  &amp;  &amp; Y_3 = 1, 部分积 + |X| \\···&amp; ········ &amp; &amp; \\&amp;00.111  &amp;  &amp;  \\\rightarrow \; &amp;00.011  &amp; 110Y_0 &amp;  \\\end{split}\end{equation}\]</span></p><p><span class="math display">\[\begin{aligned}\left[X\right]_{原} · [Y]_{原} &amp;= X_0 \oplus Y_0.011110 \\&amp;= 1.011110\end{aligned}\]</span></p><p>以上运算过程可以结合下面的手工列竖式的过程来看：</p><p><span class="math display">\[\begin{aligned}\begin{split}&amp;0.1 \; 1\;0 \\\times \; &amp;0.1 \; 0 \; 1 \\···&amp;······ \\\;  &amp;0 \; 1 \; 1 \; 0 \\0 \; &amp;0 \; 0 \; 0 \\0 \; 1 \; &amp;1 \; 0 \\{+} \; 0 \; 0 \; 0 \; &amp;0 \\·······&amp;······ \\0 \; 0 \; 1 \; &amp;1 \; 1 \; 1 \; 0\end{split}\end{aligned}\]</span></p><hr /><p>注解：</p><p>1、位积，表示乘法运算中被乘数与乘数中的一位所乘得到的积。</p><p>2、这里使用的 LaTex语法来列竖式，由于我没有找到合适的方法来加上水平的横线（如果是完整版的LaTex，多写一些语法还是可以实现的），所以就用点号代替了。</p><hr /><p>参考：</p><p>1、华科软院计组第 3 章 PPT。</p><p>2、《计算机组成原理》（谭志虎）</p>]]></content>
    
    
    <categories>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机移码</title>
    <link href="/2021/09/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%BB%E7%A0%81/"/>
    <url>/2021/09/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%BB%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>移码表示浮点数的阶码，只有整数形式，如 IEEE754 中阶码用移码表示。</p><p>设定点整数 <span class="math inline">\(X\)</span> 的移码形式为 <spanclass="math inline">\(X_0 X_1 X_2X_3...X_n\)</span>，则移码的定义是：</p><p><span class="math display">\[[X]_{移} = 2^n + X \quad -2^n \leqslant X &lt; 2^n\]</span></p><p>具体实现：数值位与 <span class="math inline">\(X\)</span>的补码相同，符号位与补码相反。</p><p><strong>举例</strong></p><p><span class="math display">\[\begin{matrix}X = +0101 \quad [X]_{补} = 00101 \quad [X]_{移} = 10101 \\X = -0101 \quad [X]_{补} = 11011 \quad [X]_{移} = 01011\end{matrix}\]</span></p><hr /><p>参考：</p><p>1、华科软院计组第二章 PPT。</p>]]></content>
    
    
    <categories>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>谈谈我对《天元突破》的观感</title>
    <link href="/2021/08/09/%E3%80%8A%E5%A4%A9%E5%85%83%E7%AA%81%E7%A0%B4%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F/"/>
    <url>/2021/08/09/%E3%80%8A%E5%A4%A9%E5%85%83%E7%AA%81%E7%A0%B4%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F/</url>
    
    <content type="html"><![CDATA[<p>之前直接用了“...观后感”这个标题，感觉有点幼稚，虽说这个也不咋地啊哈。</p><p>接觸到這一部番的緣由，是前幾天想要找一些可看的番，就到 Youtube上面搜索了一下，推薦的一些比如鋼煉之類都看過，那個鷄賊的 Youtuber最後沒忍住談了一下他心中最賽高的番，什麽永遠第一，不可撼動，當時不以爲然，現在，多少也確定了它在我心中的地位——燃係最强番。</p><p>高中時候，時間看上去很緊，那時晚上偷偷在被窩看動漫卻一般都不會跳 OP和ED，現在看動漫沒有了高中時候的那種情懷，直接就是跳到劇情，這就導致了看完了精彩的番劇之後，會惋惜跳過了OP 和ED。音樂這種東西，很容易就會把記憶和情感存儲在其中，這個存儲的最終載體，是每一個不同的人的腦海中。所以，現在匆匆忙忙刷完一部動漫作品，不得不説，這是一種囫圇吞棗的行爲。以前有很多被認爲是不怎麽優秀的作品，比如熱誠傳説，高中時候看的，每一集都是完整地從頭看到尾，我對哪部動漫現在還有不壞的印象，它的OP，叫做Overfly，伴隨著劇情和一些零零碎碎的畫面，永遠地留存在我的腦海中。另一部相對優秀許多的作品《斬·赤紅之瞳》，現在已經不記得多少了，大概率是當時無情地跳過了OP 和 ED。</p><p>一邊敲字，耳機裏同步著這部作品的音樂專輯，算是一種彌補吧。這是事後彌補，以前還有過一次是事前預熱的，《天氣之子》，去電影院之前事先在耳中循環了一周，後來和同學一起去電影院的當天，那個插曲響起的一瞬間，眼淚也很配合地盈滿了眼眶之中。</p><p>説回這部作品本身，前幾集屬於是鋪墊的部分，精彩性沒有後面那麽强烈，當然，這只是與它自身相比，與其身前身後的其他作品相比，它的題材可以說是很新穎的，小小的鑽頭，螺旋紋，貫穿與于整部作品中，隨著劇情的深入，還能夠不斷地在這小小的螺旋紋上做文章，不斷的湧出新意，簡直就像是從一個小小的不起眼的小泉眼，一步步變成大汪洋，這裏面的樂趣，真是令人大腦深處都在震顫呢。</p><p>raw，raw，fight thepower，這是整部動漫中唯一的轉場配音，一開始，可能所有人都會覺得這比較傻，如果大家都像我一樣，在這裏就簡單地給這部作品貼上一個輕鬆歡樂的標簽的話，那麽，到後面，會很難接受的。前面遇到這個轉場，我是迫切地希望趕緊跳過，最後，隨著主角團一個接著一個地死去，我倒是期盼著多來幾個轉場來緩解一下這個悲傷的氣氛了。</p><p>卡米那。西蒙。妮婭（原諒我，我更喜歡妮婭一點，我私心是想她能夠和西蒙早一點終成眷屬的）。庸子。布塔。羅修。維拉爾。維基百科上賣弄只有這幾個主要的人物。</p><p>我不願意忘記，那些同樣讓我心懷崇敬的角色。李龍。奇坦。奇揚（剩下孩子的那位）。奇儂（輔助羅修的那位）。奇雅露（虎牙）。達雅卡。吉米。達莉。可可爺。喬剛。巴林波。麗迪。當然，還有羅傑儂。</p><p>一個作品的意義，往往可以通過人物的死亡來獲得極大的升華。最開始是卡米那之死。從第一集以來，他的光芒實在是太過耀眼，我一度以爲他才是全劇的真正的主角。然而他的命運，就像尼采一樣，像太陽一樣熱烈，最後卻也把自己給燒死了。他的每一次瘋狂，都在昭示著他最終的結局，作爲觀衆肯定是希望他能夠走到最後的。作者顯然早已給他安排好了結局。這個結局也是一個大轉折，所謂，那個男人終於發覺和找到了屬於他的命運。</p><blockquote><p>聼好了... 西蒙... 別忘記... 相信你自己...不是相信相信著我的你，也不是相信相信著你的我，相信自己...相信相信自己的自己吧！</p></blockquote><blockquote><p>別了，兄弟。</p></blockquote><blockquote><p>我的鑽頭... 是突破天際的鑽頭啊！！！</p></blockquote><p>一部作品的深度，其衡量標準之一是其人物的塑造成功度。所有的人，都是有血有肉，重情重義的。正派，反派，哪裏有什麽正派和反派，堅守心中的道義，然後成爲一個人，這就夠了。卡米那，相比于這個刻板的名字，西蒙稱呼的大哥，明顯更能夠刻畫這個人的形象。耍酷，吹牛，魯莽，嘻嘻哈哈，這些都算得了什麽！大哥就是大哥，是什麽人都無法替代的大哥。大哥永遠看似不顧一切地往前冲，我知道，這其中有很大一部分是要給西蒙樹立一個榜樣，他心底可能是相信著自己是不如西蒙的，當然，他絕對不會去嫉妒西蒙，他們之間的友情，已經超過了親情。所以他能夠做的，就是燃燒自己，像火山噴發一樣，每一次戰鬥，他都得拼盡全力去和敵人搏鬥，西蒙還小，大哥的身影就必須高大。這樣以來，每一次的艱難取勝，或許都是命運這個玩意兒在施捨它那少得可憐的慈悲。卡米那也知道，這樣下去自己肯定遲早會死在戰場上，最後到來的時間也不會太長。那又如何？我就是要向火山一樣，想做就做，所有的情緒，所有的衝動，所有的鬥志，才不要藏著憋著，人生，若是能夠恣情恣意地活，那有有什麽不好？卡密那此人，我衷心佩服。</p><p>西蒙桑，這個我開始差點以爲不是主角的人物，他的一生，充滿了各種各樣的色彩，難得的是，他從始至終都葆有一顆善良的心靈。你可以說他是幼稚，你可以説他是中二，你可以説他是少年意氣，你可以説他傻，那又如何？我相信，如果這是有些人眼中的所謂的不好的幼稚中二，即使這樣，這個世界上，仍然會有很多人，終其一生，都是這種中二之人。這些人士幸運的，我不知道我將來會不會有這種幸運。西蒙桑，卡米那，利坦，都是中二之輩啊。我爲什麽會喜歡妮婭呢，很重要的一個原因就是他在大哥死後西蒙低落的時候出現，安慰并且拯救了西蒙。她的聲音也很好聼啊。平心而論，卡米那的死，有一部分確實是西蒙造成的，庸子也有責任，庸子這一塊，我一開始甚至是有點埋怨她的，爲什麽她對於西蒙就不能多一點開導呢？如果在愛情這一塊，他們能夠解決得順利一點，後來也不會有波折。這是我的一廂情願。我無法做到很清晰的看到那些劇情的合理，所以我也對妮婭很有好感，對啊，如果妮婭能夠早一點出現，那麽西蒙的青春情懷...無端的臆想，終究是沒有用的。</p><p>我現在是糾結於非理性的内容。卡米那和西蒙的熱血，維拉爾一開始作爲一個反派，忠於心中的道義，羅傑儂的反轉，這一個悲劇人物的終幕...這些都是目前的我更感興趣的東西。從小到大，也算閲歷過了不少的文藝作品，過於追求合理性或者理性，意義已經不大。比如羅修給西蒙判處死刑，退出來頂罪，無感，至少沒有太大的感覺，現實如此，我更需要童話，我更需要美好的故事。有兩種人喜歡聼勇者戰勝惡龍的故事，一種是小孩子，另一種是在社會摸爬滾打多年的成年人。所以說，人類是很有趣的，這一點我也多次體會到，現如今，我只想讓自己溺死在美好的故事當中，悲傷有什麽用呢？</p><p>可是啊，作者偏偏最後連妮婭都帶帶走，我的妮婭。感覺心中似乎被挖走了一塊。心疼妮婭，心疼西蒙。就不能在咖啡中多加幾塊糖嗎？</p><p>萬般感覺，縈繞心中，哦，我的妮婭。</p><p>西蒙，孤此一生。庸子，孤此一生。既然如此，讓他們在戰鬥中犧牲這樣一種處理應該也是可以的吧。</p><p>是我任性的。作者呀，就是想在觀衆的心中挖一個洞嘛。</p><blockquote><p>我的鑽頭... 是突破天際的鑽頭啊！！！</p></blockquote><p>然後這鑽頭突破了次元，在我的胸口也鉆了一遭。</p><p>這一步經典的最後几話，配樂中有用到了歌劇的唱法，很贊。</p><p>李龍這個人，或許他才是一個真正的見證者。一位善良的智者。</p><p>吵吵闹闹，也是热血漫的王道之一呀。</p>]]></content>
    
    
    <categories>
      
      <category>漫评</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漫评</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL 常用数据类型</title>
    <link href="/2021/08/04/MySQL-%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2021/08/04/MySQL-%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一数值类型">一、数值类型</h2><ul><li><code>INT</code>（或 <code>INTEGER</code>）: 整数值，支持-2147483648~2147483647（如果是 UNSIGNED，为0~4294967295，边界值都可以取到）的数。</li></ul><p>一般来说，只需要用到 INT 类型，比如，存储数据的 id。</p><h2 id="二串类型">二、串类型</h2><p>即字符串类型。</p><ul><li><code>CHAR</code>: 定长串。大小是 0 ~ 255个字节。注意，不是字符。而我们在定义时用的 <code>CHAR(n)</code> 中的 n表示字符。要注意，英文字符是一个字符的大小为一个字节。而中文的一个字符的长度，要分类讨论。UTF-8编码一个汉字等 = 3 个字节；GBK编码一个汉字 = 2个字节。它的长度必须在创建时指定，否则 MySQL 假定为<code>CHAR(1)</code>。</li><li><code>VARCHAR</code>: 变长串。大小是 0 ~ 65532个字节。同样地，要注意字节与字符的区别。如果在创建时指定为<code>VARCHAR(n)</code>，则可存储 0 到 n 个字符的变长串（其中<code>$n \leq 255$</code>）。</li></ul><p>串类型中最常用的就是 <code>CHAR</code> 和 <code>VARCHAR</code>这两个类型，关于在何种情况下使用这两个类型，我曾经在一篇国外博客看到如下总结（原文链接已经遗失）：</p><ul><li>经常变化的字段用 VARCAHR</li><li>知道固定长度的字段用 CHAR</li><li>知道固定长度的字段用 CHAR</li><li>超过 255 字符的只能用 VARCHAR 或者 TEXT</li><li>能用 VARCHAR 的地方不能用 TEXT</li></ul><h2 id="三日期和时间数据类型">三、日期和时间数据类型</h2><table style="width:100%;"><thead><tr class="header"><th style="text-align: center;">类型</th><th style="text-align: center;">大小（bytes）</th><th style="text-align: center;">取值范围</th><th style="text-align: center;">格式</th><th style="text-align: center;">用途</th><th style="text-align: center;">零值</th><th style="text-align: center;"></th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">DATE</td><td style="text-align: center;">3</td><td style="text-align: center;">1000-01-01~9999-12-31</td><td style="text-align: center;">YYYY-MM-DD</td><td style="text-align: center;">日期值</td><td style="text-align: center;">0000:00:00</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">TIME</td><td style="text-align: center;">3</td><td style="text-align: center;">-838:59:59~838:59:59</td><td style="text-align: center;">HH:MM:SS</td><td style="text-align: center;">时间值或持续时间</td><td style="text-align: center;">00:00:00</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">DATETIME</td><td style="text-align: center;">8</td><td style="text-align: center;">1000-01-01 00:00:00~9999-12-3123:59:59</td><td style="text-align: center;">YYYY-MM-HH:MM:SS</td><td style="text-align: center;">混合日期和时间值</td><td style="text-align: center;">0000-00-00 00:00:00</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">YEAR</td><td style="text-align: center;">1</td><td style="text-align: center;">1901~2155</td><td style="text-align: center;">YYYY</td><td style="text-align: center;">年份值</td><td style="text-align: center;">0000</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">TIMESTAMP</td><td style="text-align: center;">4</td><td style="text-align: center;">1970-01-01 00:00:00~2038-01-1903:14:07（格林尼治时间） 开始时间是 0 秒，结束时间是第 2147483647秒</td><td style="text-align: center;">YYYYMMDD HHMMSS</td><td style="text-align: center;">混合日期和时间值，时间戳</td><td style="text-align: center;">0000-00-00 00:00:00</td><td style="text-align: center;"></td></tr></tbody></table><p>关于这里的取值范围，官方文档有这样的说法：</p><blockquote><p>For the DATE and DATETIME range descriptions, “supported” means thatalthough earlier values might work, there is no guarantee.</p></blockquote><p>要注意，也就是说，比如 DATE 可能支持插入数据 0999-01-01，但是 MySQL并不保证这一点。这里具有明确范围的是TIMESTAMP。我在使用时会严格按照支持的范围进行插值。</p><h3 id="date">3.1、DATE</h3><ol type="1"><li>一般来讲，我会使用严格的 <code>YYYY-MM-DD</code> 来给 DATE类型的数据赋值。</li><li>使用 <code>current_date</code> 或 <code>current_date()</code> 或<code>now()</code> 来插入当前的系统时间。</li></ol><p>示例</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_tb <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>date<span class="token punctuation">`</span></span> <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_tb <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>date<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2021-07-08'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 插入当前的日期</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_tb <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>date<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">CURRENT_DATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_tb <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>date<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">CURRENT_DATE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_tb <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>date<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_tb<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210804232424.png" /></p><h3 id="time">3.2、TIME</h3><ol type="1"><li>注意到 TIME 类型的范围是 <code>-838:59:59~838:59:59</code>，838这个表示小时的数字是为了表示某种特殊需要的时间间隔。</li><li>一般来说，只需要严格按照格式 <code>HH:MM:SS</code>进行插值即可。</li><li>使用 <code>current_time</code> 或 <code>current_time()</code> 或<code>now()</code> 来插入当前时间。</li></ol><p>示例</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_tb02 <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>time<span class="token punctuation">`</span></span> <span class="token keyword">TIME</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_tb02 <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>time<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'23:26:28'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 插入当前的日期</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_tb02 <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>time<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">CURRENT_TIME</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_tb02 <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>time<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">CURRENT_TIME</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_tb02 <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>time<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_tb02<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210804233249.png" /></p><h3 id="datetime">3.3、DATETIME</h3><ol type="1"><li>我在插值时会严格按照格式 <code>YYYY-MM-DD HH:MM:SS</code>来进行插值。</li><li>使用 <code>now()</code> 来插入当前系统的日期和时间。</li></ol><p>示例</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_tb03 <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>datetime<span class="token punctuation">`</span></span> <span class="token keyword">DATETIME</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_tb03 <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>datetime<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2021-07-26 23:26:28'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 插入当前的日期和时间</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_tb03 <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>datetime<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_tb03<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210804233808.png" /></p><h3 id="year">3.4、YEAR</h3><ol type="1"><li>我会严格按照格式 <code>YYYY</code> 来进行插值。</li></ol><p>示例</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_tb04 <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>year<span class="token punctuation">`</span></span> <span class="token keyword">YEAR</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_tb04 <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>year<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2021'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_tb04<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210804234154.png" /></p><h3 id="timestamp">3.5、TIMESTAMP</h3><ol type="1"><li>TIMESTAMP 类型在 MySQL 中也是以 <code>YYYY-MM-DD HH:MM:SS</code>的形式显示的，其形式和 DATETIME 一样，它们的差异在于范围。</li><li>这里我就直接使用给 DATETIME 赋值的方式来给 TIMESTAMP 赋值。</li><li>使用 <code>now()</code> 插入当前系统的时间。</li></ol><p>示例</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_tb05 <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>timestamp<span class="token punctuation">`</span></span> <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_tb05 <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>timestamp<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2021-07-26 23:26:28'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 插入当前的日期和时间</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_tb05 <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>timestamp<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_tb05<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210804234926.png" /></p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大学的四叠半种可能性</title>
    <link href="/2021/07/18/%E5%A4%A7%E5%AD%A6%E7%9A%84%E5%9B%9B%E5%8F%A0%E5%8D%8A%E7%A7%8D%E5%8F%AF%E8%83%BD%E6%80%A7/"/>
    <url>/2021/07/18/%E5%A4%A7%E5%AD%A6%E7%9A%84%E5%9B%9B%E5%8F%A0%E5%8D%8A%E7%A7%8D%E5%8F%AF%E8%83%BD%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<p>系《四叠半神话大系》漫评。</p><p>之前记错了一件事情，是 ED 而非 OP的音乐和回转企鹅罐很像。那种日本少女的声线，带有一点冷冷的气息，容易让人联想到中学时代的学校的风云少女，这种声音，不会一下子让人很喜欢，但是那种声线，声色，绝对可以被划分成一个独特的类别。我现在不是很喜欢，但面对这种声音，这种唱法，却让我有一种留恋的感觉，留恋当时看《回转企鹅罐》的感动，当时也颇觉企鹅罐的OP很惊艳，乃至于成瘾，就日夜循环，可是万事都怕越过那一个度，经过那一段时间的痴迷，现在反而是对其有点敬而远之的意思了。还有一点，我觉得很重要，就是不管这些歌有没有让我厌倦，之后当我再次听到这些歌曲的时候，我的心中总能够激起想要学习日语的欲望，这样看来，我的心底是没有失去对它们的最初的喜爱的。</p><p>说起来，OP 和 ED的画面和动漫的主体一样，有一些意识流，头一次看，给人一种恍惚的感觉，我甚至觉得导演难道是给我喂了致幻药吗？有时还会有一些三次元的画面切进来，我本来是有些讨厌这样的形式的，因为这会使得二次元动画变得不那么纯粹，不过呢，就导演这个德性，我想，我也就顺着他的意，在二次元和三次元之间迷幻下去吧。刚刚暂停了一小会儿，想一部动漫，那部动漫也穿插了一点三次元的的场景，想了半天，终于想起是《意外的幸运签》，那部动漫是相当地优秀，当时我的心灵是受到很大的冲击，那个暗灰色的调调很契合我当时的心境，一时之间难以自抑。那部动漫电影的三次元插入意图是很明显的，对于日本电车的历史记忆，有一点文化输出和文化保留的意图，这种做法我一点都不排斥。反观这个四叠半，完全乱入好吧，这个导演，疯疯癫癫（非贬义）。</p><p>前九集似乎是每一集都是加入了一个不同的社团。每一集的终焉，时间倒流，在下一集的伊始，回到大学刚入学时。网球社、电影社、自行车、读书……没意思。幻想中的大学生活总是玫瑰色的，最后现实也总会坍塌成铅灰色。</p><p>我的大学生活呢？我现在也是正好大二结束。当然，严格意义上讲，我算不得真正的大二结束生，我中间休学过一年。这等事，在国内，好生难堪。别人难堪，非我也。没有任何事情可以使我难堪。这铅灰色的大学生活给我带来的最大的收获，就是，我不会难堪。大概。这也没有什么不好的嘛。如果能够再让我拥有樋口前辈那样豁达的生活态度，那么，可以说，我的此生算是圆满了。然而现实是，即使有了樋口前辈的豁达，在国内这个环境下，这种豁达永远也得不到圆满地地贯彻，吾辈之不幸，大抵如此。</p><p>在所有的铅灰色的颜色中，有一个清新的色彩点，这个点就是明石赋予的。这个女人，自始至终给我的感觉都是清新脱俗，以至于中间一个画面让我联想起高中时代的班长时，心中只得大呼罪过。明石，工科女，爱读书，怎么看怎么喜欢，头发蓬蓬的，软软的，轮廓很可爱。</p><p>封笔。2021.08.04. 蛇头蛇尾。</p>]]></content>
    
    
    <categories>
      
      <category>影评</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漫评</tag>
      
      <tag>影评</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 6 ZigZag Conversion</title>
    <link href="/2021/07/11/LeetCode-6-ZigZag-Conversion/"/>
    <url>/2021/07/11/LeetCode-6-ZigZag-Conversion/</url>
    
    <content type="html"><![CDATA[<h2 id="一题目链接">一、题目链接</h2><p><a href="https://leetcode.com/problems/zigzag-conversion/"class="uri">https://leetcode.com/problems/zigzag-conversion/</a></p><h2 id="二解答">二、解答</h2><p>这题有多个解答，我只取一种比较直观的，而且我认为，这种解法是最适合计算机的，其他如找出数学规律的解答，其数学思想是好的，但是，我认为利用直观的解法可以节约我们的时间。</p><p>先给出代码</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">convert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> numRows<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> numRows <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> s        row_strs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>numRows<span class="token punctuation">)</span><span class="token punctuation">:</span>            row_strs<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>        row <span class="token operator">=</span> <span class="token number">0</span>        flag <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            row_strs<span class="token punctuation">[</span>row<span class="token punctuation">]</span> <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span> row <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> row <span class="token operator">==</span> numRows <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>                flag <span class="token operator">=</span> <span class="token operator">-</span>flag            row <span class="token operator">+=</span> flag        ans <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">for</span> each <span class="token keyword">in</span> row_strs<span class="token punctuation">:</span>            ans <span class="token operator">+=</span> each        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>本题的解法思路很明显，我们把每一行当成一个子串单独拎出来，然后，根据ZigZag 的规律直接一个一个往各层的子串中添加字符即可。顺着那个 ZigZag的轨迹来，可以说是比较直观的。这里比较机智的一个点是使用 flag标志来控制拉链形的轨迹。</p><p>时间复杂度：<code>$O(N)$</code>。空间复杂度：<code>$O(N)$</code>。</p><h3 id="三完整代码">三、完整代码</h3><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># @File  : leet_06.py</span><span class="token comment"># @Author: FanyFull</span><span class="token comment"># @Date  : 2021/7/11</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">convert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> numRows<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> numRows <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> s        row_strs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>numRows<span class="token punctuation">)</span><span class="token punctuation">:</span>            row_strs<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>        row <span class="token operator">=</span> <span class="token number">0</span>        flag <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            row_strs<span class="token punctuation">[</span>row<span class="token punctuation">]</span> <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span> row <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> row <span class="token operator">==</span> numRows <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>                flag <span class="token operator">=</span> <span class="token operator">-</span>flag            row <span class="token operator">+=</span> flag        ans <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">for</span> each <span class="token keyword">in</span> row_strs<span class="token punctuation">:</span>            ans <span class="token operator">+=</span> each        <span class="token keyword">return</span> ans<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    solution <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    s <span class="token operator">=</span> <span class="token string">'AB'</span>    numRows <span class="token operator">=</span> <span class="token number">1</span>    ans <span class="token operator">=</span> solution<span class="token punctuation">.</span>convert<span class="token punctuation">(</span>s<span class="token punctuation">,</span> numRows<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 3 Longest Substring Without Repeating Characters</title>
    <link href="/2021/07/10/LeetCode-3-Longest-Substring-Without-Repeating-Characters/"/>
    <url>/2021/07/10/LeetCode-3-Longest-Substring-Without-Repeating-Characters/</url>
    
    <content type="html"><![CDATA[<h2 id="一题目链接">一、题目链接</h2><p><ahref="https://leetcode.com/problems/longest-substring-without-repeating-characters/"class="uri">https://leetcode.com/problems/longest-substring-without-repeating-characters/</a></p><h2 id="二解答">二、解答</h2><h3 id="解法一暴力求解">2.1 解法一，暴力求解</h3><p>直接使用暴力方法，遍历所有可能的子串，并判断是否有重复的字符，当没有重复的字符时，计算其长度，然后取最长的字符串的长度即为最后的结果。</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>            chars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">128</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                c <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                chars<span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">if</span> chars<span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> check<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>                    res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>时间复杂度：<span class="math inline">\(O(N^3)\)</span>，N为字符串的长度。 空间复杂度：我认为是 <spanclass="math inline">\(O(1)\)</span>，因为每一次 check，需要 128个空间，这是一个常数单位。但是官方教程说是 O(min(m, n))，其中 m 是128，n 是字符串的长度，我认为应该是错误的。</p><h3 id="滑动窗口">2.2 滑动窗口</h3><p>直接看代码</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution2</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        chars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">128</span>        left <span class="token operator">=</span> right <span class="token operator">=</span> <span class="token number">0</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> right <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            r <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span>            chars<span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token comment"># chars[r] > 1 表明从 left 到 right 之间出现重复的字符了</span>            <span class="token keyword">while</span> chars<span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>                l <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span>                chars<span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>                left <span class="token operator">+=</span> <span class="token number">1</span>            res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            right <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里主要的思想是利用 left 和 right 这两个指针，</p><ul><li>先固定 left 指针，然后滑动 right 指针，</li><li>如果在 left 到 right 之间的子串中出现了重复的字符，那么，这时就固定right 指针，</li><li>然后移动左指针，直到 left 到 right 之间的子串中没有重复的字符。</li></ul><p>这里有一个 Python 函数要说明一下，</p><ul><li>ord(): Return the Unicode code(ASCII code) point for a one-characterstring.</li></ul><p>时间复杂度：<span class="math inline">\(O(N)\)</span>，left 指针和right 指针在最坏情况下，总计会遍历字符数组两遍。空间复杂度：同解法一的空间复杂度。</p><h3 id="解法三-滑动窗口优化">2.3 解法三 滑动窗口优化</h3><p>直接看代码</p><p>使用字典的版本</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution3</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        ans <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment"># 存储字符最后一次出现的索引，然后加一</span>        mp <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">in</span> mp<span class="token punctuation">:</span>                i <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>            ans <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span>            mp<span class="token punctuation">[</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>说一下 line8 和 line9 代码的含义，这里是判断 j 指向的字符是否在 mp字典中，如果在，说明之前出现过了这个字符，但是，出现过的字符有两种情况</p><ul><li>第一种，重复的字符在索引 i 到 j（不含 j）之间，那么 line9这行代码就会把 i 指针移动到 mp[s[j]] 位置处（注意 line11这行代码），</li><li>第二种，重复的字符在索引 i 之前出现，这个对索引 i 到索引 j之间的子串没有影响，因而，line9 执行完之后 i 的值不变。</li></ul><p>使用列表的版本</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution3_2</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        chars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">128</span>        left <span class="token operator">=</span> right <span class="token operator">=</span> <span class="token number">0</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> right <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            r <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span>            index <span class="token operator">=</span> chars<span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token comment"># 出现重复的字符了</span>            <span class="token keyword">if</span> index <span class="token operator">!=</span> <span class="token boolean">None</span> <span class="token keyword">and</span> index <span class="token operator">>=</span> left <span class="token keyword">and</span> index <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>                left <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span>            res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            chars<span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> right            right <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里的 line10 和 line11 两行代码和上面的使用字典的代码的 line8 和line9 两行代码的作用相同。</p><p>时间复杂度：<span class="math inline">\(O(N)\)</span>。空间复杂度：我认为还是 <spanclass="math inline">\(O(1)\)</span>。其实争执这个没什么意义。</p><h2 id="三完整代码">三、完整代码</h2><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># @File  : leet_03.py</span><span class="token comment"># @Author: FanyFull</span><span class="token comment"># @Date  : 2021/7/10</span><span class="token comment"># 暴力解法</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>            chars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">128</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                c <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                chars<span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">if</span> chars<span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> check<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>                    res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span class="token comment"># 滑动窗口</span><span class="token keyword">class</span> <span class="token class-name">Solution2</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        chars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">128</span>        left <span class="token operator">=</span> right <span class="token operator">=</span> <span class="token number">0</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> right <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            r <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span>            chars<span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token comment"># chars[r] > 1 表明从 left 到 right 之间出现重复的字符了</span>            <span class="token keyword">while</span> chars<span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>                l <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span>                chars<span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>                left <span class="token operator">+=</span> <span class="token number">1</span>            res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            right <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> res<span class="token comment"># 滑动窗口优化</span><span class="token keyword">class</span> <span class="token class-name">Solution3</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        ans <span class="token operator">=</span> <span class="token number">0</span>        mp <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">in</span> mp<span class="token punctuation">:</span>                i <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>            ans <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span>            mp<span class="token punctuation">[</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">return</span> ans<span class="token keyword">class</span> <span class="token class-name">Solution3_2</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        chars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">128</span>        left <span class="token operator">=</span> right <span class="token operator">=</span> <span class="token number">0</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> right <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            r <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span>            index <span class="token operator">=</span> chars<span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token comment"># 出现重复的字符了</span>            <span class="token keyword">if</span> index <span class="token operator">!=</span> <span class="token boolean">None</span> <span class="token keyword">and</span> index <span class="token operator">>=</span> left <span class="token keyword">and</span> index <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>                left <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span>            res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            chars<span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> right            right <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> res<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    solution <span class="token operator">=</span> Solution3_2<span class="token punctuation">(</span><span class="token punctuation">)</span>    s <span class="token operator">=</span> <span class="token string">'abcdeabcd'</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span>lengthOfLongestSubstring<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>Python</tag>
      
      <tag>滑动窗口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>谈一谈《繁花》</title>
    <link href="/2021/07/09/%E8%B0%88%E4%B8%80%E8%B0%88%E3%80%8A%E7%B9%81%E8%8A%B1%E3%80%8B/"/>
    <url>/2021/07/09/%E8%B0%88%E4%B8%80%E8%B0%88%E3%80%8A%E7%B9%81%E8%8A%B1%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<p>在中学时代，我是读过几本矛盾文学奖的作品的，怎么说呢，好坏参差，大体上，是好作品要多一些，那时我也知道，茅盾文学奖是中国文学的最高奖项，其含金量是很高的，因此，我也翻阅了一些茅奖的作品目录，一部作品，《繁花》，书名很打动我，再看作者，金宇澄，这名字，有点小气，不像是老一辈的名字，再一看题材，旧上海，上个世纪，革命，文革，变革，时代变迁，心里臆断，可能没有啥意思的一部小说。于是，就此错过，转而去读我的金庸古龙去了。</p><p>还好是错过。那时我读，大抵应是欣赏不来的。当然，不是大家戏谑的书中使用的大量的“不响”，而是书中各式各样的女人，男人，让我不响。中学时读着读着肯定就直接放弃了，而不是像如今这样，越读越有滋味儿。</p><p>为什么会这样说呢？我现在的性格，正在一步步往那种极端的方向发展，谈不上善恶。有一个明显的迹象就是，以前在看日本动漫时，有一些人物，是似东京喰种里面的美食家这样的看上去很疯癫，邪魅的人物，我并不会对其产生什么特别的感想，而如今，则会多出来很多共鸣。这个变化，我认为是相当重大的。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
      <tag>文学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 2 Add Two Numbers</title>
    <link href="/2021/07/09/LeetCode-2-Add-Two-Numbers/"/>
    <url>/2021/07/09/LeetCode-2-Add-Two-Numbers/</url>
    
    <content type="html"><![CDATA[<h2 id="一题目链接">一、题目链接</h2><p><a href="https://leetcode.com/problems/add-two-numbers/"class="uri">https://leetcode.com/problems/add-two-numbers/</a></p><h2 id="二解答">二、解答</h2><p>这道题基本上只有一个解答，即每个节点顺次加过去，然后需要处理的就是进位，加一个变量carry 即可。</p><p>代码</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># @File  : leet_02.py</span><span class="token comment"># @Author: FanyFull</span><span class="token comment"># @Date  : 2021/7/9</span><span class="token comment"># Definition for singly-linked list.</span><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token builtin">next</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l1<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> l2<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ListNode<span class="token punctuation">:</span>        res <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token punctuation">)</span>        tmp <span class="token operator">=</span> res        carry <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> l1 <span class="token operator">!=</span> <span class="token boolean">None</span> <span class="token keyword">and</span> l2 <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            tmp<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token punctuation">)</span>            tmp <span class="token operator">=</span> tmp<span class="token punctuation">.</span><span class="token builtin">next</span>            tmp<span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">+</span> l2<span class="token punctuation">.</span>val <span class="token operator">+</span> carry<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span>            carry <span class="token operator">=</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">+</span> l2<span class="token punctuation">.</span>val <span class="token operator">+</span> carry<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">10</span>            l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span><span class="token builtin">next</span>            l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span><span class="token builtin">next</span>        l3 <span class="token operator">=</span> l1 <span class="token keyword">if</span> l1 <span class="token operator">!=</span> <span class="token boolean">None</span> <span class="token keyword">else</span> l2        <span class="token keyword">while</span> l3 <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            tmp<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token punctuation">)</span>            tmp <span class="token operator">=</span> tmp<span class="token punctuation">.</span><span class="token builtin">next</span>            tmp<span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token punctuation">(</span>l3<span class="token punctuation">.</span>val <span class="token operator">+</span> carry<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span>            carry <span class="token operator">=</span> <span class="token punctuation">(</span>l3<span class="token punctuation">.</span>val <span class="token operator">+</span> carry<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">10</span>            l3 <span class="token operator">=</span> l3<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">if</span> carry <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            tmp<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token punctuation">)</span>            tmp <span class="token operator">=</span> tmp<span class="token punctuation">.</span><span class="token builtin">next</span>            tmp<span class="token punctuation">.</span>val <span class="token operator">=</span> carry        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token keyword">class</span> <span class="token class-name">Solution2</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l1<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> l2<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ListNode<span class="token punctuation">:</span>        dummy_head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 用 p 和 q 以将 l1 和 l2 保护起来</span>        p <span class="token operator">=</span> l1        q <span class="token operator">=</span> l2        curr <span class="token operator">=</span> dummy_head        carry <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> p <span class="token operator">!=</span> <span class="token boolean">None</span> <span class="token keyword">or</span> q <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            x <span class="token operator">=</span> p<span class="token punctuation">.</span>val <span class="token keyword">if</span> p <span class="token operator">!=</span> <span class="token boolean">None</span> <span class="token keyword">else</span> <span class="token number">0</span>            y <span class="token operator">=</span> q<span class="token punctuation">.</span>val <span class="token keyword">if</span> q <span class="token operator">!=</span> <span class="token boolean">None</span> <span class="token keyword">else</span> <span class="token number">0</span>            <span class="token builtin">sum</span> <span class="token operator">=</span> carry <span class="token operator">+</span> x <span class="token operator">+</span> y            carry <span class="token operator">=</span> <span class="token builtin">sum</span> <span class="token operator">//</span> <span class="token number">10</span>            curr<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token builtin">sum</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>            curr <span class="token operator">=</span> curr<span class="token punctuation">.</span><span class="token builtin">next</span>            <span class="token keyword">if</span> p <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                p <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token builtin">next</span>            <span class="token keyword">if</span> q <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                q <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">if</span> carry <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            curr<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>carry<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dummy_head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># solution = Solution()</span>    solution <span class="token operator">=</span> Solution2<span class="token punctuation">(</span><span class="token punctuation">)</span>    l1 <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> ListNode<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> ListNode<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    l2 <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> ListNode<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> ListNode<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> solution<span class="token punctuation">.</span>addTwoNumbers<span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span>    <span class="token keyword">while</span> res <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>val<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token builtin">next</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n-------'</span><span class="token punctuation">)</span>    l1 <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>    l2 <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> solution<span class="token punctuation">.</span>addTwoNumbers<span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span>    <span class="token keyword">while</span> res <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>val<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token builtin">next</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n------'</span><span class="token punctuation">)</span>    l1 <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> ListNode<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> ListNode<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> ListNode<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> ListNode<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> ListNode<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> ListNode<span class="token punctuation">(</span><span class="token number">9</span> <span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    l2 <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> ListNode<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> ListNode<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> ListNode<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> solution<span class="token punctuation">.</span>addTwoNumbers<span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span>    <span class="token keyword">while</span> res <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>val<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token builtin">next</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>说明一下，这里的 Solution1 和 Solution2的思想是一样的，第一个解法是我手撸的，第二个是根据官方 Java解答改写的，相比之下，第二个要优雅一点。</p><p>时间复杂度：<code>$O(max(m, n))$</code>，m、n 分别是<code>$l_1$</code> 和 <code>$l_2$</code> 的长度。空间复杂度：<code>$O(max(m, n))$</code>。</p>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 1 Two Sum</title>
    <link href="/2021/07/09/LeetCode-1-Two-Sum/"/>
    <url>/2021/07/09/LeetCode-1-Two-Sum/</url>
    
    <content type="html"><![CDATA[<h2 id="一题目链接">一、题目链接</h2><p><a href="https://leetcode.com/problems/two-sum/"class="uri">https://leetcode.com/problems/two-sum/</a></p><h2 id="二解答">二、解答</h2><h3 id="解法一暴力求解">2.1 解法一，暴力求解</h3><p>直接使用暴力求解方法。这个不需要思考，直接就可以写出来。</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>采用的思想就是直接遍历，没啥好说的。</p><p>时间复杂度：<code>$O(N^2)$</code> 空间复杂度：<code>$O(1)$</code></p><h3 id="解法二两次遍历">2.2 解法二，两次遍历</h3><p>利用 Python 中的字典这一数据结构。其中，key 存的是<code>nums[i]</code>，value 存的是 <code>i</code>，这里的 i是给定数组的索引值。</p><p>代码如下</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution2</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dic<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            complement <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span> complement <span class="token keyword">in</span> dic<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">and</span> dic<span class="token punctuation">[</span>complement<span class="token punctuation">]</span> <span class="token operator">!=</span> i<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> dic<span class="token punctuation">[</span>complement<span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这个解法采用了两次遍历的方法</p><ul><li>第一次遍历时，如果 nums 列表中有重复的元素，那么最后<code>dic[nums[i]]</code> 存储的值将是最后一次的 i；</li><li>第二个遍历中，if 语句要考虑两种情况<ul><li>一是最后的两个 two nums的值是不同的，那么，很显然，<code>dic[target - nums[i]]</code>就是与当前的 i 对应的另一个索引值；</li><li>二是最后的两个 two nums的值是重复的，而且，根据题目给定的条件，题目一定有解，且是唯一解，那么，当前的i 一定是索引值较小的那一个，<code>dic[target - nums[i]]</code>则是另一个。</li></ul></li></ul><p>时间复杂度：<code>$O(N)$</code> 空间复杂度：<code>$O(N)$</code></p><h3 id="解法三一次遍历">2.3 解法三，一次遍历</h3><p>思想和解法二基本是一样的。</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution3</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            complement <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span> complement <span class="token keyword">in</span> dic<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>dic<span class="token punctuation">[</span>complement<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span>            dic<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我们只需要理解一点，找到相应的解时，分两种情况</p><ul><li>一，最后的两个 two nums 的值是不同的，那么，i 的值是大于<code>dic[target - nums[i]]</code> 的；</li><li>二，最后的两个 two nums 的值是重复的，那么，i 的值还是大于<code>dic[target - nums[i]]</code>的，和第一种情况没什么不同，之所以分两种情况，是为了捋得更清楚一些。</li></ul><p>时间复杂度：<code>$O(N)$</code> 空间复杂度：<code>$O(N)$</code></p><h2 id="三完整代码">三、完整代码</h2><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># @File  : leet_01.py</span><span class="token comment"># @Author: FanLu</span><span class="token comment"># @Date  : 2021/7/9</span><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">Solution2</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dic<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            complement <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span> complement <span class="token keyword">in</span> dic<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">and</span> dic<span class="token punctuation">[</span>complement<span class="token punctuation">]</span> <span class="token operator">!=</span> i<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> dic<span class="token punctuation">[</span>complement<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment"># 不存在的情况</span><span class="token keyword">class</span> <span class="token class-name">Solution3</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            complement <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span> complement <span class="token keyword">in</span> dic<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>dic<span class="token punctuation">[</span>complement<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span>            dic<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    solution <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>    target <span class="token operator">=</span> <span class="token number">6</span>    res <span class="token operator">=</span> solution<span class="token punctuation">.</span>twoSum<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一份调校好的 VSCode 的配置文件</title>
    <link href="/2021/07/07/%E4%B8%80%E4%BB%BD%E8%B0%83%E6%A0%A1%E5%A5%BD%E7%9A%84-VSCode-%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <url>/2021/07/07/%E4%B8%80%E4%BB%BD%E8%B0%83%E6%A0%A1%E5%A5%BD%E7%9A%84-VSCode-%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>我个人对于编辑器有特殊的偏好，中文是宋体，英文是Consola，并且，对于英文，字体一般需要跳到 16的大小，这样看上去字体比较圆润。</p><p>但是调校字体这个工作在 VSCode里面有点麻烦，所以直接保存一份文件在这里，方便以后需要时备查。</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"workbench.startupEditor"</span><span class="token operator">:</span> <span class="token string">"newUntitledFile"</span><span class="token punctuation">,</span>    <span class="token property">"explorer.confirmDelete"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"markdown-preview-enhanced.mathRenderingOption"</span><span class="token operator">:</span> <span class="token string">"MathJax"</span><span class="token punctuation">,</span>    <span class="token property">"markdown-preview-enhanced.previewTheme"</span><span class="token operator">:</span> <span class="token string">"one-dark.css"</span><span class="token punctuation">,</span>    <span class="token property">"editor.fontFamily"</span><span class="token operator">:</span> <span class="token string">" ‘宋体’, Consolas, monospace"</span><span class="token punctuation">,</span>    <span class="token property">"editor.fontSize"</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span>    <span class="token property">"picgo.picBed.current"</span><span class="token operator">:</span> <span class="token string">"github"</span><span class="token punctuation">,</span>    <span class="token property">"picgo.picBed.github.branch"</span><span class="token operator">:</span> <span class="token string">"master"</span><span class="token punctuation">,</span>    <span class="token property">"picgo.picBed.github.customUrl"</span><span class="token operator">:</span> <span class="token string">"https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master"</span><span class="token punctuation">,</span>    <span class="token property">"picgo.picBed.github.path"</span><span class="token operator">:</span> <span class="token string">"blogs/pictures/"</span><span class="token punctuation">,</span>    <span class="token property">"picgo.picBed.github.repo"</span><span class="token operator">:</span> <span class="token string">"fanlumaster/BlogMaps"</span><span class="token punctuation">,</span>    <span class="token property">"picgo.picBed.github.token"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment">// 这里不方便显示，要注意</span>    <span class="token property">"editor.minimap.enabled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"explorer.confirmDragAndDrop"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"picgo.customOutputFormat"</span><span class="token operator">:</span> <span class="token string">"![]($&#123;url&#125;)"</span><span class="token punctuation">,</span>    <span class="token property">"editor.mouseWheelZoom"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"security.workspace.trust.untrustedFiles"</span><span class="token operator">:</span> <span class="token string">"open"</span><span class="token punctuation">,</span>    <span class="token property">"security.workspace.trust.enabled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"editor.wordWrap"</span><span class="token operator">:</span> <span class="token string">"on"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>VSCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VSCode</tag>
      
      <tag>个人用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一份简单的 MyBatis Maven 工程</title>
    <link href="/2021/06/23/%E4%B8%80%E4%BB%BD%E7%AE%80%E5%8D%95%E7%9A%84-MyBatis-Maven-%E5%B7%A5%E7%A8%8B/"/>
    <url>/2021/06/23/%E4%B8%80%E4%BB%BD%E7%AE%80%E5%8D%95%E7%9A%84-MyBatis-Maven-%E5%B7%A5%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>借着工程实训的机会，将 MyBatis 框架回忆了一遍，在这里就整理一份基础的MyBatis 文件，也算是一个记录吧，同时留待将来再用时备查。</p><p>这里的环境是：</p><ul><li>IDEA 2021.1.2</li><li>jdk 1.8.0_291</li><li>MyBatis 3.5.7</li><li>MySQL 8.0.25</li></ul><h2 id="工程文件">工程文件</h2><h3 id="文件结构">1、文件结构</h3><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210623235047.png" /></p><h3 id="pom-配置文件">2、pom 配置文件</h3><p>pom.xml 文件</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.hust<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatisdemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mybatisdemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- FIXME change it to the project's website --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://www.example.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.25<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginManagement</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-clean-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-resources-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-surefire-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.22.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-jar-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-install-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-deploy-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-site-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.7.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-project-info-reports-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里要注意最后将 <code>src/main/java</code>下的子包和孙子包等等这些包中的 xml 文件 <code>include</code> 一下。</p><h3 id="resources-目录下的配置文件">3、resources 目录下的配置文件</h3><p>db.properties 文件</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">driverName&#x3D;com.mysql.cj.jdbc.Driverurl&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;empdb?useSSL&#x3D;true&amp;useUnicode&#x3D;true&amp;autoReconnect&#x3D;true&amp;characterEncoding&#x3D;utf-8&amp;serverTimezone&#x3D;GMTuserName&#x3D;rootpassword&#x3D;lf123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里要注意连接 MySQL 8 的数据库驱动的 JDBC 的包是<code>driverName=com.mysql.cj.jdbc.Driver</code>。</p><p>sqlmapconfig.xml 文件</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--类的别名--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--&lt;typeAlias type="com.hust.pojo.Dept" alias="Dept">&lt;/typeAlias>--></span>        <span class="token comment">&lt;!--按照包名批量加载类--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hust.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transactionManager</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;driverName&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;userName&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--加载 mapper 文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--&lt;mapper resource="xxx/xxx.xml">&lt;/mapper>--></span>        <span class="token comment">&lt;!--按照包名批量加载 mapper 文件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hust.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="main-目录下的所有文件">4、main 目录下的所有文件</h3><p>DeptMapper.java 文件</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hust<span class="token punctuation">.</span>dao</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>hust<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Dept</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Param</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DeptMapper</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 获取所有部门信息     * @return     */</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dept</span><span class="token punctuation">></span></span>  <span class="token function">getDeptList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 根据部门编号获取部门信息     * @param id     * @return     */</span>    <span class="token class-name">Dept</span> <span class="token function">getDeptById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//    /**</span><span class="token comment">//     * 增加部门</span><span class="token comment">//     * 当参数超过 1 个的时候，需要添加注解</span><span class="token comment">//     * @param dname</span><span class="token comment">//     * @param loc</span><span class="token comment">//     * @return</span><span class="token comment">//     */</span><span class="token comment">//    int addDept(@Param("dname") String dname, @Param("loc") String loc);</span>    <span class="token comment">/**     * 增加部门     * @param dept     * @return     */</span>    <span class="token keyword">int</span> <span class="token function">addDept</span><span class="token punctuation">(</span><span class="token class-name">Dept</span> dept<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 修改部门所在的城市     * @param id     * @param loc     * @return     */</span>    <span class="token keyword">int</span> <span class="token function">editDept</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"loc"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> loc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 通过部门 id 删除部门信息     * @param id     * @return     */</span>    <span class="token keyword">int</span> <span class="token function">delDeptById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>DeptMapper.xml 文件</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hust.dao.DeptMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deptMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deptno<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deptno<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loc<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--获取所有部门信息，id 要和接口中的方法名一致--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getDeptList<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deptMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        SELECT * FROM dept;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--根据部门编号获取部门信息--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getDeptById<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deptMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        SELECT * FROM dept WHERE deptno=#&#123;id&#125;;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--增加部门--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addDept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        INSERT INTO dept VALUES(null,#&#123;name &#125;,#&#123;loc&#125;);    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--修改部门所在的城市--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>editDept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        UPDATE dept SET loc=#&#123;loc&#125; WHERE deptno=#&#123;id&#125;;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--通过部门 id 删除部门信息--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delDeptById<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        DELETE FROM dept WHERE deptno=#&#123;id&#125;;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Dept.java 文件</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hust<span class="token punctuation">.</span>pojo</span><span class="token punctuation">;</span><span class="token comment">/** * 部门实体类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dept</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> deptno<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> loc<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Dept</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Dept</span><span class="token punctuation">(</span><span class="token keyword">int</span> deptno<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> loc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> deptno<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loc <span class="token operator">=</span> loc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getDeptno</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> deptno<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDeptno</span><span class="token punctuation">(</span><span class="token keyword">int</span> deptno<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> deptno<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getLoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> loc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLoc</span><span class="token punctuation">(</span><span class="token class-name">String</span> loc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loc <span class="token operator">=</span> loc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>App.java 文件</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hust</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>hust<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">DeptMapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>hust<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Dept</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Resources</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSession</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionFactoryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// mybatis 的配置文件</span>        <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"sqlmapconfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建 sqlSessionFactory 工厂</span>        <span class="token class-name">SqlSessionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取 sqlSession 对象，相当于在 JDBC 中封装好的 getConnection()</span>        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DeptMapper</span> deptMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">DeptMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*List&lt;Dept> list = deptMapper.getDeptList();        for (Dept dept : list) &#123;            System.out.println(dept.getDname()); // 注意，后面为了演示，将 dname 属性名更改成了 name        &#125;*/</span>        <span class="token comment">/*Dept dept = deptMapper.getDeptById(10);        if (dept != null) &#123;            System.out.println(dept.getDeptno() + ":" + dept.getName() + ":" + dept.getLoc());        &#125; else &#123;            System.out.println("无此部门");        &#125;*/</span>        <span class="token comment">/*Dept dept = new Dept();        dept.setName("财务部");        dept.setLoc("北京");        int res = deptMapper.addDept(dept);        if (res > 0) &#123;            System.out.println("部门添加成功");        &#125; else &#123;            System.out.println("添加失败");        &#125;*/</span>        <span class="token comment">/*int res = deptMapper.editDept(73, "宜昌");        if (res == 1) &#123;            System.out.println("部门修改成功");        &#125; else &#123;            System.out.println("修改失败");        &#125;*/</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> deptMapper<span class="token punctuation">.</span><span class="token function">delDeptById</span><span class="token punctuation">(</span><span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"部门删除成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 修改数据库中的内容需要提交</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关闭资源</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>MyBatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL 常用语句整理</title>
    <link href="/2021/06/22/MySQL-%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5%E6%95%B4%E7%90%86/"/>
    <url>/2021/06/22/MySQL-%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="一数据库">一、数据库</h2><h3 id="创建数据库">1.1、创建数据库</h3><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> 数据库名称<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="删除数据库">1.2、删除数据库</h3><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> 数据库名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="选择数据库">1.3、选择数据库</h3><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">USE</span> 数据库名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="二数据表">二、数据表</h2><h3 id="创建数据表">2.1、创建数据表</h3><p>格式一：</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>    列名<span class="token punctuation">,</span> 数据类型<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>格式二：</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名 <span class="token punctuation">(</span>    属性名 数据类型 <span class="token punctuation">[</span>完整约束条件<span class="token punctuation">]</span><span class="token punctuation">,</span>    属性名 数据类型 <span class="token punctuation">[</span>完整约束条件<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    属性名 数据类型 <span class="token punctuation">[</span>完整约束条件<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>示例 01</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test01 <span class="token punctuation">(</span>post_id <span class="token keyword">INT</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>title <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'标题'</span><span class="token punctuation">,</span>author <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'用户名'</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>post_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>示例 02（<em>注一</em>）</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>test01<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>post_id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>title<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'标题'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>author<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'用户名'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>post_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里的主键都是最后才指定的，另一种写法是在定义字段的时候指定，示例见文末的大示例。</p><p>关于建表所需的完整约束条件可以参考下面的表</p><table><thead><tr class="header"><th>约束条件</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>PRIMARY KEY</td><td>标识该属性为该表的主键，可以是唯一的标识对应的元组</td></tr><tr class="even"><td>FOREIGN KEY</td><td>标识该属性为该表的外键，是与之联系某表的主键</td></tr><tr class="odd"><td>NOT NULL（<em>注二</em>）</td><td>标识该属性不能为空</td></tr><tr class="even"><td>UNIQUE</td><td>标识该属性的值是唯一的</td></tr><tr class="odd"><td>AUTO_INCREMENT</td><td>标识该属性的值是自动增加，这是 MySQL 的 SQL 语句的特色</td></tr><tr class="even"><td>DEFAULT</td><td>为该属性设置默认值</td></tr></tbody></table><h3 id="删除表">2.2、删除表</h3><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="插入数据">2.3、插入数据</h3><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_name<span class="token punctuation">(</span> field1<span class="token punctuation">,</span> field2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>fieldN <span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span> value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>valueN <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里要注意反引号和单引号的使用（双引号的用法和单引号类似，官方建议使用单引号），</p><ul><li>一般表名和列名要使用反引号。</li><li>一般字符串类型要使用单引号。</li><li>DATE 和 DATATIME 等时间日期类型也建议使用单引号。</li><li>其他数据，如 INT 类型不使用引号。</li></ul><h3 id="删除数据">2.4、删除数据</h3><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> table_name <span class="token punctuation">[</span><span class="token keyword">WHERE</span> Clause<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="三注释的写法">三、注释的写法</h2><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 注释样例1</span><span class="token comment">/* 注释样例2 */</span><span class="token comment">-- 注释样例3。注意，这种形式的注释，'--' 后面一定要加一个空格</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="四一份示例">四、一份示例</h2><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tb_stu<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>age <span class="token keyword">INT</span><span class="token punctuation">,</span>stuno <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>tel <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 插入语句第一种写法</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_stu<span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> stuno<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'张醒言'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'20190001'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 插入语句第二种写法</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_stu<span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> stuno<span class="token punctuation">,</span> tel<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'琼彤'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'20190002'</span><span class="token punctuation">,</span> <span class="token string">'12841283428'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># sql 语句插入为 null，如果属性是自增的，那么，数据库在插入时会自动插入上一个属性值的增一的值</span><span class="token comment"># 插入语句第三种写法</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_stu <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'雪宜'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'20190003'</span><span class="token punctuation">,</span> <span class="token string">'12841283428'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_stu <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'盈掬'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'20190003'</span><span class="token punctuation">,</span> <span class="token string">'12841283428'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'伯玉'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'20190003'</span><span class="token punctuation">,</span> <span class="token string">'12841283428'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 删除语句</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> tb_stu <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment"># 删除 tel 为空的条目</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> tb_stu <span class="token keyword">WHERE</span> tel <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token comment"># 更新语句</span><span class="token keyword">UPDATE</span> tb_stu <span class="token keyword">SET</span> age <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">;</span><span class="token keyword">UPDATE</span> tb_stu <span class="token keyword">SET</span> age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">,</span> stuno <span class="token operator">=</span> <span class="token string">'201912206'</span><span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">UPDATE</span> tb_stu <span class="token keyword">SET</span> name <span class="token operator">=</span> <span class="token string">'琼肜'</span><span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment"># 查询语句</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tb_stu<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tb_stu <span class="token keyword">WHERE</span> age <span class="token operator">BETWEEN</span> <span class="token number">26</span> <span class="token operator">AND</span> <span class="token number">28</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tb_stu <span class="token keyword">WHERE</span> age <span class="token operator">BETWEEN</span> <span class="token number">26</span> <span class="token operator">AND</span> <span class="token number">27</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tb_stu <span class="token keyword">WHERE</span> age <span class="token operator">=</span> <span class="token number">28</span> <span class="token operator">AND</span> tel <span class="token operator">=</span> <span class="token string">'12841283428'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tb_stu <span class="token keyword">WHERE</span> age <span class="token operator">=</span> <span class="token number">28</span> <span class="token operator">OR</span> tel <span class="token operator">=</span> <span class="token string">'12841283428'</span><span class="token punctuation">;</span><span class="token comment"># 表示别名的 AS 可以省略，一般使用空格即可</span><span class="token keyword">SELECT</span> id <span class="token keyword">AS</span> <span class="token string">'主键'</span><span class="token punctuation">,</span> name <span class="token string">'姓名'</span><span class="token punctuation">,</span> stuno <span class="token string">'学号'</span> <span class="token keyword">FROM</span> tb_stu<span class="token punctuation">;</span><span class="token keyword">SELECT</span> id <span class="token keyword">AS</span> <span class="token string">'主键'</span><span class="token punctuation">,</span> name <span class="token string">'姓名'</span><span class="token punctuation">,</span> stuno <span class="token string">'学号'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>age <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token string">'年龄'</span> <span class="token keyword">FROM</span> tb_stu<span class="token punctuation">;</span><span class="token comment"># distinct 关键字，表示消除重复的行</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> age <span class="token keyword">FROM</span> tb_stu<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><hr /><p>注释</p><p>注一：这个是用 <code>show create table test01;</code>的运行结果中的创建 MySQL自己生成的表创建语句，感觉应该会比较官方。所以，表名和属性名字段也是还是用反引号给包裹起来的。</p><p>注二：关于 NOT NULL，有些人认为 MySQL 字段属性应该尽量设置为 NOTNULL。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于对 Spring IoC 和 DI 的理解</title>
    <link href="/2021/06/21/%E5%85%B3%E4%BA%8E%E5%AF%B9-Spring-IoC-%E5%92%8C-DI-%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <url>/2021/06/21/%E5%85%B3%E4%BA%8E%E5%AF%B9-Spring-IoC-%E5%92%8C-DI-%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>本文基本是转载的博客，转载自：<ahref="https://www.cnblogs.com/xdp-gacl/p/4249939.html"class="uri">https://www.cnblogs.com/xdp-gacl/p/4249939.html</a></p><p>一直以来对 Spring 的控制反转（IoC，Inversion ofControl）和依赖注入（DI，DependencyInjection）感到很迷惑，也零零散散看过一些资料，但还是云里雾里，而且一直苦于没有时间整理，今天终于有机会，趁着软工大二工程实训，就把这个知识点整理一下。也是因为看到了一篇非常清晰明了的讲述IoC 和 DI 的博客，遂记录和转载一下。</p><h2 id="一分享-iteye-的开涛对-ioc-的精彩讲解">一、分享 Iteye 的开涛对IoC 的精彩讲解</h2><h3 id="ioc-是什么">1.1、IoC 是什么</h3><p>Ioc—Inversion ofControl，即“控制反转”，不是什么技术，而是一种设计思想。在 Java开发中，IoC意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。如何理解好IoC 呢？理解好 IoC的关键是要明确“谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了”，那我们来深入分析一下：</p><ul><li><p>谁控制谁，控制什么：传统 Java SE 程序设计，我们直接在对象内部通过new 进行创建对象，是程序主动去创建依赖对象；而 IoC是有专门一个容器来创建这些对象，即由 IoC 容器来控制对象的创建；谁控制谁？当然是 IoC容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。</p></li><li><p>为何是反转，哪些方面反转了：有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。用图例说明一下，传统程序设计如图1-1，都是主动去创建相关对象然后再组合起来：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210621201122.png"alt="图 1-1 传统应用程序示意图" /></p><p>当有了 IoC/DI 的容器后，在客户端类中不再主动去创建这些对象了，如图1-2 所示:</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210621201804.png"alt="图 1-2 有 IoC/DI 容器后程序结构示意图" /></p></li></ul><h3 id="ioc-能做什么">1.2、IoC 能做什么</h3><p>IoC不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了IoC容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。</p><p>其实 IoC对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在IoC/DI 思想中，应用程序就变成被动的了，被动的等待 IoC容器来创建并注入它所需要的资源了。</p><p>IoC 很好的体现了面向对象设计法则之一——好莱坞法则：“别找我们，我们找你”；即由 IoC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。</p><h3 id="ioc-和-di">1.3、IoC 和 DI</h3><p>DI—DependencyInjection，即“依赖注入”：组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。</p><p>理解 DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”，那我们来深入分析一下：</p><ul><li>谁依赖谁：当然是应用程序依赖 IoC 容器；</li><li>为什么需要依赖：应用程序需要 IoC 容器来提供对象需要的外部资源；</li><li>谁注入谁：很明显是 IoC容器注入应用程序某个对象，应用程序依赖的对象</li><li>注入了什么：就是注入了某个对象所需要的外部资源（包括对象、资源、常量数据）。</li></ul><p>IoC 和 DI由什么关系呢？其实它们是同一个概念的不同角度描述，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004 年大师级人物 Martin Fowler 又给出了一个新的名字：“依赖注入”，相对IoC 而言，“依赖注入”明确描述了“被注入对象依赖 IoC容器配置依赖对象”。</p><h2 id="二分享-bromon-的-blog-上对-ioc-与-di-浅显易懂的讲解">二、分享Bromon 的 blog 上对 IoC 与 DI 浅显易懂的讲解</h2><h3 id="ioc控制反转">2.1、IoC（控制反转）</h3><p>首先想说说 IoC（Inversion of Control，控制反转）。这是 Spring的核心，贯穿始终。所谓 IoC，对于 Spring 框架来说，就是由 Spring来负责控制对象的生命周期和对象间的关系。这是什么意思呢，举个简单的例子，我们是如何找女朋友的？常见的情况是，我们到处去看哪里有长得漂亮身材又好的mm，然后打听她们的兴趣爱好、qq号、电话号、ip号、iq号………，想办法认识她们，投其所好送其所要，然后嘿嘿……这个过程是复杂深奥的，我们必须自己设计和面对每个环节。传统的程序开发也是如此，在一个对象中，如果要使用另外的对象，就必须得到它（自己new 一个，或者从 JNDI（<em>注一</em>）中查询一个），使用完之后还要将对象销毁（比如 Connection等），对象始终会和其他的接口或类藕合起来。</p><p>那么 IoC是如何做的呢？有点像通过婚介找女朋友，在我和女朋友之间引入了一个第三者：婚姻介绍所。婚介管理了很多男男女女的资料，我可以向婚介提出一个列表，告诉它我想找个什么样的女朋友，比如长得像李嘉欣，身材像林熙雷，唱歌像周杰伦，速度像卡洛斯，技术像齐达内之类的，然后婚介就会按照我们的要求，提供一个mm，我们只需要去和她谈恋爱、结婚就行了。简单明了，如果婚介给我们的人选不符合要求，我们就会抛出异常。整个过程不再由我自己控制，而是有婚介这样一个类似容器的机构来控制。Spring所倡导的开发方式就是如此，所有的类都会在 Spring 容器中登记，告诉 Spring你是个什么东西，你需要什么东西，然后 Spring会在系统运行到适当的时候，把你要的东西主动给你，同时也把你交给其他需要你的东西。所有的类的创建、销毁都由Spring 来控制，也就是说控制对象生存周期的不再是引用它的对象，而是Spring。对于某个具体的对象而言，以前是它控制其他对象，现在是所有对象都被Spring控制，所以这叫控制反转。</p><h3 id="di依赖注入">2.3、DI（依赖注入）</h3><p>IoC的一个重点是在系统运行中，动态的向某个对象提供它所需要的其他对象。这一点是通过DI（Dependency Injection，依赖注入）来实现的。比如对象 A需要操作数据库，以前我们总是要在A中自己编写代码来获得一个 Connection对象，有了 Spring 我们就只需要告诉 Spring，A 中需要一个Connection，至于这个 Connection 怎么构造，何时构造，A不需要知道。在系统运行时，Spring 会在适当的时候制造一个Connection，然后像打针一样，注射到 A当中，这样就完成了对各个对象之间关系的控制。A 需要依赖 Connection才能正常运行，而这个 Connection 是由 Spring 注入到 A中的，依赖注入的名字就这么来的。那么 DI 是如何实现的呢？ Java 1.3之后一个重要特征是反射（reflection），它允许程序在运行的时候动态的生成对象、执行对象的方法、改变对象的属性，Spring就是通过反射来实现注入的。</p><p>理解了 IoC 和 DI 的概念后，一切都将变得简单明了，剩下的工作只是在Spring 的框架中堆积木而已。</p><h2 id="三个人理解">三、个人理解</h2><p>最后补充一下我个人的理解。关于这个IoC，中文翻译过来时控制反转，这个“反转”二字，我觉得翻译得不好，我认为应该是翻译成转移会更好一点，因为它这个关于对象的创建并不是把控制权直接进行反转，而是转移给了IoC 容器。</p><hr /><p>注释</p><p>注一：JNDI，即 Java Naming and Directory Interface。</p>]]></content>
    
    
    <categories>
      
      <category>转载</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
      <tag>转载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA 使用内置 Maven 创建一个 Spring 项目</title>
    <link href="/2021/06/21/IDEA-%E4%BD%BF%E7%94%A8%E5%86%85%E7%BD%AE-Maven-%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA-Spring-%E9%A1%B9%E7%9B%AE/"/>
    <url>/2021/06/21/IDEA-%E4%BD%BF%E7%94%A8%E5%86%85%E7%BD%AE-Maven-%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA-Spring-%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="创建-maven-项目">创建 Maven 项目</h2><p>首先，New Project</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210621153555.png" /></p><p>next，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210621155045.png" /></p><p>这里的 Name 是项目的名称，然后修改包名，这里的 ArtifactId默认和项目的 Name 保持一致。</p><p>next，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210621155230.png" /></p><p>我这里的 3 个选项全部保持默认，这里要注意一点，这个<code>C:\Users\用户名\.m2\setting.xml</code>文件默认是不存在的，然后这时 IDEA 在项目中就会自动去其内置的 Maven中寻找配置文件，其在文件中的路径默认为<code>C:\Program Files\JetBrains\IntelliJ IDEA 2021.1.2\plugins\maven\lib\maven3\conf</code>，如下</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210621155617.png" /></p><p>然后我们添加 Maven 的阿里云镜像也是直接修改这个文件，如下，在<code>setting.xml</code> 中添加如下代码</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>nexus-aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Nexus aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210621155909.png" /></p><p>由于我这里的 repository 使用的默认的位置，所以我就没有配置本地的repository。需要配置时再到网上搜索相关配置进行配置即可。</p><p>然后 finish。</p><p>这里可能会出现<code>No archetype found in remote catalog. Defaulting to internal catalog.</code>这样的警告，这个问题是由阿里云的仓库导致的，我在使用官方默认的仓库（需要科学上网）就不会出现这样的问题。不过，这个警告不会对项目产生什么大的影响。</p><p>我们运行一下默认的项目，得到如下的结果</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210621162034.png" /></p><h2 id="spring-相关配置">Spring 相关配置</h2><p>首先，去 Maven 的中央仓库（<a href="https://mvnrepository.com/"class="uri">https://mvnrepository.com/</a>）</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210621171445.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210621171610.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210621171542.png" /></p><p>然后将上面的代码框中的代码复制下来，并粘贴到 IDEA 的 pom 文件下</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210621171739.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210621171838.png" /></p><p>右键 main 目录，在下面新建一个 resources 目录，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210621172029.png" /></p><p>IDEA 有自动提示的 resources 目录，点击创建即可</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210621171947.png" /></p><p>然后在 resources 目录下创建一个 <code>beans.xml</code> 配置文件</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210621172241.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210621172402.png" /></p><p>接下来我们就简单写个类测试一下。</p><p>首先写一个 Student 类</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210621172716.png" /></p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hust<span class="token punctuation">.</span>bean</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> tel<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> tel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tel <span class="token operator">=</span> tel<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> tel<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTel</span><span class="token punctuation">(</span><span class="token class-name">String</span> tel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tel <span class="token operator">=</span> tel<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>然后在 <code>bean.xml</code> 中增加一个 bean，如下</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--属性注入--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zhangsan<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hust.bean.Student<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tel<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18627158203<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>最后在 App 类中进行测试</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hust</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>hust<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">Student</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span><span class="token class-name">BeanFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span><span class="token comment">/** * Hello world! * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">BeanFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> factory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> student<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> student<span class="token punctuation">.</span><span class="token function">getTel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>输出结果</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">张三:20:18627158203</code></pre></div></figure><p>到此，基本就完成了。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Maven</tag>
      
      <tag>Spring</tag>
      
      <tag>大二工程实训</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机相关的缩写词汇积累</title>
    <link href="/2021/06/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3%E7%9A%84%E7%BC%A9%E5%86%99%E8%AF%8D%E6%B1%87%E7%A7%AF%E7%B4%AF/"/>
    <url>/2021/06/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3%E7%9A%84%E7%BC%A9%E5%86%99%E8%AF%8D%E6%B1%87%E7%A7%AF%E7%B4%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="汇编相关">汇编相关</h2><ol type="1"><li>GDT：Global Descriptor Table，全局描述符表</li><li>IDT：Interrupt Descriptor Table，中断描述符表</li><li>LDT：Local Descriptor Table，局部描述符表</li><li>TI：Table Indicator</li><li>RPL：Request Privilege Level</li></ol><h2 id="前端相关">前端相关</h2><ol type="1"><li>Ajax: Asynchronous JavaScript and XML</li></ol>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>未竟</tag>
      
      <tag>计算机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>8086CPU 中的物理地址</title>
    <link href="/2021/06/14/8086CPU-%E4%B8%AD%E7%9A%84%E7%89%A9%E7%90%86%E5%9C%B0%E5%9D%80/"/>
    <url>/2021/06/14/8086CPU-%E4%B8%AD%E7%9A%84%E7%89%A9%E7%90%86%E5%9C%B0%E5%9D%80/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>关于 8086CPU的物理地址，其实在上汇编语言这门课的时候，我对于这个概念是十分理解的，但是隔了一段时间之后，就忘掉了。所以，好记性不如烂键盘，还是记录一下比较好，这样一来，以后复习的时候比较方便。</p><h2 id="cpu-的物理地址让人感到有点奇怪的原因">8086CPU的物理地址让人感到有点奇怪的原因</h2><p>8086CPU 有 20 位地址总线，可以传送 20 位地址，达到 1MB寻址能力（<em>注一</em>）。而 8086CPU 又是 16位结构（<em>注二</em>），在内部一次性处理、传输、暂时存储的地址为 16位。</p><p>而为了有效利用 20 位地址总线，8086CPU 采用了一种在内部用两个 16位地址合成的方法来形成一个 20 位的物理地址。</p><p>物理地址的计算方法如下：</p><p><strong>物理地址 = 段地址 × 16 +偏移地址</strong>（<em>注三</em>）</p><h2id="段地址16偏移地址物理地址的本质含义">“段地址×16+偏移地址=物理地址”的本质含义</h2><p>“段地址×16+偏移地址=物理地址”的本质含义是：CPU在访问内存时，用一个基础地址（段地址×16）和一个相对于基础地址的偏移地址相加，给出内存单元的物理地址。</p><p>更一般地说，8086CPU的这种寻址功能是“基础地质+偏移地址=物理地址”寻址模式的一种具体实现方案。8086CPU中，段地址×16可看作是基础地址。</p><p>下面用两个比喻来进一步说明。</p><p>第一个比喻说明“基础地址+偏移地址=物理地址”的思想。</p><p>比如说，学校、体育馆、图书馆同在一条笔直的单行路上，如下图，学校位于路的起点（从路的起点到学校的距离是0 米）。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210614151821.png"alt="学校、体育馆、图书馆的位置关系" /></p><p>我们可以用两种方式来描述图书馆的地址：</p><ol type="1"><li>从学校走 2826m 到图书馆。这 2826m 可以认为是图书馆的物理地址。</li><li>从学校走 2000m 到体育馆，从体育馆再走 826m 到图书馆。第一个距离2000m，是相对于起点的基础地址，第二个距离 826m是相对于基础地地址的偏移地址。</li></ol><p>第一种方式是直接给出物理地址2826m，而第二种方式是用基础地址和偏移地址相加来得到物理地址的。</p><p>第二个比喻进一步说明“段地址×16+偏移地址=物理地址”的思想。</p><p>比如有一个 4 位数</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210614152608.png" /></p><p>假设有某种限制，我们只能使用 3 位数，那么，我们可以用下面这两个 3位数来表示上面的 4 位数，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210614152621.png" /></p><p>表示方法为：200（段地址）×10+826（偏移地址）=2826（物理地址）。这和8086CPU 表示物理地址的方法是类似的。</p><h2 id="段的概念">段的概念</h2><p>我们注意到，“段地址”这个名称包含着“段”的概念。这种说法可能对一些学习者产生了误导，使人误以为内存被划分成了一个个的段，每一个段有一个段地址，实际上不是这样。</p><p>其实，内存并没有分段，段的划分来自于 CPU，由于 8086CPU用“基础地址（段地址×16）+偏移地址=物理地址”的方式给出内存单元的物理地址，使得我们可以用分段的方式来管理内存。如下图所示，我们可以认为：地址10000H~100FFH的内存单元组成了一个段，该段的起始地址（基础地址）为 10000H，段地址为1000H，段大小为 100H；我们也可以认为地址10000H<sub>1007FH、10080H</sub>100FFH的内存单元组成两个段，它们的起始地址（基础地址）分别为：10000H 和10080H，段地址分别为：1000H 和 1008H，大小都为 80H。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210614153310.png"alt="分段" /></p><p>在编程中，我们可以根据需要，将若干地址连续的内存单元看作一个段，用段地址×16定位段的起始地址（基础地址），用偏移地址定位段中的内存单元。</p><p>有两点需要注意：段地址×16必然是 16的倍数，所以一个段的起始地址也一定是 16 的倍数；偏移地址为 16 位，16位地址的寻址能力为 64KB，所以一个段的长度最大为 64KB。</p><hr /><p>注释：</p><p>注一：这里的寻址能力是 1MB，因为<code>$2^&#123;20&#125; = 1024 \times 1024$</code>，它可以表示<code>$1024 \times 1024$</code> 个不同的 8位二进制数，即一个字节（Byte），所以 20 位地址总线的寻址能力是 1MB。注二：16 位结构描述了一个 CPU 具有下面几方面的结构特性 -运算器一次最多可以处理 16 位的数据； - 寄存器的最大宽度为 16 位； -寄存器和运算器之间的通路为 16 位。注三：段地址×16相当于向左移动了一位，因为这里是 16 进制。</p><p>参考：《汇编语言》（王爽）</p>]]></content>
    
    
    <categories>
      
      <category>汇编语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>汇编中的存储单元（存储单位）</title>
    <link href="/2021/06/14/%E6%B1%87%E7%BC%96%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8%E5%8D%95%E5%85%83%EF%BC%88%E5%AD%98%E5%82%A8%E5%8D%95%E4%BD%8D%EF%BC%89/"/>
    <url>/2021/06/14/%E6%B1%87%E7%BC%96%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8%E5%8D%95%E5%85%83%EF%BC%88%E5%AD%98%E5%82%A8%E5%8D%95%E4%BD%8D%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="汇编中的单位">汇编中的单位</h2><p>计算机的最小信息单位是bit（比特，即一个位），也就是一个二进制位。然后，由此可以得出一下换算单位</p><ul><li>1B = 8b，即 1 Byte = 8 bit</li><li>1K = 1024B</li><li>1MB = 1024KB</li><li>1GB = 1024MB</li><li>1TB = 1024GB</li></ul><p>磁盘的容量单位同这里的存储单位一样，实际上以上单位是微机中常用的计量单位。</p><h2 id="其他的换算方法">其他的换算方法</h2><p>我们有时候可以看到，1GB 会被换算成 1000 MB，这是怎么回事呢？</p><p>这就要提到另一个标准了，据知乎上用户回答，这是一个历史遗留问题，在这里表现在G 和 M 作为国际单位制词头其规定的换算关系是 1G =1000M。因为早期很多设备的存储容量比较小，所以用 1000 代替 1024的误差并不大，当时就使用 1K = 1000B 这个换算方式了。</p><p>但是微软坚持使用 2 的整数次幂来标示存储容量，而厂家报的容量是按照1000这种方式来算的，所以这就造成了我们看到的容量和厂家报的容量不一致的情况（当然，格式化也会损失一些内存）。而苹果和Linux 则是采用国际标准的 1000 这种方式来计量单位。</p><p>为了解决这种混乱的局面，1999 年 1月，国际电工委员会（IEC）引入了“kibi-”、“mebi-”、“gibi-”等词头以及缩写符号“Ki”、“Mi”、“Gi”等来明确说明二进制乘数计数。就是说正确的写法应该是1GiB = 1024MiB。这个单位我们平时也应该多有见到过。</p><p>然而，由于缺少官方支持，二进制乘数词头还没有广泛被制造业者和个人采用，很多人继续在二进制领域使用国际单位制词头。</p><hr /><p>参考：</p><p>1、《汇编语言》（王爽） 2、<ahref="https://www.zhihu.com/question/20255371"class="uri">https://www.zhihu.com/question/20255371</a></p>]]></content>
    
    
    <categories>
      
      <category>汇编语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编语言</tag>
      
      <tag>计算机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyCharm设置文件头注释和光标位置</title>
    <link href="/2021/06/12/PyCharm%E8%AE%BE%E7%BD%AE%E6%96%87%E4%BB%B6%E5%A4%B4%E6%B3%A8%E9%87%8A%E5%92%8C%E5%85%89%E6%A0%87%E4%BD%8D%E7%BD%AE/"/>
    <url>/2021/06/12/PyCharm%E8%AE%BE%E7%BD%AE%E6%96%87%E4%BB%B6%E5%A4%B4%E6%B3%A8%E9%87%8A%E5%92%8C%E5%85%89%E6%A0%87%E4%BD%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20201127231721.png" /></p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none"># -*- coding: utf-8 -*-# @File  : $&#123;NAME&#125;.py# @Author: FanLu# @Date  : $&#123;DATE&#125;#[[$END$]]#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>上面的 <code>@Author</code> 的后面可以换上自己的名字.</p><p>注意, 一定要勾选那个 Enable Live Templates, 否则这句<code>#[[$END$]]#</code> 设置光标的内容就无法生效.</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyCharm</tag>
      
      <tag>博客园迁移</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CMake 学习记录</title>
    <link href="/2021/06/11/CMake-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/2021/06/11/CMake-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="一份最简单的-cmakelists">一份最简单的 CMakeLists</h2><p>这是我在 CLion中最长用的一种配置，其实也就是原始配置。在现阶段，顶天了也就是多 add几个 executable，所以目前先给我这个 CMakeLists 加上注释，因为今天我我<code>add_executable()</code> 都不会用了，我淦。</p><p>这里补充一下，<code>#</code> 及后面的内容代表注释。</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none"># CMake 最低版本号要求cmake_minimum_required(VERSION 3.19)# 项目信息project(LinuxCLearning C)# 设定 C 的标准set(CMAKE_C_STANDARD 99)# 执行生成目标add_executable(LinuxCLearning main.c)add_executable(draft01 draft01.c)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>下面对上面的几个命令作具体说明。</p><ol type="1"><li><code>cmake_minimum_required</code>: 指定运行此配置文件所需的 CMake的最低版本；</li><li><code>project</code>: 参数值是<code>LinuxCLearning C</code>，表明该项目的名称是<code>LinuxCLearning</code>，并且明确了项目的语言是 C 语言；</li><li><code>set</code>: 第一个参数是 CMake 的自带的用来指定 C标准的变量，第二个参数就是具体的 C 标准；</li><li><code>add_executable</code>:第一个参数的作用是指定生成的可执行文件的名称，第二个参数是待编译的源文件。</li></ol><p>我这里主要的需求其实还是将当前目录下的多个 C源文件编译成可执行文件，所以 <code>add_executable</code>用得比较多一点。</p><h2 id="命令指南">命令指南</h2><p>这里秉持即用即查的理念，用到时再查，再记录，点到为止。</p><hr /><p>参考：</p><p>1、<a href="https://zhuanlan.zhihu.com/p/267803605"class="uri">https://zhuanlan.zhihu.com/p/267803605</a>2、官方帮助手册：<a href="https://cmake.org/cmake/help/v3.19/"class="uri">https://cmake.org/cmake/help/v3.19/</a></p>]]></content>
    
    
    <categories>
      
      <category>C 语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>未竟</tag>
      
      <tag>C 语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GCC 常用命令行选项</title>
    <link href="/2021/06/10/GCC-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%80%89%E9%A1%B9/"/>
    <url>/2021/06/10/GCC-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%80%89%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<p><code>-E</code>:在预处理操作(<em>注一</em>)之后停止之后的操作；不会运行接下来的正确编译阶段。输出的格式是预处理之后的源码，它们将会被输出到标准输出（这里是控制台）中。输入不需要预处理的文件将会被忽视。</p><p><code>-Wall</code>:这将会开启关于用户认为有问题的一些结构的所有警告，并且它们是很容易避免的（或者去修改以便阻止警告），即使与宏相结合。</p><hr /><p>参考：《gcc.pdf》，即 GCC 官方文档（这里是 GCC 11.1版本的手册）。</p><p>注释：</p><p>注一：编译最多可涉及四个阶段：预处理、正确编译、汇编和链接。</p>]]></content>
    
    
    <categories>
      
      <category>C 语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>未竟</tag>
      
      <tag>C 语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows 安装 MinGW-w64</title>
    <link href="/2021/06/10/Windows-%E5%AE%89%E8%A3%85-MinGW-w64/"/>
    <url>/2021/06/10/Windows-%E5%AE%89%E8%A3%85-MinGW-w64/</url>
    
    <content type="html"><![CDATA[<h2 id="下载">下载</h2><p>下载网址为：<ahref="http://mingw-w64.org/doku.php/download/mingw-builds"class="uri">http://mingw-w64.org/doku.php/download/mingw-builds</a></p><p>然后点击 Sourceforge 进行下载</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210610200242.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210610200400.png" /></p><h2 id="安装">安装</h2><p>双击刚刚的文件进行安装</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210610200504.png" /></p><p>然后 Next</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210610200922.png" /></p><p>这里 Version 选择最新版本即可。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210610201008.png" /></p><p>这里因为我的电脑是 64 位，所以选择 <code>x86_64</code>，而<code>i686</code> 是 32 位的。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210610202214.png" /></p><p>这里的 Threads 我选择了 posix 接口，即可移植的类 Unix 接口。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210610201843.png" /></p><p>这里的异常处理机制我选择的是 seh，它的性能是比较好的。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210610202133.png" /></p><p>最后一个下拉框只有一个选项，所以我们直接下一步即可。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210610202320.png" /></p><p>安装路径这里我直接选择默认。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210610202634.png" /></p><p>由于网速的原因，我这里实在是下不动，所以就选择了另外一种下载方式，直接到<a href="https://sourceforge.net/projects/mingw-w64/files/"class="uri">https://sourceforge.net/projects/mingw-w64/files/</a>下载离线文件</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210610202919.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210610203318.png" /></p><p>这个和刚刚在线安装时选择的版本是一样的。</p><p>将刚刚下载的文件解压到 Program Files 文件夹下，解压后的文件夹是mingw64，这个也可以放在其他目录下。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210610203227.png" /></p><p>然后将该文件夹下的 bin 目录的路径添加到系统环境变量中的 Path中去，如下图</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210610203549.png" /></p><p>然后输入以下命令，检验是否安装成功</p><figure><div class="code-wrapper"><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">gcc -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210610203804.png" /></p><p>到这里就安装成功了。</p><p>2021.11.30 更新：</p><p>建议 mingw 版本换成如下的版本：</p><p><a href="https://winlibs.com/">下载网址</a></p><p><img src="https://i.imgur.com/JCHDxRf.png" /></p><p><img src="https://i.imgur.com/fdgYOO1.png" /></p><p><strong>因为</strong>原来的的在 sourceforge 上下载的 mingw 版本中的gdb 的版本是 gdb 8.1.0，<strong>此版本有bug！</strong> 目前是因为<code>finish</code> 命令会直接退出 gdb。</p><hr /><p>参考：</p><p>1、<a href="https://www.jianshu.com/p/d66c2f2e3537"class="uri">https://www.jianshu.com/p/d66c2f2e3537</a><br />2、<ahref="https://stackoverflow.com/questions/67574925/update-gdb-version-on-windows-10"class="uri">https://stackoverflow.com/questions/67574925/update-gdb-version-on-windows-10</a><br />3、<ahref="https://stackoverflow.com/questions/50654681/gdb-quits-when-running-the-finish-command"class="uri">https://stackoverflow.com/questions/50654681/gdb-quits-when-running-the-finish-command</a></p>]]></content>
    
    
    <categories>
      
      <category>C 语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C 语言</tag>
      
      <tag>软件安装</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《一站式学习C编程》读书笔记</title>
    <link href="/2021/06/09/%E3%80%8A%E4%B8%80%E7%AB%99%E5%BC%8F%E5%AD%A6%E4%B9%A0C%E7%BC%96%E7%A8%8B%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/06/09/%E3%80%8A%E4%B8%80%E7%AB%99%E5%BC%8F%E5%AD%A6%E4%B9%A0C%E7%BC%96%E7%A8%8B%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="cpu">16.2 CPU</h3><p>原书内容摘录如下</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210609211227.png" /></p><blockquote><p>3.执行指令，读内存，取上来的数是3，保存到eax寄存器。注意，地址0x804a01c～0x804a01f里存储的四个字节不能按地址从低到高的顺序看成0x03000000，而要按地址从高到低的顺序看成0x00000003。也就是说，对于多字节的整数类型，低地址保存的是整数的低位，这称为小端（LittleEndian）字节序（ByteOrder）。x86平台是小端字节序的，而另外一些平台规定低地址保存整数的高位，称为大端（BigEndian）字节序。注意上图只画了前三步，剩下的步骤读者可以自己画图理解。</p></blockquote><p>我这里主要是想学习大端序和小端序这个知识点，然后在这里发现此知识点，但是，这里原书说的地址0x804a01c～0x804a01f 里存储的四个字节按小端序取出来是0x00000003，我一开始没有理解，然后，想了一段时间，发现它这每一个地址（比如0x804a01c）中存储的都是一个<strong>字节</strong>，也就是一个<strong>两位16 进制的数</strong>，对于图中 0x804a01c～0x804a01f地址存储的数，我们要很自然地想到它省略了高位的 0！也即0x804a01c～0x804a01f 地址存储的数依次为03、00、00、00。这样以来，才合理嘛。</p><h3 id="预处理的步骤">20.1 预处理的步骤</h3><p>这里有一个语句</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">STR</span> <span class="token string">"hello, "</span><span class="token punctuation">\</span>                <span class="token string">"world"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>这条语句经过预处理之后为</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">STR</span> <span class="token string">"hello, "</span>    <span class="token string">"world"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>然后我疑惑的点在于之后它有一个语句</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span>STR<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这条语句是和下面的语句等价的</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello, "</span>    <span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>而上面这条语句经过测试，又是和下面这条语句是等价的</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello, world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>然后我又测试了一下Python，发现它也是如此，就是当两个字符串连接在一起（中间有若干个空格），程序在执行时会自动把它们拼接称一个字符串。有点神奇。</p><p>然后我再继续往下读，发现，原来这是预处理做的事情。这一下子就豁然开朗了。同时，我认为，除了C 和 Python，可能很多其他的语言也是有这个特性的。</p><p>关于 Python 这个字符串的特性，更多的还可以参考知乎这篇博客：<ahref="https://zhuanlan.zhihu.com/p/43760216"class="uri">https://zhuanlan.zhihu.com/p/43760216</a>。</p><h3 id="宏定义">20.2 宏定义</h3><p>这一节作者提了一个问题，就是示例代码 20.1中函数的时间复杂度是多少。</p><p>代码如下</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MAX</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token function">MAX</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里涉及到宏展开，我们可以先展开然后再分析，经分析，可得如下递推式</p><p><span class="math display">\[T(n) = 2T(n - 1) + O(1)\]</span></p><p>如此，根据此式即可求得时间复杂度了。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>未竟</tag>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的幡然醒悟的编程知识误区</title>
    <link href="/2021/06/09/%E6%88%91%E7%9A%84%E5%B9%A1%E7%84%B6%E9%86%92%E6%82%9F%E7%9A%84%E7%BC%96%E7%A8%8B%E7%9F%A5%E8%AF%86%E8%AF%AF%E5%8C%BA/"/>
    <url>/2021/06/09/%E6%88%91%E7%9A%84%E5%B9%A1%E7%84%B6%E9%86%92%E6%82%9F%E7%9A%84%E7%BC%96%E7%A8%8B%E7%9F%A5%E8%AF%86%E8%AF%AF%E5%8C%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="汇编">汇编</h2><h3 id="关于-16-进制">关于 16 进制</h3><p>16 进制的一个数字位（digit）对应的是半个字节，因为 16进制的一个位相当于 2 进制的 4 个位，而一个字节是 8 位。</p>]]></content>
    
    
    <categories>
      
      <category>小知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>未竟</tag>
      
      <tag>小知识</tag>
      
      <tag>反省</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>80X86 汇编语言之地址表达式中的一些特殊算符</title>
    <link href="/2021/06/09/80X86-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B9%8B%E5%9C%B0%E5%9D%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E7%89%B9%E6%AE%8A%E7%AE%97%E7%AC%A6/"/>
    <url>/2021/06/09/80X86-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B9%8B%E5%9C%B0%E5%9D%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E7%89%B9%E6%AE%8A%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="属性定义运算符">1、属性定义运算符</h2><h3 id="类型运算符-ptr">1.1、类型运算符 PTR</h3><p>PTR 即 PoinTeR。</p><p>使用格式：<code>类型  PTR  地址表达式</code></p><p>功能：指明紧跟其后的地址表达式的类型属性，但保持它原来的段属性和偏移地址属性不变。</p><p>根据地址表达式的不同值，类型可以是BYTE、WORD、DWORD、FWORD、NEAR、FAR 等。</p><p>为了能将源程序中的机器指令语句正确翻译成目标代码，汇编程序要求操作数地址的类型非常明确。对大多数双操作数指令，还要求源、目的地址的类型一致，即同时为字节类型、字类型或双字类型，否则，在汇编时就会因为类型不明确或类型不一致而出错。为了避免这些语法错误，就必须分清何谓类型明确， 何谓不明确（或说模糊），怎样使模糊的类型变为明确， 怎样使类型不一致的变为一致，下面分别进行说明。</p><p>由于寄存器明显地分为 8 位、16 位和 32位，如果操作数在寄存器中，说明操作数的类型是相当明确的。例如：<code>MOV AL, BL</code>为正确语句，因为语句中的源、目的地址类型明确且一致。用数据定义语句定义的变量，可根据所使用的伪指令DB，DW，DD...确定出变量的类型。因此，当采用直接寻址方式时，类型也是相当明确的。但是，语句<code>MOV [SI], 100</code>是错误语句，因为源操作数是立即操作数，没有类型，而 OPD的类型是模糊的。它采用的寄存器间接方式只指出了数据存储单元的偏移地址，却无法指出它的类型，汇编程序也就无法确定是将立即操作数 100 送入 SI所指的字节单元、字单元，还是双字单元。除此以外，还有以变址、基址加变址等方式寻找操作数时，若表达式中没有变量或标号，则其地址类型也是模糊的。</p><p>汇编程序规定：由于单操作数指令只指定一个操作数地址，它的类型必须非常明确。而对双操作数指令，如果OPS、OPD的类型均明确，那么它们的类型必须一致；如果一个地址类型明确，一个地址类型模糊（或没有类型），汇编程序则取明确的那一个作为源和目的两操作数地址共同的类型。</p><p>类型运算符 PTR 主要用于以下情况。</p><p>① 使语句中类型模糊的操作数地址变得明确。例如<code>MOV [SI], 100</code> 可改正为</p><figure><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">MOV WORD PTR [SI], 100<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>②可用来临时改变某一操作数地址的类型，使得类型不一致的两地址变为一致。</p><p>举例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">.386DATA  SEGMENT  USE16NUM   DB    11H,22H,33H,44HLEN   EQU   LEN-NUMDATA  ENDS...      MOV   EAX, DWORD PTR NUM  ; 临时改变 NUM 为双字类型，(NUM) &#x3D; 44332211H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>说明： a. PTR 临时赋予地址表达式的新类型只能在本语句有效。 b.不带方括号的寄存器符号不是地址表达式，因此，不能用 PTR改变寄存器的类型，例如，以下语句为错误语句：</p><figure><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">MOV  AL, BYTE  PTR  SI<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>③ PTR 运算符还可以与 EQU或等号“=”等伪指令连用，用来将同一存储区地址用不同类型的变量或标号来表示。</p><h3 id="定义类型运算符-this">1.2、定义类型运算符 THIS</h3><p>运算符 THIS 与 PTR有类似功能，即指定某个变量、标号或地址表达式类型，但在具体用法上又有区别。</p><p>使用格式：<code>THIS  类型</code></p><p>功能：指定下一个能分配的存储单元（也称当前存储单元）的类型。往往与伪指令EQU 或“=”等连用，为当前存储单元定义一个指定类型的变量与标号。</p><p>例如：</p><figure><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">DATA    SEGMENT     USE16B       EQU     THIS    WORDA       DD      44332211HBB      EQU     THIS    BYTE        DW      0FFFFHCC      EQU     BYTE    PTR     A   ; 这里 (CC) 应该为 11HDATA    ENDS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>在该例中，第一个语句是使用运算符 THIS 将紧跟它下面的一个双字类型变量A 重新定义为字类型，命名为 B，而第五个语句是使用运算符 PTR将双字类型的变量 A 重新定义为字节类型，并命名为 C。变量 B、C 与变量 A具有相同的段属性和偏移地址属性。第三个语句是使用 THIS将紧跟它下面的一个字存储单元重新定义为字节类型，命名为 BB。</p><p>通过此例可看出 THIS 与 PTR 用法上的区别：带 THIS的语句一定要放在定义存储单元语句的前面且不要求该语句一定有变量名（或标号）；带PTR的语句可放在任意位置，因此，它只能将指定名字的存储区重新定义为新类型。</p><p>另外，THIS 不能像 PTR 那样临时改变地址表达式的类型。</p><p>THIS运算符常常用来定义远标号，这在模块化程序设计中是经常要用到的。</p><p>例如：</p><figure><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">BEGIN   EQU    THIS    FAR     ; 定义远标号 BEGIN        MOV    CH, BL          ; BEGIN 实际上为该语句的标号NEXT:   MOV    AL, [SI]        ; 定义近标号 NEXT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><hr /><p>参考：《80X86汇编程序设计》（王元珍）</p>]]></content>
    
    
    <categories>
      
      <category>汇编语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编语言</tag>
      
      <tag>masm</tag>
      
      <tag>未竟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>80X86 汇编语言之伪指令语句</title>
    <link href="/2021/06/09/80X86-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B9%8B%E4%BC%AA%E6%8C%87%E4%BB%A4%E8%AF%AD%E5%8F%A5/"/>
    <url>/2021/06/09/80X86-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B9%8B%E4%BC%AA%E6%8C%87%E4%BB%A4%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="处理器选择伪指令">1、处理器选择伪指令</h2><h2 id="数据定义伪指令">2、数据定义伪指令</h2><h2 id="符号定义伪指令">3、符号定义伪指令</h2><h3 id="等价伪指令">3.1、等价伪指令</h3><p>语句格式：<code>符号名  EQU  表达式</code></p><p>功能：为常量、表达式及其他各种符号定义一个等价的符号名，但不申请分配存储单元（在该语句中，符号名一定不可省）。</p><p><code>EQU</code> 伪指令用法较广泛，下面分别进行说明。</p><p>①为常量定义一个符号名，以便在程序中使用符号来表示常量，这就是符号常量。</p><p>例如：</p><figure><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">A  EQU  5B  EQU  A * 3 + 2       ; 即 B &#x3D; 17<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">AA  EQU  50...MOV AX,  AA     ; AA 为立即数。该语句执行后，(AX) &#x3D; 50<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>使用符号常量可使程序简单明了，可读性强。如果将符号常量作为程序的参数，可方便地实现参数的修改，增强程序的通用性。</p><p>② EQU 与特殊运算符 PTR 或 THIS连用，可以给变量或标号定义新的类型属性并重新命名，但其段属性和偏移地址属性不变。</p><p>③ 利用 EQU命令可以为较复杂的表达式及源程序中的任何符号，如指令助记符、寄存器名、变量名、标号、段名、组名、宏定义名等定义一个替换名。在程序中，使用新替换名的作用与使用原来的表达式或符号名的作用完全等价。</p><p>例如：</p><figure><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">...SUBC    EQU     SBBCOUNT   EQU     DECARR     EQU     BYTE PTR    [SI]...        SUBC    DX, CX      ; 该语句与“SBB DX, CX”等价        CMP     ARR, 0      ; 该语句与“CMP BYTE PTR [SI], 0”等价        COUNT   CX          ; 该语句与“DEC CX” 等价<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>注意：使用 EQU语句定义的符号不得与本程序中的其他符号名同名。另外，EQU语句不能重新定义，即在同一个源程序中用EQU　语句定义的符号不能再赋不同的值。<strong>这里要注意与下面的“=”区分</strong>。</p><h3 id="等号伪指令">3.2、等号伪指令</h3><p>语句格式：<code>符号名 = 表达式</code></p><p>功能：与 EQU语句类似，不同的是等号语句能对所定义的符号名再重新定义。当使用等号语句连续地定义同一符号名时，以最后一次定义的值为准。</p><p>例如：</p><figure><div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">...A &#x3D; 5    MOV   AX, A     ; 5 赋给 AX    ...A &#x3D; A - 10    MOV   BX, A     ; 0FFFBH 赋给 BXA &#x3D; 10HA &#x3D; 20H    MOV   CX, A     ; 20H 赋给 CX<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><hr /><p>参考：《80X86汇编程序设计》（王元珍）</p>]]></content>
    
    
    <categories>
      
      <category>汇编语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编语言</tag>
      
      <tag>masm</tag>
      
      <tag>未竟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式之迭代器模式</title>
    <link href="/2021/06/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/06/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="迭代器模式的定义">迭代器模式的定义</h2><blockquote><p>Provide a way to access the elements of an aggregate objectsequentially without exposing its underlying representation.</p></blockquote><p>提供一种方法顺序地访问一组组合对象（一个容器）中的各个元素，而又不需要暴露该对象的内部细节。## 迭代器模式的设计思想</p><p>迭代器模式也称为迭代模式。迭代器其实就是一个指向容器中当前元素的指针，这个指针可以返回当前所指向的元素，可以移到下一个元素的位置，通过这个指针可以遍历容器中的所有元素。迭代器一般至少有以下两种方法</p><ul><li><code>current()</code>: 获取当前所指向的元素</li><li><code>next()</code>: 将指针移至下一个元素</li></ul><p>这是最基本的两个方法，有了这两个方法，就可以从前往后地遍历各个元素。我们可以增加一些方法，比如实现从后往前遍历。一些更为丰富的迭代器功能如下</p><ul><li><code>toBegin()</code>: 将指针移至起始的位置</li><li><code>toEnd()</code>: 将指针移至结尾的位置</li><li><code>current()</code>: 获取当前所指向的元素</li><li><code>next()</code>: 将指针移至下一个元素</li><li><code>previous()</code>: 将指针移至上一个元素</li></ul><h2 id="迭代器模式的抽象模型">迭代器模式的抽象模型</h2><h3 id="代码框架">代码框架</h3><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BaseIterator</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""迭代器"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__data <span class="token operator">=</span> data        self<span class="token punctuation">.</span>toBegin<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">toBegin</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""将指针移至起始位置"""</span>        self<span class="token punctuation">.</span>__curIdx <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">toEnd</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""将指针移至结尾位置"""</span>        self<span class="token punctuation">.</span>__curIdx <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__data<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">next</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""移动至下一个元素"""</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>__curIdx <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__data<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>__curIdx <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">previous</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""移动至上一个元素"""</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>__curIdx <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>__curIdx <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">current</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""获取当前的元素"""</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__data<span class="token punctuation">[</span>self<span class="token punctuation">.</span>__curIdx<span class="token punctuation">]</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>__curIdx <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__data<span class="token punctuation">)</span> <span class="token keyword">and</span> self<span class="token punctuation">.</span>__curIdx <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token boolean">None</span><span class="token keyword">def</span> <span class="token function">testBaseIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"从前往后遍历:"</span><span class="token punctuation">)</span>    iterator <span class="token operator">=</span> BaseIterator<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        customer <span class="token operator">=</span> iterator<span class="token punctuation">.</span>current<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>customer<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"从后往前遍历:"</span><span class="token punctuation">)</span>    iterator<span class="token punctuation">.</span>toEnd<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span>previous<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        customer <span class="token operator">=</span> iterator<span class="token punctuation">.</span>current<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>customer<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    testBaseIterator<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>输出结果</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">从前往后遍历:0   1   2   3   4   5   6   7   8   9   从后往前遍历:9   8   7   6   5   4   3   2   1   0</code></pre></div></figure><h3 id="python-中的迭代器">Python 中的迭代器</h3><h4 id="iterable">Iterable</h4><p>可以直接作用于 for循环的对象统称为可迭代对象(Iterable)，它们有如下两种类型</p><ol type="1"><li>集合数据类型，如 list、tuple、dict、set、str 等</li><li>生成器(Generator)，包括 () 语法定义的生成器和带 yield 的 generator函数</li></ol><p>Iterable 对象的代码示例如下</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 方法一：使用 () 定义生成器</span>gen <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 方法二：使用 yield 定义 generator 函数</span><span class="token keyword">def</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>maxNum<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""斐波那契数列的生成器"""</span>    a <span class="token operator">=</span> b <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>maxNum<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> a        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b<span class="token keyword">def</span> <span class="token function">testIterable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"方法一，0~9 的平方数："</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> e <span class="token keyword">in</span> gen<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"方法二，斐波那契数列："</span><span class="token punctuation">)</span>    fib <span class="token operator">=</span> fibonacci<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> fib<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"内置容器的 for 循环："</span><span class="token punctuation">)</span>    arr <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token operator">*</span> x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> e <span class="token keyword">in</span> arr<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>gen<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>fib<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    testIterable<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>输出结果</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">内置容器的 for 循环：0   1   4   9   16  25  36  49  64  81  &lt;class &#39;generator&#39;&gt;&lt;class &#39;generator&#39;&gt;&lt;class &#39;list&#39;&gt;</code></pre></div></figure><p>关于生成器，在《流畅的 Python》中有这样的描述</p><blockquote><p>Python 2.2（2001年）加入了 yield关建字。这个关建字用于构建生成器(generator)，其作用与迭代器一样。所有生成器都是迭代器，因为生成器完全实现了迭代器接口。不过，根据《设计模式：可复用面向对象软件的基础》一书的定义，迭代器用于从集合中取出元素；而生成器用于“凭空”生成元素。通过斐波纳契数列能很好地说明二者之间的区别：斐波纳契数列中的数有无穷个，在一个集合中放不下。不过要知道，在Python社区中，大多数时候都把<strong>迭代器</strong>和<strong>生成器</strong>视作同一概念。</p></blockquote><h4 id="iterator">Iterator</h4><p>生成器(Generator)不但可以作用于 for 循环，还可以被 next()函数不断调用并返回下一个值，直到最后抛出 StopIteration错误，表示无法继续返回下一个值。</p><p>可以被 next()函数调用并不断返回下一个值的对象称为<strong>迭代器(Iterator)</strong>。</p><p>我们可以使用 <code>isinstance()</code> 来判断一个对象是否为 Iterable对象或 Iterator 对象，示例代码如下</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 方法一：使用 () 定义生成器</span>gen <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 方法二：使用 yield 定义 generator 函数</span><span class="token keyword">def</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>maxNum<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""斐波那契数列的生成器"""</span>    a <span class="token operator">=</span> b <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>maxNum<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> a        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b<span class="token keyword">from</span> collections<span class="token punctuation">.</span>abc <span class="token keyword">import</span> Iterable<span class="token punctuation">,</span> Iterator<span class="token comment"># 引入 Iterable 和 Iterator</span><span class="token keyword">def</span> <span class="token function">testIsIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"是否为 Iterable 对象："</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>gen<span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>fibonacci<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"是否为 Iterator 对象："</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>gen<span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>fibonacci<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    testIsIterator<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>输出结果</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">是否为 Iterable 对象：TrueTrueTrueTrueTrueTrueTrue是否为 Iterator 对象：FalseFalseFalseFalseFalseTrueTrue</code></pre></div></figure><h4 id="iterator-和-iterable-的区别">Iterator 和 Iterable 的区别</h4><p>Iterator 对象可以被 next() 函数不断调用并返回下一个值，直到最后抛出StopIteration 错误，表示无法继续返回下一个值。</p><p>Iterable 对象不能被 next() 函数调用，可以用 <code>iter()</code>函数将 Iterable 对象转成 Iterator 对象，示例代码如下</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">testNextItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"将 Iterable 对象转成 Iterator 对象："</span><span class="token punctuation">)</span>    l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>    iterL <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>iterL<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>iterL<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>iterL<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"next() 函数遍历迭代器元素："</span><span class="token punctuation">)</span>    fib <span class="token operator">=</span> fibonacci<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>fib<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>fib<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>fib<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>fib<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>fib<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    testNextItem<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>输出结果</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">将 Iterable 对象转成 Iterator 对象：123next() 函数遍历迭代器元素：1123Traceback (most recent call last):File &quot;C:/Users/17309/PycharmProjects/DesignPatterns/iterator/iterable.py&quot;, line 98, in &lt;module&gt;    testNextItem()File &quot;C:/Users/17309/PycharmProjects/DesignPatterns/iterator/iterable.py&quot;, line 68, in testNextItem    print(next(fib))StopIteration</code></pre></div></figure><h4 id="使自定义的类具有-iterable-或-iterator-属性">使自定义的类具有Iterable 或 Iterator 属性</h4><p>要使自定义的类具有 Iterable 属性，需要实现 <code>__iter__</code>方法。</p><p>要使自定义的类具有 Iterator 属性，需要实现 <code>__iter__</code> 和<code>__next__</code> 方法，示例代码如下</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">NumberSequence</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""生成一个间隔为 step 的数字序列"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> init<span class="token punctuation">,</span> step<span class="token punctuation">,</span> <span class="token builtin">max</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__data <span class="token operator">=</span> init        self<span class="token punctuation">.</span>__step <span class="token operator">=</span> step        self<span class="token punctuation">.</span>__max <span class="token operator">=</span> <span class="token builtin">max</span>    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>__data <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>__max<span class="token punctuation">)</span><span class="token punctuation">:</span>            tmp <span class="token operator">=</span> self<span class="token punctuation">.</span>__data            self<span class="token punctuation">.</span>__data <span class="token operator">+=</span> self<span class="token punctuation">.</span>__step            <span class="token keyword">return</span> tmp        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> StopIteration<span class="token keyword">def</span> <span class="token function">testNumberSequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    numSeq <span class="token operator">=</span> NumberSequence<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>numSeq<span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>numSeq<span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> numSeq<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    testNumberSequence<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>输出结果</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">TrueTrue0   5   10  15  </code></pre></div></figure><h3 id="迭代器的类图">迭代器的类图</h3><p>一个迭代器一般对应着一个容器类，而一个容器会包含多个元素，这些元素可能会有不同的子类。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210607115855.png"alt="迭代器模式的类图" /></p><p>在实际的项目开发中有可能会遇到一些更复杂的逻辑。例如，具有层级关系的组织架构：一个公司有A、B、C三个部门，每个部门有自己的成员，这时要遍历一个公司的所有成员，就有如下的类图关系</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210607120605.png"alt="具有层级结构的容器的迭代器实现" /></p><hr /><p>参考：</p><p>1、《人人都懂设计模式》（罗伟富） 2、《流畅的 Python》</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows10 安装 jdk1.8</title>
    <link href="/2021/06/06/Windows10-%E5%AE%89%E8%A3%85-jdk1-8/"/>
    <url>/2021/06/06/Windows10-%E5%AE%89%E8%A3%85-jdk1-8/</url>
    
    <content type="html"><![CDATA[<h2 id="下载及安装">下载及安装</h2><p>首先，到官网(<ahref="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html"class="uri">https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</a>)下载jdk1.8，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210606112728.png" /></p><p>然后双击 exe 文件进行安装</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210606112930.png" /></p><p>我这里是直接安装在默认路径，然后直接下一步，安装即可。</p><h2 id="配置环境变量">配置环境变量</h2><p>1、新建系统变量 JAVA_HOME</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">变量名: JAVA_HOME变量值: C:\Program Files\Java\jdk1.8.0_291<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>这里的变量值是 bin 所在的目录</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210606121844.png" /></p><p>2、新建系统变量 CLASSPATH</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">变量名: CLASSPATH变量值: .;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>3、在 Path 变量中新加一个变量值</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">变量值: ;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="验证">验证</h2><p>在 cmd 中输入如下命令</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">java -version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210606113656.png" /></p><p>到这里 jdk 1.8 的安装就完成了。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 将文件从 GBK 编码转为 utf8 编码</title>
    <link href="/2021/06/05/Python-%E5%B0%86%E6%96%87%E4%BB%B6%E4%BB%8E-GBK-%E7%BC%96%E7%A0%81%E8%BD%AC%E4%B8%BA-utf8-%E7%BC%96%E7%A0%81/"/>
    <url>/2021/06/05/Python-%E5%B0%86%E6%96%87%E4%BB%B6%E4%BB%8E-GBK-%E7%BC%96%E7%A0%81%E8%BD%AC%E4%B8%BA-utf8-%E7%BC%96%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>今天找到一本 txt 格式的书，想用 VSCode打开看一下，结果已打开发现是乱码，究其原因，是 GBK编码的锅，所以我需要将其转换为 utf-8 编码。所以就使用 Python将其转换了一下，这里记录一下过程。</p><h2 id="代码">代码</h2><h3 id="初始版">初始版</h3><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> chardet<span class="token comment"># des.txt 是待转换的文件</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'des.txt'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>res <span class="token operator">=</span> chardet<span class="token punctuation">.</span>detect<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment"># 探测数据的信息，比如编码信息</span><span class="token comment"># 打开 res.txt 文件，如果没有，程序会自动新建(res.txt 是转换之后的文件)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'res.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    line <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> encoding<span class="token operator">=</span>res<span class="token punctuation">[</span><span class="token string">'encoding'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里有一个问题，运行这个程序之后会出现如下错误</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">UnicodeDecodeError: &#39;gb2312&#39; codec can&#39;t decode byte 0xd0 in position 2848: illegal multibyte sequence<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="改进版">改进版</h3><p>上面的问题是由部分字符的编码问题引起的，所以我们手动把<code>gb2312</code> 改为 <code>gbk</code>，因为 <code>gbk</code> 是<code>gb2312</code> 的父集，所以这样做不会引起问题。</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> chardet<span class="token comment"># des.txt 是待转换的文件</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'des.txt'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>res <span class="token operator">=</span> chardet<span class="token punctuation">.</span>detect<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment"># 探测数据的信息，比如编码信息</span><span class="token keyword">if</span> res<span class="token punctuation">[</span><span class="token string">'encoding'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'GB2312'</span><span class="token punctuation">:</span>    res<span class="token punctuation">[</span><span class="token string">'encoding'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'GBK'</span> <span class="token comment"># 手动改编码</span><span class="token comment"># 打开 res.txt 文件，如果没有，程序会自动新建(res.txt 是转换之后的文件)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'res.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    line <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> encoding<span class="token operator">=</span>res<span class="token punctuation">[</span><span class="token string">'encoding'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这样一来就能够成功转换了。</p><p>注：des.txt 和 res.txt 都是在当前程序所在的文件夹。</p><h3 id="封装成函数的版本">封装成函数的版本</h3><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> chardet<span class="token keyword">def</span> <span class="token function">transform</span><span class="token punctuation">(</span>des_file<span class="token punctuation">,</span> res_file<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    将文件编码从 GBK 转换成 utf8    :param des_file: 待转换的编码为 GBK 的源文件    :param res_file: 转换之后的 utf8 编码的文件    :return:     '''</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>des_file<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> chardet<span class="token punctuation">.</span>detect<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">if</span> res<span class="token punctuation">[</span><span class="token string">'encoding'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'GB2312'</span><span class="token punctuation">:</span>        res<span class="token punctuation">[</span><span class="token string">'encoding'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'GBK'</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>res_file<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>        line <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> encoding<span class="token operator">=</span>res<span class="token punctuation">[</span><span class="token string">'encoding'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    transform<span class="token punctuation">(</span><span class="token string">'des.txt'</span><span class="token punctuation">,</span> <span class="token string">'res.txt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这样一来我们就可以很方便地在别的地方调用这个函数了。</p><hr /><p>参考：</p><p><a href="https://blog.csdn.net/coreych/article/details/101270551"class="uri">https://blog.csdn.net/coreych/article/details/101270551</a></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>小玩意</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows10 关机后自动重启解决方法</title>
    <link href="/2021/06/05/Windows10-%E5%85%B3%E6%9C%BA%E5%90%8E%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <url>/2021/06/05/Windows10-%E5%85%B3%E6%9C%BA%E5%90%8E%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>不知为何，我的这台 ThinkPad X13锐龙版经常会出现关机之后自动重启的症状，现在总结一下我目前了解的解决方法。</p><h2 id="方案一">方案一</h2><p>打开高级系统设置，</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210605232018.png" /></p><p>然后将自动重新启动取消勾选。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210605232115.png" /></p><p>这个解决了我一段时间的问题，但是，后来又失效了。遂进入方案二。</p><p>按：这个方法在大部分时间是有效的。根据我个人的经验，我发现它失效的那几次是我没有正确关闭cmd 窗口的 Python 控制台，我应该使用 exit() 函数退出，而不是直接关闭 cmd窗口。</p><h2 id="方案二">方案二</h2><p>笔计本电脑拔掉电源。</p>]]></content>
    
    
    <categories>
      
      <category>Windows10</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows10</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 的上下文管理器和 with 块(未竟)</title>
    <link href="/2021/06/05/Python-%E7%9A%84%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86%E5%99%A8%E5%92%8C-with-%E5%9D%97/"/>
    <url>/2021/06/05/Python-%E7%9A%84%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86%E5%99%A8%E5%92%8C-with-%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<figure><div class="code-wrapper"><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">&gt;&gt;&gt; with open(&#39;tranformGBKToUTF8.py&#39;) as fp:...     src &#x3D; fp.read(60)...&gt;&gt;&gt; len(src)60&gt;&gt;&gt; fp&lt;_io.TextIOWrapper name&#x3D;&#39;tranformGBKToUTF8.py&#39; mode&#x3D;&#39;r&#39; encoding&#x3D;&#39;cp936&#39;&gt;&gt;&gt;&gt; fp.closed, fp.encoding(True, &#39;cp936&#39;)&gt;&gt;&gt; fp.read(60)Traceback (most recent call last):  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;ValueError: I&#x2F;O operation on closed file.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>未竟</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 测试框架 unittest 初体验</title>
    <link href="/2021/06/04/Python-%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6-unittest-%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <url>/2021/06/04/Python-%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6-unittest-%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>这是我的软件工程课程的第二次上机实验。实验的基本内容是使用一门OO(Object Oriented) 语言的测试框架。遂记录如下。</p><h2 id="简单使用说明">简单使用说明</h2><p>官网示例如下</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 测试三种字符串方法</span><span class="token keyword">import</span> unittest<span class="token keyword">class</span> <span class="token class-name">TestStringMethods</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test_upper</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'FOO'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_isupper</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>assertTrue<span class="token punctuation">(</span><span class="token string">'FOO'</span><span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertFalse<span class="token punctuation">(</span><span class="token string">'Foo'</span><span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_split</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> <span class="token string">'hello world'</span>        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># check that s.split fails when the separator is not a string</span>        <span class="token keyword">with</span> self<span class="token punctuation">.</span>assertRaises<span class="token punctuation">(</span>TypeError<span class="token punctuation">)</span><span class="token punctuation">:</span>            s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    unittest<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>运行结果</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">Testing started at <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">11</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Launching unittests <span class="token keyword">with</span> arguments python <span class="token operator">-</span>m unittest C<span class="token punctuation">:</span><span class="token operator">/</span>Users<span class="token operator">/</span><span class="token number">17309</span><span class="token operator">/</span>PycharmProjects<span class="token operator">/</span>TDDExperiment<span class="token operator">/</span>draft01<span class="token punctuation">.</span>py <span class="token keyword">in</span> C<span class="token punctuation">:</span>\Users\<span class="token number">17309</span>\PycharmProjects\TDDExperimentProcess finished <span class="token keyword">with</span> exit code <span class="token number">0</span>Ran <span class="token number">3</span> tests <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>010sOK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>所谓测试，就是定义一个类，只是，这个类必须要继承<code>unittest.TestCase</code> 这个父类。</p><p>另外，上述的类中的三个独立的方法，就是三个独立的测试，这些方法的命名都以<code>test</code> 开头。这个命名约定告诉测试运行类哪些方法表示测试。</p><p>在 PyCharm 中，可以看出，以 <code>test</code>开头的方法前面有一个绿色的可执行按钮。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210605005810.png" /></p><p>根据 Python 文档</p><blockquote><p>调用 <code>assertEqual()</code> 来检查预期的输出；调用<code>assertTrue()</code> 或 <code>assertFalse()</code>来验证一个条件；调用 <code>assertRaises()</code>来验证抛出了一个特定的异常。使用这些方法而不是 <code>assert</code>语句是为了让测试运行者能聚合所有的测试结果并产生结果报告。</p></blockquote><p>这里简单选取几个函数记录它们的用法</p><ul><li><p><code>assertEqual(first, second, msg=None)</code>:测试第一个参数和第二个参数是否是相等的。如果它们的值不等，那么这个 test将会失败。</p></li><li><p><code>assertTrue(expr, msg=None)</code>: 测试 expr是否正确。</p></li><li><p><code>assertRaises(exception, *, msg=None)</code>:测试是否抛出了指定的异常。</p></li></ul><h2 id="依葫芦画瓢">依葫芦画瓢</h2><p>待测试的函数</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token comment"># 判断一个字符串是否是一个合法的 IP4 地址</span><span class="token keyword">def</span> <span class="token function">judgeIP4</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span><span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>    ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r"(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.)&#123;3&#125;"</span>                   <span class="token string">r"([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$"</span><span class="token punctuation">,</span> string<span class="token punctuation">)</span>    <span class="token keyword">if</span> ret<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    string <span class="token operator">=</span> <span class="token string">"10.16.82.108"</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>judgeIP4<span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>测试代码</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> unittest<span class="token keyword">from</span> IP4Test <span class="token keyword">import</span> judgeIP4<span class="token keyword">class</span> <span class="token class-name">TestJudgeIP4</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test_judgeIP4</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        string <span class="token operator">=</span> <span class="token string">'10.16.82.108'</span>        self<span class="token punctuation">.</span>assertTrue<span class="token punctuation">(</span>judgeIP4<span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    unittest<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>测试输出</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">Testing started at 1:27 ...Launching unittests with arguments python -m unittest C:&#x2F;Users&#x2F;17309&#x2F;PycharmProjects&#x2F;TDDExperiment&#x2F;TestUnit.py in C:\Users\17309\PycharmProjects\TDDExperimentRan 1 test in 0.003sOKProcess finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>unittest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 3.8 虚拟环境相关(Windows10)</title>
    <link href="/2021/06/02/Python-3-8-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3(Windows10)/"/>
    <url>/2021/06/02/Python-3-8-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3(Windows10)/</url>
    
    <content type="html"><![CDATA[<h2 id="创建">创建</h2><p>首先，在一个目录中打开终端命令行，执行以下命令</p><figure><div class="code-wrapper"><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">python -m venv my_env<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这个命令的作用是在当前目录下创建一个虚拟环境目录</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210602151102.png" /></p><p>查看其中的内容</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210602151144.png" /></p><p>venv 有些参数，这里简单介绍几个：</p><ul><li><code>--without-pip</code>: 不需要安装 pip，默认为安装</li><li><code>--clear</code>:如果创建虚拟环境的目录已经有了其他虚拟环境，则清除重建</li></ul><h2 id="激活">激活</h2><p>因为这里是 Windows10 系统，所以这里只介绍 Windows10 cmd命令行环境下的激活方法，即在命令行执行如下命令</p><figure><div class="code-wrapper"><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">&lt;myvenv&gt;\Scripts\activate.bat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>实际操作时，这里的 <code>&lt;myvenv&gt;</code>要换成我们自己的虚拟环境的名称。</p><p>执行后，进入虚拟环境如下，可以发现命令行提示最前面有一个<code>(my_env)</code>，即我们虚拟环境的名称。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210602152035.png" /></p><h2 id="退出虚拟环境">退出虚拟环境</h2><p>直接执行如下命令即可</p><figure><div class="code-wrapper"><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">deactivate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>因为这个命令就在虚拟环境下，所以我们不需要像激活时那样在前面加上脚本的路径。</p><hr /><p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/216157886"class="uri">https://zhuanlan.zhihu.com/p/216157886</a></p><p><a href="https://docs.python.org/zh-cn/3/library/venv.html"class="uri">https://docs.python.org/zh-cn/3/library/venv.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态规划之最长公共子序列问题(未竟)</title>
    <link href="/2021/06/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98/"/>
    <url>/2021/06/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="算法描述">算法描述</h2><h3 id="递归式">递归式</h3><p><span class="math display">\[c[i, j] =\left\{\begin{matrix}\begin{align}&amp; {0} &amp;&amp; {if \quad i = 0 \; or \; j = 0,} \\&amp; {c[i - 1, j - 1] + 1} &amp;&amp; {if \quad i, j &gt; 0 \; and \;x_i = y_j,} \\&amp; {max(c[i, j - 1], c[i - 1, j])} &amp;&amp; {if \quad i, j &gt; 0\; and \; x_i \neq y_j.} \\\end{align}\end{matrix}\right.\]</span></p><h3 id="伪码">伪码</h3><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210601155106.png" /></p><h3 id="一个示例">一个示例</h3><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210601155445.png" /></p><h2 id="算法的-python-实现">算法的 Python 实现</h2><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 最长共同子序列动态规划算法</span><span class="token keyword">def</span> <span class="token function">lcs_length</span><span class="token punctuation">(</span>X<span class="token punctuation">:</span><span class="token builtin">str</span><span class="token punctuation">,</span> Y<span class="token punctuation">:</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    m <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span>    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span>    b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment"># b 只使用 1..m</span>    c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment"># c 只使用 1..m</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> X<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> Y<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>                b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># 存入路径</span>            <span class="token keyword">elif</span> c<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>                b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>c<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">print_lcs</span><span class="token punctuation">(</span>b<span class="token punctuation">:</span><span class="token builtin">list</span><span class="token punctuation">,</span> X<span class="token punctuation">:</span><span class="token builtin">str</span><span class="token punctuation">,</span> i<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">,</span> j<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span>    <span class="token keyword">if</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        print_lcs<span class="token punctuation">(</span>b<span class="token punctuation">,</span> X<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">]</span><span class="token punctuation">:</span>        print_lcs<span class="token punctuation">(</span>b<span class="token punctuation">,</span> X<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        print_lcs<span class="token punctuation">(</span>b<span class="token punctuation">,</span> X<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># S2 = 'BDCABA'</span>    <span class="token comment"># S1 = 'ABCBDAB'</span>    S1 <span class="token operator">=</span> <span class="token string">'ACCGGTCGAGATGCAG'</span>    <span class="token comment"># S2 = 'ACCGGTCGAGATGCAG'</span>    S2 <span class="token operator">=</span> <span class="token string">'GTCGTTCGGAATGCAT'</span>    res <span class="token operator">=</span> lcs_length<span class="token punctuation">(</span>S1<span class="token punctuation">,</span> S2<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----------'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> each <span class="token keyword">in</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----------'</span><span class="token punctuation">)</span>    print_lcs<span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S1<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>S1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>S2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n----------'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>S1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>S2<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>运行结果</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">[[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2], [0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 1, 1, 1, 2, 2, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4], [0, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5], [0, 1, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 6, 6, 6], [0, 1, 2, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6], [0, 1, 2, 3, 4, 4, 4, 4, 5, 5, 6, 6, 6, 6, 6, 7, 7], [0, 1, 2, 3, 4, 4, 4, 4, 5, 6, 6, 6, 6, 7, 7, 7, 7], [0, 1, 2, 3, 4, 4, 4, 4, 5, 6, 7, 7, 7, 7, 7, 8, 8], [0, 1, 2, 3, 4, 5, 5, 5, 5, 6, 7, 7, 8, 8, 8, 8, 9], [0, 1, 2, 3, 4, 5, 5, 5, 6, 6, 7, 7, 8, 9, 9, 9, 9], [0, 1, 2, 3, 4, 5, 5, 6, 6, 6, 7, 7, 8, 9, 10, 10, 10], [0, 1, 2, 3, 4, 5, 5, 6, 6, 6, 7, 8, 8, 9, 10, 11, 11], [0, 1, 2, 3, 4, 5, 5, 6, 7, 7, 7, 8, 8, 9, 10, 11, 11]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [0, 9], [0, 10], [1, 11], [1, 12], [1, 13], [0, 14], [1, 15]], [0, [1, 1], [1, 2], [1, 2], [2, 3], [2, 4], [2, 5], [1, 6], [2, 7], [2, 8], [1, 10], [1, 11], [1, 12], [1, 13], [1, 13], [2, 14], [2, 15]], [0, [2, 1], [2, 2], [2, 2], [2, 4], [2, 5], [2, 6], [2, 6], [3, 7], [3, 8], [3, 9], [3, 10], [3, 11], [3, 12], [2, 13], [2, 15], [2, 16]], [0, [3, 0], [4, 1], [3, 3], [3, 3], [4, 4], [4, 5], [3, 7], [3, 7], [3, 8], [4, 9], [4, 10], [4, 11], [3, 12], [4, 13], [4, 14], [4, 15]], [0, [4, 0], [4, 2], [4, 3], [4, 3], [4, 5], [4, 6], [4, 7], [4, 7], [4, 8], [5, 9], [5, 10], [5, 11], [4, 12], [5, 13], [5, 14], [5, 15]], [0, [5, 1], [5, 1], [6, 2], [5, 4], [5, 4], [5, 5], [6, 6], [5, 8], [5, 9], [5, 10], [5, 11], [5, 11], [6, 12], [6, 13], [6, 14], [5, 15]], [0, [6, 1], [6, 2], [6, 2], [7, 3], [6, 5], [6, 6], [6, 6], [7, 7], [6, 9], [6, 10], [6, 11], [6, 12], [6, 13], [6, 13], [7, 14], [7, 15]], [0, [7, 0], [7, 2], [7, 3], [7, 3], [8, 4], [8, 5], [7, 7], [7, 7], [7, 8], [8, 9], [8, 10], [7, 12], [7, 12], [7, 14], [7, 15], [7, 16]], [0, [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9], [8, 9], [8, 10], [9, 11], [8, 13], [8, 14], [8, 14], [9, 15]], [0, [9, 0], [9, 2], [9, 3], [9, 3], [9, 5], [9, 6], [9, 7], [9, 7], [9, 8], [9, 10], [9, 11], [9, 12], [9, 12], [10, 13], [9, 15], [9, 16]], [0, [10, 1], [10, 2], [10, 3], [10, 4], [10, 5], [10, 6], [10, 7], [10, 8], [10, 9], [10, 9], [10, 10], [11, 11], [10, 13], [10, 14], [10, 14], [11, 15]], [0, [11, 1], [11, 1], [11, 3], [11, 4], [11, 4], [11, 5], [12, 6], [11, 8], [11, 9], [11, 10], [11, 11], [11, 11], [12, 12], [12, 13], [11, 15], [11, 15]], [0, [12, 0], [12, 2], [12, 3], [12, 3], [12, 5], [12, 6], [12, 7], [12, 7], [12, 8], [12, 10], [12, 11], [12, 12], [12, 12], [13, 13], [13, 14], [12, 16]], [0, [13, 1], [13, 2], [13, 2], [13, 4], [13, 5], [13, 6], [13, 6], [13, 8], [13, 9], [13, 10], [13, 11], [13, 12], [13, 13], [13, 13], [14, 14], [14, 15]], [0, [14, 1], [14, 2], [14, 3], [14, 4], [14, 5], [14, 6], [14, 7], [14, 8], [14, 9], [14, 9], [14, 10], [14, 12], [14, 13], [14, 14], [14, 14], [15, 15]], [0, [15, 0], [15, 2], [15, 3], [15, 3], [15, 5], [15, 6], [15, 7], [15, 7], [15, 8], [15, 10], [15, 11], [15, 12], [15, 12], [15, 14], [15, 15], [15, 16]]]]----------[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0][0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1][0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2][0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2][0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3][0, 1, 1, 1, 2, 2, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4][0, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5][0, 1, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 6, 6, 6][0, 1, 2, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6][0, 1, 2, 3, 4, 4, 4, 4, 5, 5, 6, 6, 6, 6, 6, 7, 7][0, 1, 2, 3, 4, 4, 4, 4, 5, 6, 6, 6, 6, 7, 7, 7, 7][0, 1, 2, 3, 4, 4, 4, 4, 5, 6, 7, 7, 7, 7, 7, 8, 8][0, 1, 2, 3, 4, 5, 5, 5, 5, 6, 7, 7, 8, 8, 8, 8, 9][0, 1, 2, 3, 4, 5, 5, 5, 6, 6, 7, 7, 8, 9, 9, 9, 9][0, 1, 2, 3, 4, 5, 5, 6, 6, 6, 7, 7, 8, 9, 10, 10, 10][0, 1, 2, 3, 4, 5, 5, 6, 6, 6, 7, 8, 8, 9, 10, 11, 11][0, 1, 2, 3, 4, 5, 5, 6, 7, 7, 7, 8, 8, 9, 10, 11, 11]----------C G T C G A A T G C A ----------11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>算法设计与分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>未竟</tag>
      
      <tag>Python</tag>
      
      <tag>《算法导论》</tag>
      
      <tag>算法设计与分析</tag>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最小生成树的 Prim 算法(未竟)</title>
    <link href="/2021/06/01/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%9A%84-Prim-%E7%AE%97%E6%B3%95/"/>
    <url>/2021/06/01/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%9A%84-Prim-%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="算法思路">算法思路</h2><p>以图1来说明</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210601114808.png"alt="图1" /></p><p>上图演示了执行 Prim 算法的过程。初始的根结点为a。加阴影的边和黑色的结点都属于树A。在算法每一步，树中的结点就决定了图的一个切割，横跨该切割的一条轻量级边被加入到树中。例如，在图中的第2 步，该算法可以选择将边(b, c)加入到树中，也可以选择将边(a,h)加入到树中，因为这两条比那都是横跨该切割的轻量级边。</p><h2 id="伪码">伪码</h2><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210601120453.png"alt="20210601120453" /></p><h2 id="补充">补充</h2><p>这里对一些定义作补充。</p><p>无向图 <code>$G = (V, E)$</code> 的一个<strong>切割</strong><code>$(S, V - S)$</code> 是集合 <code>$V$</code>的一个划分，如图3所示。如果一条边 <code>$(u, v) \in E$</code>的一个端点位于集合 <code>$S$</code>，另一个端点位于集合<code>$V - S$</code>，则称该条边<strong>横跨</strong>切割<code>$(S, V - S)$</code>。如果集合 <code>$A$</code>中不存在横跨该切割的边，则称该切割<strong>尊重</strong>集合<code>$A$</code>。在横跨一个切割的所有边中，权重最小的边称为<strong>轻量级边</strong>。注意，轻量级边可能不是唯一的。一般，如果一条边是满足某个性质的所有边中权重最小的，则称该条边是满足给定性质的一条<strong>轻量级边</strong>。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210601120351.png"alt="图3" /></p>]]></content>
    
    
    <categories>
      
      <category>算法设计与分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>未竟</tag>
      
      <tag>《算法导论》</tag>
      
      <tag>算法设计与分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最小生成树的 Kruskal 算法(未竟)</title>
    <link href="/2021/06/01/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%9A%84-Kruskal-%E7%AE%97%E6%B3%95/"/>
    <url>/2021/06/01/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%9A%84-Kruskal-%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="算法思路">算法思路</h2><p>以图来说明。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210601112937.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210601112955.png" /></p><p>上图演示了执行 Kruskal 算法的过程。加了阴影的边属于不断增长的森林A。该算法按照边的权重的大小依次进行考虑。箭头指向的边是算法每一步所考察的边。如果该边将<strong>两棵不同的树</strong>(注一)连接起来，它就被加入到森林里，从而完成对两棵树的合并。</p><h2 id="伪码">伪码</h2><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210601113816.png" /></p><hr /><p>注一：按照这里的描述，我认为一个结点的图似乎也是一棵树。</p>]]></content>
    
    
    <categories>
      
      <category>算法设计与分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>未竟</tag>
      
      <tag>《算法导论》</tag>
      
      <tag>算法设计与分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用深度优先搜索来寻找图的强连通分量(未竟)</title>
    <link href="/2021/06/01/%E5%88%A9%E7%94%A8%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E6%9D%A5%E5%AF%BB%E6%89%BE%E5%9B%BE%E7%9A%84%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/"/>
    <url>/2021/06/01/%E5%88%A9%E7%94%A8%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E6%9D%A5%E5%AF%BB%E6%89%BE%E5%9B%BE%E7%9A%84%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="算法思路">算法思路</h3><p>以图来说明</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210601111013.png" /></p><ol type="a"><li><p>为有向图 G。每个加了阴影的区域是 G的一个强连通分量。每个结点上注明了在深度优先搜索中的发现时间和完成时间，所有的树边都加了额外的阴影。</p></li><li><p>是图 G 的转置图 <code>$G^&#123;T&#125;$</code>，图中注明了由算法STRONGLY-CONNECTED-COMPONENTS 第 3行所计算出来的深度优先森林，所有树边上都加了额外的阴影。每个强连通分量对应一棵深度优先树。加了阴影的结点b、c、g 和 h 全部是深度优先树的根节点。这些深度优先树是在转置图<code>$G^T$</code> 上运行深度优先搜索算法所获得的。</p></li><li><p>无环分量图 <code>$G^&#123;SCC&#125;$</code>，由对图 G的强连通分量进行收缩而成，这种收缩将每个强连通分量收缩为一个结点，即由一个结点来替换整个连通分量。</p></li></ol><h3 id="伪码描述">伪码描述</h3><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210601111801.png" /></p><p>这里针对第 3 行进行简单说明，<code>$u.f$</code> 即 G 中的结点 u在深度优先搜索过程中的完成时间。这行代码所做的事情是按照<code>$u.f$</code>递减的顺序进行循环，然后找出每一棵深度优先数，这每一棵深度优先树就对应一个强连通分量。</p>]]></content>
    
    
    <categories>
      
      <category>算法设计与分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>未竟</tag>
      
      <tag>《算法导论》</tag>
      
      <tag>算法设计与分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 安装过程中的 Add Python 3.x to PATH 勾选之后发生了什么</title>
    <link href="/2021/05/29/Python-%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84-Add-Python-3-x-to-PATH-%E5%8B%BE%E9%80%89%E4%B9%8B%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/"/>
    <url>/2021/05/29/Python-%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84-Add-Python-3-x-to-PATH-%E5%8B%BE%E9%80%89%E4%B9%8B%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</url>
    
    <content type="html"><![CDATA[<p>如下图, 我们在安装 Python 过程中一般都要勾选这个选项,我们也知道它的作用是把 Python 添加到我们系统的环境变量中,以方便我们在命令行中直接使用 Python,</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210529222344.png" /></p><p>可是, 它究竟自动为我们添加了什么路径到系统的环境变量中了呢, 经查看,如下</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210529222934.png" /></p><p>然后我们查看这两个文件夹下的具体内容,</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210529223013.png" /></p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210529223036.png" /></p><p>发现, 有 python.exe 和 pip.exe 等, 所以, 如果我们在安装 Python的过程中勾选了 Add Python 3.x to PATH 的话, 那么,我们就可以直接在命令行使用 Python 和 pip 命令了.</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>小知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>读《三言二拍》(未竟)</title>
    <link href="/2021/05/29/%E8%AF%BB%E3%80%8A%E4%B8%89%E8%A8%80%E4%BA%8C%E6%8B%8D%E3%80%8B/"/>
    <url>/2021/05/29/%E8%AF%BB%E3%80%8A%E4%B8%89%E8%A8%80%E4%BA%8C%E6%8B%8D%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<p>缇骑：tí jì，缇，橘红色。缇骑，这里指的是锦衣卫。</p>]]></content>
    
    
    <categories>
      
      <category>读书</category>
      
    </categories>
    
    
    <tags>
      
      <tag>未竟</tag>
      
      <tag>读书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单源最短路径之 Bellman-Ford 算法详解及其 Python 实现</title>
    <link href="/2021/05/28/%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E4%B9%8B-Bellman-Ford-%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%E5%8F%8A%E5%85%B6-Python-%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/05/28/%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E4%B9%8B-Bellman-Ford-%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%E5%8F%8A%E5%85%B6-Python-%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>本博客的内容基本来自《算法导论》。</p><h2 id="算法描述">算法描述</h2><p>Bellman-Ford算法解决的是一般情况下的单源最短路径问题，在这里，边的权重可以为负值。给定带权重的有向图<code>$G = (V, E)$</code> 和权重函数<code>$\omega : E \rightarrow \mathbf&#123;R&#125;$</code>，Bellman-Ford算法返回一个布尔值，以表明是否存在一个从源结点可以到达的权重为负值的环路。如果存在这样一个环路，算法将告诉我们不存在解决方案。如果没有这种环路存在，算法将给出最短路径和它们的权重。</p><p>Bellman-Ford 算法通过对边进行松弛操作来渐近地降低从源结点<code>$s$</code> 到每个结点 <code>$v$</code> 的最短路径的估计值<code>$v.d$</code>，直到该估计值与实际的最短路径权重<code>$\delta(s, v)$</code> （注二）相同时为止。该算法返回 TRUE值当且仅当输入图中不包含可以从源结点到达的权重为负值的环路。</p><p>伪码描述如下</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210528220823.png" /></p><p>算法运行的一个示例图</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210528221302.png"alt="Bellman-Ford 算法的执行过程" /></p><p>对上图的说明：源结点为 <code>$s$</code>，结点中的数值为该结点的<code>$d$</code>（注一）值，加了阴影的边比奥氏前驱值：如果<code>$(u, v)$</code> 加了阴影，则<code>$v.\pi = u$</code>。在本图的例子中，每一次的松弛操作对边的处理次序都是：<code>$(t, x)$</code>，<code>$(t, y)$</code>，<code>$(t, z)$</code>，<code>$(x, t)$</code>，<code>$(y, x)$</code>，<code>$(y, z)$</code>，<code>$(z, x)$</code>，<code>$(z, s)$</code>，<code>$(s, t)$</code>，<code>$(x, y)$</code>，(a)在第 1 次松弛操作前的场景。(b) ~ (e) 在对边进行每次松弛操作后的场景。图(e) 中的 <code>$d$</code> 值和 <code>$\pi$</code>值为最终取值。在本例中，Bellman-Ford 算法返回的值为 TRUE。</p><h2 id="补充">补充</h2><h3 id="对边的松弛操作relax">对边的松弛操作（Relax）</h3><hr /><p>注一：<code>$d$</code> 是结点的一个属性，比如，<code>$v.d$</code>记录的是从源结点 <code>$s$</code> 到结点 <code>$v$</code>之间的距离。同理， <code>$\pi$</code>也是结点的一个属性，比如，<code>$v.\pi$</code> 记录的是 <code>$v$</code>的前驱结点。（见《算法导论》中文版 p344）</p><p>注二：定义从结点 <code>$u$</code> 到结点 <code>$v$</code>的<strong>最短路径权重</strong> <code>$\delta(u, v)$</code> 如下</p><p>$$</p><p>$$</p>]]></content>
    
    
    <categories>
      
      <category>《算法导论》</category>
      
    </categories>
    
    
    <tags>
      
      <tag>《算法导论》</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构之图的定义和术语(未竟)</title>
    <link href="/2021/05/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%9B%BE%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E6%9C%AF%E8%AF%AD/"/>
    <url>/2021/05/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%9B%BE%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E6%9C%AF%E8%AF%AD/</url>
    
    <content type="html"><![CDATA[<h2 id="图的定义">1、图的定义</h2><p>图（Graph）是由两个集合构成，一个是非空但有限的顶点集合 <spanclass="math inline">\(V\)</span>，另一个是描述顶点之间关系——边的集合<span class="math inline">\(E\)</span>（可以是 $arnothing$）。因此，图可以表示为 <span class="math inline">\(G = (V,E)\)</span>。每条边是一顶点对 <span class="math inline">\((v,w)\)</span> 且 <span class="math inline">\(v, w \in V\)</span>。</p><p>通常用 <span class="math inline">\(|V|\)</span> 表示顶点的数量，用<span class="math inline">\(|E|\)</span> 表示边的数量。</p><h2 id="图的术语">2、图的术语</h2><p>(1)、无向图（UnderectedGraphs）：无向图中顶点之间的边（Edge）没有方向，即边 <spanclass="math inline">\((v, w)\)</span> 等同于 <spanclass="math inline">\((w, v)\)</span>。用圆括号“()”表示无向边。边的起点<span class="math inline">\(w\)</span> 和终点 <spanclass="math inline">\(v\)</span> 次序并不重要。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210608212819.png"alt="图一　　无向图" /></p><p>(2)、有向图（Directed Graphs）：有向图中顶点之间的所有边都有方向，即<span class="math inline">\(&lt;v, w&gt;\)</span> 不同于 <spanclass="math inline">\(&lt;w,v&gt;\)</span>。用尖括号“&lt;&gt;”表示有向边。有向边也称弧（Are）。弧的“起点（弧头）”和“终点（弧尾）”的次序不能随意颠倒。在不会混淆的场合，有向边和无向边都简称为“边”。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210608213830.png"alt="图二　　有向图" /></p><p>(3)、简单图（Simple Graph）：如果图中出现重边（即边的集合 <spanclass="math inline">\(E\)</span>中有相同的重复元素）或者自回路边（即边的起点和终点是同一个顶点），就叫做非简单图。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210608220507.png"alt="图三　　两种非简单图" /></p><p>(4)、邻接点（Adjacent Vertices）：如果 <spanclass="math inline">\((v, w)\)</span> 是无向图中任意一条边，那么称 <spanclass="math inline">\(v\)</span> 和 <spanclass="math inline">\(w\)</span> 互为邻接点；如果 <spanclass="math inline">\(&lt;v, w&gt;\)</span>是有向图中任意一条边，那么称起点 <span class="math inline">\(v\)</span>“邻接到”（Adjacent to）终点 <spanclass="math inline">\(w\)</span>，也称终点 <spanclass="math inline">\(w\)</span> “邻接自”（Adjacent from）起点 <spanclass="math inline">\(v\)</span>。比如，考察图二这个有向图 <spanclass="math inline">\(G_2\)</span>，顶点 2 邻接到顶点 1，或者说顶点 1邻接自顶点 2。</p><p>(5)、路径（Path）、简单路径（SimplePath）、回路（Cycle，也叫做“环”）、无环图（AcyclicGraph）：图中的一条路径是一顶点序列 <span class="math inline">\(v_1,v_2, ..., v_N\)</span>，序列中任何相邻的两顶点都能在图中找到对应的边，即<span class="math inline">\((v_i, v_{i + 1}) \in E (1 \leqslant i &lt;N)\)</span>。一条路径的长度是这条路径所包含的边数。</p><p>一条<strong>简单路径</strong>是指除了路径的首尾顶点外，其余顶点都是不同的。</p><p>有向图中的一条回路是指 <span class="math inline">\(v_1 = v_N\)</span>的一条路径。路径长度为 1的回路是一个自回路（属于非简单图）。简单路径形成的回路称为简单回路（SimpleCycle）。</p><p>如果在一个有向图中不存在回路，那么这个有向图称为无环图。</p><p>对于无向图，由于顶点是无序的，环路的长度要大于等于 3。</p><p>按：本文所有术语和定义皆摘自浙江大学《数据结构第二版》（陈越、何钦铭），且省略了部分我认为不重要的内容。</p><p>(12)、连通图（Connected Graph）、连通分量（ConnectedComponent）：在无向图中，如果从一个顶点 <spanclass="math inline">\(v_i\)</span> 到另一个顶点 <spanclass="math inline">\(v_j(i \leq j)\)</span> 有路径，则称顶点 <spanclass="math inline">\(v_i\)</span> 和 <spanclass="math inline">\(v_j\)</span>是连通的（Connected）。如果图中任意两顶点都是连通的，则称该图是连通图。无向图的极大连通子图称为连通分量。连通分量的概念包含以下 4 个要点：</p><ul><li>子图：连通分量应该是原图的子图；</li><li>连通：连通分量本身应该是连通的；</li><li>极大顶点数：连通子图含有极大顶点数，即再加入其他顶点将会导致子图不连通；</li><li>极大边数：具有极大顶点数的连通子图包含依附于这些顶点的所有边。</li></ul><p>因此，连通的无向图只有一个连通分量，这个连通分量就是本图。不连通的无向图有多于一个的连通分量。</p><p>(13)、强连通图（Strongly Connected Graph）、强连通分量（StronglyConnected Component）；对于有向图来说，若图中任意一对顶点 <spanclass="math inline">\(v_i\)</span> 和 <span class="math inline">\(v_j(i\leq j)\)</span> 均既有从 <span class="math inline">\(v_i\)</span> 到<span class="math inline">\(v_j\)</span> 的路径，也有从 <spanclass="math inline">\(v_j\)</span> 到 <spanclass="math inline">\(v_i\)</span>的路径，则称该有向图是强连通图。有向图的极大强连通子图称为强连通分量。</p><p>强连通分量的概念与连通分量类似，也包含 4个要点。强连通图本身就是一个强连通分量。不是强连通的有向图有多于一个的强连通分量。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>未竟</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浙江大学《数据结构 第二版》pdf 分享</title>
    <link href="/2021/05/28/%E6%B5%99%E6%B1%9F%E5%A4%A7%E5%AD%A6%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8Bpdf-%E5%88%86%E4%BA%AB/"/>
    <url>/2021/05/28/%E6%B5%99%E6%B1%9F%E5%A4%A7%E5%AD%A6%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8Bpdf-%E5%88%86%E4%BA%AB/</url>
    
    <content type="html"><![CDATA[<p>本资源收集自三叶资源网, 没有想到这个资源是真的, 在 Google 上搜索,很多链接都是虚假的, 点击之后会跳转到这本书的购物网站页面, 气极.遂再次分享之.</p><p>下面是我重新生成的百度网盘的链接</p><p>链接：https://pan.baidu.com/s/1gk3VKo1N-N6Wr7C4T37TqQ提取码：kkds</p><p>需要注意的是, 本书的 pdf 质量并不怎么好,因为虽然这本书的质量在我看来是十分好的,而且配合浙江大学数据结构的慕课一起学习效果是非常好的,但是了解这本书的人似乎并不是很多, 致使珠玉蒙尘, 只能徒呼奈何.</p>]]></content>
    
    
    <categories>
      
      <category>资源</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>资源</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微软输入法导入 600 万短语词库</title>
    <link href="/2021/05/28/%E5%BE%AE%E8%BD%AF%E8%BE%93%E5%85%A5%E6%B3%95%E5%AF%BC%E5%85%A5-600-%E4%B8%87%E7%9F%AD%E8%AF%AD%E8%AF%8D%E5%BA%93/"/>
    <url>/2021/05/28/%E5%BE%AE%E8%BD%AF%E8%BE%93%E5%85%A5%E6%B3%95%E5%AF%BC%E5%85%A5-600-%E4%B8%87%E7%9F%AD%E8%AF%AD%E8%AF%8D%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<p>今天用着这个微软拼音输入法, 突然觉得有点不顺手,所以看网上有没有有相关的词库让我给导入, 以此来优化这个微软拼音的体验,结果在吾爱破解找到了这个 600 万的词库(原帖地址:<ahref="https://www.52pojie.cn/thread-1227015-1-1.html"class="uri">https://www.52pojie.cn/thread-1227015-1-1.html</a>),试用之后, 发现效果还可以, 遂分享之.</p><p>原帖给的是蓝奏云和天翼云的链接, 下面给出的百度网盘的链接</p><p>链接：<a href="https://pan.baidu.com/s/1JUQTMOa5ynkAG7mSCshLmQ"class="uri">https://pan.baidu.com/s/1JUQTMOa5ynkAG7mSCshLmQ</a>提取码：jcv2</p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 命令行的 -m 参数</title>
    <link href="/2021/05/27/Python-%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%9A%84-m-%E5%8F%82%E6%95%B0/"/>
    <url>/2021/05/27/Python-%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%9A%84-m-%E5%8F%82%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="命令格式">1. 命令格式</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">python -m &lt;module-name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="参数解释">2. 参数解释</h3><p>在 <code>sys.path</code> 中搜索指定模块, 并以 <code>__main__</code>模块执行其内容.</p><p>该参数是 <em>模块名</em>(注一), 不能输入文件扩展名(.py).模块名应该是有效的绝对的 Python 模块名, 但是 Python不对此作强制要求(例如, 允许使用含连字符 <code>-</code> 的名称).</p><p>包名称(包括命名空间包(注二))也允许使用. 使用包名称而不是普通模块名时,解释器把 <code>&lt;pkg&gt;.__main__</code> 作为主模块执行.</p><h3 id="使用范例">3. 使用范例</h3><p>创建一个名为 <code>my_env</code> 的 Python 虚拟环境</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">python -m venv my_env<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>使用 pip 安装 Django</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">python -m pip install django<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>如果我们已经将 pip 添加到系统环境变量中去的话, 是可以直接使用 pip命令的, 上面这个命令可以在系统中有多种版本的 Python时给我们提供便利.</p><h3 id="补充">4. 补充</h3><p>关于 <code>sys.path</code> 的说明.</p><p>所谓 <code>sys.path</code>,其实就是一个指明模块搜索路径的字符串列表(list). 详细内容可以参考文档 <ahref="https://docs.python.org/3/library/sys.html#sys.path"class="uri">https://docs.python.org/3/library/sys.html#sys.path</a>.</p><p>我们可以通过一个 Python 程序(我这里程序名为 draft04.py)来看一下这个<code>sys.path</code> 是什么</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">for</span> each <span class="token keyword">in</span> sys<span class="token punctuation">.</span>path<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>然后在命令行执行</p><figure><div class="code-wrapper"><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">py draft04.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>得到结果</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210529220848.png" /></p><p>我们可以看到, 这里输出了很多文件路径, 这些路径下就有很多 Python 的包,我们上面执行的 <code>python -m &lt;module-name&gt;</code>, 这里的的参数<code>&lt;module-name&gt;</code> 就是从这些路径中搜寻而得, 比如,<code>python -m pip install django</code> 中的 pip, 就是从<code>C:\Users\17309\AppData\Local\Programs\Python\Python38\lib\site-packages</code>路径中搜寻而得,</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210529221411.png" /></p><p>再比如, <code>python -m venv my_env</code> 命令中的 <code>venv</code>命令是从<code>C:\Users\17309\AppData\Local\Programs\Python\Python38\lib</code>中搜寻而得,</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210529221542.png" /></p><h3 id="参考">5. 参考</h3><p><a href="https://docs.python.org/3/using/cmdline.html"class="uri">https://docs.python.org/3/using/cmdline.html</a></p><hr /><p>注一: 所谓模块名, 就是我们平时写的带 <code>.py</code> 文件扩展名的Python 脚本文件, 把 <code>.py</code> 去掉就是模块名.</p><p>注二: 命名空间包, 就是包内不含有 <code>__init__.py</code> 的包.</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 实现作业排程问题</title>
    <link href="/2021/05/26/Python-%E5%AE%9E%E7%8E%B0%E4%BD%9C%E4%B8%9A%E6%8E%92%E7%A8%8B%E9%97%AE%E9%A2%98/"/>
    <url>/2021/05/26/Python-%E5%AE%9E%E7%8E%B0%E4%BD%9C%E4%B8%9A%E6%8E%92%E7%A8%8B%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述">1. 问题描述</h2><ul><li>Automobile factory with two assembly lines<ul><li>Each line has n stations: <code>$S_&#123;1, 1&#125;,...,S_&#123;1, n&#125;$</code> and<code>$S_&#123;2, 1&#125;,...,S_&#123;2, n&#125;$</code></li><li>Corresponding stations <code>$S_&#123;1, j&#125;$</code> and<code>$S_&#123;2, j&#125;$</code> perform the same function but can take differentamounts of time <code>$a_&#123;1, j&#125;$</code> and <code>$a_&#123;2, j&#125;$</code></li><li>Entry times <code>$e_1$</code> and <code>$e_2$</code> and exit times<code>$x_1$</code> and <code>$x_2$</code></li></ul></li></ul><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210526133002.png"alt="装配线问题示意图" /></p><p>给出一个示例的装配线，要求输出最优的排程方案</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210526133309.png" /></p><h2 id="思路分析">2. 思路分析</h2><p>首先, 利用动态规划思想找出递归关系,这个是<strong>最重要</strong>的一步</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210526134353.png"alt="递归式" /></p><p>这里的 <code>$f_1[j]$</code> 表示在第一条装配线的第 j个站台处理完之后所花费的最少的时间. <code>$f_2[j]$</code> 也是同理.</p><p>然后, 根据这个关系, 我们就可以自底向上构建 <code>$f_1$</code> 和<code>$f_2$</code> 这两个数组了.</p><p>伪码描述如下</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210526135533.png"alt="伪码" /></p><h2 id="代码实现">3. 代码实现</h2><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 最优排程问题</span><span class="token keyword">def</span> <span class="token function">fastest_way</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span><span class="token builtin">list</span><span class="token punctuation">,</span> t<span class="token punctuation">:</span><span class="token builtin">list</span><span class="token punctuation">,</span> e<span class="token punctuation">:</span><span class="token builtin">list</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span><span class="token builtin">list</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    解决最优排程问题    :param a: 两条线上各自的每个站点的各自处理时间    :param t: 两条线上各自的每个前 n - 1 个站点的切换时间    :param e: 两条线的各自的 entry 时间    :param x: 两条线的各自的 exit 时间    :param n: 每条线的工作站的数目    :return: 最优时间, 路径和最后一个走过的工作站点    '''</span>    <span class="token comment"># 两条线上每个站的处理时间</span>    a1<span class="token punctuation">,</span> a2 <span class="token operator">=</span> a <span class="token comment"># 自动解包</span>    <span class="token comment"># 两条线在第 i 个站换线需要的时间</span>    t1<span class="token punctuation">,</span> t2 <span class="token operator">=</span> t    <span class="token comment"># 两条线上 e 和 x 的数值</span>    e1<span class="token punctuation">,</span> e2 <span class="token operator">=</span> e    x1<span class="token punctuation">,</span> x2 <span class="token operator">=</span> x    <span class="token comment"># 两条线在每个装配点所花费的最小时间表（动态规划）</span>    f1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>    f2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>    route <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token comment"># 存储路径</span>    time <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span> <span class="token comment"># 最优时间</span>    final_line <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment"># 最后一个节点所在的线路</span>    <span class="token comment"># 初始化</span>    f1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> e1 <span class="token operator">+</span> a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    route<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment"># 1 表示走第一条线路</span>    f2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> e2 <span class="token operator">+</span> a2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    route<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment"># 2 表示走第二条线路</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> f1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> f2<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> t2<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            f1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> f1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            route<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            f1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> f2<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> t2<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            route<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>        <span class="token keyword">if</span> f2<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> f1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> t1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            f2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> f2<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a2<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            route<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            f2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> f1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> t1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a2<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            route<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>f1<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> x1 <span class="token operator">&lt;</span> f2<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> x2<span class="token punctuation">)</span><span class="token punctuation">:</span>        time <span class="token operator">=</span> f1<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> x1        final_line <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        time <span class="token operator">=</span> f2<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> x2        final_line <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>time<span class="token punctuation">,</span> route<span class="token punctuation">,</span> final_line<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">print_route</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">,</span> j<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">,</span> route<span class="token punctuation">:</span><span class="token builtin">list</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    递归打印装配的线路图    :param i: 装配线, 0 represents the first assembly line, 1 represents the second line    :param j: 当前节点    :param route: 存储两条线路的节点的父节点的 list    :param n: 装配线的节点数    :return: None    '''</span>    <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[Line: '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' Station: '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">']'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        print_route<span class="token punctuation">(</span>route<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> route<span class="token punctuation">,</span> n<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[Line: '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' Station: '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">']'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> j <span class="token operator">!=</span> n<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'=>'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> <span class="token number">5</span>  <span class="token comment"># 每条线工作站的数目</span>    <span class="token comment"># 两条线上每个站的处理时间</span>    a1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>    a2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>    <span class="token comment"># 两条线在第 i 个站换线需要的时间</span>    t1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>    t2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>    <span class="token comment"># 两条线上 e 和 x 的数值</span>    e1 <span class="token operator">=</span> <span class="token number">2</span>    e2 <span class="token operator">=</span> <span class="token number">4</span>    x1 <span class="token operator">=</span> <span class="token number">3</span>    x2 <span class="token operator">=</span> <span class="token number">6</span>    a <span class="token operator">=</span> <span class="token punctuation">[</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">]</span>    t <span class="token operator">=</span> <span class="token punctuation">[</span>t1<span class="token punctuation">,</span> t2<span class="token punctuation">]</span>    e <span class="token operator">=</span> <span class="token punctuation">[</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">]</span>    x <span class="token operator">=</span> <span class="token punctuation">[</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">]</span>    res <span class="token operator">=</span> fastest_way<span class="token punctuation">(</span>a<span class="token punctuation">,</span> t<span class="token punctuation">,</span> e<span class="token punctuation">,</span> x<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    time<span class="token punctuation">,</span> route<span class="token punctuation">,</span> final_line <span class="token operator">=</span> res    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The shortest time:'</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The best assembly line is: '</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    print_route<span class="token punctuation">(</span>final_line<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> route<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>输出</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">The shortest time: 35The best assembly line is: [Line: 1 Station: 1] &#x3D;&gt; [Line: 2 Station: 2] &#x3D;&gt; [Line: 1 Station: 3] &#x3D;&gt; [Line: 1 Station: 4] &#x3D;&gt; [Line: 1 Station: 5] <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>算法设计与分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>《算法导论》</tag>
      
      <tag>算法设计与分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些偏僻但有用的数学知识点</title>
    <link href="/2021/05/24/%E4%B8%80%E4%BA%9B%E5%81%8F%E5%83%BB%E4%BD%86%E6%9C%89%E7%94%A8%E7%9A%84%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/2021/05/24/%E4%B8%80%E4%BA%9B%E5%81%8F%E5%83%BB%E4%BD%86%E6%9C%89%E7%94%A8%E7%9A%84%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p>知识点 1: 0 的阶乘是 1.</p><p>知识点 2: 在集合记号中, 冒号意指"使得".</p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>未竟</tag>
      
      <tag>数学</tag>
      
      <tag>杂识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown 中空格的几种写法</title>
    <link href="/2021/05/23/Markdown-%E4%B8%AD%E7%A9%BA%E6%A0%BC%E7%9A%84%E5%87%A0%E7%A7%8D%E5%86%99%E6%B3%95/"/>
    <url>/2021/05/23/Markdown-%E4%B8%AD%E7%A9%BA%E6%A0%BC%E7%9A%84%E5%87%A0%E7%A7%8D%E5%86%99%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>感觉有种孔乙己在写茴香豆的茴的感觉......</p><p>哈哈, 回到正题, 就是在 Markdown 中书写空格的几种方法.</p><h3 id="使用-nbsp">1. 使用 <code>&amp;nbsp;</code></h3><p>一共有四种(注1)表示空格的方法</p><figure><div class="code-wrapper"><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token entity named-entity" title="&emsp;">&amp;emsp;</span><span class="token entity named-entity" title="&ensp;">&amp;ensp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&thinsp;">&amp;thinsp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>它们的间隙大小顺序是 <code>&amp;emsp;</code> &gt;<code>&amp;ensp;</code> &gt; <code>&amp;nbsp;</code> &gt;<code>&amp;thinsp;</code>.</p><h3 id="使用全角的空格">2. 使用全角的空格</h3><p>首先将输入法切换到全角模式, 然后输入空格即可.</p><p>不同的输入法, 比如微软输入法和搜狗输入法的切换全角和半角的方式,自行搜索即可.</p><hr /><p>注1：本来我是只知道一种表示方法的, 即 <code>&amp;nbsp;</code>,(lll￢ω￢).</p>]]></content>
    
    
    <categories>
      
      <category>markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我读《别闹了，费曼先生》(未竟)</title>
    <link href="/2021/05/23/%E6%88%91%E8%AF%BB%E3%80%8A%E5%88%AB%E9%97%B9%E4%BA%86%EF%BC%8C%E8%B4%B9%E6%9B%BC%E5%85%88%E7%94%9F%E3%80%8B/"/>
    <url>/2021/05/23/%E6%88%91%E8%AF%BB%E3%80%8A%E5%88%AB%E9%97%B9%E4%BA%86%EF%BC%8C%E8%B4%B9%E6%9B%BC%E5%85%88%E7%94%9F%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="读书笔记">读书笔记</h2><p>１、阿琳生病期间，一直把那只钟放在床边，它却刚好在她去世的那一刻停顿。我明白，那些对这类事情疑信参半的人，在这种情况之下，不会立刻去研究事情的真相；他们会认定没人碰过那时钟，事情无法解释；而钟确实停了，确实可以算是一件惊人的超自然案例。</p><p>按：对于超自然现象，很小时候的我是嗤之以鼻的。现在呢，在经过了所谓的唯物主义的熏陶之后，我变了，至少，我不再排斥唯心主义了。这样一来，反而使我的心态在很多方面得到了纾解，譬如，我对于一些曾经被强行认为是糟粕的中华民族的传统文化，开始重新思考，而并不仅仅是一味地持排斥的态度。</p><p>２、冯诺曼教会了我一个很有趣的想法：你不需要为身处的世界负任何责任。因此我就形成了强烈的“社会不负责任感”，从此成为一个快活逍遥的人。</p><p>按1：我在读《清明上河图密码》时，读到张用这个人物时，大为惊讶，书中的陆青给他的评价似乎是第一等的玩世者（具体是第几等忘了，反正是评价最高的一等），而这种玩世者，正是我最最羡慕的一种人，费曼当然也是这种人，尤其是在他领悟了“社会不负责任感”之后。不过，在这本书的描述中，他从小到大似乎一直都是一个彻头彻尾的高级玩世者。</p><p>按2：这里的冯诺曼似乎是一个错误，我觉得应该是冯·诺伊曼才对，而且，费曼和冯·诺伊曼也是认识的。</p><p>３、上次他们来访后，老波耳跟他儿子说：“记得坐在后面那小伙子的名字吗？他是唯一不怕我的人，只有他会指出我的荒谬想法。</p><p>--分割--</p><p>在这方面我总是笨笨的。我总是忘记在跟谁说话，而一味担心物理上的问题。如果对方的想法差劲，我就告诉他那很差劲。如果他的想法很好，我就说很好。就那么简单，这就是我的处事方式。</p><p>按：直率也是费曼的一大性格特点，咱搞科学的，就要讲究效率嘛，而讲究效率的一个表现就是直来直去。看上去似乎有点傻，却非常有效。类似于躺平和逃避虽然有点可耻，但是确实是有用的。</p><p>４、除了 <code>$\pi$</code>之外，第二重要的常数就是自然对数的底了，即<code>$e = 2.71828 \cdots \cdots$</code>。</p><p>５、“你觉得你的生命有多少价值？” 　　“64。” 　　“为什么你说 64？”　　“生命的价值能用数量的吗？”　　“不！我是说，你为什么说‘64’，而不是——比如说——‘73’？”　　“如果我刚才说‘73’，你也会问我同样的问题呀！”</p><p>按：机锋处见其直率。</p><p>５、20 世纪40年代，我待在普林斯顿的期间，亲眼看到高等研究院内那些卓越心灵的下场。</p><p>按：联系上下文，发现，似乎思考是不能脱离实际的。与这种情况类似的，有一些不切实际的哲学家，或者说中科大的部分的少年班。</p><p>６、；但他们问我这个问题，却往往提醒了我相关的问题。单单靠自己，是不容易获得这种启示的。</p><p>按：这里是费曼在学生问他问题之后的思考。我以后在问老师问题时，也要联系一下这样的情况。反正错的不可能是我就对了。</p><p>７、绮色佳（Ithaca）</p><p>按：一个很好听的地名翻译。</p><p>８、我说：“嘿！我们可以躺在叶堆上睡呀！”我试了试，感觉软软的。。我厌倦了那样逛来逛去，在落叶上睡觉简直是十全十美！但我又害怕会因此惹上麻烦。早在罗沙拉摩斯时大家都取笑我——我又打鼓，又怎么的——说康奈尔不知道请来的是什么样子的教授，还说我一定会做些傻事而大大出名了；因此我得庄重点，最后很不情愿地放弃在那堆树叶上睡觉的念头。</p><p>按：童心未泯却又有所约束。</p><p>９、我脑筋没动那么快、想到那么多；我的反应很直接，想到就说。</p><p>按：每一次费曼这么说时，我都想给他一个大大的白眼。你这脑筋转得要是没那么快，那我们又算什么呢？</p><p>１０、“你大概还研究过原子弹呢！　　　“是呀，战时我都待在罗沙拉摩斯。”　　　她说：“你真是个该死的骗子！”就走开了。</p><p>--分割--</p><p>　　之后我便回避所有问题，效果便迥然不同了： 　　“你是个新生吗？　　“噢，才不呢。” 　　“研究生？ 　　“不。” 　　“你是干什么的？　　“我不要说。” 　　“为什么不肯告诉我？　　“我不想说……”——她们就一直跟我谈下去！</p><p>按：呵呵，拈花惹草。</p><p>１１、但那时候，除了准备课程之外，我经常跑到图书馆去，读《天方夜谭》，偷看身边的女孩；而到了做研时，我便无法专心工作。我觉得有点累，提不起兴趣，我无法做研究了。</p><p>--分割--</p><p>于是我就坐在那里读《天方夜谭》，觉得自己油尽灯枯，不断地自怜自艾。</p><p>按：大科学家也是有很困扰的时候的。可以以此为镜。</p><p>１２、高等研究院！特别安排！职位甚至比爱因斯坦的还要好！太理想、太完美了；也太荒谬了！</p><p>按：不宜妄自菲薄哈哈。</p><p>１３、接着我又有一个想法：目前我有点厌烦物理，但从前我很能够享受物理的乐趣。为什么会这样呢？因为从前我都在跟它玩游戏。从前我随兴之所至——我不会忧虑这究竟对核子物理的发展是否重要，只会想这是否有趣，好不好玩。。还在念高中时，看到水龙头流出来的水流逐渐变少，我很好奇能不能研究出它的曲线，而我发现那并不难。事实上，我根本没必要去研究它，它对科学发展也无关重要，何况那问题早有人研究过了。但对我来说毫无分别：我还是会发明些什么，为了觉得好玩而做物理。</p><p>　　这就是我的新人生观。好吧，我筋疲力尽，我永远不会有多么伟大的成就。</p><p>１４、我反正闲着，于是着手计算碟子的运动。结果发现当角度很小时，校徽转动的速度是摆动速度的两倍，刚巧是2 比1，而这是从一个很复杂的方程式推算出来的。我想：“有没有更基本的方法来处理这现象，例如从力或动力的角度来了解为什么刚好是2 比 1？</p><p>１５、我已经下定决心，我要享受物理，随兴之所至。</p><p>１６、我做的毫无意义，可是结果呢，却恰好相反：后来我获颁诺贝尔奖的原因——费曼图以及其他的研究——全都来自那天我把时光“浪费”在一个转动的餐碟上！</p><p>１７、那位酒保总是不会让我身旁的椅子空着，每次都介绍我认识一些漂亮女人。</p><p>１８、他往后退，继而离开。如果他跟我一样笨，也许我们真会把对方打死的！</p><p>按：我曾经也有过想和别人打架的念头。奈何最终没有实施。</p><p>１９、我拿了一块钱，想到个好主意。我跑到杂货店，买了一块钱的饼干糖果（那时候一块钱可买很多东西），跑回理论组请大家吃，我说：“我发大财啦，各位！请你们吃片饼干！我的专利卖了一块钱！专利卖了一块钱！</p><p>按：哈哈有趣！</p><p>２０、我才明白我点那16元一瓶的香槟，以及那么夸张和令人误会的“没关系啦！”居然是项很不错的投资。看来我早已声名在外，成了一个穿得并不怎么体面，但永远愿意花大把钞票在女孩身上的人。</p><p>按：恍惚间有一种楚香帅的感觉。</p><p>２１、“因此，”他继续说，“无论在什么情况之下，都不要充绅士！不要太尊重她们。而且，守则第一条是，不要买东西给她们——连一包烟也不要买——一直到你已问过她要不要跟你睡，而你已确定她会，不是在骗你。”</p><p>--分割--</p><p>我采取的心态是：酒吧那些女孩全都是一文不值的，她们只不过想骗你买酒请她喝而已，她们不会给你任何回报；我不要对这些一文不值的女人表示绅士风度……等等，反复练习，直到变成直觉反应一样。</p><p>--分割--</p><p>毕竟，酒吧里的女郎都在哄你请她喝酒而已，对她们不尊敬，心里不会太难过、不安——但眼前这个很好、一般的南方女孩呢？</p><p>我们走进酒吧，还没坐下来，我说：“在我请你喝杯酒之前，我想知道一件事：今晚你愿意跟我睡吗？</p><p>“愿意。”</p><p>因此这手法在一般女孩身上也用得着！但无论有多灵验，以后我再也没那样做了——我不喜欢那样尔虞我诈。但整个经验最有趣的，是发现世界上有许多事情的运作方式，跟我从小被教导的一套，居然会有这样大的差异！</p><p>按：其实，我很好奇的是，那里的性是这么自由的吗？</p><p>２２、跟贝特一起应用各种诀窍做快速心算，真是好玩极了。通常我想到的，他都想到，我很少能算得比他快。而如果我算出一题的话，他就开怀大笑起来。无论什么题目，他总是能算出来，误差差不多都在1%以内。对他而言，这简直是轻而易举——任何数字总是接近一些他早已熟悉的数字。</p><p>２３、“谁说不痛？我也痛啊！”　　　我觉得自己真的有够笨，竟让他骗我拿着尺打自己打了两个札拜！</p><p>按：经典费曼别骗。</p><p>２４、这个顾客是如何打赢算盘的？题目是1729.03。我刚巧知道一立方英尺有1728立方英寸，因此答案必定是12多一点点。多出来的1.03呢，大约是二千分之一，而我在微积分课里学过，就小分数而言，立方根超出的部分是数字超出部分的三分之一，因此我只需要算1/1728是多少，再乘以4（即除3再乘12）。这是为什么我一下就能算出那么多小数位。</p><p>２５、此外，他根本无法理解求近似值方法所包含的道理，他不明白在很多情况下，任何方法都求不出完整的立方根，但可以求近似值。因此我永远无法教会他我求立方根的方法，甚至让他明白那天我有多幸运，因为他刚好挑了个像1729.03这样的数字！</p><p>２６、但当他们很辛苦地用英语说话时，就算他们发音不准、文法又错乱，我还是可以分辨他们要说些什么。因此我明白到，如果我要教他们东西，比较好的方法是我说葡语，虽然我说不好，但这样他们还是比较听得懂。</p><p>按：费曼作为老师来说，其品格也是很好的。就这一点，我联想到了我们用英文PPT 教学的老师，呵呵，自顾自呢。</p><p>２７、要知道，我一向从思考过程中获得许多的乐趣，以致很不愿意破坏这部生命中最好玩的机器——换句话说，自己的身体。这也是为什么，虽然我对幻觉现象充满了好奇，我还是不愿意尝试迷幻药。</p><p>按：这种态度非常值得学习！</p><p>２８、我无法推动他们做到的另一件事，是问问题。终于，一个学生告诉我其中的原因：“如果我在课堂上问你问题，之后大家都会跑来说：‘你为什么浪费大家的时间？我们的目的是学东西。但你却打断他，问他问题。”　　　这是一种打压别人的坏风气。事实上大家全都不懂，但他们表现出一副很懂的样子，以把别人比下去。他们全在假装明白课程内容，如果有学生偶然承认有些事情不够清楚，问问题，其他人便立刻摆出高高在上的样子，表现出一切都很清楚明白，并告诉他：“你在浪费其他人的时间。”　　　我跟他们说，大家一起做功课、讨论问题都是多么有用的方法；但他们也不要那样做，因为他们认为，开口问别人是很丢脸的事——真是可怜可悲！他们努力学习了不少，人也很聪明，但他们让自己陷入这种可笑的心理状态。这真是种奇怪的、完全没有意义的“教育”！</p><p>按：这种现象非常值得让人深思。我发现在大学里，很多人的知识是学得一知半解的，而这些人，却根本没想过去问问题，有些老师对于问题的解答的态度，也有点耐人寻味，这不是一个好现象。</p><p>２９、“你们答应过我想讲什么，就讲什么！”演讲厅里全坐满了。首先我把科学定义为“对大自然现象的理解”，然后我问：“教学生科学有什么好处呢？当然，如果不注重科学，这个国家就还不够文明……。”他们全坐在那里点头赞同，我很清楚这正是他们的想法。　　　然后我话锋一转：“当然，这是十分荒谬的，因为，我们为什么一定非要追上另一个国家不可？我们应该是为了一个好理由、充分的理由才教授科学，而不是只因为其他国家也研究科学。”我谈到科学的应用、科学对于改进人类生活的贡献——我着实挖苦了他们一顿。　　　然后我说：“我这次演讲的主题，是要向各位证明，巴西根本没有在教科学！”　　　他们明显地激动起来了，全都在想：“什么？没有在教科学？这话太疯狂了！我们开了一大堆科学课呢！”　　　我告诉他们，刚到巴西时，令我最震惊的是，看到小学生在书店里购买物理书。这么多巴西小孩在学物理，全都比美国小孩更早起步，结果整个巴西却没有几个物理学家，这真是令人惊讶极了——为什么会这样？这么多小孩那样的用功，结果却一点成效也没有！　　　我举例说，这好比一个深爱希腊文的希腊学者，他知道在他自己的国家里，小孩都不大爱念希腊文。但当他跑到别的国家，却发现那里的人都在研究希腊文，甚至小学生也在读，他高兴极了，但在一个主修希腊文学生的学位考试上，他问学生：“苏格拉底谈到真理和美之间的关系时，提出过什么主张？”——学生答不出来。然后学者又问：“苏格拉底在第三次对话录中跟柏拉图说过些什么？”学生立刻眉飞色舞，以极优美的希腊文，一字不漏的把苏格拉底说过的话背出来。　　　可是，苏格拉底在第三次对话录里所说的，正是真理和美之间的关系呢！　　　这位希腊学者发现的是，那个国家的学生学习希腊文的方式，是首先学会字母的发音，然后是字的读法，再后来是一句及一段地学下去。他们可以把苏格拉底说过的话倒背如流，却完全不知道那些希腊字是有其意义的。对学生来说，一切都只不过是些很人工化的声音罢了。从来没有人把这些声音翻译成学生看得懂的东西。　　　我说：“当我看到你们教小孩‘科学’的方式时，我的感觉就跟那希腊学者一模一样。”（很够震撼是不是？）</p><p>按：振聋发聩啊！陛下，不可不察啊！！</p><p>３０、知道吗？我总喜欢弄明白这个世界到底是怎么一回事！</p><p>按：我猜，原文肯定是，you know... 然后巴拉巴拉。</p><p>３１、我必须拒绝这么高的薪水，原因是如果我真的拿那种高薪，我就可以实现一切从前想做的事了——找一个很漂亮的情妇，替她找个公寓，买漂亮东西给她……用你们给我的薪水，我真的可以那样做，但我也知道我会变成怎么样。</p><p>按：这个做法我不能理解呀。差点让我怀疑这个事情的真是性了都。</p><p>３２、战前日本出过几位大有名气的物理学家，例如诺贝尔奖得主汤川秀树（1907～1981）、朝永振一郎（1906～1979）以及仁科芳雄（1890～1951）等。</p><p>按：我记得汤川秀树和朝永振一郎曾经是同班同学。</p><p>３３、我抬头往花园的方向看去，看到一个很美丽的年轻日本女人，穿着很可爱的衣服，坐在玄关上。　　　我读了很多关于日本风俗的资料，晓得为什么她被派来我的房间。我想：“这可能很有趣！　　　她会讲一点英文。“你喜欢逛花园吗？”她问。　　　我穿上鞋子，披上和服就走出去。她勾着我的手臂，指点花园的景色给我看。　　　后来我发现，原来只因为她懂一点英文，旅馆经理觉得我大概会喜欢她带我去逛逛花园，就这么简单而已。当然，我有点失望，但我知道东西文化交流时，很容易发生误会。</p><p>按：呵呵，你这个 lsp。</p><p>３４、那是我第一次到日本。我很想再回去，我告诉他们，只要有大学想要我，我都肯去。因此日本人就安排了一连串的地点，让我到每个地方待上几天。</p><p>按：中国，可惜了。</p><p>３５、“等一下，”我说，“你讲的问题有没有什么例子？ 　　　“当然有。”　　　“很好，那么就举一个例子。”这是我的作风：除非我脑袋里能出现一个具体的例子，然后根据这个特例来演算下去，否则我无法理解他们说的东西。所以很多人一开始时会觉得我反应有点慢，不了解问题所在，因为我问一大堆笨问题，像“阴极是正的还是负的？阴离子是这样的还是那样的？”</p><p>按：下次可以拿费曼的例子来怼别人。</p><p>３６、由于我总是要求别人给我实际例子，而不是要他们写数学方程式，所以有一份在科学家之间流传的油印刊物（这是他们在战后设计出来的一种简单有效的传播信息方式），用“费曼的轰炸及我们的回应”的标题，来总结我在日本各地的访问。</p><p>３７、因为物理学里有个定律叫“宇称规则”——那是建立在“所有的物理定律，其镜中影像都是对称的”的假定上。</p><p>按：杨振宁和李振道发现的定律。</p><p>３８、李政道站起来，回答了一些很复杂的东西，而按例我又是不太听得懂。会议快结束时，布洛克问我李政道说了些什么，我说不知道，但就我所知，这问题还没有答案——还是有可能发生的。我不认为可能性会很高，但我觉得那是有可能的。</p><p>按：不可思议！</p><p>３９、总之，后来吴健雄以实验证明了宇称也有不守恒的时候，而这替贝塔衰变理论带来了许多新的可能性，也启发了一大堆其他实验。有些证明了从核子出来的电子，有一部分飞向左边、一部分飞向右边；更有其他形形式式的实验，全都是跟宇称有关的有趣发现。然而数据是那么的混乱，根本没有人能够把东西拼凑在一起。</p><p>４０、画其他模特儿时，画得大一点或小一点都没什么差别，反正他们的身材都不怎么样。但当你要画一个外貌、身材都这么匀称的女孩时，你骗不了自己——每一笔都必须恰到好处才行！</p><p>４１、我从她身上学到的是，不管长得多美，每个女人都在担心自己的外貌。</p><p>４２、会议中有很多笨蛋——经过伪装的笨蛋——把我逼疯了。一般的笨蛋还好，你可以跟他们谈、解释，帮助他们走出迷惘。但经过伪装的笨蛋——明明是笨蛋却假装不是，拼命想叫别人佩服他们，希望别人觉得他们聪明、伟大——这，我受不了！</p><p>４３、这是我经常玩的游戏之一。他们想要收据？我一张收据也不要给他们。那么你就拿不到钱了。好，那么我就不拿这笔钱。他们不相信我？见他的鬼吧，他们不必付我钱。当然这是很荒谬的！我也知道这是政府作风，那么去他的政府吧！我觉得人应该把人当人看待。而直到我被当人看待之前，我不要跟他们有任何瓜葛！他们觉得难受吗？我也觉得难受呀！就那样算了吧。我知道他们在“保护纳税人”，但请看看在下面的例子中，纳税人到底受到怎么样的保护。</p><p>按：执拗的一面。</p><p>４４、我的开场白是：对我而言，从科学研究的发现中所得到的乐趣，以及从别人可以利用我的研究成果等等，我已经得到了我的奖赏。我试图说明，我已经得到了我所期望的一切，因此，其余的事物相形之下，也就无足轻重，我真的已经得到了我的奖。</p><p>按：诺奖开场白。</p><p>４５、我告诉这位日本大使，我一直对一件很不寻常的事情感兴趣：日本如何能这么快速地发展成这样现代化的世界强国呢？“日本人能够做到这地步，跟日本人性格或作风中的哪一面有关？”我问。　　　大使的回答深得我心。他说：“我不知道。我只能假设，但我不知道那正不正确。日本人相信他们只有一种出头的方式，就是让子女受更多的教育，比自己受的教育更多。对他们而言，脱离农夫的地位，成为知识分子是很重要的事。</p><p>按：下次如果有人说日本战后发展那么快都是靠美国之类的混话时，我就拿这个例子来和他说道说道。</p><p>４６、我的鼓打得愈来愈好了，有时候在一些聚会里我也会表演一下。其实我也不晓得自己在打些什么，只不过随意弄些有节奏感的声音出来而已，但我因此就有点名气了。罗沙拉摩斯的每个人都知道我喜欢打鼓。</p><p>按：除了绘画的另一项才艺。不过，这可不是像今天中国的一些鸡娃被鸡出来的技能，而纯粹是由于我想学，我觉得有趣而融汇贯通的一个爱好。</p><h2 id="几个有趣的数学知识">几个有趣的数学知识</h2><hr /><p>重要的待整理的内容：</p><p>1、费曼关于和女孩睡觉经验（虽然他也是跟师傅学来的）。</p><p>2、p179求级数的一些技巧，另外还有一些其他书中提到的关于心算方面的技巧的整理。</p><p>3、p184 关于求立方根的整理。</p>]]></content>
    
    
    <categories>
      
      <category>读书</category>
      
    </categories>
    
    
    <tags>
      
      <tag>未竟</tag>
      
      <tag>读书</tag>
      
      <tag>传记</tag>
      
      <tag>思考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我读《古趣图》(一集)(未竟)</title>
    <link href="/2021/05/23/%E6%88%91%E8%AF%BB%E3%80%8A%E5%8F%A4%E8%B6%A3%E5%9B%BE%E3%80%8B-%E4%B8%80%E9%9B%86/"/>
    <url>/2021/05/23/%E6%88%91%E8%AF%BB%E3%80%8A%E5%8F%A4%E8%B6%A3%E5%9B%BE%E3%80%8B-%E4%B8%80%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="读书笔记">读书笔记</h2><p>按：微信读书上有一个白话文版本的，我觉得没有这个原版，也就是文言版的够味儿，故这个笔记仅摘录文言版。</p><h3 id="孔融早慧">孔融早慧</h3><p>（孔）融幼有异才。年十岁，随父诣京师。时河南尹李膺以简重自居，不妄接士宾客，敕外自非当世名人及与通家，皆不得白。融欲观其人，故造膺门。语门者曰：“我是李君通家弟子。”门者言之。膺请融，问曰：“高明祖父尝与仆有恩旧乎？”融曰：“然。先君孔子与君先人李老君同德比义，而相师友，则融与君累世通家。”众坐莫不叹息。太中大夫陈炜后至，坐中以告炜。炜曰：“夫人小而聪了，大未必奇。”融应声曰：“观君所言，将不早慧乎？”膺大笑曰：“高明必为伟器。”　　--《后汉书》</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210523165431.png"alt="孔融早慧" /></p><h3 id="我不见了">我不见了</h3><p>一呆役解罪僧赴府，临行恐忘记事物，细加查点，又自己编成两句曰：“包裹雨伞枷，文书和尚我。”</p><p>途中步步熟记此二句。僧知其呆，用酒灌醉，剃其发以枷套之，潜逃而去。</p><p>役酒醒曰：“且待我查一查看，包裹雨伞有。”摸须上曰：“枷，有。”文书，曰：“有。”忽惊曰：“哎呀，和尚不见了！”</p><p>顷之，摸自光头曰：“喜得和尚还在，我却不见了。”　　--《传家宝》</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210528172817.png"alt="我不见了" /></p><h3 id="如意">如意</h3><p>齐人有女，二家同往求之，东家子丑而富，西家子好而贫，父母不能决，使其女偏袒（注1）示意。女便两袒，母问其故，答曰：“欲东家食而西家宿。”　　--《古今谭概》</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210523165528.png"alt="如意" /></p><p>按：来一个性转版又有何不可呢？人心都是一样的。呵呵。呵呵呵。</p><p>注1：偏袒：袒露出手臂的意思. 在这里表达的是, 你喜欢哪一个男人,就袒露出相对应的那一边的手臂.</p><h2 id="有感而发">有感而发</h2><p>本书在介绍语中有写，“除供读者茶余饭后的消遣外，还可鉴古知今，发挥匡正时弊的效力”。联系小丁，也就是丁聪这个可爱的老头，在豆瓣上看过一些他的针砭时弊的漫画，那可真是威力巨大。那么，小丁为人的形象，就呼之欲出了。我国能有这样的漫画家，多少还是能给一些明理之士增加一些信心的。</p>]]></content>
    
    
    <categories>
      
      <category>读书</category>
      
    </categories>
    
    
    <tags>
      
      <tag>未竟</tag>
      
      <tag>读书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于我这一个博客窝的README</title>
    <link href="/2021/05/22/%E5%85%B3%E4%BA%8E%E6%88%91%E8%BF%99%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2%E7%AA%9D%E7%9A%84README/"/>
    <url>/2021/05/22/%E5%85%B3%E4%BA%8E%E6%88%91%E8%BF%99%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2%E7%AA%9D%E7%9A%84README/</url>
    
    <content type="html"><![CDATA[<p>由于最近新买了一台 ThinkPad,所以笔记本现在是可以随时带到想要带的地方. 现在写博客对我来说,可谓是相当容易的一件事情, 所以, 为何不时时而为之呢?</p><p>另外, 这里要说一下我对于这个博客的总体期望, 即:只要在桌面端能够保持完美的适配我就心满意足了.原因除了现阶段没有太多时间搞这些东西,还有我本身对于我自己不要太过拥有强迫症的期望.</p><h2 id="关于我的图片">1. 关于我的图片</h2><h3 id="图片的来源">1.1 图片的来源</h3><p>因为这个主题对于图片的要求是必须的, 所以,我打算每一篇博客都使用不同的图片, 然后, 图片的来源有吉卜力的官网和 pivix站的一些图片.</p><p>存储的方式是将其全部存储在 Github 上面(我的所有博客都是拿 Github当作图床的), 然后定期在我的电脑上给这些图片备份.这样一来就可以防止图片丢失了.</p><p>另外, 我搜集的图片会事先上传到 Github,然后写博客的时候一张一张取出来就好,所有图片的链接我是准备保存在图片的同一个文件夹下的一个 <code>md</code>文件中. 不过,似乎这样一来就没有单独在这个文件夹下保存图片的必要了呢.</p><h3 id="图片的格式问题">1.2 图片的格式问题</h3><p>这个主题渲染的图片, 在书写时, 直接写原生的 markdown 语法即可.但是有一点要注意的是, 如果我们在格式 <code>![]()</code>的方括号中写入内容的话, 那么,这些内容是会被渲染到图片的正下方作为描述性的内容的, 如果为空的话, 那么,图片的呈现就会是纯粹的图片.</p><h2 id="关于我在记录博客的过程中遇到的问题">2.关于我在记录博客的过程中遇到的问题</h2><p>这里的问题主要是针对我目前正在使用的 Hexo 引擎和 Fluid 主题.</p><h3 id="数学公式渲染问题">2.1 数学公式渲染问题</h3><p>现在我是用的渲染引擎是 <code>kramed</code>, 它有一个问题,就是对于行内数学公式的渲染是有问题的, 不过, 它也有自己的解决办法,就是要按照它的格式来,即将已经使用一对美元符号包裹的数学公式外面再加上一个行内代码的标识,比如</p><figure><div class="code-wrapper"><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token code-snippet code keyword">`$a^2 + b^2 = c^2$`</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这样, 就可以正常渲染了.</p><p>对了, 其实还有一个问题, 就是在书写行内数学公式时, 如果公式的内容太长,最好在有标点的地方截断一下, 否则在移动端就会出现公式溢出的情况. 当然,我也不是那种有很强烈的强迫症的那种人, 只是,在尽可能范围内使我输出内容维持一个相对完美的状态.因为这个溢出问题刚好可以这样解决, 我就顺手这样做了.我现阶段的总体理念还是只要维持好桌面端的网页呈现内容就 ok 了.</p><h2 id="关于我写博客的特殊偏好">3. 关于我写博客的特殊偏好</h2><h3 id="标点问题">3.1 标点问题</h3><p>现阶段我是更加偏向于使用英文的半角标点的, 因为在写和计算机,工科和数学相关的一些博客时,使用英文的半角标点对于排版要更加友好一点.</p><p>但是, 如果我写一篇非技术类的博客, 并且, 同时使用的是纯中文的话,我可能会全篇使用中文的全角标点.</p><p>当然, 在使用半角标点的过程中,有时遇到书名号这种必须使用全角标点的情况, 那肯定还是要使用全角的.我的目前对于博客的哲学是, 尽量在整体上保持一种 "圆润" 的感觉, 因此,我现在的专注点是在内容上.</p><p>关于标点，还有一个问题，就是全角和半角的问题，因为我在作摘抄的时候是必须要用到顿号这个纯中文标点的，然后，它和半角的数字在一起之后，如果我要摘抄对话类型的文字，那么，下一行的对齐问题就会冒出来了。所以，为了解决这个问题，我决定这个数字和顿号都使用全角。然后，下一行的行首空格就用中文的全角空格代替，一个全角空格正好是两个字符，也就是一个汉字的宽度。</p><p>还有一个注意点，注释里面的标点符号，第一个标点不能够使用中文标点，否则会导致移动端适配问题。我淦。所以我基本上就使用英文的半角标点了。（呵呵，最后适配还是除了问题，应该是我手机的问题，它就是不适配这个尺寸的。管它呢。现在只要做好桌面端的排版就ok了。移动端排版终于崩了。呵呵。）（呵呵，最后还是把注释改成了手动的格式，因为本来的脚注格式其实也不好看）</p><h2 id="关于我的博客的标签和分类">4. 关于我的博客的标签和分类</h2><p>分类有的，标签都有。标签有的，分类是不一定有的。</p><h3 id="标签">4.2 标签</h3><h4 id="读书">读书</h4><p>这个标签主要是记录我的读书笔记的。一般来说，这个读书笔记博文它会分成两个部分，一个部分是摘抄和我当时的感想，感想的标记用一个“按”字来标注，仿照的是张中晓的“无梦楼楼主按”。而另一个部分则是我看完整本书之后的有感而发。</p><h4 id="未竟">未竟</h4><p>这个标签下的文章都是暂时没有写完的。</p><h3 id="分类">4.1 分类</h3><p>分类中的所有条目在标签里面都可以找到，所以这里就不再赘述。</p><p><strong>我宣布，以上怪癖处作废。</strong></p>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>未竟</tag>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>华科计算方法习题一解答</title>
    <link href="/2021/05/22/%E5%8D%8E%E7%A7%91%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95%E4%B9%A0%E9%A2%98%E4%B8%80%E8%A7%A3%E7%AD%94/"/>
    <url>/2021/05/22/%E5%8D%8E%E7%A7%91%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95%E4%B9%A0%E9%A2%98%E4%B8%80%E8%A7%A3%E7%AD%94/</url>
    
    <content type="html"><![CDATA[<h2 id="习题解答">习题解答</h2><p>1.1 试证明:</p><ol type="1"><li><p><code>$||\mathbf&#123;x&#125;||_&#123;\infty&#125; = \mathop&#123;max&#125;\limits_&#123;1 \leqslant i \leqslant n&#125; |x_i|, $</code><code>$\quad \mathbf&#123;x&#125; = (x_1, x_2, ..., x_n)^T \in \mathbf&#123;R&#125;^&#123;n&#125;;$</code></p></li><li><p><code>$\displaystyle ||\mathbf&#123;A&#125;||_&#123;\infty&#125; = \mathop&#123;max&#125;_&#123;1 \leqslant i \leqslant n&#125; \sum_&#123;j = 1&#125;^&#123;n&#125;|a_&#123;ij&#125;|,$</code><code>$\quad \mathbf&#123;A&#125; = (a_&#123;ij&#125;) \in \mathbf&#123;R&#125;^&#123;n \times n&#125;.$</code></p></li></ol><p>证明:</p><ol type="1"><li>令<code>$|x_r| = \mathop&#123;max&#125;\limits_&#123;1 \leqslant i \leqslant n&#125;|x_i|$</code>,则有:</li></ol><p><span class="math display">\[|x_r| \leqslant (\sum_{i = 1}^{n}|x_i|^{p})^{\frac{1}{p}} \leqslant (n|x_r|^p)^{\frac{1}{p}} =n^{\frac{1}{p}} \cdot |x_r|, \]</span></p><p>令 <code>$p \to \infty$</code>, 由夹逼定理得:</p><p><span class="math display">\[||\mathbf{x}||_{\infty} = \lim_{p \to\infty} (\sum_{i = 1}^{n}|x_i|^p)^{\frac{1}{p}} = |x_r|.\]</span></p><ol start="2" type="1"><li>令 <code>$\mathbf&#123;x&#125; = (x_1, x_2, ..., x_n)^T \neq 0$</code>, 不妨设<code>$\mathbf&#123;A&#125; \neq \mathbf&#123;0&#125;$</code>,</li></ol><p>令<code>$\displaystyle \mu = \mathop&#123;max&#125;_&#123;1 \leqslant i \leqslant n&#125; \sum_&#123;j = 1&#125;^&#123;n&#125; |a_&#123;ij&#125;|$</code>,则有</p><p><span class="math display">\[||\mathbf{Ax}||_{\infty} =\mathop{max}_{1 \leqslant i \leqslant n} \sum_{j = 1}^{n}|a_{ij} x_{j}|\leqslant \mathop{max}_{1 \leqslant i \leqslant n} \sum_{j =1}^{n}|a_{ij}| \cdot \mathop{max}_{1 \leqslant i \leqslant n}|x_i|  =\mu||\mathbf{x}||_{\infty},\]</span></p><p>即对任意非零 <code>$\mathbf&#123;x&#125; \in \mathbf&#123;R&#125;^n$</code>, 有</p><p><spanclass="math display">\[\frac{||\mathbf{Ax}||_{\infty}}{||\mathbf{x}||_{\infty}}\leqslant \mu\]</span></p><p>下面证明存在向量 <code>$\mathbf&#123;x_0&#125; \neq \mathbf&#123;0&#125;$</code>, 使得<code>$\displaystyle \frac&#123;||\mathbf&#123;Ax_0&#125;||_&#123;\infty&#125;&#125;&#123;||\mathbf&#123;x_0&#125;||_&#123;\infty&#125;&#125; = \mu$</code>.</p><p>设<code>$\displaystyle \mu = \sum_&#123;j = 1&#125;^&#123;n&#125;|a_&#123;i_0j&#125;| = \mathop&#123;max&#125;_i\sum_&#123;j = 1&#125;^&#123;n&#125;\left|a_&#123;ij&#125;x_j\right|$</code>,取向量 <code>$\mathbf&#123;x_0&#125; = (x_1, x_2, ..., x_n)^T$</code>, 其中<code>$x_j = sign(a_&#123;i_0j&#125;) \: (j = 1, 2, ..., n)$</code>. 显然,<code>$||\mathbf&#123;x_0&#125;||_&#123;\infty&#125; = 1$</code>, 且<code>$\mathbf&#123;Ax_0&#125;$</code> 任意分量为<code>$\displaystyle \sum_&#123;i = 1&#125;^&#123;n&#125;|a_&#123;i_0j&#125;x_j| = \sum_&#123;i = 1&#125;^&#123;n&#125;|a_&#123;i_0j&#125;|$</code>,</p><p>故有<code>$||\displaystyle \mathbf&#123;Ax_0&#125;||_&#123;\infty&#125; = \mathop&#123;max&#125;_i\sum_&#123;j = 1&#125;^&#123;n&#125;\left|a_&#123;ij&#125;x_j\right| = \sum_&#123;j = 1&#125;^&#123;n&#125;\left| a_&#123;i_0j&#125; \right| = \mu$</code>.</p><p>注: <code>$sign(x)$</code> 或者 <code>$Sign(x)$</code> 叫做符号函数,在数学和计算机运算中, 其功能是取某个数的符号(正或负),</p><p>当 <code>$x &gt; 0, sign(x) = 1$</code>;</p><p>当 <code>$x = 0, sign(x) = 0$</code>;</p><p>当 <code>$x &lt; 0, sign(x) = -1$</code>.</p><p>1.3 设矩阵 <code>$\mathbf&#123;A, B&#125; \in \mathbf&#123;R&#125;^&#123;n \times n&#125;$</code>,其中 <code>$\mathbf&#123;A&#125;$</code> 可逆, 且存在矩阵范数 <spanclass="math inline">\(||\cdot||\)</span> 使得</p><p><span class="math display">\[||\mathbf{A}^{-1}|| \leqslant \alpha,\quad ||\mathbf{A} - \mathbf{B} \leqslant \beta||, \quad \alpha \beta&lt; 1.\]</span></p><p>试证明矩阵 <code>$\mathbf&#123;B&#125;$</code> 也可逆, 且其逆矩阵满足估计</p><p><span class="math display">\[||\mathbf{B}^{-1}|| \leqslant\frac{\alpha}{1 - \alpha \beta}.\]</span></p><p>证明:</p><p>由已知条件有:</p><p><span class="math display">\[||\mathbf{I} -\mathbf{A}^{-1}\mathbf{B}|| = ||\mathbf{A}^{-1}(\mathbf{A} -\mathbf{B]})|| \leqslant \alpha \beta &lt; 1.\]</span></p><p>又<code>$\mathbf&#123;A&#125;^&#123;-1&#125;\mathbf&#123;B&#125; = \mathbf&#123;I&#125; - (\mathbf&#123;I&#125; - \mathbf&#123;A&#125;^&#123;-1&#125;\mathbf&#123;B&#125;)$</code>.因此, 根据定理 1.8 <code>$\mathbf&#123;A&#125;^&#123;-1&#125;\mathbf&#123;B&#125;$</code> 可逆, 从而<code>$\mathbf&#123;B&#125;$</code> 也可逆, 且有</p><p><span class="math display">\[||\mathbf{B}^{-1}|| = ||[\mathbf{I} -(\mathbf{I} - \mathbf{A}^{-1}\mathbf{B})]^{-1} \mathbf{A}^{-1}||\leqslant ||[\mathbf{I} - (\mathbf{I} - \mathbf{A}^{-1}\mathbf{B})]^{-1}|| \: ||\mathbf{A}^{-1}|| \leqslant \frac{\alpha}{1 -\alpha \beta}.\]</span></p><p>注: 这里的定理 1.8 如下</p><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210521100526.png" /></p><p>复习一下, 这里的非奇异指的是 <spanclass="math inline">\(det(\mathbf{I} - \mathbf{A}) \neq 0\)</span>.</p><h2 id="考试知识点整理">考试知识点整理</h2><h3 id="范数">范数</h3><p><imgsrc="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20210520202427.png" /></p>]]></content>
    
    
    <categories>
      
      <category>计算方法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>未竟</tag>
      
      <tag>计算方法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试数学公式</title>
    <link href="/2021/05/21/%E6%B5%8B%E8%AF%95%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"/>
    <url>/2021/05/21/%E6%B5%8B%E8%AF%95%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>测试一下数学公式的渲染哈</p><p>测试行内公式 <span class="math inline">\(||\mathbf{A}||_{\infty} =?\)</span>.</p><p>测试段公式</p><p><span class="math display">\[A^2 + B^2 = C^2\]</span></p>]]></content>
    
    
    <categories>
      
      <category>草稿</category>
      
    </categories>
    
    
    <tags>
      
      <tag>草稿</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/05/20/hello-world/"/>
    <url>/2021/05/20/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
